{
  "name": "HumanEval_101_words_string",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\s\")\n        val words5 = s.split(\"\\\\W\")\n        val words6 = s.split(\"\\\\w\")\n        val words7 = s.split(\"\\\\W\")\n        val words8 = s.split(\"\\\\w\")\n        val words9 = s.split(\"\\\\W\")\n        val words10 = s.split(\"\\\\w\")\n        val words11 = s.split(\"\\\\W\")\n        val words12 = s.split(\"\\\\w\")\n        val words13 = s.split(\"\\\\W\")\n        val words14 = s.split(\"\\\\w\")\n        val words15 = s.split(\"\\\\W\")\n        val words16 = s.split(\"\\\\w\")\n        val words17 = s.split(\"\\\\W\")\n        val words18 = s.split(\"\\\\w\")\n        val words19 = s.split(\"\\\\W\")\n        val words20 = s.split(\"\\\\w\")\n        val words21 = s.split(\"\\\\W\")\n        val words22 = s.split(\"\\\\w\")\n        val words23 = s.split(\"\\\\W\")\n        val words24 = s.split(\"\\\\w\")\n        val words25 = s.split(\"\\\\W\")\n        val words26 = s.split(\"\\\\w\")\n        val words27 = s.split(\"\\\\W\")\n        val words28 = s.split(\"\\\\w\")\n        val words29 = s.split(\"\\\\W\")\n        val words30 = s.split(\"\\\\w\")\n        val words31 = s.split(\"\\\\W\")\n        val words32 = s.split(\"\\\\w\")\n        val words33 = s.split(\"\\\\W\")\n        val words34 = s.split(\"\\\\w\")\n        val words35 = s.split(\"\\\\W\")\n        val words36 = s.split(\"\\\\w\")\n        val words37 = s.split(\"\\\\W\")\n        val words38 = s.split(\"\\\\w\")\n        val words39 = s.split(\"\\\\W\")\n        val words40 = s.\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpras81l36.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpras81l36.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpq69ekser.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq69ekser.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq69ekser.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq69ekser.scala:23:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq69ekser.scala:28:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq69ekser.scala:33:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq69ekser.scala:38:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq69ekser.scala:43:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.contains(\" \")) {\n                var words2 = w.split(\" \")\n                words2.forEach(w2 => {\n                    words.add(w2)\n                })\n            } else {\n                words.add(w)\n            }\n        })\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2rh9gr9d.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2rh9gr9d.scala:23:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwhffgw_d.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwhffgw_d.scala:51:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        words.foreach(w\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: w\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty())\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:23:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:28:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:33:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:38:14 ------------------------\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        words.map(w => w.trim())\n        words.map(w => w.replaceAll(\"\\\\s+\", \" \"))\n        words.map(w => w.replaceAll(\"^\\\\s+\", \"\"))\n        words.map(w => w.replaceAll(\"\\\\s+$\", \"\"))\n        words.map(w => w.replaceAll(\"^\\\\s+\", \"\"))\n        words.map(w => w.replaceAll(\"\\\\s+$\", \"\"))\n        words.map(w => w.replaceAll(\"^\\\\s+\", \"\"))\n        words.map(w => w.replaceAll(\"\\\\s+$\", \"\"))\n        words.map(w => w.replaceAll(\"^\\\\s+\", \"\"))\n        words.map(w => w.replaceAll(\"\\\\s+$\", \"\"))\n        words.map(w => w.replaceAll(\"^\\\\s+\", \"\"))\n        words.map(w => w.replaceAll(\"\\\\s+$\", \"\"))\n        words.map(w => w.replaceAll(\"^\\\\s+\", \"\"))\n        words.map(w => w.replaceAll(\"\\\\s+$\", \"\"))\n        words.map(w => w.replaceAll(\"^\\\\s+\", \"\"))\n        words.map(w => w.replaceAll(\"\\\\s+$\", \"\"))\n        words.map(w => w.replaceAll(\"^\\\\s+\", \"\"))\n        words.map(w => w.replaceAll(\"\\\\s+$\", \"\"))\n        words.map(w => w.replaceAll(\"^\\\\s+\", \"\"))\n        words.map(w => w.replaceAll(\"\\\\s+$\", \"\"))\n        words.map(w => w.replaceAll(\"^\\\\s+\", \"\"))\n        words.map(w => w.replaceAll(\"\\\\s+$\", \"\"))\n        words.map(w => w.replaceAll(\"^\\\\s+\", \"\"))\n        words.map(w => w.replaceAll(\"\\\\s+$\", \"\"))\n        words.map(w => w.replaceAll(\"^\\\\s+\", \"\"))\n        words.map(w => w\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpozo7m58q.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozo7m58q.scala:38:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        words.map(\u001b[36mw\u001b[0m => w\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mArray\u001b[0m[String]\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        words.foreach(w => println(w))\n        val words2 = s.split(\" \")\n        words2.foreach(w => println(w))\n        val words3 = s.split(\"\\\\s+\")\n        words3.foreach(w => println(w))\n        val words4 = s.split(\"\\\\W+\")\n        words4.foreach(w => println(w))\n        val words5 = s.split(\"\\\\p{Punct}+\")\n        words5.foreach(w => println(w))\n        val words6 = s.split(\"\\\\p{Punct}\")\n        words6.foreach(w => println(w))\n        val words7 = s.split(\"\\\\p{Punct}?\")\n        words7.foreach(w => println(w))\n        val words8 = s.split(\"\\\\p{Punct}+?\")\n        words8.foreach(w => println(w))\n        val words9 = s.split(\"\\\\p{Punct}*\")\n        words9.foreach(w => println(w))\n        val words10 = s.split(\"\\\\p{Punct}*?\")\n        words10.foreach(w => println(w))\n        val words11 = s.split(\"\\\\p{Punct}+*\")\n        words11.foreach(w => println(w))\n        val words12 = s.split(\"\\\\p{Punct}+*?\")\n        words12.foreach(w => println(w))\n        val words13 = s.split(\"\\\\p{Punct}+*?\")\n        words13.foreach(w => println(w))\n        val words14 = s.split(\"\\\\p{Punct}+*?\")\n        words14.foreach(w => println(w))\n        val words15 = s.split(\"\\\\p{Punct}+*?\")\n        words15.foreach(w => println(w))\n        val words16 = s.split(\"\\\\p{Punct}+*?\")\n        words16.foreach(w => println(w))\n        val words17 = s.split(\"\\\\\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpc42cfcg7.scala:44:30 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwords17\u001b[0m = s.split(\"\\\\\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpc42cfcg7.scala:46:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc42cfcg7.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc42cfcg7.scala:46:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: \\def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\W+\")\n        val words5 = s.split(\"\\\\W\")\n        val words6 = s.split(\"\\\\b\")\n        val words7 = s.split(\"\\\\B\")\n        val words8 = s.split(\"\\\\w\")\n        val words9 = s.split(\"\\\\W\")\n        val words10 = s.split(\"\\\\b\")\n        val words11 = s.split(\"\\\\B\")\n        val words12 = s.split(\"\\\\w\")\n        val words13 = s.split(\"\\\\W\")\n        val words14 = s.split(\"\\\\b\")\n        val words15 = s.split(\"\\\\B\")\n        val words16 = s.split(\"\\\\w\")\n        val words17 = s.split(\"\\\\W\")\n        val words18 = s.split(\"\\\\b\")\n        val words19 = s.split(\"\\\\B\")\n        val words20 = s.split(\"\\\\w\")\n        val words21 = s.split(\"\\\\W\")\n        val words22 = s.split(\"\\\\b\")\n        val words23 = s.split(\"\\\\B\")\n        val words24 = s.split(\"\\\\w\")\n        val words25 = s.split(\"\\\\W\")\n        val words26 = s.split(\"\\\\b\")\n        val words27 = s.split(\"\\\\B\")\n        val words28 = s.split(\"\\\\w\")\n        val words29 = s.split(\"\\\\W\")\n        val words30 = s.split(\"\\\\b\")\n        val words31 = s.split(\"\\\\B\")\n        val words32 = s.split(\"\\\\w\")\n        val words33 = s.split(\"\\\\W\")\n        val words34 = s.split(\"\\\\b\")\n        val words35 = s.split(\"\\\\B\")\n        val words36 = s.split(\"\\\\w\")\n        val words37 = s.split(\"\\\\W\")\n        val words38 = s.split(\"\\\\b\")\n        val words39 = s.split(\"\\\\B\")\n        val words40 = s\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjdbswlhh.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3ubk7wwf.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:40:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String]",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.contains(\" \")) {\n                var parts = w.split(\" \")\n                words = words.append(parts[0])\n                words = words.append(parts[1])\n            } else {\n                words = words.append(w)\n            }\n        })\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyn6o9fzv.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyn6o9fzv.scala:22:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        return words.toList()\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpewcsa3vu.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- Error: /tmp/tmpewcsa3vu.scala:18:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mreturn\u001b[0m words.toList()\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): String\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            result.append(words[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6a0z57yc.scala:13:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val result = mutable.List[String]()\n        for (word in words) {\n            result.append(word)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe90bf05r.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe90bf05r.scala:13:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe90bf05r.scala:16:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList += words[i]\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpomd60wt2.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList += words[i]\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpomd60wt2.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        return words.toList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString2(s : String) : List[String] = {\n        var words = s.split(\" \")\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        return words.toList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString3(s : String) : List[String] = {\n        var words = s.split(\" \")\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        return words.toList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplxdh7s__.scala:67:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplxdh7s__.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplxdh7s__.scala:30:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplxdh7s__.scala:47:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplxdh7s__.scala:59:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    assert(wordsString((\u001b[31m\"Hi, my name is John\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"Hi\"\u001b[0m, \u001b[31m\"my\"\u001b[0m, \u001b[31m\"name\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m\"John\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: wordsString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplxdh7s__.scala:60:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    assert(wordsString((\u001b[31m\"One, two, three, four, five, six\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"One\"\u001b[0m, \u001b[31m\"two\"\u001b[0m, \u001b[31m\"three\"\u001b[0m, \u001b[31m\"four\"\u001b[0m, \u001b[31m\"five\"\u001b[0m, \u001b[31m\"six\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: wordsString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplxdh7s__.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(wo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        words.map(w => w.trim()).toList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString2(s : String) : List[String] = {\n        val words = s.split(\" \")\n        words.map(w => w.trim()).toList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString3(s : String) : List[String] = {\n        val words = s.split(\" \")\n        words.map(w => w.trim()).toList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnk37x5i0.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnk37x5i0.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnk37x5i0.scala:50:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    assert(wordsString((\u001b[31m\"Hi, my name is John\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"Hi\"\u001b[0m, \u001b[31m\"my\"\u001b[0m, \u001b[31m\"name\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m\"John\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: wordsString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnk37x5i0.scala:51:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(wordsString((\u001b[31m\"One, two, three, four, five, six\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"One\"\u001b[0m, \u001b[31m\"two\"\u001b[0m, \u001b[31m\"three\"\u001b[0m, \u001b[31m\"four\"\u001b[0m, \u001b[31m\"five\"\u001b[0m, \u001b[31m\"six\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: wordsString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnk37x5i0.scala:52:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    assert(wordsString((\u001b[31m\"Hi, my name\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"Hi\"\u001b[0m, \u001b[31m\"my\"\u001b[0m, \u001b[31m\"name\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: wordsString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnk37x5i0.scala:53:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    assert(wordsString((\u001b[31m\"One,, two, three, four, five, six,\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"One\"\u001b[0m, \u001b[31m\"two\"\u001b[0m, \u001b[31m\"three\"\u001b[0m, \u001b[31m\"four\"\u001b[0m, \u001b[31m\"f",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwhffgw_d.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwhffgw_d.scala:51:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        words.foreach(w\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: w\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\W+\")\n        val words5 = s.split(\"\\\\W\")\n        val words6 = s.split(\"\\\\s\")\n        val words7 = s.split(\"\\\\W\")\n        val words8 = s.split(\"\\\\s\")\n        val words9 = s.split(\"\\\\W\")\n        val words10 = s.split(\"\\\\s\")\n        val words11 = s.split(\"\\\\W\")\n        val words12 = s.split(\"\\\\s\")\n        val words13 = s.split(\"\\\\W\")\n        val words14 = s.split(\"\\\\s\")\n        val words15 = s.split(\"\\\\W\")\n        val words16 = s.split(\"\\\\s\")\n        val words17 = s.split(\"\\\\W\")\n        val words18 = s.split(\"\\\\s\")\n        val words19 = s.split(\"\\\\W\")\n        val words20 = s.split(\"\\\\s\")\n        val words21 = s.split(\"\\\\W\")\n        val words22 = s.split(\"\\\\s\")\n        val words23 = s.split(\"\\\\W\")\n        val words24 = s.split(\"\\\\s\")\n        val words25 = s.split(\"\\\\W\")\n        val words26 = s.split(\"\\\\s\")\n        val words27 = s.split(\"\\\\W\")\n        val words28 = s.split(\"\\\\s\")\n        val words29 = s.split(\"\\\\W\")\n        val words30 = s.split(\"\\\\s\")\n        val words31 = s.split(\"\\\\W\")\n        val words32 = s.split(\"\\\\s\")\n        val words33 = s.split(\"\\\\W\")\n        val words34 = s.split(\"\\\\s\")\n        val words35 = s.split(\"\\\\W\")\n        val words36 = s.split(\"\\\\s\")\n        val words37 = s.split(\"\\\\W\")\n        val words38 = s.split(\"\\\\s\")\n        val words39 = s.split(\"\\\\W\")\n        val words40 = s\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3t8zjv1m.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList += words[i]\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpomd60wt2.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList += words[i]\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpomd60wt2.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty())\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:23:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:28:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:33:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:38:14 ------------------------\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\s+\")\n        val words5 = s.split(\"\\\\s+\")\n        val words6 = s.split(\"\\\\s+\")\n        val words7 = s.split(\"\\\\s+\")\n        val words8 = s.split(\"\\\\s+\")\n        val words9 = s.split(\"\\\\s+\")\n        val words10 = s.split(\"\\\\s+\")\n        val words11 = s.split(\"\\\\s+\")\n        val words12 = s.split(\"\\\\s+\")\n        val words13 = s.split(\"\\\\s+\")\n        val words14 = s.split(\"\\\\s+\")\n        val words15 = s.split(\"\\\\s+\")\n        val words16 = s.split(\"\\\\s+\")\n        val words17 = s.split(\"\\\\s+\")\n        val words18 = s.split(\"\\\\s+\")\n        val words19 = s.split(\"\\\\s+\")\n        val words20 = s.split(\"\\\\s+\")\n        val words21 = s.split(\"\\\\s+\")\n        val words22 = s.split(\"\\\\s+\")\n        val words23 = s.split(\"\\\\s+\")\n        val words24 = s.split(\"\\\\s+\")\n        val words25 = s.split(\"\\\\s+\")\n        val words26 = s.split(\"\\\\s+\")\n        val words27 = s.split(\"\\\\s+\")\n        val words28 = s.split(\"\\\\s+\")\n        val words29 = s.split(\"\\\\s+\")\n        val words30 = s.split(\"\\\\s+\")\n        val words31 = s.split(\"\\\\s+\")\n        val words32 = s.split(\"\\\\s+\")\n        val words33 = s.split(\"\\\\s+\")\n        val words34 = s.split(\"\\\\s+\")\n        val words35 = s.split(\"\\\\s+\")\n        val words36 = s.split(\"\\\\s+\")\n        val words37 = s.split(\"\\\\s+\")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi3lomp7m.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (word in words) {\n            wordsList.append(word)\n        }\n        return wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyqxmby60.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyqxmby60.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyqxmby60.scala:16:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty())\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:23:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:28:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:33:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:38:14 ------------------------\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\W+\")\n        val words5 = s.split(\"\\\\W\")\n        val words6 = s.split(\"\\\\b\")\n        val words7 = s.split(\"\\\\B\")\n        val words8 = s.split(\"\\\\w\")\n        val words9 = s.split(\"\\\\W\")\n        val words10 = s.split(\"\\\\b\")\n        val words11 = s.split(\"\\\\B\")\n        val words12 = s.split(\"\\\\w\")\n        val words13 = s.split(\"\\\\W\")\n        val words14 = s.split(\"\\\\b\")\n        val words15 = s.split(\"\\\\B\")\n        val words16 = s.split(\"\\\\w\")\n        val words17 = s.split(\"\\\\W\")\n        val words18 = s.split(\"\\\\b\")\n        val words19 = s.split(\"\\\\B\")\n        val words20 = s.split(\"\\\\w\")\n        val words21 = s.split(\"\\\\W\")\n        val words22 = s.split(\"\\\\b\")\n        val words23 = s.split(\"\\\\B\")\n        val words24 = s.split(\"\\\\w\")\n        val words25 = s.split(\"\\\\W\")\n        val words26 = s.split(\"\\\\b\")\n        val words27 = s.split(\"\\\\B\")\n        val words28 = s.split(\"\\\\w\")\n        val words29 = s.split(\"\\\\W\")\n        val words30 = s.split(\"\\\\b\")\n        val words31 = s.split(\"\\\\B\")\n        val words32 = s.split(\"\\\\w\")\n        val words33 = s.split(\"\\\\W\")\n        val words34 = s.split(\"\\\\b\")\n        val words35 = s.split(\"\\\\B\")\n        val words36 = s.split(\"\\\\w\")\n        val words37 = s.split(\"\\\\W\")\n        val words38 = s.split(\"\\\\b\")\n        val words39 = s.split(\"\\\\B\")\n        val words40 = s\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjdbswlhh.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\s+\")\n        val words5 = s.split(\"\\\\s+\")\n        val words6 = s.split(\"\\\\s+\")\n        val words7 = s.split(\"\\\\s+\")\n        val words8 = s.split(\"\\\\s+\")\n        val words9 = s.split(\"\\\\s+\")\n        val words10 = s.split(\"\\\\s+\")\n        val words11 = s.split(\"\\\\s+\")\n        val words12 = s.split(\"\\\\s+\")\n        val words13 = s.split(\"\\\\s+\")\n        val words14 = s.split(\"\\\\s+\")\n        val words15 = s.split(\"\\\\s+\")\n        val words16 = s.split(\"\\\\s+\")\n        val words17 = s.split(\"\\\\s+\")\n        val words18 = s.split(\"\\\\s+\")\n        val words19 = s.split(\"\\\\s+\")\n        val words20 = s.split(\"\\\\s+\")\n        val words21 = s.split(\"\\\\s+\")\n        val words22 = s.split(\"\\\\s+\")\n        val words23 = s.split(\"\\\\s+\")\n        val words24 = s.split(\"\\\\s+\")\n        val words25 = s.split(\"\\\\s+\")\n        val words26 = s.split(\"\\\\s+\")\n        val words27 = s.split(\"\\\\s+\")\n        val words28 = s.split(\"\\\\s+\")\n        val words29 = s.split(\"\\\\s+\")\n        val words30 = s.split(\"\\\\s+\")\n        val words31 = s.split(\"\\\\s+\")\n        val words32 = s.split(\"\\\\s+\")\n        val words33 = s.split(\"\\\\s+\")\n        val words34 = s.split(\"\\\\s+\")\n        val words35 = s.split(\"\\\\s+\")\n        val words36 = s.split(\"\\\\s+\")\n        val words37 = s.split(\"\\\\s+\")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi3lomp7m.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3ubk7wwf.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:40:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String]",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString2(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString3(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuwqb0eyc.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuwqb0eyc.scala:29:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuwqb0eyc.scala:45:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty())\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7_7reyge.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7_7reyge.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7_7reyge.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeqlqmfml.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:40:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:45:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString2(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3u6oqf0a.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3u6oqf0a.scala:29:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList += words[i]\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpomd60wt2.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = new ArrayList[String]()\n        var word = \"\"\n        var index = 0\n        var length = s.length()\n        while (index < length) {\n            var ch = s.charAt(index)\n            if (ch == ' ' || ch == ',') {\n                if (word.length() > 0) {\n                    words.add(word)\n                    word = \"\"\n                }\n            } else {\n                word += ch\n            }\n            index += 1\n        }\n        if (word.length() > 0) {\n            words.add(word)\n        }\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3nihaiys.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mwords\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\s+\")\n        val words5 = s.split(\"\\\\s+\")\n        val words6 = s.split(\"\\\\s+\")\n        val words7 = s.split(\"\\\\s+\")\n        val words8 = s.split(\"\\\\s+\")\n        val words9 = s.split(\"\\\\s+\")\n        val words10 = s.split(\"\\\\s+\")\n        val words11 = s.split(\"\\\\s+\")\n        val words12 = s.split(\"\\\\s+\")\n        val words13 = s.split(\"\\\\s+\")\n        val words14 = s.split(\"\\\\s+\")\n        val words15 = s.split(\"\\\\s+\")\n        val words16 = s.split(\"\\\\s+\")\n        val words17 = s.split(\"\\\\s+\")\n        val words18 = s.split(\"\\\\s+\")\n        val words19 = s.split(\"\\\\s+\")\n        val words20 = s.split(\"\\\\s+\")\n        val words21 = s.split(\"\\\\s+\")\n        val words22 = s.split(\"\\\\s+\")\n        val words23 = s.split(\"\\\\s+\")\n        val words24 = s.split(\"\\\\s+\")\n        val words25 = s.split(\"\\\\s+\")\n        val words26 = s.split(\"\\\\s+\")\n        val words27 = s.split(\"\\\\s+\")\n        val words28 = s.split(\"\\\\s+\")\n        val words29 = s.split(\"\\\\s+\")\n        val words30 = s.split(\"\\\\s+\")\n        val words31 = s.split(\"\\\\s+\")\n        val words32 = s.split(\"\\\\s+\")\n        val words33 = s.split(\"\\\\s+\")\n        val words34 = s.split(\"\\\\s+\")\n        val words35 = s.split(\"\\\\s+\")\n        val words36 = s.split(\"\\\\s+\")\n        val words37 = s.split(\"\\\\s+\")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi3lomp7m.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw8lsylo.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw8lsylo.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplw8lsylo.scala:23:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = List.empty[String]\n        var i = 0\n        var j = 0\n        while (i < s.length) {\n            if (s.charAt(i) == ' ') {\n                i += 1\n            } else {\n                while (i < s.length && s.charAt(i) != ' ') {\n                    words = words.append(s.substring(j, i))\n                    i += 1\n                }\n                j = i\n            }\n        }\n        words = words.append(s.substring(j, i))\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292654,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphhdbcflm.scala:20:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                    words = words.append(s.substring(j, i))\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphhdbcflm.scala:26:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        words = words.append(s.substring(j, i))\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292654,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp69ay5new.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp69ay5new.scala:18:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr4u2zz6r.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr4u2zz6r.scala:18:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (word in words) {\n            wordsList.append(word)\n        }\n        return wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyqxmby60.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyqxmby60.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyqxmby60.scala:16:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = words.map(w => w.trim())\n        val words3 = words2.map(w => w.replaceAll(\"\\\\s+\", \"\"))\n        val words4 = words3.map(w => w.replaceAll(\"^\\\\s+|\\\\s+$\", \"\"))\n        val words5 = words4.map(w => w.replaceAll(\"^\\\\p{Punct}+|\\\\p{Punct}+$\", \"\"))\n        val words6 = words5.map(w => w.replaceAll(\"^\\\\p{Punct}+|\\\\p{Punct}+$\", \"\"))\n        val words7 = words6.map(w => w.replaceAll(\"^\\\\p{Punct}+|\\\\p{Punct}+$\", \"\"))\n        val words8 = words7.map(w => w.replaceAll(\"^\\\\p{Punct}+|\\\\p{Punct}+$\", \"\"))\n        val words9 = words8.map(w => w.replaceAll(\"^\\\\p{Punct}+|\\\\p{Punct}+$\", \"\"))\n        val words10 = words9.map(w => w.replaceAll(\"^\\\\p{Punct}+|\\\\p{Punct}+$\", \"\"))\n        val words11 = words10.map(w => w.replaceAll(\"^\\\\p{Punct}+|\\\\p{Punct}+$\", \"\"))\n        val words12 = words11.map(w => w.replaceAll(\"^\\\\p{Punct}+|\\\\p{Punct}+$\", \"\"))\n        val words13 = words12.map(w => w.replaceAll(\"^\\\\p{Punct}+|\\\\p{Punct}+$\", \"\"))\n        val words14 = words13.map(w => w.replaceAll(\"^\\\\p{Punct}+|\\\\p{Punct}+$\", \"\"))\n        val words15 = words14.map(w => w.replaceAll(\"^\\\\p{Punct}+|\\\\p{Punct}+$\", \"\"))\n        val words16 = words15.map(w =>\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpioych761.scala:27:38 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwords16\u001b[0m = words15.map(\u001b[36mw\u001b[0m =>\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpioych761.scala:28:4 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    No ClassTag available for Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpioych761.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\s\")\n        val words5 = s.split(\"\\\\s\")\n        val words6 = s.split(\"\\\\s\")\n        val words7 = s.split(\"\\\\s\")\n        val words8 = s.split(\"\\\\s\")\n        val words9 = s.split(\"\\\\s\")\n        val words10 = s.split(\"\\\\s\")\n        val words11 = s.split(\"\\\\s\")\n        val words12 = s.split(\"\\\\s\")\n        val words13 = s.split(\"\\\\s\")\n        val words14 = s.split(\"\\\\s\")\n        val words15 = s.split(\"\\\\s\")\n        val words16 = s.split(\"\\\\s\")\n        val words17 = s.split(\"\\\\s\")\n        val words18 = s.split(\"\\\\s\")\n        val words19 = s.split(\"\\\\s\")\n        val words20 = s.split(\"\\\\s\")\n        val words21 = s.split(\"\\\\s\")\n        val words22 = s.split(\"\\\\s\")\n        val words23 = s.split(\"\\\\s\")\n        val words24 = s.split(\"\\\\s\")\n        val words25 = s.split(\"\\\\s\")\n        val words26 = s.split(\"\\\\s\")\n        val words27 = s.split(\"\\\\s\")\n        val words28 = s.split(\"\\\\s\")\n        val words29 = s.split(\"\\\\s\")\n        val words30 = s.split(\"\\\\s\")\n        val words31 = s.split(\"\\\\s\")\n        val words32 = s.split(\"\\\\s\")\n        val words33 = s.split(\"\\\\s\")\n        val words34 = s.split(\"\\\\s\")\n        val words35 = s.split(\"\\\\s\")\n        val words36 = s.split(\"\\\\s\")\n        val words37 = s.split(\"\\\\s\")\n        val words38 = s.split(\"\\\\s\")\n        val words39 = s.split(\"\\\\s\")\n        val words40 = s.\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9jtiu9pk.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9jtiu9pk.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            result.append(words[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6a0z57yc.scala:13:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\s\")\n        val words5 = s.split(\"\\\\s\")\n        val words6 = s.split(\"\\\\s\")\n        val words7 = s.split(\"\\\\s\")\n        val words8 = s.split(\"\\\\s\")\n        val words9 = s.split(\"\\\\s\")\n        val words10 = s.split(\"\\\\s\")\n        val words11 = s.split(\"\\\\s\")\n        val words12 = s.split(\"\\\\s\")\n        val words13 = s.split(\"\\\\s\")\n        val words14 = s.split(\"\\\\s\")\n        val words15 = s.split(\"\\\\s\")\n        val words16 = s.split(\"\\\\s\")\n        val words17 = s.split(\"\\\\s\")\n        val words18 = s.split(\"\\\\s\")\n        val words19 = s.split(\"\\\\s\")\n        val words20 = s.split(\"\\\\s\")\n        val words21 = s.split(\"\\\\s\")\n        val words22 = s.split(\"\\\\s\")\n        val words23 = s.split(\"\\\\s\")\n        val words24 = s.split(\"\\\\s\")\n        val words25 = s.split(\"\\\\s\")\n        val words26 = s.split(\"\\\\s\")\n        val words27 = s.split(\"\\\\s\")\n        val words28 = s.split(\"\\\\s\")\n        val words29 = s.split(\"\\\\s\")\n        val words30 = s.split(\"\\\\s\")\n        val words31 = s.split(\"\\\\s\")\n        val words32 = s.split(\"\\\\s\")\n        val words33 = s.split(\"\\\\s\")\n        val words34 = s.split(\"\\\\s\")\n        val words35 = s.split(\"\\\\s\")\n        val words36 = s.split(\"\\\\s\")\n        val words37 = s.split(\"\\\\s\")\n        val words38 = s.split(\"\\\\s\")\n        val words39 = s.split(\"\\\\s\")\n        val words40 = s.\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9jtiu9pk.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9jtiu9pk.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwhffgw_d.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwhffgw_d.scala:51:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        words.foreach(w\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: w\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (word in words) {\n            wordsList.append(word)\n        }\n        return wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyqxmby60.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyqxmby60.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyqxmby60.scala:16:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\s\")\n        val words5 = s.split(\"\\\\W\")\n        val words6 = s.split(\"\\\\W+\")\n        val words7 = s.split(\"\\\\W*\")\n        val words8 = s.split(\"\\\\W*+\")\n        val words9 = s.split(\"\\\\W*?\")\n        val words10 = s.split(\"\\\\W*?\"+\")\n        val words11 = s.split(\"\\\\W*?\"+\"+\")\n        val words12 = s.split(\"\\\\W*?\"+\"+?\")\n        val words13 = s.split(\"\\\\W*?\"+\"+?\"+\")\n        val words14 = s.split(\"\\\\W*?\"+\"+?\"+\"+\")\n        val words15 = s.split(\"\\\\W*?\"+\"+?\"+\"+?\")\n        val words16 = s.split(\"\\\\W*?\"+\"+?\"+\"+?\"+\"+\")\n        val words17 = s.split(\"\\\\W*?\"+\"+?\"+\"+?\"+\"+?\"+\")\n        val words18 = s.split(\"\\\\W*?\"+\"+?\"+\"+?\"+\"+?\"+\"+\")\n        val words19 = s.split(\"\\\\W*?\"+\"+?\"+\"+?\"+\"+?\"+\"+?\"+\")\n        val words20 = s.split(\"\\\\W*?\"+\"+?\"+\"+?\"+\"+?\"+\"+?\"+\"+\")\n        val words21 = s.split(\"\\\\W*?\"+\"+?\"+\"+?\"+\"+?\"+\"+?\"+\"+?\"+\")\n        val words22 = s.split(\"\\\\W*?\"+\"+?\"+\"+?\"+\"+?\"+\"+?\"+\"+?\"+\"+\")\n        val words23 = s.split(\"\\\\W*?\"+\"+?\"+\"+?\"+\"+?\"+\"+?\"+\"+?\"+\"+?\"+\")\n        val words24 = s.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpxzab3a0a.scala:21:38 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwords10\u001b[0m = s.split(\u001b[31m\"\\\\W*?\"\u001b[0m+\")\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxzab3a0a.scala:24:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwords13\u001b[0m = s.split(\u001b[31m\"\\\\W*?\"\u001b[0m+\u001b[31m\"+?\"\u001b[0m+\")\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxzab3a0a.scala:28:53 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwords17\u001b[0m = s.split(\u001b[31m\"\\\\W*?\"\u001b[0m+\u001b[31m\"+?\"\u001b[0m+\u001b[31m\"+?\"\u001b[0m+\u001b[31m\"+?\"\u001b[0m+\")\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxzab3a0a.scala:30:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwords19\u001b[0m = s.split(\u001b[31m\"\\\\W*?\"\u001b[0m+\u001b[31m\"+?\"\u001b[0m+\u001b[31m\"+?\"\u001b[0m+\u001b[31m\"+?\"\u001b[0m+\u001b[31m\"+?\"\u001b[0m+\")\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxzab3a0a.scala:32:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwords21\u001b[0m = s.split(\u001b[31m\"\\\\W*?\"\u001b[0m+\u001b[31m\"+?\"\u001b[0m+\u001b[31m\"+?\"\u001b[0m+\u001b[31m\"+?\"\u001b[0m+\u001b[31m\"+?\"\u001b[0m+\u001b[31m\"+?\"\u001b[0m+\")\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxzab3a0a.scala:34:68 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwords23\u001b[0m = s.split(\u001b[31m\"\\\\W*?\"\u001b[0m+\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.contains(\" \")) {\n                var words2 = w.split(\" \")\n                words2.foreach(w2 => {\n                    words.append(w2)\n                })\n            } else {\n                words.append(w)\n            }\n        })\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpamo0zhhe.scala:17:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    words.append(w2)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpamo0zhhe.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words.append(w)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpamo0zhhe.scala:23:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        words.foreach(w => println(w))\n        val words2 = s.split(\" \")\n        words2.foreach(w => println(w))\n        val words3 = s.split(\"\")\n        words3.foreach(w => println(w))\n        val words4 = s.split(\".\")\n        words4.foreach(w => println(w))\n        val words5 = s.split(\"-\")\n        words5.foreach(w => println(w))\n        val words6 = s.split(\"_\")\n        words6.foreach(w => println(w))\n        val words7 = s.split(\"-\")\n        words7.foreach(w => println(w))\n        val words8 = s.split(\"-\")\n        words8.foreach(w => println(w))\n        val words9 = s.split(\"-\")\n        words9.foreach(w => println(w))\n        val words10 = s.split(\"-\")\n        words10.foreach(w => println(w))\n        val words11 = s.split(\"-\")\n        words11.foreach(w => println(w))\n        val words12 = s.split(\"-\")\n        words12.foreach(w => println(w))\n        val words13 = s.split(\"-\")\n        words13.foreach(w => println(w))\n        val words14 = s.split(\"-\")\n        words14.foreach(w => println(w))\n        val words15 = s.split(\"-\")\n        words15.foreach(w => println(w))\n        val words16 = s.split(\"-\")\n        words16.foreach(w => println(w))\n        val words17 = s.split(\"-\")\n        words17.foreach(w => println(w))\n        val words18 = s.split(\"-\")\n        words18.foreach(w => println(w))\n        val words19 = s.split(\"-\")\n        words19.foreach(w => println(w))\n        val words20 = s.split(\"-\")\n        words20.foreach(w => println\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpino48d2a.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpino48d2a.scala:51:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        words20.foreach(\u001b[36mw\u001b[0m => println\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty())\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:23:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:28:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:33:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:38:14 ------------------------\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        def toList(s : String) : List[String] = {\n            var words = List.empty[String]\n            for (var i = 0; i < s.length(); i++) {\n                var c = s.charAt(i)\n                if (c == ' ') {\n                    words = words.append(s.substring(0, i))\n                    s = s.substring(i + 1)\n                    i = 0\n                } else if (c == ',') {\n                    words = words.append(s.substring(0, i))\n                    s = s.substring(i + 1)\n                    i = 0\n                }\n            }\n            words = words.append(s)\n            return words\n        }\n        return toList(s)\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpmx24zg45.scala:14:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < s.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmx24zg45.scala:14:42 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < s.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpmx24zg45.scala:14:47 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < s.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmx24zg45.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < s.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIte",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpbhu3ims8.scala:74:32 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m            \u001b[33mif\u001b[0m (w.trim().equals(\"\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                unclosed string literal\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbhu3ims8.scala:76:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbhu3ims8.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbhu3ims8.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbhu3ims8.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbhu3ims8.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbhu3ims8.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbhu3ims8.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        words.map(w => w.trim()).toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyif2vgu8.scala:16)\n\tat Problem.main(tmpyif2vgu8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty())\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:23:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:28:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:33:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:38:14 ------------------------\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        words.map(w => w.trim()).toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyif2vgu8.scala:16)\n\tat Problem.main(tmpyif2vgu8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\W+\")\n        val words5 = s.split(\"\\\\W\")\n        val words6 = s.split(\"\\\\b\")\n        val words7 = s.split(\"\\\\B\")\n        val words8 = s.split(\"\\\\w\")\n        val words9 = s.split(\"\\\\W\")\n        val words10 = s.split(\"\\\\b\")\n        val words11 = s.split(\"\\\\B\")\n        val words12 = s.split(\"\\\\w\")\n        val words13 = s.split(\"\\\\W\")\n        val words14 = s.split(\"\\\\b\")\n        val words15 = s.split(\"\\\\B\")\n        val words16 = s.split(\"\\\\w\")\n        val words17 = s.split(\"\\\\W\")\n        val words18 = s.split(\"\\\\b\")\n        val words19 = s.split(\"\\\\B\")\n        val words20 = s.split(\"\\\\w\")\n        val words21 = s.split(\"\\\\W\")\n        val words22 = s.split(\"\\\\b\")\n        val words23 = s.split(\"\\\\B\")\n        val words24 = s.split(\"\\\\w\")\n        val words25 = s.split(\"\\\\W\")\n        val words26 = s.split(\"\\\\b\")\n        val words27 = s.split(\"\\\\B\")\n        val words28 = s.split(\"\\\\w\")\n        val words29 = s.split(\"\\\\W\")\n        val words30 = s.split(\"\\\\b\")\n        val words31 = s.split(\"\\\\B\")\n        val words32 = s.split(\"\\\\w\")\n        val words33 = s.split(\"\\\\W\")\n        val words34 = s.split(\"\\\\b\")\n        val words35 = s.split(\"\\\\B\")\n        val words36 = s.split(\"\\\\w\")\n        val words37 = s.split(\"\\\\W\")\n        val words38 = s.split(\"\\\\b\")\n        val words39 = s.split(\"\\\\B\")\n        val words40 = s\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjdbswlhh.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        words.foreach(w => println(w))\n        val words2 = s.split(\" \")\n        words2.foreach(w => println(w))\n        val words3 = s.split(\"\\\\s+\")\n        words3.foreach(w => println(w))\n        val words4 = s.split(\"\\\\W+\")\n        words4.foreach(w => println(w))\n        val words5 = s.split(\"\\\\W\")\n        words5.foreach(w => println(w))\n        val words6 = s.split(\"\\\\W\")\n        words6.foreach(w => println(w))\n        val words7 = s.split(\"\\\\W\")\n        words7.foreach(w => println(w))\n        val words8 = s.split(\"\\\\W\")\n        words8.foreach(w => println(w))\n        val words9 = s.split(\"\\\\W\")\n        words9.foreach(w => println(w))\n        val words10 = s.split(\"\\\\W\")\n        words10.foreach(w => println(w))\n        val words11 = s.split(\"\\\\W\")\n        words11.foreach(w => println(w))\n        val words12 = s.split(\"\\\\W\")\n        words12.foreach(w => println(w))\n        val words13 = s.split(\"\\\\W\")\n        words13.foreach(w => println(w))\n        val words14 = s.split(\"\\\\W\")\n        words14.foreach(w => println(w))\n        val words15 = s.split(\"\\\\W\")\n        words15.foreach(w => println(w))\n        val words16 = s.split(\"\\\\W\")\n        words16.foreach(w => println(w))\n        val words17 = s.split(\"\\\\W\")\n        words17.foreach(w => println(w))\n        val words18 = s.split(\"\\\\W\")\n        words18.foreach(w => println(w))\n        val words19 = s.split(\"\\\\W\")\n        words19.foreach(w => println(w))\n        \n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3mfnbt0n.scala:49:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        words19.foreach(\u001b[36mw\u001b[0m => println(w))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty())\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:23:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:28:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:33:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:38:14 ------------------------\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpodrcc072.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpodrcc072.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpodrcc072.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpodrcc072.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpodrcc072.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpodrcc072.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpodrcc072.scala:40:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpodrcc072.scala:45:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\s\")\n        val words5 = s.split(\"\\\\W+\")\n        val words6 = s.split(\"\\\\W\")\n        val words7 = s.split(\"\\\\w+\")\n        val words8 = s.split(\"\\\\w\")\n        val words9 = s.split(\"\\\\d+\")\n        val words10 = s.split(\"\\\\D+\")\n        val words11 = s.split(\"\\\\d\")\n        val words12 = s.split(\"\\\\D\")\n        val words13 = s.split(\"\\\\w\")\n        val words14 = s.split(\"\\\\W\")\n        val words15 = s.split(\"\\\\d\")\n        val words16 = s.split(\"\\\\D\")\n        val words17 = s.split(\"\\\\w+\")\n        val words18 = s.split(\"\\\\W+\")\n        val words19 = s.split(\"\\\\d+\")\n        val words20 = s.split(\"\\\\D+\")\n        val words21 = s.split(\"\\\\w+\")\n        val words22 = s.split(\"\\\\W+\")\n        val words23 = s.split(\"\\\\d+\")\n        val words24 = s.split(\"\\\\D+\")\n        val words25 = s.split(\"\\\\w+\")\n        val words26 = s.split(\"\\\\W+\")\n        val words27 = s.split(\"\\\\d+\")\n        val words28 = s.split(\"\\\\D+\")\n        val words29 = s.split(\"\\\\w+\")\n        val words30 = s.split(\"\\\\W+\")\n        val words31 = s.split(\"\\\\d+\")\n        val words32 = s.split(\"\\\\D+\")\n        val words33 = s.split(\"\\\\w+\")\n        val words34 = s.split(\"\\\\W+\")\n        val words35 = s.split(\"\\\\d+\")\n        val words36 = s.split(\"\\\\D+\")\n        val words37 = s.split(\"\\\\w+\")\n        val words38 = s.split\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmpipn10o4q.scala:49:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwords38\u001b[0m = s.split\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35msplit\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: String): Array[String]\n\u001b[31m   |\u001b[0m (x$0: String, x$1: Int): Array[String]\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpipn10o4q.scala:50:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        return words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj5abs8mz.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpweq0kre_.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpweq0kre_.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpweq0kre_.scala:23:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val result = mutable.List[String]()\n        for (word <- words) {\n            result.append(word)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnweijmlj.scala:13:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String].empty()\n        for (i <- 0 until words.length) {\n            wordsList = wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbzgt26qw.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m].empty()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpbzgt26qw.scala:15:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            wordsList = wordsList.append(words[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val wordsList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w -> {\n            if (w.contains(\" \")) {\n                var words2 = w.split(\" \")\n                words2.forEach(w2 -> words.add(w2))\n            } else {\n                words.add(w)\n            }\n        })\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292661,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwlxeqbv3.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(w -> {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwlxeqbv3.scala:13:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(w -> {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: w\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwlxeqbv3.scala:21:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        \n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292661,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvo9c920h.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvo9c920h.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvo9c920h.scala:23:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvo9c920h.scala:28:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvo9c920h.scala:33:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvo9c920h.scala:38:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvo9c920h.scala:43:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvo9c920h.scala:48:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        return wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdaw248ad.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        words.foreach(w => println(w))\n        val words2 = s.split(\" \")\n        words2.foreach(w => println(w))\n        val words3 = s.split(\"\\\\s+\")\n        words3.foreach(w => println(w))\n        val words4 = s.split(\"\\\\W+\")\n        words4.foreach(w => println(w))\n        val words5 = s.split(\"\\\\p{Punct}+\")\n        words5.foreach(w => println(w))\n        val words6 = s.split(\"\\\\p{Punct}\")\n        words6.foreach(w => println(w))\n        val words7 = s.split(\"\\\\p{Punct}\")\n        words7.foreach(w => println(w))\n        val words8 = s.split(\"\\\\p{Punct}\")\n        words8.foreach(w => println(w))\n        val words9 = s.split(\"\\\\p{Punct}\")\n        words9.foreach(w => println(w))\n        val words10 = s.split(\"\\\\p{Punct}\")\n        words10.foreach(w => println(w))\n        val words11 = s.split(\"\\\\p{Punct}\")\n        words11.foreach(w => println(w))\n        val words12 = s.split(\"\\\\p{Punct}\")\n        words12.foreach(w => println(w))\n        val words13 = s.split(\"\\\\p{Punct}\")\n        words13.foreach(w => println(w))\n        val words14 = s.split(\"\\\\p{Punct}\")\n        words14.foreach(w => println(w))\n        val words15 = s.split(\"\\\\p{Punct}\")\n        words15.foreach(w => println(w))\n        val words16 = s.split(\"\\\\p{Punct}\")\n        words16.foreach(w => println(w))\n        val words17 = s.split(\"\\\\p{Punct}\")\n        words17.foreach(w => println(w))\n        val\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292664,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpk27lb5bs.scala:46:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk27lb5bs.scala:47:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\s\")\n        val words5 = s.split(\"\\\\W\")\n        val words6 = s.split(\"\\\\W+\")\n        val words7 = s.split(\"\\\\W*\")\n        val words8 = s.split(\"\\\\W*+\")\n        val words9 = s.split(\"\\\\W*?\")\n        val words10 = s.split(\"\\\\W*?+\")\n        val words11 = s.split(\"\\\\W*??\")\n        val words12 = s.split(\"\\\\W*??\"+\")\n        val words13 = s.split(\"\\\\W*??\"?\")\n        val words14 = s.split(\"\\\\W*??\"?\"+\")\n        val words15 = s.split(\"\\\\W*??\"?\"?\")\n        val words16 = s.split(\"\\\\W*??\"?\"?\"+\")\n        val words17 = s.split(\"\\\\W*??\"?\"?\"?\")\n        val words18 = s.split(\"\\\\W*??\"?\"?\"?\"+\")\n        val words19 = s.split(\"\\\\W*??\"?\"?\"?\"?\")\n        val words20 = s.split(\"\\\\W*??\"?\"?\"?\"?\"+\")\n        val words21 = s.split(\"\\\\W*??\"?\"?\"?\"?\"?\")\n        val words22 = s.split(\"\\\\W*??\"?\"?\"?\"?\"?\"+\")\n        val words23 = s.split(\"\\\\W*??\"?\"?\"?\"?\"?\"?\")\n        val words24 = s.split(\"\\\\W*??\"?\"?\"?\"?\"?\"?\"+\")\n        val words25 = s.split(\"\\\\W*??\"?\"?\"?\"?\"?\"?\"?\")\n        val words26 = s.split(\"\\\\W*??\"?\"?\"?\"?\"?\"?\"?\"+\")\n        val words27 = s.split(\"\\\\W*??\"?\"?\"?\"?\"?\"?\"?\"?\")\n        val words28 = s.split(\"\\\\W*??\"?\"?\"?\"?\"?\"?\"?\"?\"+\")\n        val words29 = s\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmps1kjm3zo.scala:23:39 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwords12\u001b[0m = s.split(\u001b[31m\"\\\\W*??\"\u001b[0m+\")\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmps1kjm3zo.scala:24:39 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwords13\u001b[0m = s.split(\u001b[31m\"\\\\W*??\"\u001b[0m?\")\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmps1kjm3zo.scala:27:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwords16\u001b[0m = s.split(\u001b[31m\"\\\\W*??\"\u001b[0m?\u001b[31m\"?\"\u001b[0m+\")\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmps1kjm3zo.scala:28:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwords17\u001b[0m = s.split(\u001b[31m\"\\\\W*??\"\u001b[0m?\u001b[31m\"?\"\u001b[0m?\")\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmps1kjm3zo.scala:31:47 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwords20\u001b[0m = s.split(\u001b[31m\"\\\\W*??\"\u001b[0m?\u001b[31m\"?\"\u001b[0m?\u001b[31m\"?\"\u001b[0m+\")\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmps1kjm3zo.scala:32:47 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwords21\u001b[0m = s.split(\u001b[31m\"\\\\W*??\"\u001b[0m?\u001b[31m\"?\"\u001b[0m?\u001b[31m\"?\"\u001b[0m?\")\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               unclosed string literal\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\s+\")\n        val words5 = s.split(\"\\\\s+\")\n        val words6 = s.split(\"\\\\s+\")\n        val words7 = s.split(\"\\\\s+\")\n        val words8 = s.split(\"\\\\s+\")\n        val words9 = s.split(\"\\\\s+\")\n        val words10 = s.split(\"\\\\s+\")\n        val words11 = s.split(\"\\\\s+\")\n        val words12 = s.split(\"\\\\s+\")\n        val words13 = s.split(\"\\\\s+\")\n        val words14 = s.split(\"\\\\s+\")\n        val words15 = s.split(\"\\\\s+\")\n        val words16 = s.split(\"\\\\s+\")\n        val words17 = s.split(\"\\\\s+\")\n        val words18 = s.split(\"\\\\s+\")\n        val words19 = s.split(\"\\\\s+\")\n        val words20 = s.split(\"\\\\s+\")\n        val words21 = s.split(\"\\\\s+\")\n        val words22 = s.split(\"\\\\s+\")\n        val words23 = s.split(\"\\\\s+\")\n        val words24 = s.split(\"\\\\s+\")\n        val words25 = s.split(\"\\\\s+\")\n        val words26 = s.split(\"\\\\s+\")\n        val words27 = s.split(\"\\\\s+\")\n        val words28 = s.split(\"\\\\s+\")\n        val words29 = s.split(\"\\\\s+\")\n        val words30 = s.split(\"\\\\s+\")\n        val words31 = s.split(\"\\\\s+\")\n        val words32 = s.split(\"\\\\s+\")\n        val words33 = s.split(\"\\\\s+\")\n        val words34 = s.split(\"\\\\s+\")\n        val words35 = s.split(\"\\\\s+\")\n        val words36 = s.split(\"\\\\s+\")\n        val words37 = s.split(\"\\\\s+\")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi3lomp7m.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeqlqmfml.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:40:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:45:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (word in words) {\n            wordsList += word\n        }\n        return wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp92q1nmxo.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92q1nmxo.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp92q1nmxo.scala:16:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw8lsylo.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw8lsylo.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplw8lsylo.scala:23:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (word in words) {\n            wordsList.append(word)\n        }\n        return wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString2(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val wordsList = mutable.List[String]()\n        for (word in words) {\n            wordsList.append(word)\n        }\n        return wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString3(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val wordsList = mutable.List[String]()\n        for (word in words) {\n            wordsList.append(word)\n        }\n        return wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxl9t7nh_.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxl9t7nh_.scala:30:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxl9t7nh_.scala:46:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxl9t7nh_.scala:66:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxl9t7nh_.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxl9t7nh_.scala:16:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty())\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:23:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:28:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:33:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:38:14 ------------------------\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        words.foreach(w => println(w))\n        val words2 = s.split(\" \")\n        words2.foreach(w => println(w))\n        val words3 = s.split(\" \")\n        words3.foreach(w => println(w))\n        val words4 = s.split(\" \")\n        words4.foreach(w => println(w))\n        val words5 = s.split(\" \")\n        words5.foreach(w => println(w))\n        val words6 = s.split(\" \")\n        words6.foreach(w => println(w))\n        val words7 = s.split(\" \")\n        words7.foreach(w => println(w))\n        val words8 = s.split(\" \")\n        words8.foreach(w => println(w))\n        val words9 = s.split(\" \")\n        words9.foreach(w => println(w))\n        val words10 = s.split(\" \")\n        words10.foreach(w => println(w))\n        val words11 = s.split(\" \")\n        words11.foreach(w => println(w))\n        val words12 = s.split(\" \")\n        words12.foreach(w => println(w))\n        val words13 = s.split(\" \")\n        words13.foreach(w => println(w))\n        val words14 = s.split(\" \")\n        words14.foreach(w => println(w))\n        val words15 = s.split(\" \")\n        words15.foreach(w => println(w))\n        val words16 = s.split(\" \")\n        words16.foreach(w => println(w))\n        val words17 = s.split(\" \")\n        words17.foreach(w => println(w))\n        val words18 = s.split(\" \")\n        words18.foreach(w => println(w))\n        val words19 = s.split(\" \")\n        words19.foreach(w => println(w))\n        val words20 = s.split(\" \")\n        words20.foreach(w\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292664,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfxn46bhl.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfxn46bhl.scala:51:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        words20.foreach(w\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: w\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList += words[i]\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpomd60wt2.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString2((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString2((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString2(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString3((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString3((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString3(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    \n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292664,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnu7v1vt9.scala:65:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnu7v1vt9.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnu7v1vt9.scala:29:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnu7v1vt9.scala:45:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnu7v1vt9.scala:57:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    assert(wordsString((\u001b[31m\"Hi, my name is John\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"Hi\"\u001b[0m, \u001b[31m\"my\"\u001b[0m, \u001b[31m\"name\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m\"John\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: wordsString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnu7v1vt9.scala:58:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    assert(wordsString((\u001b[31m\"One, two, three, four, five, six\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"One\"\u001b[0m, \u001b[31m\"two\"\u001b[0m, \u001b[31m\"three",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\"\\\\s*,\\\\s*\")\n        words.foreach(w => {\n            if (w.length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3t6uzbz8.scala:80:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3t6uzbz8.scala:81:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3t6uzbz8.scala:91:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3t6uzbz8.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.append(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3t6uzbz8.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.append(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3t6uzbz8.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.append(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3t6uzbz8.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.append(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3t6uzbz8.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.append(w)\n\u001b[31m\u001b[31m   |\u001b[0m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (word in words) {\n            wordsList.append(word)\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292670,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp929exhv9.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp929exhv9.scala:18:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '<-' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp929exhv9.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp929exhv9.scala:16:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList += words[i]\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpomd60wt2.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeqlqmfml.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:40:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:45:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList += words[i]\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpomd60wt2.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (word in words) {\n            wordsList.append(word)\n        }\n        return wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyqxmby60.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyqxmby60.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyqxmby60.scala:16:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString2(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString3(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy4dro0gh.scala:65:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4dro0gh.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4dro0gh.scala:29:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4dro0gh.scala:45:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4dro0gh.scala:57:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    assert(wordsString((\u001b[31m\"Hi, my name is John\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"Hi\"\u001b[0m, \u001b[31m\"my\"\u001b[0m, \u001b[31m\"name\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m\"John\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: wordsString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4dro0gh.scala:58:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    assert(wordsString((\u001b[31m\"One, two, three, four, five, six\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"One\"\u001b[0m, \u001b[31m\"two\"\u001b[0m, \u001b[31m\"three",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\s\")\n        val words5 = s.split(\"\\\\W\")\n        val words6 = s.split(\"\\\\w\")\n        val words7 = s.split(\"\\\\W\")\n        val words8 = s.split(\"\\\\w\")\n        val words9 = s.split(\"\\\\W\")\n        val words10 = s.split(\"\\\\w\")\n        val words11 = s.split(\"\\\\W\")\n        val words12 = s.split(\"\\\\w\")\n        val words13 = s.split(\"\\\\W\")\n        val words14 = s.split(\"\\\\w\")\n        val words15 = s.split(\"\\\\W\")\n        val words16 = s.split(\"\\\\w\")\n        val words17 = s.split(\"\\\\W\")\n        val words18 = s.split(\"\\\\w\")\n        val words19 = s.split(\"\\\\W\")\n        val words20 = s.split(\"\\\\w\")\n        val words21 = s.split(\"\\\\W\")\n        val words22 = s.split(\"\\\\w\")\n        val words23 = s.split(\"\\\\W\")\n        val words24 = s.split(\"\\\\w\")\n        val words25 = s.split(\"\\\\W\")\n        val words26 = s.split(\"\\\\w\")\n        val words27 = s.split(\"\\\\W\")\n        val words28 = s.split(\"\\\\w\")\n        val words29 = s.split(\"\\\\W\")\n        val words30 = s.split(\"\\\\w\")\n        val words31 = s.split(\"\\\\W\")\n        val words32 = s.split(\"\\\\w\")\n        val words33 = s.split(\"\\\\W\")\n        val words34 = s.split(\"\\\\w\")\n        val words35 = s.split(\"\\\\W\")\n        val words36 = s.split(\"\\\\w\")\n        val words37 = s.split(\"\\\\W\")\n        val words38 = s.split(\"\\\\w\")\n        val words39 = s.split(\"\\\\W\")\n        val words40 = s.\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpras81l36.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpras81l36.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val result = mutable.List[String]()\n        for (word in words) {\n            result.append(word)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe90bf05r.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe90bf05r.scala:13:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe90bf05r.scala:16:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => w != \"\")\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => w != \"\")\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => w != \"\")\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => w != \"\")\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => w != \"\")\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => w != \"\")\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => w != \"\")\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => w != \"\")\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => w != \"\")\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => w != \"\")\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => w != \"\")\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292666,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpguno14ou.scala:71:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpguno14ou.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpguno14ou.scala:72:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m72 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = words.map(w => w.trim())\n        val words3 = words2.map(w => w.replaceAll(\"\\\\s+\",\"\"))\n        val words4 = words3.map(w => w.replaceAll(\"^\\\\s+|\\\\s+$\",\"\"))\n        val words5 = words4.map(w => w.replaceAll(\"\\\\s+\",\"\"))\n        val words6 = words5.map(w => w.replaceAll(\"^\\\\s+|\\\\s+$\",\"\"))\n        val words7 = words6.map(w => w.replaceAll(\"\\\\s+\",\"\"))\n        val words8 = words7.map(w => w.replaceAll(\"^\\\\s+|\\\\s+$\",\"\"))\n        val words9 = words8.map(w => w.replaceAll(\"\\\\s+\",\"\"))\n        val words10 = words9.map(w => w.replaceAll(\"^\\\\s+|\\\\s+$\",\"\"))\n        val words11 = words10.map(w => w.replaceAll(\"\\\\s+\",\"\"))\n        val words12 = words11.map(w => w.replaceAll(\"^\\\\s+|\\\\s+$\",\"\"))\n        val words13 = words12.map(w => w.replaceAll(\"\\\\s+\",\"\"))\n        val words14 = words13.map(w => w.replaceAll(\"^\\\\s+|\\\\s+$\",\"\"))\n        val words15 = words14.map(w => w.replaceAll(\"\\\\s+\",\"\"))\n        val words16 = words15.map(w => w.replaceAll(\"^\\\\s+|\\\\s+$\",\"\"))\n        val words17 = words16.map(w => w.replaceAll(\"\\\\s+\",\"\"))\n        val words18 = words17.map(w => w.replaceAll(\"^\\\\s+|\\\\s+$\",\"\"))\n        val words19 = words18.map(w => w.replaceAll(\"\\\\s+\",\"\"))\n        val words20 = words19.map(w => w.replaceAll(\"^\\\\s+|\\\\s+$\",\"\"))\n        val words21 = words20.map(w => w.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292670,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt0n6ftf_.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt0n6ftf_.scala:33:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpbhu3ims8.scala:74:32 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m            \u001b[33mif\u001b[0m (w.trim().equals(\"\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                unclosed string literal\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbhu3ims8.scala:76:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbhu3ims8.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbhu3ims8.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbhu3ims8.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbhu3ims8.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbhu3ims8.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbhu3ims8.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (word in words) {\n            wordsList.append(word)\n        }\n        return wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyqxmby60.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyqxmby60.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyqxmby60.scala:16:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\s\")\n        val words5 = s.split(\"\\\\W\")\n        val words6 = s.split(\"\\\\W+\")\n        val words7 = s.split(\"\\\\W*\")\n        val words8 = s.split(\"\\\\W\")\n        val words9 = s.split(\"\\\\W+\")\n        val words10 = s.split(\"\\\\W*\")\n        val words11 = s.split(\"\\\\W+\")\n        val words12 = s.split(\"\\\\W*\")\n        val words13 = s.split(\"\\\\W+\")\n        val words14 = s.split(\"\\\\W*\")\n        val words15 = s.split(\"\\\\W+\")\n        val words16 = s.split(\"\\\\W*\")\n        val words17 = s.split(\"\\\\W+\")\n        val words18 = s.split(\"\\\\W*\")\n        val words19 = s.split(\"\\\\W+\")\n        val words20 = s.split(\"\\\\W*\")\n        val words21 = s.split(\"\\\\W+\")\n        val words22 = s.split(\"\\\\W*\")\n        val words23 = s.split(\"\\\\W+\")\n        val words24 = s.split(\"\\\\W*\")\n        val words25 = s.split(\"\\\\W+\")\n        val words26 = s.split(\"\\\\W*\")\n        val words27 = s.split(\"\\\\W+\")\n        val words28 = s.split(\"\\\\W*\")\n        val words29 = s.split(\"\\\\W+\")\n        val words30 = s.split(\"\\\\W*\")\n        val words31 = s.split(\"\\\\W+\")\n        val words32 = s.split(\"\\\\W*\")\n        val words33 = s.split(\"\\\\W+\")\n        val words34 = s.split(\"\\\\W*\")\n        val words35 = s.split(\"\\\\W+\")\n        val words36 = s.split(\"\\\\W*\")\n        val words37 = s.split(\"\\\\W+\")\n        val\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppwtons7f.scala:49:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppwtons7f.scala:50:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val result = mutable.List[String]()\n        for (word in words) {\n            result.append(word)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe90bf05r.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe90bf05r.scala:13:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe90bf05r.scala:16:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (word in words) {\n            wordsList += word\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292670,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpegx3s5a9.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpegx3s5a9.scala:18:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '<-' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpegx3s5a9.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpegx3s5a9.scala:16:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList += words[i]\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpomd60wt2.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\"[\\\\s,]+\")\n        val result = mutable.List[String]()\n        for (word <- words) {\n            result.append(word)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292666,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppbn5mvkr.scala:13:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw8lsylo.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw8lsylo.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplw8lsylo.scala:23:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw8lsylo.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw8lsylo.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplw8lsylo.scala:23:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\W+\")\n        val words5 = s.split(\"\\\\W\")\n        val words6 = s.split(\"\\\\s\")\n        val words7 = s.split(\"\\\\W\")\n        val words8 = s.split(\"\\\\s\")\n        val words9 = s.split(\"\\\\W\")\n        val words10 = s.split(\"\\\\s\")\n        val words11 = s.split(\"\\\\W\")\n        val words12 = s.split(\"\\\\s\")\n        val words13 = s.split(\"\\\\W\")\n        val words14 = s.split(\"\\\\s\")\n        val words15 = s.split(\"\\\\W\")\n        val words16 = s.split(\"\\\\s\")\n        val words17 = s.split(\"\\\\W\")\n        val words18 = s.split(\"\\\\s\")\n        val words19 = s.split(\"\\\\W\")\n        val words20 = s.split(\"\\\\s\")\n        val words21 = s.split(\"\\\\W\")\n        val words22 = s.split(\"\\\\s\")\n        val words23 = s.split(\"\\\\W\")\n        val words24 = s.split(\"\\\\s\")\n        val words25 = s.split(\"\\\\W\")\n        val words26 = s.split(\"\\\\s\")\n        val words27 = s.split(\"\\\\W\")\n        val words28 = s.split(\"\\\\s\")\n        val words29 = s.split(\"\\\\W\")\n        val words30 = s.split(\"\\\\s\")\n        val words31 = s.split(\"\\\\W\")\n        val words32 = s.split(\"\\\\s\")\n        val words33 = s.split(\"\\\\W\")\n        val words34 = s.split(\"\\\\s\")\n        val words35 = s.split(\"\\\\W\")\n        val words36 = s.split(\"\\\\s\")\n        val words37 = s.split(\"\\\\W\")\n        val words38 = s.split(\"\\\\s\")\n        val words39 = s.split(\"\\\\W\")\n        val words40 = s\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3t8zjv1m.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeqlqmfml.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:40:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:45:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292672,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpug9atul9.scala:75:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpug9atul9.scala:76:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpug9atul9.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpug9atul9.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.append(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpug9atul9.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.append(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpug9atul9.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.append(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpug9atul9.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.append(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpug9atul9.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.append(w)\n\u001b[31m\u001b[31m   |\u001b[0m             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        words.foreach(w => println(w))\n        val words2 = s.split(\" \")\n        words2.foreach(w => println(w))\n        val words3 = s.split(\"\\\\s+\")\n        words3.foreach(w => println(w))\n        val words4 = s.split(\"\\\\W+\")\n        words4.foreach(w => println(w))\n        val words5 = s.split(\"\\\\p{Punct}+\")\n        words5.foreach(w => println(w))\n        val words6 = s.split(\"\\\\p{Punct}\")\n        words6.foreach(w => println(w))\n        val words7 = s.split(\"\\\\p{Punct}\")\n        words7.foreach(w => println(w))\n        val words8 = s.split(\"\\\\p{Punct}\")\n        words8.foreach(w => println(w))\n        val words9 = s.split(\"\\\\p{Punct}\")\n        words9.foreach(w => println(w))\n        val words10 = s.split(\"\\\\p{Punct}\")\n        words10.foreach(w => println(w))\n        val words11 = s.split(\"\\\\p{Punct}\")\n        words11.foreach(w => println(w))\n        val words12 = s.split(\"\\\\p{Punct}\")\n        words12.foreach(w => println(w))\n        val words13 = s.split(\"\\\\p{Punct}\")\n        words13.foreach(w => println(w))\n        val words14 = s.split(\"\\\\p{Punct}\")\n        words14.foreach(w => println(w))\n        val words15 = s.split(\"\\\\p{Punct}\")\n        words15.foreach(w => println(w))\n        val words16 = s.split(\"\\\\p{Punct}\")\n        words16.foreach(w => println(w))\n        val words17 = s.split(\"\\\\p{Punct}\")\n        words17.foreach(w => println(w))\n        val\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292664,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpk27lb5bs.scala:46:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk27lb5bs.scala:47:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\W+\")\n        val words5 = s.split(\"\\\\W\")\n        val words6 = s.split(\"\\\\s\")\n        val words7 = s.split(\"\\\\W\")\n        val words8 = s.split(\"\\\\s\")\n        val words9 = s.split(\"\\\\W\")\n        val words10 = s.split(\"\\\\s\")\n        val words11 = s.split(\"\\\\W\")\n        val words12 = s.split(\"\\\\s\")\n        val words13 = s.split(\"\\\\W\")\n        val words14 = s.split(\"\\\\s\")\n        val words15 = s.split(\"\\\\W\")\n        val words16 = s.split(\"\\\\s\")\n        val words17 = s.split(\"\\\\W\")\n        val words18 = s.split(\"\\\\s\")\n        val words19 = s.split(\"\\\\W\")\n        val words20 = s.split(\"\\\\s\")\n        val words21 = s.split(\"\\\\W\")\n        val words22 = s.split(\"\\\\s\")\n        val words23 = s.split(\"\\\\W\")\n        val words24 = s.split(\"\\\\s\")\n        val words25 = s.split(\"\\\\W\")\n        val words26 = s.split(\"\\\\s\")\n        val words27 = s.split(\"\\\\W\")\n        val words28 = s.split(\"\\\\s\")\n        val words29 = s.split(\"\\\\W\")\n        val words30 = s.split(\"\\\\s\")\n        val words31 = s.split(\"\\\\W\")\n        val words32 = s.split(\"\\\\s\")\n        val words33 = s.split(\"\\\\W\")\n        val words34 = s.split(\"\\\\s\")\n        val words35 = s.split(\"\\\\W\")\n        val words36 = s.split(\"\\\\s\")\n        val words37 = s.split(\"\\\\W\")\n        val words38 = s.split(\"\\\\s\")\n        val words39 = s.split(\"\\\\W\")\n        val words40 = s\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3t8zjv1m.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList += words[i]\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpomd60wt2.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.contains(\" \")) {\n                var words2 = w.split(\" \")\n                words2.forEach(w2 => {\n                    words = words.append(w2)\n                })\n            } else {\n                words = words.append(w)\n            }\n        })\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292670,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgma40t4_.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgma40t4_.scala:23:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\s\")\n        val words5 = s.split(\"\\\\W\")\n        val words6 = s.split(\"\\\\w\")\n        val words7 = s.split(\"\\\\W+\")\n        val words8 = s.split(\"\\\\w+\")\n        val words9 = s.split(\"\\\\W*\")\n        val words10 = s.split(\"\\\\w*\")\n        val words11 = s.split(\"\\\\W\")\n        val words12 = s.split(\"\\\\w\")\n        val words13 = s.split(\"\\\\W+\")\n        val words14 = s.split(\"\\\\w+\")\n        val words15 = s.split(\"\\\\W*\")\n        val words16 = s.split(\"\\\\w*\")\n        val words17 = s.split(\"\\\\W\")\n        val words18 = s.split(\"\\\\w\")\n        val words19 = s.split(\"\\\\W+\")\n        val words20 = s.split(\"\\\\w+\")\n        val words21 = s.split(\"\\\\W*\")\n        val words22 = s.split(\"\\\\w*\")\n        val words23 = s.split(\"\\\\W\")\n        val words24 = s.split(\"\\\\w\")\n        val words25 = s.split(\"\\\\W+\")\n        val words26 = s.split(\"\\\\w+\")\n        val words27 = s.split(\"\\\\W*\")\n        val words28 = s.split(\"\\\\w*\")\n        val words29 = s.split(\"\\\\W\")\n        val words30 = s.split(\"\\\\w\")\n        val words31 = s.split(\"\\\\W+\")\n        val words32 = s.split(\"\\\\w+\")\n        val words33 = s.split(\"\\\\W*\")\n        val words34 = s.split(\"\\\\w*\")\n        val words35 = s.split(\"\\\\W\")\n        val words36 = s.split(\"\\\\w\")\n        val words37 = s.split(\"\\\\W+\")\n        val words38 = s.split(\"\\\\w+\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292670,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpcc1ahgwb.scala:49:30 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwords38\u001b[0m = s.split(\"\\\\w+\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcc1ahgwb.scala:51:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcc1ahgwb.scala:50:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcc1ahgwb.scala:51:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: \\w+def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.contains(\" \")) {\n                var words2 = w.split(\" \")\n                words2.forEach(w2 => {\n                    words.add(w2)\n                })\n            } else {\n                words.add(w)\n            }\n        })\n        return words\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString2((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString2((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString2(s : String) : List[String] = {\n        var words = s.split(\" \")\n        words.forEach(w => {\n            if (w.contains(\",\")) {\n                var words2 = w.split(\",\")\n                words2.forEach(w2 => {\n                    words.add(w2)\n                })\n            } else {\n                words.add(w)\n            }\n        })\n        return words\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString3((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString3((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString3(s : String) : List[String] = {\n        var words = s.split(\" \")\n        words.forEach(w => {\n            if (w.\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292670,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphqtwir0h.scala:59:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphqtwir0h.scala:60:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphqtwir0h.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphqtwir0h.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphqtwir0h.scala:23:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphqtwir0h.scala:35:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphqtwir0h.scala:45:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphqtwir0h.scala:57:14 ------------------------\u001b[0m\u001b[0m\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3ubk7wwf.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:40:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String]",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\W+\")\n        val words5 = s.split(\"\\\\W\")\n        val words6 = s.split(\"\\\\s\")\n        val words7 = s.split(\"\\\\W\")\n        val words8 = s.split(\"\\\\s\")\n        val words9 = s.split(\"\\\\W\")\n        val words10 = s.split(\"\\\\s\")\n        val words11 = s.split(\"\\\\W\")\n        val words12 = s.split(\"\\\\s\")\n        val words13 = s.split(\"\\\\W\")\n        val words14 = s.split(\"\\\\s\")\n        val words15 = s.split(\"\\\\W\")\n        val words16 = s.split(\"\\\\s\")\n        val words17 = s.split(\"\\\\W\")\n        val words18 = s.split(\"\\\\s\")\n        val words19 = s.split(\"\\\\W\")\n        val words20 = s.split(\"\\\\s\")\n        val words21 = s.split(\"\\\\W\")\n        val words22 = s.split(\"\\\\s\")\n        val words23 = s.split(\"\\\\W\")\n        val words24 = s.split(\"\\\\s\")\n        val words25 = s.split(\"\\\\W\")\n        val words26 = s.split(\"\\\\s\")\n        val words27 = s.split(\"\\\\W\")\n        val words28 = s.split(\"\\\\s\")\n        val words29 = s.split(\"\\\\W\")\n        val words30 = s.split(\"\\\\s\")\n        val words31 = s.split(\"\\\\W\")\n        val words32 = s.split(\"\\\\s\")\n        val words33 = s.split(\"\\\\W\")\n        val words34 = s.split(\"\\\\s\")\n        val words35 = s.split(\"\\\\W\")\n        val words36 = s.split(\"\\\\s\")\n        val words37 = s.split(\"\\\\W\")\n        val words38 = s.split(\"\\\\s\")\n        val words39 = s.split(\"\\\\W\")\n        val words40 = s\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3t8zjv1m.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\"[,\\\\s]+\")\n        words.map(w => w.trim()).toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292672,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvbh3etgb.scala:20)\n\tat Problem.main(tmpvbh3etgb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeqlqmfml.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:40:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:45:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().equals(\"\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpbhu3ims8.scala:74:32 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m            \u001b[33mif\u001b[0m (w.trim().equals(\"\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                unclosed string literal\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbhu3ims8.scala:76:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbhu3ims8.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbhu3ims8.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbhu3ims8.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbhu3ims8.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbhu3ims8.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbhu3ims8.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = words2.map(w => w.trim())\n        val words4 = words3.map(w => w.trim())\n        val words5 = words4.map(w => w.trim())\n        val words6 = words5.map(w => w.trim())\n        val words7 = words6.map(w => w.trim())\n        val words8 = words7.map(w => w.trim())\n        val words9 = words8.map(w => w.trim())\n        val words10 = words9.map(w => w.trim())\n        val words11 = words10.map(w => w.trim())\n        val words12 = words11.map(w => w.trim())\n        val words13 = words12.map(w => w.trim())\n        val words14 = words13.map(w => w.trim())\n        val words15 = words14.map(w => w.trim())\n        val words16 = words15.map(w => w.trim())\n        val words17 = words16.map(w => w.trim())\n        val words18 = words17.map(w => w.trim())\n        val words19 = words18.map(w => w.trim())\n        val words20 = words19.map(w => w.trim())\n        val words21 = words20.map(w => w.trim())\n        val words22 = words21.map(w => w.trim())\n        val words23 = words22.map(w => w.trim())\n        val words24 = words23.map(w => w.trim())\n        val words25 = words24.map(w => w.trim())\n        val words26 = words25.map(w => w.trim())\n        val words27 = words26.map(w => w.trim())\n        val words28 = words27.map(w => w.trim())\n        val words29 = words28.map(w => w.trim())\n        val words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292672,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpusu4is3n.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpusu4is3n.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\s\")\n        val words5 = s.split(\"\\\\s\")\n        val words6 = s.split(\"\\\\s\")\n        val words7 = s.split(\"\\\\s\")\n        val words8 = s.split(\"\\\\s\")\n        val words9 = s.split(\"\\\\s\")\n        val words10 = s.split(\"\\\\s\")\n        val words11 = s.split(\"\\\\s\")\n        val words12 = s.split(\"\\\\s\")\n        val words13 = s.split(\"\\\\s\")\n        val words14 = s.split(\"\\\\s\")\n        val words15 = s.split(\"\\\\s\")\n        val words16 = s.split(\"\\\\s\")\n        val words17 = s.split(\"\\\\s\")\n        val words18 = s.split(\"\\\\s\")\n        val words19 = s.split(\"\\\\s\")\n        val words20 = s.split(\"\\\\s\")\n        val words21 = s.split(\"\\\\s\")\n        val words22 = s.split(\"\\\\s\")\n        val words23 = s.split(\"\\\\s\")\n        val words24 = s.split(\"\\\\s\")\n        val words25 = s.split(\"\\\\s\")\n        val words26 = s.split(\"\\\\s\")\n        val words27 = s.split(\"\\\\s\")\n        val words28 = s.split(\"\\\\s\")\n        val words29 = s.split(\"\\\\s\")\n        val words30 = s.split(\"\\\\s\")\n        val words31 = s.split(\"\\\\s\")\n        val words32 = s.split(\"\\\\s\")\n        val words33 = s.split(\"\\\\s\")\n        val words34 = s.split(\"\\\\s\")\n        val words35 = s.split(\"\\\\s\")\n        val words36 = s.split(\"\\\\s\")\n        val words37 = s.split(\"\\\\s\")\n        val words38 = s.split(\"\\\\s\")\n        val words39 = s.split(\"\\\\s\")\n        val words40 = s.\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9jtiu9pk.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9jtiu9pk.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String].empty()\n        for (i <- 0 until words.length) {\n            wordsList = wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbzgt26qw.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m].empty()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpbzgt26qw.scala:15:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            wordsList = wordsList.append(words[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val wordsList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.contains(\" \")) {\n                var words2 = w.split(\" \")\n                words2.forEach(w2 => {\n                    words.add(w2)\n                })\n            } else {\n                words.add(w)\n            }\n        })\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2rh9gr9d.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2rh9gr9d.scala:23:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList += words[i]\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpomd60wt2.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (word in words) {\n            wordsList += word\n        }\n        return wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp92q1nmxo.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92q1nmxo.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp92q1nmxo.scala:16:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeqlqmfml.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:40:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:45:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (word in words) {\n            wordsList += word\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292670,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpegx3s5a9.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpegx3s5a9.scala:18:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '<-' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpegx3s5a9.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpegx3s5a9.scala:16:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString2(s : String) : List[String] = {\n        val words = s.split(\"\\\\s+\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString3(s : String) : List[String] = {\n        val words = s.split(\"\\\\s+\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    \n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyve4rz2r.scala:65:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyve4rz2r.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyve4rz2r.scala:29:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyve4rz2r.scala:45:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyve4rz2r.scala:57:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    assert(wordsString((\u001b[31m\"Hi, my name is John\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"Hi\"\u001b[0m, \u001b[31m\"my\"\u001b[0m, \u001b[31m\"name\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m\"John\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: wordsString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyve4rz2r.scala:58:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    assert(wordsString((\u001b[31m\"One, two, three, four, five, six\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"One\"\u001b[0m, \u001b[31m\"two\"\u001b[0m, \u001b[31m\"three",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty())\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:23:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:28:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:33:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:38:14 ------------------------\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\s\")\n        val words5 = s.split(\"\\\\n\")\n        val words6 = s.split(\"\\\\r\")\n        val words7 = s.split(\"\\\\t\")\n        val words8 = s.split(\"\\\\b\")\n        val words9 = s.split(\"\\\\f\")\n        val words10 = s.split(\"\\\\v\")\n        val words11 = s.split(\"\\\\a\")\n        val words12 = s.split(\"\\\\c\")\n        val words13 = s.split(\"\\\\e\")\n        val words14 = s.split(\"\\\\p\")\n        val words15 = s.split(\"\\\\u\")\n        val words16 = s.split(\"\\\\x\")\n        val words17 = s.split(\"\\\\d\")\n        val words18 = s.split(\"\\\\s\")\n        val words19 = s.split(\"\\\\w\")\n        val words20 = s.split(\"\\\\W\")\n        val words21 = s.split(\"\\\\d\")\n        val words22 = s.split(\"\\\\D\")\n        val words23 = s.split(\"\\\\s\")\n        val words24 = s.split(\"\\\\S\")\n        val words25 = s.split(\"\\\\w\")\n        val words26 = s.split(\"\\\\W\")\n        val words27 = s.split(\"\\\\d\")\n        val words28 = s.split(\"\\\\D\")\n        val words29 = s.split(\"\\\\s\")\n        val words30 = s.split(\"\\\\S\")\n        val words31 = s.split(\"\\\\w\")\n        val words32 = s.split(\"\\\\W\")\n        val words33 = s.split(\"\\\\d\")\n        val words34 = s.split(\"\\\\D\")\n        val words35 = s.split(\"\\\\s\")\n        val words36 = s.split(\"\\\\S\")\n        val words37 = s.split(\"\\\\w\")\n        val words38 = s.split(\"\\\\W\")\n        val words39 = s.split(\"\\\\d\")\n        val words40 = s.\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292673,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2u4gk9va.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2u4gk9va.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        return words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292673,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpos6qb4y8.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        \n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292661,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvo9c920h.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvo9c920h.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvo9c920h.scala:23:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvo9c920h.scala:28:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvo9c920h.scala:33:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvo9c920h.scala:38:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvo9c920h.scala:43:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvo9c920h.scala:48:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeqlqmfml.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:40:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:45:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        return wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString2(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        return wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString3(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        return wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    //\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292673,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0_1nc60v.scala:65:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0_1nc60v.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0_1nc60v.scala:29:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0_1nc60v.scala:45:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0_1nc60v.scala:57:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    assert(wordsString((\u001b[31m\"Hi, my name is John\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"Hi\"\u001b[0m, \u001b[31m\"my\"\u001b[0m, \u001b[31m\"name\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m\"John\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: wordsString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0_1nc60v.scala:58:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    assert(wordsString((\u001b[31m\"One, two, three, four, five, six\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"One\"\u001b[0m, \u001b[31m\"two\"\u001b[0m, \u001b[31m\"three",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (word in words) {\n            wordsList.append(word)\n        }\n        return wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyqxmby60.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyqxmby60.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyqxmby60.scala:16:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.contains(\" \")) {\n                var words2 = w.split(\" \")\n                words2.foreach(w2 => {\n                    words.append(w2)\n                })\n            } else {\n                words.append(w)\n            }\n        })\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpamo0zhhe.scala:17:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    words.append(w2)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpamo0zhhe.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words.append(w)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpamo0zhhe.scala:23:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (word in words) {\n            wordsList.append(word)\n        }\n        return wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyqxmby60.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyqxmby60.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyqxmby60.scala:16:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w => println(w))\n        words.forEach(w\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7rblgmjv.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rblgmjv.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => println(w))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rblgmjv.scala:14:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => println(w))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rblgmjv.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => println(w))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rblgmjv.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => println(w))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rblgmjv.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => println(w))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rblgmjv.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => println(w))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rblgmjv.scala:19:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => println(w))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty())\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7_7reyge.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7_7reyge.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7_7reyge.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val result = mutable.List[String]()\n        for (word <- words) {\n            result.append(word)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnweijmlj.scala:13:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw8lsylo.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw8lsylo.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplw8lsylo.scala:23:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\W+\")\n        val words5 = s.split(\"\\\\W\")\n        val words6 = s.split(\"\\\\s\")\n        val words7 = s.split(\"\\\\W\")\n        val words8 = s.split(\"\\\\s\")\n        val words9 = s.split(\"\\\\W\")\n        val words10 = s.split(\"\\\\s\")\n        val words11 = s.split(\"\\\\W\")\n        val words12 = s.split(\"\\\\s\")\n        val words13 = s.split(\"\\\\W\")\n        val words14 = s.split(\"\\\\s\")\n        val words15 = s.split(\"\\\\W\")\n        val words16 = s.split(\"\\\\s\")\n        val words17 = s.split(\"\\\\W\")\n        val words18 = s.split(\"\\\\s\")\n        val words19 = s.split(\"\\\\W\")\n        val words20 = s.split(\"\\\\s\")\n        val words21 = s.split(\"\\\\W\")\n        val words22 = s.split(\"\\\\s\")\n        val words23 = s.split(\"\\\\W\")\n        val words24 = s.split(\"\\\\s\")\n        val words25 = s.split(\"\\\\W\")\n        val words26 = s.split(\"\\\\s\")\n        val words27 = s.split(\"\\\\W\")\n        val words28 = s.split(\"\\\\s\")\n        val words29 = s.split(\"\\\\W\")\n        val words30 = s.split(\"\\\\s\")\n        val words31 = s.split(\"\\\\W\")\n        val words32 = s.split(\"\\\\s\")\n        val words33 = s.split(\"\\\\W\")\n        val words34 = s.split(\"\\\\s\")\n        val words35 = s.split(\"\\\\W\")\n        val words36 = s.split(\"\\\\s\")\n        val words37 = s.split(\"\\\\W\")\n        val words38 = s.split(\"\\\\s\")\n        val words39 = s.split(\"\\\\W\")\n        val words40 = s\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3t8zjv1m.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (word <- words) {\n            wordsList += word\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292673,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpah3nqf_7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList += words[i]\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpomd60wt2.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\s\")\n        val words5 = s.split(\"\\\\W\")\n        val words6 = s.split(\"\\\\W+\")\n        val words7 = s.split(\"\\\\W*\")\n        val words8 = s.split(\"\\\\W+\\\\W+\")\n        val words9 = s.split(\"\\\\W*\\\\W+\")\n        val words10 = s.split(\"\\\\W*\\\\W*\")\n        val words11 = s.split(\"\\\\W+\\\\W*\")\n        val words12 = s.split(\"\\\\W*\\\\W*\\\\W*\")\n        val words13 = s.split(\"\\\\W+\\\\W*\\\\W*\")\n        val words14 = s.split(\"\\\\W*\\\\W*\\\\W*\\\\W*\")\n        val words15 = s.split(\"\\\\W+\\\\W*\\\\W*\\\\W*\\\\W*\")\n        val words16 = s.split(\"\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\")\n        val words17 = s.split(\"\\\\W+\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\")\n        val words18 = s.split(\"\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\")\n        val words19 = s.split(\"\\\\W+\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\")\n        val words20 = s.split(\"\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\")\n        val words21 = s.split(\"\\\\W+\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\")\n        val words22 = s.split(\"\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\")\n        val words23 = s.split(\"\\\\W+\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\\\\W*\")\n        val words24 = s.split\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmptldl0oz7.scala:35:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwords24\u001b[0m = s.split\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35msplit\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: String): Array[String]\n\u001b[31m   |\u001b[0m (x$0: String, x$1: Int): Array[String]\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptldl0oz7.scala:36:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString2(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3u6oqf0a.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3u6oqf0a.scala:29:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpq69ekser.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq69ekser.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq69ekser.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq69ekser.scala:23:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq69ekser.scala:28:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq69ekser.scala:33:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq69ekser.scala:38:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq69ekser.scala:43:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList += words[i]\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpomd60wt2.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        return wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdaw248ad.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = words2.map(w -> w.trim())\n        val words4 = words3.map(w -> w.replaceAll(\"\\\\s+\", \"\"))\n        val words5 = words4.map(w -> w.replaceAll(\"^\\\\s+|\\\\s+$\", \"\"))\n        val words6 = words5.map(w -> w.replaceAll(\"\\\\s+\", \" \"))\n        val words7 = words6.map(w -> w.replaceAll(\"^\\\\s+|\\\\s+$\", \"\"))\n        val words8 = words7.map(w -> w.replaceAll(\"\\\\s+\", \" \"))\n        val words9 = words8.map(w -> w.replaceAll(\"^\\\\s+|\\\\s+$\", \"\"))\n        val words10 = words9.map(w -> w.replaceAll(\"\\\\s+\", \" \"))\n        val words11 = words10.map(w -> w.replaceAll(\"^\\\\s+|\\\\s+$\", \"\"))\n        val words12 = words11.map(w -> w.replaceAll(\"\\\\s+\", \" \"))\n        val words13 = words12.map(w -> w.replaceAll(\"^\\\\s+|\\\\s+$\", \"\"))\n        val words14 = words13.map(w -> w.replaceAll(\"\\\\s+\", \" \"))\n        val words15 = words14.map(w -> w.replaceAll(\"^\\\\s+|\\\\s+$\", \"\"))\n        val words16 = words15.map(w -> w.replaceAll(\"\\\\s+\", \" \"))\n        val words17 = words16.map(w -> w.replaceAll(\"^\\\\s+|\\\\s+$\", \"\"))\n        val words18 = words17.map(w -> w.replaceAll(\"\\\\s+\", \" \"))\n        val words19 = words18.map(w -> w.replaceAll(\"^\\\\s+|\\\\s+$\", \"\"))\n        val words20 = words19.map(w -> w.replaceAll(\"\\\\s+\", \" \"))\n        val words21 = words20\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292676,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_r_lus_x.scala:14:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwords3\u001b[0m = words2.map(w -> w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: w\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_r_lus_x.scala:14:46 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwords3\u001b[0m = words2.map(w -> w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_r_lus_x.scala:33:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (word in words) {\n            wordsList.append(word)\n        }\n        return wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyqxmby60.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyqxmby60.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyqxmby60.scala:16:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w => println(w))\n        words.foreach(w\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwhffgw_d.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwhffgw_d.scala:51:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        words.foreach(w\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: w\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        return words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn_4cyo0o.scala:21)\n\tat Problem.main(tmpn_4cyo0o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            result.append(words[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6a0z57yc.scala:13:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw8lsylo.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw8lsylo.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplw8lsylo.scala:23:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList += words[i]\n        }\n        return wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv4anuh5i.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292672,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpug9atul9.scala:75:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpug9atul9.scala:76:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpug9atul9.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpug9atul9.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.append(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpug9atul9.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.append(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpug9atul9.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.append(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpug9atul9.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.append(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpug9atul9.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.append(w)\n\u001b[31m\u001b[31m   |\u001b[0m             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString2(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString3(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy4dro0gh.scala:65:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4dro0gh.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4dro0gh.scala:29:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4dro0gh.scala:45:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4dro0gh.scala:57:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    assert(wordsString((\u001b[31m\"Hi, my name is John\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"Hi\"\u001b[0m, \u001b[31m\"my\"\u001b[0m, \u001b[31m\"name\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m\"John\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: wordsString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4dro0gh.scala:58:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    assert(wordsString((\u001b[31m\"One, two, three, four, five, six\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"One\"\u001b[0m, \u001b[31m\"two\"\u001b[0m, \u001b[31m\"three",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = words2.map(w => w.trim())\n        val words4 = words3.map(w => w.trim())\n        val words5 = words4.map(w => w.trim())\n        val words6 = words5.map(w => w.trim())\n        val words7 = words6.map(w => w.trim())\n        val words8 = words7.map(w => w.trim())\n        val words9 = words8.map(w => w.trim())\n        val words10 = words9.map(w => w.trim())\n        val words11 = words10.map(w => w.trim())\n        val words12 = words11.map(w => w.trim())\n        val words13 = words12.map(w => w.trim())\n        val words14 = words13.map(w => w.trim())\n        val words15 = words14.map(w => w.trim())\n        val words16 = words15.map(w => w.trim())\n        val words17 = words16.map(w => w.trim())\n        val words18 = words17.map(w => w.trim())\n        val words19 = words18.map(w => w.trim())\n        val words20 = words19.map(w => w.trim())\n        val words21 = words20.map(w => w.trim())\n        val words22 = words21.map(w => w.trim())\n        val words23 = words22.map(w => w.trim())\n        val words24 = words23.map(w => w.trim())\n        val words25 = words24.map(w => w.trim())\n        val words26 = words25.map(w => w.trim())\n        val words27 = words26.map(w => w.trim())\n        val words28 = words27.map(w => w.trim())\n        val words29 = words28.map(w => w.trim())\n        val words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292672,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpusu4is3n.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpusu4is3n.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeqlqmfml.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:40:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:45:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().length > 0) {\n                words = words.concat(w.trim().split(\" \"))\n            }\n        })\n        words.sort()\n        return words\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString2(s : String) : List[String] = {\n        var words = s.split(\" \")\n        words.sort()\n        return words\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString3(s : String) : List[String] = {\n        var words = s.split(\" \")\n        words.sort()\n        return words\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5v4dw618.scala:64:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5v4dw618.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5v4dw618.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        words.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of Array[String] - did you mean Array[String].wait?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5v4dw618.scala:19:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5v4dw618.scala:31:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        words.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of Array[String] - did you mean Array[String].wait?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5v4dw618.scala:32:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5v4dw618.scala:44:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        words.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of Array[String] - did you mean Array[String].wait?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Err",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString2(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString3(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuwqb0eyc.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuwqb0eyc.scala:29:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuwqb0eyc.scala:45:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words.append(w.trim())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().length > 0) {\n                words = words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3ubk7wwf.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String].apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3ubk7wwf.scala:40:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                words = words.append(w.trim())\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Array[String] - did you mean Array[String]",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        words.map(w => w.trim()).toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyif2vgu8.scala:16)\n\tat Problem.main(tmpyif2vgu8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw8lsylo.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw8lsylo.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplw8lsylo.scala:23:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList += words[i]\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpomd60wt2.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty())\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:23:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:28:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:33:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:38:14 ------------------------\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeqlqmfml.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:25:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:40:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeqlqmfml.scala:45:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty())\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7_7reyge.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7_7reyge.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7_7reyge.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().equals(\"\")) {\n                words = words.filter(w => !w.trim().equals(\"\"))\n            }\n        })\n        return words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpksgvfqzq.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = new mutable.ListBuffer[String]()\n        var word = \"\"\n        var i = 0\n        while (i < s.length) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word += s.charAt(i)\n            }\n            i += 1\n        }\n        if (word.length() > 0) {\n            words.append(word)\n        }\n        return words.toList()\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyw8zegky.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mwords\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = List.empty[String]\n        var word = \"\"\n        var i = 0\n        while (i < s.length) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2nx8ha4z.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                    words = words.append(word)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2nx8ha4z.scala:27:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            words = words.append(word)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty())\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:23:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:28:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:33:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:38:14 ------------------------\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString2(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString3(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy4dro0gh.scala:65:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4dro0gh.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4dro0gh.scala:29:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4dro0gh.scala:45:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4dro0gh.scala:57:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    assert(wordsString((\u001b[31m\"Hi, my name is John\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"Hi\"\u001b[0m, \u001b[31m\"my\"\u001b[0m, \u001b[31m\"name\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m\"John\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: wordsString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4dro0gh.scala:58:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    assert(wordsString((\u001b[31m\"One, two, three, four, five, six\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"One\"\u001b[0m, \u001b[31m\"two\"\u001b[0m, \u001b[31m\"three",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty())\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:23:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:28:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:33:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:38:14 ------------------------\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.filter(w => !w.trim().isEmpty())\n            }\n        })\n        words.forEach(w => {\n            if (w.trim().isEmpty())\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx9dezhgy.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:23:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:28:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:33:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        words.forEach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value forEach is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9dezhgy.scala:38:14 ------------------------\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        var words = s.split(\",\")\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        words.foreach(w => {\n            if (w.trim().isEmpty()) {\n                words = words.remove(w)\n            }\n        })\n        return words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw8lsylo.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw8lsylo.scala:20:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                words = words.remove(w)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value remove is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplw8lsylo.scala:23:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mreturn\u001b[0m words\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (words : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList += words[i]\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString2(s : String) : List[String] = {\n        val words = s.split(\"\\\\s+\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList += words[i]\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString3(s : String) : List[String] = {\n        val words = s.split(\"\\\\s+\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList += words[i]\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    \n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292676,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp33fvbcrh.scala:66:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp33fvbcrh.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp33fvbcrh.scala:29:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp33fvbcrh.scala:45:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp33fvbcrh.scala:58:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    assert(wordsString((\u001b[31m\"Hi, my name is John\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"Hi\"\u001b[0m, \u001b[31m\"my\"\u001b[0m, \u001b[31m\"name\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m\"John\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: wordsString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp33fvbcrh.scala:59:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    assert(wordsString((\u001b[31m\"One, two, three, four, five, six\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"One\"\u001b[0m, \u001b[31m\"two\"\u001b[0m, \u001b[31m\"three",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\s\")\n        val words5 = s.split(\"\\\\n\")\n        val words6 = s.split(\"\\\\r\")\n        val words7 = s.split(\"\\\\t\")\n        val words8 = s.split(\"\\\\p{Space}\")\n        val words9 = s.split(\"\\\\p{Punct}\")\n        val words10 = s.split(\"\\\\p{Blank}\")\n        val words11 = s.split(\"\\\\p{Cntrl}\")\n        val words12 = s.split(\"\\\\p{XDigit}\")\n        val words13 = s.split(\"\\\\p{Alnum}\")\n        val words14 = s.split(\"\\\\p{Alpha}\")\n        val words15 = s.split(\"\\\\p{Graph}\")\n        val words16 = s.split(\"\\\\p{Print}\")\n        val words17 = s.split(\"\\\\p{Blank}\")\n        val words18 = s.split(\"\\\\p{Cntrl}\")\n        val words19 = s.split(\"\\\\p{XDigit}\")\n        val words20 = s.split(\"\\\\p{Alnum}\")\n        val words21 = s.split(\"\\\\p{Alpha}\")\n        val words22 = s.split(\"\\\\p{Graph}\")\n        val words23 = s.split(\"\\\\p{Print}\")\n        val words24 = s.split(\"\\\\p{Blank}\")\n        val words25 = s.split(\"\\\\p{Cntrl}\")\n        val words26 = s.split(\"\\\\p{XDigit}\")\n        val words27 = s.split(\"\\\\p{Alnum}\")\n        val words28 = s.split(\"\\\\p{Alpha}\")\n        val words29 = s.split(\"\\\\p{Graph}\")\n        val words30 = s.split(\"\\\\p{Print}\")\n        val words31 = s.split(\"\\\\p{Blank}\")\n        val words32 = s.split(\"\\\\p{Cntrl}\")\n        \n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9qrrnvd9.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (word in words) {\n            wordsList.append(word)\n        }\n        return wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyqxmby60.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyqxmby60.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyqxmby60.scala:16:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val words2 = s.split(\" \")\n        val words3 = s.split(\"\\\\s+\")\n        val words4 = s.split(\"\\\\s\")\n        val words5 = s.split(\"\\\\W+\")\n        val words6 = s.split(\"\\\\W\")\n        val words7 = s.split(\"\\\\d+\")\n        val words8 = s.split(\"\\\\D+\")\n        val words9 = s.split(\"\\\\d\")\n        val words10 = s.split(\"\\\\D\")\n        val words11 = s.split(\"\\\\w+\")\n        val words12 = s.split(\"\\\\w\")\n        val words13 = s.split(\"\\\\W\")\n        val words14 = s.split(\"\\\\w\")\n        val words15 = s.split(\"\\\\W\")\n        val words16 = s.split(\"\\\\d\")\n        val words17 = s.split(\"\\\\D\")\n        val words18 = s.split(\"\\\\d\")\n        val words19 = s.split(\"\\\\D\")\n        val words20 = s.split(\"\\\\w\")\n        val words21 = s.split(\"\\\\W\")\n        val words22 = s.split(\"\\\\w\")\n        val words23 = s.split(\"\\\\W\")\n        val words24 = s.split(\"\\\\d\")\n        val words25 = s.split(\"\\\\D\")\n        val words26 = s.split(\"\\\\d\")\n        val words27 = s.split(\"\\\\D\")\n        val words28 = s.split(\"\\\\w\")\n        val words29 = s.split(\"\\\\W\")\n        val words30 = s.split(\"\\\\w\")\n        val words31 = s.split(\"\\\\W\")\n        val words32 = s.split(\"\\\\d\")\n        val words33 = s.split(\"\\\\D\")\n        val words34 = s.split(\"\\\\d\")\n        val words35 = s.split(\"\\\\D\")\n        val words36 = s.split(\"\\\\w\")\n        val words37 = s.split(\"\\\\W\")\n        val words38 = s.split(\"\\\\w\")\n        val words39 = s.split(\"\\\\W\")\n        val words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv7xchmgi.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv7xchmgi.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        words.map(w => w.trim()).toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyif2vgu8.scala:16)\n\tat Problem.main(tmpyif2vgu8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            result.append(words[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6a0z57yc.scala:13:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList += words[i]\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpomd60wt2.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString2((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString2((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString2(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpows_ppah.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpows_ppah.scala:29:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (word in words) {\n            wordsList.append(word)\n        }\n        return wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyqxmby60.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyqxmby60.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyqxmby60.scala:16:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val wordsList = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            wordsList.append(words[i])\n        }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemgs9vns.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mwordsList\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            result.append(words[i])\n        }\n        return result\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString2(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            result.append(words[i])\n        }\n        return result\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString3(s : String) : List[String] = {\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            result.append(words[i])\n        }\n        return result\n    }\n\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n",
      "timestamp": 1664292677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptcv32mce.scala:66:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptcv32mce.scala:13:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptcv32mce.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptcv32mce.scala:45:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptcv32mce.scala:58:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    assert(wordsString((\u001b[31m\"Hi, my name is John\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"Hi\"\u001b[0m, \u001b[31m\"my\"\u001b[0m, \u001b[31m\"name\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m\"John\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: wordsString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptcv32mce.scala:59:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    assert(wordsString((\u001b[31m\"One, two, three, four, five, six\"\u001b[0m)).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"One\"\u001b[0m, \u001b[31m\"two\"\u001b[0m, \u001b[31m\"three\"\u001b[0m, \u001b[31m\"four\"\u001b[0m, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}