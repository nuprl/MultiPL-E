{
  "name": "HumanEval_107_even_odd_palindrome",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome(n : Long) : Tuple2[Long, Long] = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(evenOddPalindrome((123l)).equals(((8l, 13l))));\n    assert(evenOddPalindrome((12l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals(((1l, 2l))));\n    assert(evenOddPalindrome((63l)).equals(((6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals(((5l, 6l))));\n    assert(evenOddPalindrome((19l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals(((4l, 5l))));\n    assert(evenOddPalindrome((1l)).equals(((0l, 1l))));\n    }\n\n}\n",
  "completions": [
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even",
    "        val even = 0L\n        val odd = 0L\n        val i = 1L\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n            i += 1L\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        val i = 1L\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n            i += 1L\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1 to n) {\n            if (isEven(i)) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1 to n) {\n            if (isEven(i)) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        return (even.length(), odd.length())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        return (even.length(), odd.length())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1",
    "        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return Tuple2(even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome2(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return Tuple2(even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isEven(i)) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isEven(i)) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            val isPalindrome = scala.math.isPalindrome(i)\n            if (isPalindrome) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isEven(i)) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = 0\n        val odd = 0\n        for (i <- 1 to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0\n        val odd = 0\n        for (i <- 1 to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isEven(i)) {\n                even += 1L\n            } else {\n                odd += 1L\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isEven(i)) {\n                even += 1L\n            } else {\n                odd += 1L\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val isPalindrome = true\n            for (j <- 1l to i) {\n                if (i % j != 0) {\n                    isPalindrome = false\n                    break\n                }\n            }\n            if (isPalindrome) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        return Tuple2(even.length(), odd.length())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        return Tuple2(even.length(), odd.length())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l",
    "        val odd = 0l\n        val even = 0l\n        for (i <- 1l to n) {\n            val isPalindrome = true\n            for (j <- 1l to i) {\n                if (i % j != 0) {\n                    isPalindrome = false\n                    break\n                }\n            }\n            if (isPalindrome) {\n                odd += 1l\n            } else {\n                even += 1l\n            }\n        }\n        return (odd, even)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        for (i <- 1 to n) {\n            val isEven = (i % 2 == 0)\n            if (isEven) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n        }\n        val evenCount = even.length\n        val oddCount = odd.length\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        for (i <- 0 to evenCount - 1) {\n            for (j <- 0 to oddCount - 1) {\n                if (even[i] == odd[j]) {\n                    evenPalindrome.append(even[i])\n                    oddPalindrome.append(odd[j])\n                }\n            }\n        }\n        val evenPalindromeCount = evenPalindrome.length\n        val oddPalindromeCount = oddPalindrome.length\n        return (evenPalindromeCount, oddPalindromeCount)",
    "        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return (even, odd)",
    "        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n            i += 1\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n            i += 1\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome",
    "        val odd = scala.collection.mutable.ListBuffer[Long]()\n        val even = scala.collection.mutable.ListBuffer[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0l) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        return (odd.toList(), even.toList())\n    }\n\n    def isPalindrome(n : Long) : Boolean = {\n        val s = \"\" + n\n        val i = 0\n        val j = s.length() - 1\n        while (i < j) {\n            if (s.charAt(i) != s.charAt(j)) {\n                return false\n            }\n            i = i + 1\n            j = j - 1\n        }\n        return true",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val p = Int.div(i, 2)\n            if (p.isEven()) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)",
    "        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        return tuple(even.toList, odd.toList)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome2(i)) {\n                if (i % 2l == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        return tuple(even.toList, odd.toList)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isEven(i)) {\n                even += 1L\n            } else {\n                odd += 1L\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isEven(i)) {\n                even += 1L\n            } else {\n                odd += 1L\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        val evenList = even.toSeq().toList()\n        val oddList = odd.toSeq().toList()\n        val evenTuple = Tuple2(evenCount, oddCount)\n        val oddTuple = Tuple2(oddCount, evenCount)\n        return (evenTuple, oddTuple)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1",
    "        val odd = mutable.List[Long]()\n        val even = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindromeLength = mutable.Long()\n        val evenPalindromeLength = mutable.Long()\n        val oddPalindromeCount = mutable.Long()\n        val evenPalindromeCount = mutable.Long()\n        val oddPalindromeSum = mutable.Long()\n        val evenPalindromeSum = mutable.Long()\n        val oddPalindromeMax = mutable.Long()\n        val evenPalindromeMax = mutable.Long()\n        val oddPalindromeMin = mutable.Long()\n        val evenPalindromeMin = mutable.Long()\n        val oddPalindromeMaxLength = mutable.Long()\n        val evenPalindromeMaxLength = mutable.Long()\n        val oddPalindromeMinLength = mutable.Long()\n        val evenPalindromeMinLength = mutable.Long()\n        val oddPalindromeMaxSum = mutable.Long()\n        val evenPalindromeMaxSum = mutable.Long()\n        val oddPalindromeMinSum = mutable.Long()\n        val evenPalindromeMinSum = mutable.Long()\n        val oddPalindromeMaxSumLength = mutable.Long()\n        val evenPalindromeMaxSumLength = mutable.Long()\n        val oddPalindromeMinSumLength = mutable.Long()\n        val evenPalindromeMinSumLength = mutable.Long()\n        val oddPalindromeMaxSumSquare = mutable.Long()\n        val evenPalindromeMaxSumSquare = mutable.Long()\n        val oddPalindromeMinSumSquare = mutable.Long()\n        val evenPalindromeMinSumSquare = mutable.Long()\n        val oddPalindromeMaxSumSquareLength = mutable.Long()\n        val evenPalindromeMaxSumSquareLength = mutable.Long()\n        val oddPalindromeMinSumSquareLength = mutable.Long()\n        val evenPalindromeMinSumSquareLength = mutable.Long",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val nn = i * i\n            if (nn % 2 == 0) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)",
    "        val even = 0l\n        val odd = 0l\n        val max = n\n        for (i <- 1l to max) {\n            if (isEven(i)) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val isPalindrome = true\n            for (j <- 1l to i) {\n                if (i % j != 0) {\n                    isPalindrome = false\n                    break\n                }\n            }\n            if (isPalindrome) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        for (i <- 1 to n) {\n            val isEven = i % 2 == 0\n            if (isEven) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        val evenPalindrome = even.zip(odd).map(x => x._1() * x._2()).toSeq\n        val oddPalindrome = odd.zip(even).map(x => x._1() * x._2()).toSeq\n        val evenPalindromeCount = evenPalindrome.length()\n        val oddPalindromeCount = oddPalindrome.length()\n        val result = (evenPalindromeCount, oddPalindromeCount)\n        return result",
    "        val even = 0\n        val odd = 0\n        for (i <- 1 to n) {\n            if (isEven(i)) {\n                even += 1\n            } else {\n                odd += 1\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0\n        val odd = 0\n        for (i <- 1 to n) {\n            if (isEven(i)) {\n                even += 1\n            } else {\n                odd += 1\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length\n        val oddCount = odd.length\n        val evenTuple = mutable.List[Tuple2[Long, Long]]()\n        val oddTuple = mutable.List[Tuple2[Long, Long]]()\n        for (i <- even.range(0, evenCount)) {\n            evenTuple.append(Tuple2(even[i], odd[i]))\n        }\n        for (i <- odd.range(0, oddCount)) {\n            oddTuple.append(Tuple2(even[i], odd[i]))\n        }\n        val evenTuple2 = evenTuple.toSeq\n        val oddTuple2 = oddTuple.toSeq\n        val evenTuple3 = evenTuple2.toBuffer\n        val oddTuple3 = oddTuple2.toBuffer\n        val evenTuple4 = evenTuple3.toList\n        val oddTuple4 = oddTuple3.toList\n        val evenTuple5 = evenTuple4.toSeq\n        val oddTuple5 = oddTuple4.toSeq\n        val evenTuple6 = evenTuple5.toBuffer\n        val oddTuple6 = oddTuple5.toBuffer\n        val evenTuple7 = evenTuple6.toList\n        val oddTuple7 = oddTuple6.toList\n        val evenTuple8 = evenTuple7.toSeq\n        val oddTuple8 = oddTuple7.toSeq\n        val evenTuple9 = evenTuple8.toBuffer\n        val oddTuple9 = oddTuple8.toBuffer\n        val evenTuple10 = evenTuple9.toList\n        val oddTuple10 = oddTuple",
    "        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return Tuple2(even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return Tuple2(even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val isPalindrome = scala.math.isPalindrome(i)\n            if (isPalindrome) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = 0\n        val odd = 0\n        for (i <- 1 to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0\n        val odd = 0\n        for (i <- 1 to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example",
    "        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val isPalindrome = isPalindrome(i)\n            if (isPalindrome) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val isPalindrome = isPalindrome2(i)\n            if (isPalindrome) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length\n        val oddCount = odd.length\n        val evenTuple = mutable.List[Tuple2[Long, Long]]()\n        val oddTuple = mutable.List[Tuple2[Long, Long]]()\n        for (i <- even.range(0, evenCount)) {\n            val evenTuple1 = Tuple2(even[i], odd[i])\n            for (j <- odd.range(i + 1, oddCount)) {\n                val oddTuple1 = Tuple2(even[j], odd[j])\n                evenTuple.append(evenTuple1)\n                oddTuple.append(oddTuple1)\n            }\n        }\n        val evenTuple2 = evenTuple.toSeq\n        val oddTuple2 = oddTuple.toSeq\n        return Tuple2(evenTuple2.length, oddTuple2.length)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val num = i\n            val isPalindrome = num == reverse(num)\n            if (isPalindrome) {\n                if (num % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        return tuple(even.toSeq, odd.toSeq)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        return tuple(even.toSeq, odd.toSeq)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalind",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            val p = scala.math.pow(2, i)\n            if (p % 2 == 0) {\n                even += 1L\n            } else {\n                odd += 1L\n            }\n        }\n        return (even, odd)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        for (i <- even.range(0, evenCount)) {\n            for (j <- odd.range(0, oddCount)) {\n                if (isPalindrome(even.apply(i) + odd.apply(j))) {\n                    evenPalindrome.append(even.apply(i) + odd.apply(j))\n                }\n            }\n        }\n        return (evenCount, oddCount)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i =",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return the number of integer palindromes that fall\n    // within the range(1, n), inclusive.\n    // Example 1:\n    // >>> palindrome((3l))\n    // 3\n    // Explanation:\n    // Integer palindrome are 1, 2, 3.\n    // Example 2:\n    // >>> palindrome((12l))\n    // 9\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    def palindrome(n : Long) : Long = {\n        val result = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                result += 1l\n            }\n        }\n        return result\n    }\n\n    // Given a positive integer n, return the number of integer palindromes that fall\n    // within the range(1, n), inclusive.\n    // Example 1:\n    // >>> palindrome((3l))\n    // 3\n    // Explanation:\n    // Integer palindrome are 1, 2, 3.\n    // Example 2:\n    // >>> palindrome((12l))\n    // 9\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    def isPalindrome(n : Long) : Boolean = {\n        val result = false\n        for (i <- 1l to n) {\n            if (n == i) {\n                result = true\n                break\n            } else if (n < i) {\n                break\n            } else if",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val isPalindrome = isPalindrome(i)\n            if (isPalindrome) {\n                if (i % 2l == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val isPalindrome = isPalindrome2(i)\n            if (isPalindrome) {\n                if (i % 2l == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2",
    "        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return the number of integer palindromes that fall within\n    // the range(1, n), inclusive.\n    // Example 1:\n    // >>> palindrome((3l))\n    // 2\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. two of them are palindrome.\n    // Example 2:\n    // >>> palindrome((12l))\n    // 6\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. six of them are palindrome.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned value is the number of integer palindromes that fall within the range(1, n), inclusive.\n    def palindrome(n : Long) : Long = {\n        val result = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                result += 1l\n            }\n            i += 1l\n        }\n        return result\n    }\n\n    // Given a positive integer n, return the number of integer palindromes that fall within\n    // the range(1, n), inclusive.\n    // Example 1:\n    // >>> palindrome2((3l))\n    // 2\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. two of them are palindrome.\n    // Example 2:\n    // >>> palindrome2((12l))\n    // 6\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. six of them are palindrome.\n    // Note:",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val nn = i * i\n            if (nn % 2 == 0) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        val evenList = even.toSeq().toList()\n        val oddList = odd.toSeq().toList()\n        val evenTuple = Tuple2(evenCount, oddCount)\n        val oddTuple = Tuple2(oddCount, evenCount)\n        return (evenTuple, oddTuple)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1",
    "        val even = 0\n        val odd = 0\n        for (i <- 1 to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0\n        val odd = 0\n        for (i <- 1 to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val isPalindrome = scala.math.isPalindrome(i)\n            if (isPalindrome) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n            i += 1\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n            i += 1\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val p = Int.div(i, 2)\n            if (p * 2 == i) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val num = i\n            val isPalindrome = num == reverse(num)\n            if (isPalindrome) {\n                if (num % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1 to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1 to n) {\n            if (isPalindrome2(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd",
    "        val odd = 0l\n        val even = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n            i += 1\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val odd = 0l\n        val even = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n            i += 1\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome2(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even,",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        for (i <- even.range(0, evenCount)) {\n            for (j <- odd.range(0, oddCount)) {\n                if (isPalindrome(even.get(i) + odd.get(j))) {\n                    evenPalindrome.append(even.get(i) + odd.get(j))\n                }\n            }\n        }\n        val evenPalindromeCount = evenPalindrome.length()\n        val oddPalindromeCount = oddPalindrome.length()\n        return (evenPalindromeCount, oddPalindromeCount)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        for (i <- 1 to n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        val evenPalindrome = even.map(i -> i).toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().toSeq().toMap(i -> i).values().",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isEven(i)) {\n                even += 1L\n            } else {\n                odd += 1L\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isEven(i)) {\n                even += 1L\n            } else {\n                odd += 1L\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val n = i\n            if (n % 2 == 0) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        for (i <- 1 to n) {\n            val isEven = i % 2 == 0\n            if (isEven) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        val evenPalindrome = even.map(i -> i).toSeq().toList().toSeq()\n        val oddPalindrome = odd.map(i -> i).toSeq().toList().toSeq()\n        val evenPalindromeLength = evenPalindrome.length()\n        val oddPalindromeLength = oddPalindrome.length()\n        val evenPalindromeCount = evenPalindromeLength / 2\n        val oddPalindromeCount = oddPalindromeLength / 2\n        val evenPalindromeCount = evenPalindromeCount + oddPalindromeCount\n        val oddPalindromeCount = oddPalindromeCount\n        val evenPalindrome = evenPalindrome.toSeq().toList().toSeq()\n        val oddPalindrome = oddPalindrome.toSeq().toList().toSeq()\n        val evenPalindrome = evenPalindrome.toSeq().toList().toSeq()\n        val oddPalindrome = oddPalindrome.toSeq().toList().toSeq()\n        val evenPalindrome = evenPalindrome.toSeq().toList().toSeq()\n        val oddPalindrome = oddPalindrome.toSeq().toList().toSeq()\n        val evenPalindrome = evenPalindrome.toSeq().toList().toSeq()\n        val oddPalindrome = oddPalindrome.toSeq().toList().toSeq()\n        val evenPalindrome = evenPalindrome.toSeq().toList().toSeq()\n        val oddPalindrome = oddPalindrome.toSeq().toList().toSeq()\n        val evenPalindrome = evenPalindrome.toSeq().to",
    "        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome2(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        for (i <- 1 to n) {\n            val num = i\n            val isEven = num % 2 == 0\n            if (isEven) {\n                even.append(num)\n            } else {\n                odd.append(num)\n            }\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        for (i <- 0 to evenCount) {\n            val num = even.apply(i)\n            val isPalindrome = num == reverse(num)\n            if (isPalindrome) {\n                evenPalindrome.append(num)\n            }\n        }\n        for (i <- 0 to oddCount) {\n            val num = odd.apply(i)\n            val isPalindrome = num == reverse(num)\n            if (isPalindrome) {\n                oddPalindrome.append(num)\n            }\n        }\n        return (evenCount, oddCount)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        return Tuple2(even.length(), odd.length())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        return Tuple2(even.length(), odd.length())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindrom",
    "        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n            i += 1\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n            i += 1\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        return (even.length(), odd.length())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        return (even.length(), odd.length())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val num = i\n            val isPalindrome = num == reverse(num)\n            if (isPalindrome) {\n                if (num % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length\n        val oddCount = odd.length\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        for (i <- even.range(0, evenCount)) {\n            if (isPalindrome(even.apply(i))) {\n                evenPalindrome.append(even.apply(i))\n            }\n        }\n        for (i <- odd.range(0, oddCount)) {\n            if (isPalindrome(odd.apply(i))) {\n                oddPalindrome.append(odd.apply(i))\n            }\n        }\n        val evenPalindromeCount = evenPalindrome.length\n        val oddPalindromeCount = oddPalindrome.length\n        return (evenPalindromeCount, oddPalindromeCount)",
    "        val even = 0L\n        val odd = 0L\n        val i = 1L\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n            i += 1L\n        }\n        return Tuple(even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        val i = 1L\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n            i += 1L\n        }\n        return Tuple(even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    //",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val isPalindrome = isPalindrome(i)\n            if (isPalindrome) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val isPalindrome = isPalindrome2(i)\n            if (isPalindrome) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val nInt = n.intValue()\n        for (i <- 1 to nInt) {\n            val num = i\n            if (num % 2 == 0) {\n                even.append(num)\n            } else {\n                odd.append(num)\n            }\n        }\n        val evenInt = even.toSeq.map(x => x.intValue()).toSeq\n        val oddInt = odd.toSeq.map(x => x.intValue()).toSeq\n        val evenIntSeq = evenInt.toSeq\n        val oddIntSeq = oddInt.toSeq\n        val evenIntSeqLength = evenIntSeq.length\n        val oddIntSeqLength = oddIntSeq.length\n        val evenIntSeqLengthMinusOne = evenIntSeqLength - 1\n        val oddIntSeqLengthMinusOne = oddIntSeqLength - 1\n        val evenIntSeqLengthMinusTwo = evenIntSeqLength - 2\n        val oddIntSeqLengthMinusTwo = oddIntSeqLength - 2\n        val evenIntSeqLengthMinusThree = evenIntSeqLength - 3\n        val oddIntSeqLengthMinusThree = oddIntSeqLength - 3\n        val evenIntSeqLengthMinusFour = evenIntSeqLength - 4\n        val oddIntSeqLengthMinusFour = oddIntSeqLength - 4\n        val evenIntSeqLengthMinusFive = evenIntSeqLength - 5\n        val oddIntSeqLengthMinusFive = oddIntSeqLength - 5\n        val evenIntSeqLengthMinusSix = evenIntSeqLength - 6\n        val oddIntSeqLengthMinusSix = oddIntSeqLength - 6\n        val evenIntSeqLengthMinusSeven = evenIntSeqLength - 7\n        val oddIntSeqLengthMinusSeven = oddIntSeqLength - 7\n        val evenIntSeqLengthMinusEight = evenIntSeqLength - 8\n        val oddIntSeqLengthMinusEight = oddIntSeqLength - 8\n        val evenIntSeqLength",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isEven(i)) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)\n    }\n\n    def isEven(n : Long) : Boolean = {\n        val n2 = n / 2l\n        return n2 * 2l == n",
    "        val even = mutable.Queue[Long]()\n        val odd = mutable.Queue[Long]()\n        val evenPalindrome = mutable.Queue[Long]()\n        val oddPalindrome = mutable.Queue[Long]()\n        val evenCount = mutable.Queue[Long]()\n        val oddCount = mutable.Queue[Long]()\n        val evenPalindromeCount = mutable.Queue[Long]()\n        val oddPalindromeCount = mutable.Queue[Long]()\n        val i = 1l\n        while(i <= n) {\n            if(isEven(i)) {\n                even.enqueue(i)\n                evenPalindrome.enqueue(i)\n                evenCount.enqueue(1l)\n                evenPalindromeCount.enqueue(1l)\n            } else {\n                odd.enqueue(i)\n                oddPalindrome.enqueue(i)\n                oddCount.enqueue(1l)\n                oddPalindromeCount.enqueue(1l)\n            }\n            i = i + 1l\n        }\n        val evenLength = even.length()\n        val oddLength = odd.length()\n        val evenPalindromeLength = evenPalindrome.length()\n        val oddPalindromeLength = oddPalindrome.length()\n        val evenCountLength = evenCount.length()\n        val oddCountLength = oddCount.length()\n        val evenPalindromeCountLength = evenPalindromeCount.length()\n        val oddPalindromeCountLength = oddPalindromeCount.length()\n        val evenCountLengthPlusOne = evenCountLength + 1l\n        val oddCountLengthPlusOne = oddCountLength + 1l\n        val evenPalindromeCountLengthPlusOne = evenPalindromeCountLength + 1l\n        val oddPalindromeCountLengthPlusOne = oddPalindromeCountLength + 1l\n        val evenLengthPlusOne = evenLength + 1l\n        val oddLengthPlusOne = oddLength + 1l\n        val evenPalindromeLengthPlusOne = evenPalindromeLength + 1l\n        val oddPalindromeLengthPlusOne = oddPalindromeLength + 1l\n        val evenCountLengthPlusOne",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome2(i)) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            val num = i\n            if (num % 2 == 0) {\n                even += 1L\n            } else {\n                odd += 1L\n            }\n            if (num % 2 == 0 && num % 3 == 0) {\n                even -= 1L\n            } else if (num % 2 == 0 && num % 5 == 0) {\n                odd -= 1L\n            } else if (num % 3 == 0 && num % 5 == 0) {\n                even -= 1L\n            } else if (num % 2 == 0 && num % 7 == 0) {\n                odd -= 1L\n            } else if (num % 3 == 0 && num % 7 == 0) {\n                even -= 1L\n            } else if (num % 5 == 0 && num % 7 == 0) {\n                odd -= 1L\n            }\n        }\n        return (even, odd)",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            val p = _.product(i)\n            if (p % 2 == 0) {\n                even += 1L\n            } else {\n                odd += 1L\n            }\n        }\n        return (even, odd)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        for (i <- 1 to n) {\n            val isPalindrome = (i * i) == i\n            if (isPalindrome) {\n                odd.append(i)\n            } else {\n                even.append(i)\n            }\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        return (evenCount, oddCount)",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isEven(i)) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isEven(i)) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l",
    "        val even = 0L\n        val odd = 0L\n        val i = 1L\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n            i += 1L\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        val i = 1L\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n            i += 1L\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            val isPalindrome = scala.math.isPalindrome(i)\n            if (isPalindrome) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n            i += 1\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n            i += 1\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val num = i\n            val isPalindrome = num == reverse(num)\n            if (isPalindrome) {\n                if (num % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        for (i <- 1 to n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n        }\n        val evenCount = even.length\n        val oddCount = odd.length\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        for (i <- 0 to evenCount - 1) {\n            for (j <- 0 to oddCount - 1) {\n                if (even[i] == odd[j]) {\n                    evenPalindrome.append(even[i])\n                    oddPalindrome.append(odd[j])\n                }\n            }\n        }\n        return (evenPalindrome.length, oddPalindrome.length)",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val nInt = n.toInt\n        for (i <- 1 to nInt) {\n            val num = i\n            if (num % 2 == 0) {\n                even.append(num)\n            } else {\n                odd.append(num)\n            }\n        }\n        val evenInt = even.toSeq.map(x => x.toInt).toSeq\n        val oddInt = odd.toSeq.map(x => x.toInt).toSeq\n        val evenIntList = evenInt.toList\n        val oddIntList = oddInt.toList\n        val evenIntSeq = evenIntList.toSeq\n        val oddIntSeq = oddIntList.toSeq\n        val evenIntSeqList = evenIntSeq.toList\n        val oddIntSeqList = oddIntSeq.toList\n        val evenIntSeqSeq = evenIntSeqList.toSeq\n        val oddIntSeqSeq = oddIntSeqList.toSeq\n        val evenIntSeqSeqList = evenIntSeqSeq.toList\n        val oddIntSeqSeqList = oddIntSeqSeq.toList\n        val evenIntSeqSeqSeq = evenIntSeqSeqList.toSeq\n        val oddIntSeqSeqSeq = oddIntSeqSeqList.toSeq\n        val evenIntSeqSeqSeqList = evenIntSeqSeqSeq.toList\n        val oddIntSeqSeqSeqList = oddIntSeqSeqSeq.toList\n        val evenIntSeqSeqSeqSeq = evenIntSeqSeqSeqList.toSeq\n        val oddIntSeqSeqSeqSeq = oddIntSeqSeqSeqList.toSeq\n        val evenIntSeqSeqSeqSeqList = evenIntSeqSeqSeqSeq.toList\n        val oddIntSeqSeqSeqSeqList = oddIntSeqSeqSeqSeq.toList\n        val evenInt",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        for (i <- even.range(0, evenCount)) {\n            for (j <- odd.range(0, oddCount)) {\n                if (isPalindrome(even.apply(i) + odd.apply(j))) {\n                    evenPalindrome.append(even.apply(i) + odd.apply(j))\n                }\n            }\n        }\n        return (evenCount, oddCount)",
    "        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        return Tuple2(even.toList().length, odd.toList().length)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        return Tuple2(even.toList().length, odd.toList().length)\n    }\n\n    // Given a positive integer n,",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val max = n.toInt\n        for (i <- 1 to max) {\n            val num = i.toInt\n            if (num % 2 == 0) {\n                even.append(num)\n            } else {\n                odd.append(num)\n            }\n        }\n        val evenCount = even.length\n        val oddCount = odd.length\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        for (i <- 0 to evenCount - 1) {\n            for (j <- 0 to oddCount - 1) {\n                if (even[i] == odd[j]) {\n                    evenPalindrome.append(even[i])\n                    oddPalindrome.append(odd[j])\n                }\n            }\n        }\n        return (evenPalindrome.length, oddPalindrome.length)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        val evenList = even.toSeq().toList()\n        val oddList = odd.toSeq().toList()\n        val evenTuple = Tuple2(evenCount, oddCount)\n        val oddTuple = Tuple2(oddCount, evenCount)\n        return (evenTuple, oddTuple)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        return Tuple2(evenCount, oddCount)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val n = n.toInt\n        for (i <- 1 to n) {\n            val num = i.toInt\n            if (num % 2 == 0) {\n                even.append(num)\n            } else {\n                odd.append(num)\n            }\n        }\n        val evenCount = even.length\n        val oddCount = odd.length\n        val evenList = even.toSeq\n        val oddList = odd.toSeq\n        val evenSeq = evenList.toSeq\n        val oddSeq = oddList.toSeq\n        val evenSeqIterator = evenSeq.iterator\n        val oddSeqIterator = oddSeq.iterator\n        for (evenSeqIterator.hasNext) {\n            val evenSeqElement = evenSeqIterator.next\n            val oddSeqElement = oddSeqIterator.next\n            if (evenSeqElement.equals(oddSeqElement)) {\n                oddCount -= 1\n            }\n        }\n        val evenListIterator = evenList.iterator\n        val oddListIterator = oddList.iterator\n        for (evenListIterator.hasNext) {\n            val evenListElement = evenListIterator.next\n            val oddListElement = oddListIterator.next\n            if (evenListElement.equals(oddListElement)) {\n                oddCount -= 1\n            }\n        }\n        val evenCountIterator = evenCount.iterator\n        val oddCountIterator = oddCount.iterator\n        for (evenCountIterator.hasNext) {\n            val evenCountElement = evenCountIterator.next\n            val oddCountElement = oddCountIterator.next\n            if (evenCountElement.equals(oddCountElement)) {\n                oddCount -= 1\n            }\n        }\n        val evenCountIterator2 = evenCount.iterator\n        val oddCountIterator2 = oddCount.iterator\n        for (evenCountIterator2.hasNext) {\n            val evenCountElement = evenCountIterator2.next\n            val oddCountElement = oddCountIterator2.next\n            if (evenCountElement.equals(oddCountElement)) {\n                oddCount -= 1",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = 0L\n        val odd = 0L\n        val i = 1L\n        while (i <= n) {\n            if (isEven(i)) {\n                even += 1L\n            } else {\n                odd += 1L\n            }\n            i += 1L\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        val i = 1L\n        while (i <= n) {\n            if (isEven(i)) {\n                even += 1L\n            } else {\n                odd += 1L\n            }\n            i += 1L\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        return (even.length(), odd.length())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        return (even.length(), odd.length())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isEven(i)) {\n                even += 1L\n            } else {\n                odd += 1L\n            }\n        }\n        return (even, odd)",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val n = i\n            if (n % 2 == 0) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n            if (n % 2 == 0) {\n                odd -= 1l\n            } else {\n                even -= 1l\n            }\n        }\n        val evens = even\n        val odds = odd\n        return (evens, odds)",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            val isPalindrome = scala.math.isPalindrome(i)\n            if (isPalindrome) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome2(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even,",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome2(i)) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        for (i <- 1 to n) {\n            val num = i\n            if (num % 2 == 0) {\n                even.append(num)\n            } else {\n                odd.append(num)\n            }\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        for (i <- 0 to evenCount - 1) {\n            for (j <- 0 to oddCount - 1) {\n                if (even[i] == odd[j]) {\n                    evenPalindrome.append(even[i])\n                    oddPalindrome.append(odd[j])\n                }\n            }\n        }\n        return (evenPalindrome.length(), oddPalindrome.length())",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val isPalindrome = isPalindrome(i)\n            if (isPalindrome) {\n                if (i % 2l == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        return (evenCount, oddCount)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        return (evenCount, oddCount)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome2(i)) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val evenOdd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        for (i <- even.toSeq) {\n            for (j <- odd.toSeq) {\n                if (i + j <= n) {\n                    evenOdd.append(i + j)\n                }\n            }\n        }\n        return Tuple2(even.length, odd.length)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val evenOdd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }",
    "        val even = scala.collection.mutable.ListBuffer[Long]()\n        val odd = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 1 until n) {\n            val p = i\n            if (p % 2 == 0) {\n                even.append(p)\n            } else {\n                odd.append(p)\n            }\n        }\n        val evens = even.toList\n        val odds = odd.toList\n        val evenCount = evens.length\n        val oddCount = odds.length\n        return (evenCount, oddCount)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        return (even.length(), odd.length())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        return (even.length(), odd.length())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        for (i <- 1 to n) {\n            val isEven = i % 2 == 0\n            if (isEven) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        val evenPalindrome = even.zip(odd).map(x => x._1.toString.contains(x._2.toString)).reduce(0l, (a, b) => a + b)\n        val oddPalindrome = odd.zip(even).map(x => x._1.toString.contains(x._2.toString)).reduce(0l, (a, b) => a + b)\n        val result = (evenCount, oddCount)\n        return result",
    "        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        return (even.length(), odd.length())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        return (even.length(), odd.length())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1",
    "        val odd = 0l\n        val even = 0l\n        for (i <- 1l to n) {\n            val p = _.isPalindrome(i)\n            if (p) {\n                if (p) {\n                    odd += 1l\n                } else {\n                    even += 1l\n                }\n            }\n        }\n        return (odd, even)",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val isPalindrome = scala.math.isPalindrome(i)\n            if (isPalindrome) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        val evenList = even.toSeq().toList()\n        val oddList = odd.toSeq().toList()\n        val evenTuple = Tuple2(evenCount, oddCount)\n        val oddTuple = Tuple2(oddCount, evenCount)\n        return (evenTuple, oddTuple)",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them",
    "        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n        }\n        val evens = even.toList\n        val odds = odd.toList\n        val evensCount = evens.length\n        val oddsCount = odds.length\n        val evensCountEven = evensCount / 2\n        val oddsCountEven = oddsCount / 2\n        val evensCountOdd = evensCount - evensCountEven\n        val oddsCountOdd = oddsCount - oddsCountEven\n        val evens = evens.take(evensCountEven)\n        val odds = odds.take(oddsCountOdd)\n        val evensCount = evensCountEven\n        val oddsCount = oddsCountOdd\n        val evens = evens.zip(odds).map(t => t._1 + t._2).toList\n        val odds = odds.zip(evens).map(t => t._1 + t._2).toList\n        val evensCount = evensCountEven\n        val oddsCount = oddsCountOdd\n        val evens = evens.take(evensCount).toList\n        val odds = odds.take(oddsCount).toList\n        val evensCountEven = evensCountEven\n        val oddsCountOdd = oddsCountOdd\n        val evens = evens.zip(odds).map(t => t._1 + t._2).toList\n        val odds = odds.zip(evens).map(t => t._1 + t._2).toList\n        val evensCount = evensCountEven\n        val oddsCount = oddsCountOdd\n        val evens = evens.take(evensCount).toList\n        val odds = odds.take(oddsCount).toList\n        val evensCountEven = evensCountEven\n        val oddsCountOdd = oddsCountOdd\n        val evens = evens.zip(odds).map(t => t._1 + t._2).toList",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        return (even.toSeq, odd.toSeq)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        return (even.toSeq, odd.toSeq)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((",
    "        val even = 0\n        val odd = 0\n        for (i <- 1 to n) {\n            val p = _.toInt(i)\n            if (p % 2 == 0) {\n                even += 1\n            } else {\n                odd += 1\n            }\n        }\n        return (even, odd)",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isEven(i)) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isEven(i)) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val num = i\n            val isPalindrome = num == reverse(num)\n            if (isPalindrome) {\n                if (num % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length\n        val oddCount = odd.length\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        for (i <- even.range(0, evenCount)) {\n            if (isPalindrome(even.apply(i))) {\n                evenPalindrome.append(even.apply(i))\n            }\n        }\n        for (i <- odd.range(0, oddCount)) {\n            if (isPalindrome(odd.apply(i))) {\n                oddPalindrome.append(odd.apply(i))\n            }\n        }\n        return (evenCount, oddCount)",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n        val max = n.toInt\n        for i in 1 to max {\n            val num = i.toInt\n            if num % 2 == 0 {\n                even.append(num)\n            } else {\n                odd.append(num)\n            }\n        }\n        val evenList = even.toList\n        val oddList = odd.toList\n        val evenCount = evenList.length\n        val oddCount = oddList.length\n        val evenTuple = (evenCount, oddCount)\n        return evenTuple",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome2(i)) {\n                if (i % 2l == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is",
    "        val even = 0L\n        val odd = 0L\n        val i = 1L\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n            i += 1L\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        val i = 1L\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n            i += 1L\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome(i)) {\n                if (i % 2L == 0L) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome(i)) {\n                if (i % 2L == 0L) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them",
    "        val even = 0\n        val odd = 0\n        for (i <- 1 to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0\n        val odd = 0\n        for (i <- 1 to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        return (evenCount, oddCount)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        return (evenCount, oddCount)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that",
    "        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n            i += 1\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n            i += 1\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome",
    "        val odd = 0l\n        val even = 0l\n        for (i <- 1l to n) {\n            val num = i\n            val isPalindrome = num == reverse(num)\n            if (isPalindrome) {\n                if (num % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        val result = (even, odd)\n        return result",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        val evenPalindromeCount = mutable.Long(0)\n        val oddPalindromeCount = mutable.Long(0)\n        val i = mutable.Long(0)\n        while (i < n) {\n            i = i + 1\n            val j = mutable.Long(i)\n            while (j < n) {\n                j = j + 1\n                if (isPalindrome(i) && isPalindrome(j)) {\n                    if (i % 2 == 0) {\n                        even.append(i)\n                        evenPalindrome.append(j)\n                        evenPalindromeCount = evenPalindromeCount + 1\n                    } else {\n                        odd.append(i)\n                        oddPalindrome.append(j)\n                        oddPalindromeCount = oddPalindromeCount + 1\n                    }\n                }\n            }\n        }\n        return (evenPalindromeCount, oddPalindromeCount)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            val isPalindrome = true\n            for (j <- 1L to i) {\n                if (i % j != 0) {\n                    isPalindrome = false\n                    break\n                }\n            }\n            if (isPalindrome) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome(i)) {\n                if (i % 2L == 0L) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return the sum of the first n odd integer palindromes.\n    // Example 1:\n    // >>> oddPalindromeSum(3l)\n    // 6l\n    // Explanation:\n    // The odd palindromes are 1, 3, 5, 7, 9, 11, ..., so the sum is 6.\n    // Example 2:\n    // >>> oddPalindromeSum(12l)\n    // 23l\n    // Explanation:\n    // The odd palindromes are 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, ..., so the sum is 23.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned value is the sum of the first n odd palindromes.\n    def oddPalindromeSum(n : Long) : Long = {\n        val sum = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome(i)) {\n                sum += i\n            }\n        }\n        return sum\n    }\n\n    // Given a positive integer n, return the number of the first n odd integer palindromes.\n    // Example 1:\n    // >>> oddPalindromeCount(3l)\n    // 2\n    // Explanation:\n    // The odd palindromes are 1, 3, 5, 7, 9, 11, ..., so the number is 2.\n    // Example 2:\n    // >>> oddPalindromeCount(12l)\n    // 5\n    // Explanation:\n    // The odd palindromes are 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, ..., so the number is 5.\n    // Note:\n    // 1. 1 <= n <=",
    "        val odd = mutable.List[Long]()\n        val even = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length\n        val oddCount = odd.length\n        val evenList = even.toSeq\n        val oddList = odd.toSeq\n        val evenTuple = (evenCount, oddCount)\n        val oddTuple = (oddCount, evenCount)\n        return (evenTuple, oddTuple)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val odd = mutable.List[Long]()\n        val even = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even.append(i)\n                } else {\n                    odd.append",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            val isPalindrome = scala.math.isPalindrome(i)\n            if (isPalindrome) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return Tuple2(even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return Tuple2(even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n",
    "        val odd = scala.collection.mutable.ListBuffer[Long]()\n        val even = scala.collection.mutable.ListBuffer[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        return (odd.toList().toSeq(), even.toList().toSeq())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val odd = scala.collection.mutable.ListBuffer[Long]()\n        val even = scala.collection.mutable.ListBuffer[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome2(i)) {\n                if (i % 2l == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        return (odd.toList().toSe",
    "        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        val evenList = even.toList\n        val oddList = odd.toList\n        return (evenList.length, oddList.length)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome2(i)) {\n                if (i % 2 == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        val evenList = even.toList\n        val oddList = odd.toList\n",
    "        val odd = scala.collection.mutable.ListBuffer[Long]()\n        val even = scala.collection.mutable.ListBuffer[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0l) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        val evens = even.toList\n        val odds = odd.toList\n        val evensCount = evens.length\n        val oddsCount = odds.length\n        val evensCountPlusOne = evensCount + 1\n        val oddsCountPlusOne = oddsCount + 1\n        val evensCountPlusOneAndOddsCountPlusOne = evensCountPlusOne + oddsCountPlusOne\n        val evensCountPlusOneAndOddsCountPlusOneAndOne = evensCountPlusOneAndOddsCountPlusOne + 1\n        val evensCountPlusOneAndOddsCountPlusOneAndOneAndOne = evensCountPlusOneAndOddsCountPlusOneAndOne + 1\n        val evensCountPlusOneAndOddsCountPlusOneAndOneAndOneAndOne = evensCountPlusOneAndOddsCountPlusOneAndOneAndOne + 1\n        val evensCountPlusOneAndOddsCountPlusOneAndOneAndOneAndOneAndOne = evensCountPlusOneAndOddsCountPlusOneAndOneAndOneAndOne + 1\n        val evensCountPlusOneAndOddsCountPlusOneAndOneAndOneAndOneAndOneAndOne = evensCountPlusOneAndOddsCountPlusOneAndOneAndOneAndOneAndOne + 1\n        val evensCountPlusOneAndOddsCountPlusOneAndOneAndOneAndOneAndOneAndOneAndOne = evensCountPlusOneAndOddsCountPlusOneAndOneAndOneAndOneAndOneAndOne + 1\n        val evensCountPlusOneAndOddsCountPlusOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne = evensCountPlusOneAndOddsCountPlusOneAndOneAndOneAndOneAndOneAndOneAndOne + 1\n        val evensCountPlusOneAndOddsCount",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome(i)) {\n                if (i % 2L == 0L) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome(i)) {\n                if (i % 2L == 0L) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them",
    "        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return Tuple2(even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return Tuple2(even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        return (even.toSeq.toList, odd.toSeq.toList)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        return (even.toSeq.toList, odd.toSeq.toList)\n    }\n\n    // Given a positive integer n, return a tuple that",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        for (i <- even.range(0, evenCount)) {\n            for (j <- odd.range(0, oddCount)) {\n                if (isPalindrome(even.apply(i) + odd.apply(j))) {\n                    evenPalindrome.append(even.apply(i) + odd.apply(j))\n                }\n            }\n        }\n        return (evenCount, oddCount)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i =",
    "        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n        for (i <- 1 to n) {\n            val isEven = i % 2 == 0\n            if (isEven) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        return (evenCount, oddCount)",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them",
    "        val even = mutable.Queue[Long]()\n        val odd = mutable.Queue[Long]()\n        val evenOdd = mutable.Queue[Tuple2[Long, Long]]()\n        val evenOddPalindrome = mutable.Queue[Tuple2[Long, Long]]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.enqueue(i)\n            } else {\n                odd.enqueue(i)\n            }\n            i = i + 1l\n        }\n        while (!even.isEmpty()) {\n            val evenVal = even.dequeue()\n            val oddVal = odd.dequeue()\n            val evenOddVal = Tuple(evenVal, oddVal)\n            if (isPalindrome(evenOddVal)) {\n                evenOdd.enqueue(evenOddVal)\n            }\n            if (isEven(evenVal)) {\n                val evenOddPalindromeVal = Tuple(evenVal, oddVal)\n                if (isPalindrome(evenOddPalindromeVal)) {\n                    evenOddPalindrome.enqueue(evenOddPalindromeVal)\n                }\n            }\n            if (isOdd(oddVal)) {\n                val evenOddPalindromeVal = Tuple(evenVal, oddVal)\n                if (isPalindrome(evenOddPalindromeVal)) {\n                    evenOddPalindrome.enqueue(evenOddPalindromeVal)\n                }\n            }\n        }\n        val evenOddPalindromeTuple = evenOddPalindrome.dequeue()\n        val evenOddTuple = evenOddPalindromeTuple._1\n        val oddTuple = evenOddPalindromeTuple._2\n        return Tuple(evenOddTuple._1, oddTuple._1)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        return Tuple(even.toSeq().toList(), odd.toSeq().toList())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome2(i)) {\n                if (i % 2 == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        return Tuple(even.toSeq().toList(), odd.toSeq().toList())\n    }\n\n    // Given a positive integer n",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isEven(i)) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isEven(i)) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        val evenPalindromeCount = mutable.Long(0)\n        val oddPalindromeCount = mutable.Long(0)\n        val nInt = mutable.Long(n)\n        for (i <- 1 to nInt) {\n            val nIntI = mutable.Long(i)\n            val nIntIPlusOne = mutable.Long(nIntI + 1)\n            val nIntIPlusOneInt = mutable.Long(nIntI + 1)\n            val nIntIInt = mutable.Long(nIntI)\n            val nIntIIntPlusOne = mutable.Long(nIntI + 1)\n            val nIntIIntPlusOneInt = mutable.Long(nIntI + 1)\n            val nIntIIntInt = mutable.Long(nIntI)\n            val nIntIIntIntPlusOne = mutable.Long(nIntI + 1)\n            val nIntIIntIntPlusOneInt = mutable.Long(nIntI + 1)\n            val nIntIIntIntInt = mutable.Long(nIntI)\n            val nIntIIntIntIntPlusOne = mutable.Long(nIntI + 1)\n            val nIntIIntIntIntPlusOneInt = mutable.Long(nIntI + 1)\n            val nIntIIntIntIntInt = mutable.Long(nIntI)\n            val nIntIIntIntIntIntPlusOne = mutable.Long(nIntI + 1)\n            val nIntIIntIntIntIntPlusOneInt = mutable.Long(nIntI + 1)\n            val nIntIIntIntIntIntInt = mutable.Long(nIntI)\n            val nIntIIntIntIntIntIntPlusOne = mutable.Long(nIntI + 1)\n            val nIntIIntIntIntIntIntPlusOneInt = mutable.Long(nIntI + 1)\n            val nIntIIntIntIntIntIntInt =",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        val evenPalindromeCount = mutable.Long()\n        val oddPalindromeCount = mutable.Long()\n        val i = mutable.Long(0)\n        while (i < n) {\n            val j = mutable.Long(0)\n            while (j < i) {\n                if (i % 2 == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n                j += 1\n            }\n            val palindrome = mutable.List[Long]()\n            for (j <- odd.toSeq: mutable.Long) {\n                palindrome.append(j * 2 - 1)\n                palindrome.append(j * 2)\n            }\n            for (j <- even.toSeq: mutable.Long) {\n                palindrome.append(j * 2 - 1)\n            }\n            if (palindrome.length == 0) {\n                continue\n            }\n            if (palindrome.length == 1) {\n                evenPalindrome.append(palindrome.head)\n                oddPalindrome.append(palindrome.head)\n                evenPalindromeCount.increment()\n                oddPalindromeCount.increment()\n                continue\n            }\n            for (j <- odd.toSeq: mutable.Long) {\n                if (palindrome.contains(j)) {\n                    oddPalindrome.append(j)\n                    oddPalindromeCount.increment()\n                }\n            }\n            for (j <- even.toSeq: mutable.Long) {\n                if (palindrome.contains(j)) {\n                    evenPalindrome.append(j)\n                    evenPalindromeCount.increment()\n                }\n            }\n            i += 1\n        }\n        val evenCount = mutable.Long(evenPalindromeCount.toSeq.reduce(0l))",
    "        val odd = 0l\n        val even = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val odd = 0l\n        val even = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        val evenTuple = mutable.List[Tuple2[Long, Long]]()\n        for (i <- 0 until evenCount) {\n            evenTuple.append(Tuple(even.apply(i), odd.apply(i)))\n        }\n        val oddTuple = mutable.List[Tuple2[Long, Long]]()\n        for (i <- 0 until oddCount) {\n            oddTuple.append(Tuple(odd.apply(i), even.apply(i)))\n        }\n        val tuple = mutable.List[Tuple2[Long, Long]]()\n        tuple.append(Tuple(evenCount, oddCount))\n        tuple.append(evenTuple)\n        tuple.append(oddTuple)\n        return tuple.toSeq",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        for (i <- 1 to n) {\n            val num = i\n            if (num % 2 == 0) {\n                even.append(num)\n            } else {\n                odd.append(num)\n            }\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        for (i <- 0 to evenCount - 1) {\n            for (j <- 0 to oddCount - 1) {\n                if (even[i] == odd[j]) {\n                    evenPalindrome.append(even[i])\n                    oddPalindrome.append(odd[j])\n                }\n            }\n        }\n        return (evenCount, oddCount)",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome2(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even,",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val isPalindrome = true\n            for (j <- 1l to i) {\n                if (i % j != 0) {\n                    isPalindrome = false\n                    break\n                }\n            }\n            if (isPalindrome) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isEven(i)) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isEven(i)) {\n                even += 1l\n            } else {\n                odd += 1l\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l",
    "        val even = 0\n        val odd = 0\n        for (i <- 1 to n) {\n            val num = i\n            val isPalindrome = true\n            for (j <- 1 to num.toInt) {\n                if (num.toInt % 2 != 0 && num.toInt % 2 != j) {\n                    isPalindrome = false\n                    break\n                }\n                if (num.toInt % 2 == 0 && num.toInt % 2 != j) {\n                    isPalindrome = false\n                    break\n                }\n                if (num.toInt % 2 != 0 && num.toInt % 2 == j) {\n                    isPalindrome = false\n                    break\n                }\n            }\n            if (isPalindrome) {\n                if (num.toInt % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val isPalindrome = true\n            for (j <- 1l to i) {\n                if (i % j != 0) {\n                    isPalindrome = false\n                    break\n                }\n            }\n            if (isPalindrome) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)",
    "        val odd = 0l\n        val even = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n            i += 1\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val odd = 0l\n        val even = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n            i += 1\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome2(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even,",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        val evenList = even.toSeq().toList()\n        val oddList = odd.toSeq().toList()\n        val evenTuple = Tuple2(evenCount, oddCount)\n        val oddTuple = Tuple2(oddCount, evenCount)\n        return (evenTuple, oddTuple)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length\n        val oddCount = odd.length\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        for (i <- even.range(0, evenCount)) {\n            for (j <- odd.range(0, oddCount)) {\n                if (isPalindrome(even[i], odd[j])) {\n                    evenPalindrome.append(even[i])\n                    oddPalindrome.append(odd[j])\n                }\n            }\n        }\n        return (evenCount, oddCount)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l",
    "        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n        for (i <- 1 to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n        }\n        return (even.toList(), odd.toList())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n        for (i <- 1 to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n        }\n        return (even.toList(), odd.toList())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> even",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome2(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even,",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length\n        val oddCount = odd.length\n        val evenList = even.toSeq\n        val oddList = odd.toSeq\n        val evenTuple = (evenCount, oddCount)\n        val oddTuple = (oddCount, evenCount)\n        return (evenTuple, oddTuple)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length\n        val",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val isPalindrome = scala.math.isPalindrome(i)\n            if (isPalindrome) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = 0\n        val odd = 0\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n            i += 1l\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0\n        val odd = 0\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n            i += 1l\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1",
    "        val even = 0\n        val odd = 0\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n            i += 1\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0\n        val odd = 0\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome2(i)) {\n                if (i % 2 == 0) {\n                    even += 1\n                } else {\n                    odd += 1\n                }\n            }\n            i += 1\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1,",
    "        val even = 0L\n        val odd = 0L\n        val i = 1L\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n            i += 1L\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        val i = 1L\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n            i += 1L\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n",
    "        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        for (i <- 1L to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length\n        val oddCount = odd.length\n        return (evenCount, oddCount)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length\n        val oddCount = odd.length\n        return (evenCount, oddCount)\n    }\n\n",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val isPalindrome = scala.math.isPalindrome(i)\n            if (isPalindrome) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        for (i <- 1 to n) {\n            val num = i\n            if (num % 2 == 0) {\n                even.append(num)\n            } else {\n                odd.append(num)\n            }\n        }\n        val evenCount = even.length\n        val oddCount = odd.length\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        for (i <- 0 to evenCount) {\n            for (j <- 0 to oddCount) {\n                if (even[i] == odd[j]) {\n                    evenPalindrome.append(even[i])\n                    oddPalindrome.append(odd[j])\n                }\n            }\n        }\n        return (evenPalindrome.length, oddPalindrome.length)",
    "        val even = 0L\n        val odd = 0L\n        val i = 1L\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n            i += 1L\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        val i = 1L\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n            i += 1L\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n",
    "        val odd = 0l\n        val even = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val odd = 0l\n        val even = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        return (even.length(), odd.length())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        return (even.length(), odd.length())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isEven(i)) {\n                even.append(i)\n            } else {\n                odd.append(i)\n            }\n            i = i + 1l\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        for (i <- even.range(0, evenCount)) {\n            for (j <- odd.range(0, oddCount)) {\n                if (isPalindrome(even.apply(i).asInstanceOf[Long], odd.apply(j).asInstanceOf[Long])) {\n                    evenPalindrome.append(even.apply(i).asInstanceOf[Long])\n                    oddPalindrome.append(odd.apply(j).asInstanceOf[Long])\n                }\n            }\n        }\n        return (evenCount, oddCount)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        for (i <- 1 to n) {\n            val num = i\n            if (num % 2 == 0) {\n                even.append(num)\n            } else {\n                odd.append(num)\n            }\n        }\n        val evenCount = even.length()\n        val oddCount = odd.length()\n        val evenPalindrome = mutable.List[Long]()\n        val oddPalindrome = mutable.List[Long]()\n        for (i <- 0 to evenCount - 1) {\n            val num = even.apply(i)\n            for (j <- 0 to oddCount - 1) {\n                val num2 = odd.apply(j)\n                if (num == num2) {\n                    oddPalindrome.append(num)\n                    evenPalindrome.append(num)\n                    break\n                }\n            }\n        }\n        return (evenCount, oddCount)",
    "        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0l) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        return Tuple2(even.length(), odd.length())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = mutable.List[Long]()\n        val odd = mutable.List[Long]()\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0l) {\n                    even.append(i)\n                } else {\n                    odd.append(i)\n                }\n            }\n            i = i + 1l\n        }\n        return Tuple2(even.length(), odd.length())\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    //",
    "        val odd = 0l\n        val even = 0l\n        for (i <- 1l to n) {\n            val isPalindrome = true\n            for (j <- 1l to i) {\n                if (i % j != 0) {\n                    isPalindrome = false\n                    break\n                }\n            }\n            if (isPalindrome) {\n                odd += 1l\n            } else {\n                even += 1l\n            }\n        }\n        return (odd, even)",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val num = i\n            val isPalindrome = true\n            for (j <- 1l to num.div(2)) {\n                if (num.mod(j) != 0l) {\n                    isPalindrome = false\n                    break\n                }\n            }\n            if (isPalindrome) {\n                if (num % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        val i = 1l\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n            i += 1l\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val isPalindrome = scala.math.isPalindrome(i)\n            if (isPalindrome) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            val num = i\n            val isPalindrome = num == reverse(num)\n            if (isPalindrome) {\n                if (num % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)",
    "        val even = 0L\n        val odd = 0L\n        val i = 1L\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n            i += 1L\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0L\n        val odd = 0L\n        val i = 1L\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1L\n                } else {\n                    odd += 1L\n                }\n            }\n            i += 1L\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n",
    "        val even = mutable.Queue[Long]()\n        val odd = mutable.Queue[Long]()\n        val evenPalindrome = mutable.Queue[Long]()\n        val oddPalindrome = mutable.Queue[Long]()\n        val evenCount = mutable.Queue[Long]()\n        val oddCount = mutable.Queue[Long]()\n        val evenPalindromeCount = mutable.Queue[Long]()\n        val oddPalindromeCount = mutable.Queue[Long]()\n        val evenPalindromeCount = mutable.Queue[Long]()\n        val oddPalindromeCount = mutable.Queue[Long]()\n        val evenPalindromeCount = mutable.Queue[Long]()\n        val oddPalindromeCount = mutable.Queue[Long]()\n        val evenPalindromeCount = mutable.Queue[Long]()\n        val oddPalindromeCount = mutable.Queue[Long]()\n        val evenPalindromeCount = mutable.Queue[Long]()\n        val oddPalindromeCount = mutable.Queue[Long]()\n        val evenPalindromeCount = mutable.Queue[Long]()\n        val oddPalindromeCount = mutable.Queue[Long]()\n        val evenPalindromeCount = mutable.Queue[Long]()\n        val oddPalindromeCount = mutable.Queue[Long]()\n        val evenPalindromeCount = mutable.Queue[Long]()\n        val oddPalindromeCount = mutable.Queue[Long]()\n        val evenPalindromeCount = mutable.Queue[Long]()\n        val oddPalindromeCount = mutable.Queue[Long]()\n        val evenPalindromeCount = mutable.Queue[Long]()\n        val oddPalindromeCount = mutable.Queue[Long]()\n        val evenPalindromeCount = mutable.Queue[Long]()\n        val oddPalindromeCount = mutable.Queue[Long]()\n        val evenPalindromeCount = mutable.Queue[Long]()\n        val oddPalindromeCount = mutable.Queue[Long]()\n        val evenPalindromeCount = mutable.Queue[Long]()\n        ",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and",
    "        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome2(n : Long) : Tuple2[Long, Long] = {\n        val even = 0l\n        val odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n                if (i % 2l == 0l) {\n                    even += 1l\n                } else {\n                    odd += 1l\n                }\n            }\n        }\n        return (even, odd)\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}