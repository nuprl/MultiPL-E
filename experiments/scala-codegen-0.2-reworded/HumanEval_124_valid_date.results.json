{
  "name": "HumanEval_124_valid_date",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var dateString = date.trim()\n        var month = dateString.substring(0, 2)\n        var day = dateString.substring(3, 5)\n        var year = dateString.substring(6, 10)\n        var monthInt = Integer.parseInt(month)\n        var dayInt = Integer.parseInt(day)\n        var yearInt = Integer.parseInt(year)\n        if (monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if (dayInt < 1 || dayInt > 31) {\n            return false\n        }\n        if (monthInt == 2 && dayInt < 29) {\n            return false\n        }\n        if (monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        if (monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n            if (dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 6, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.validDate(tmppet1ghq4.scala:28)\n\tat Problem$.main(tmppet1ghq4.scala:56)\n\tat Problem.main(tmppet1ghq4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.isEmpty()) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        if(date.length() != 8) {\n            return false\n        }\n        date = date.replaceAll(\"/\", \"\")\n        if(date.length() != 6) {\n            return false\n        }\n        date = date.replaceAll(\"\\\\.\", \"\")\n        if(date.length() != 4) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        if(date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"\\\\s\", \"\")\n        if(date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"\\\\.\", \"\")\n        if(date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"\\\\-\", \"\")\n        if(date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"\\\\:\", \"\")\n        if(date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"\\\\:\", \"\")\n        if(date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"\\\\-\", \"\")\n        if(date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"\\\\-\", \"\")\n        if(date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"\\\\-\", \"\")\n        if(date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"\\\\-\", \"\")\n        if(date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"\\\\-\", \"\")\n        if(date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"\\\\-\", \"\")\n        if(date.length() != 2) {\n            return false\n        }\n        date = date.\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpijayfc_1.scala:86:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpijayfc_1.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpijayfc_1.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpijayfc_1.scala:33:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpijayfc_1.scala:37:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpijayfc_1.scala:41:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var dateString = date.trim().replaceAll(\"-\", \"\")\n        var dateArray = dateString.split(\"-\")\n        var month = dateArray[0]\n        var day = dateArray[1]\n        var year = dateArray[2]\n        if (month.length() != 2) {\n            return false\n        }\n        if (day.length() != 2) {\n            return false\n        }\n        if (year.length() != 4) {\n            return false\n        }\n        if (month.toInt() < 1 || month.toInt() > 12) {\n            return false\n        }\n        if (day.toInt() < 1 || day.toInt() > 31) {\n            if (month.toInt() == 2) {\n                if (day.toInt() < 1 || day.toInt() > 29) {\n                    return false\n                }\n            } else {\n                return false\n            }\n        }\n        if (month.toInt() == 1 || month.toInt() == 3 || month.toInt() == 5 || month.toInt() == 7 || month.toInt() == 8 || month.toInt() == 10 || month.toInt() == 12) {\n            if (day.toInt() < 1 || day.toInt() > 31) {\n                return false\n            }\n        } else if (month.toInt() == 4 || month.toInt() == 6 || month.toInt() == 9 || month.toInt() == 11) {\n            if (day.toInt() < 1 || day.toInt() > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp2ls3umup.scala:27:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateArray[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2ls3umup.scala:28:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateArray[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2ls3umup.scala:29:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateArray[\u001b[31m2\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        var dateString = date.replaceAll(\"-\", \"\")\n        var dateArray = dateString.split(\"/\")\n        if (dateArray.length != 3) {\n            return false\n        }\n        var month = Integer.parseInt(dateArray[0])\n        var day = Integer.parseInt(dateArray[1])\n        var year = Integer.parseInt(dateArray[2])\n        if (month < 1 || month > 12) {\n            return false\n        }\n        if (day < 1 || day > 31) {\n            return false\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp8cygmhlx.scala:30:46 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = Integer.parseInt(dateArray[\u001b[31m0\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8cygmhlx.scala:31:44 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = Integer.parseInt(dateArray[\u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8cygmhlx.scala:32:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = Integer.parseInt(dateArray[\u001b[31m2\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length() == 0) {\n            return false\n        }\n        if(date.length() != 10) {\n            return false\n        }\n        if(date.charAt(2) == '0') {\n            return false\n        }\n        if(date.charAt(4) == '0') {\n            return false\n        }\n        if(date.charAt(6) == '0') {\n            return false\n        }\n        if(date.charAt(8) == '0') {\n            return false\n        }\n        if(date.charAt(0) == '0') {\n            return false\n        }\n        if(date.charAt(1) == '0') {\n            return false\n        }\n        if(date.charAt(3) == '0') {\n            return false\n        }\n        if(date.charAt(5) == '0') {\n            return false\n        }\n        if(date.charAt(7) == '0') {\n            return false\n        }\n        if(date.charAt(9) == '0') {\n            return false\n        }\n        if(date.charAt(0) == '0') {\n            return false\n        }\n        if(date.charAt(1) == '0') {\n            return false\n        }\n        if(date.charAt(3) == '0') {\n            return false\n        }\n        if(date.charAt(5) == '0') {\n            return false\n        }\n        if(date.charAt(7) == '0') {\n            return false\n        }\n        if(date.charAt(9) == '0') {\n            return false\n        }\n        if(date.charAt(2) == '0') {\n            return false\n        }\n        if(date.charAt(4) == '0') {\n            return false\n        }\n        if(date.charAt(6) == '0') {\n            return false\n        }\n        if(date.charAt(8) == '0') {\n            return false\n        }\n        if(date.charAt(10) ==\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpxcc_c3o1.scala:88:29 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m        \u001b[33mif\u001b[0m(date.charAt(\u001b[31m10\u001b[0m) ==\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var dateString = date.trim()\n        var month = dateString.substring(0, 2)\n        var day = dateString.substring(3, 5)\n        var year = dateString.substring(6, 10)\n        var monthInt = Integer.parseInt(month)\n        var dayInt = Integer.parseInt(day)\n        var yearInt = Integer.parseInt(year)\n        if (monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if (monthInt == 2) {\n            if (dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        } else if (monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if (dayInt < 1 || dayInt > 31) {\n                return false\n            }\n        } else if (monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        if (yearInt < 1900 || yearInt > 2100) {\n            return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 6, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.validDate(tmpvgnb0uj_.scala:28)\n\tat Problem$.main(tmpvgnb0uj_.scala:56)\n\tat Problem.main(tmpvgnb0uj_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) return false\n        if (date.length() < 10) return false\n        if (date.length() > 10) return false\n        if (date.charAt(2) == '/') return false\n        if (date.charAt(5) == '/') return false\n        if (date.charAt(8) == '/') return false\n        if (date.charAt(0) == '0') return false\n        if (date.charAt(3) == '0') return false\n        if (date.charAt(6) == '0') return false\n        if (date.charAt(9) == '0') return false\n        if (date.charAt(1) == '0') return false\n        if (date.charAt(4) == '0') return false\n        if (date.charAt(7) == '0') return false\n        if (date.charAt(10) == '0') return false\n        if (date.charAt(11) == '0') return false\n        if (date.charAt(12) == '0') return false\n        if (date.charAt(13) == '0') return false\n        if (date.charAt(14) == '0') return false\n        if (date.charAt(15) == '0') return false\n        if (date.charAt(16) == '0') return false\n        if (date.charAt(17) == '0') return false\n        if (date.charAt(18) == '0') return false\n        if (date.charAt(19) == '0') return false\n        if (date.charAt(20) == '0') return false\n        if (date.charAt(21) == '0') return false\n        if (date.charAt(22) == '0') return false\n        if (date.charAt(23) == '0') return false\n        if (date.charAt(24) == '0') return false\n        if (date.charAt(25) == '0') return false\n        if (date.charAt(26) == '0') return false\n        if (date.charAt(27) == '0') return false\n        if\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpcyb8po3e.scala:53:10 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m        \u001b[33mif\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.isEmpty()) {\n            return false\n        }\n        var month = date.split(\"-\")[0].toInt\n        var day = date.split(\"-\")[1].toInt\n        var year = date.split(\"-\")[2].toInt\n        if(month < 1 || month > 12) {\n            return false\n        }\n        if(day < 1 || day > 31) {\n            return false\n        }\n        if(month == 2 && day > 29) {\n            return false\n        }\n        if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if(day < 1 || day > 30) {\n                return false\n            }\n        }\n        if(month == 4 || month == 6 || month == 9 || month == 11) {\n            if(day < 1 || day > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp9bblx4i5.scala:25:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9bblx4i5.scala:26:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m1\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9bblx4i5.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m2\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"/\", \"\")\n        date = date.replace(\" \", \"\")\n        date = date.replace(\".\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"/\", \"\")\n        date = date.replace(\" \", \"\")\n        date = date.replace(\".\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"/\", \"\")\n        date = date.replace(\" \", \"\")\n        date = date.replace(\".\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"/\", \"\")\n        date = date.replace(\" \", \"\")\n        date = date.replace(\".\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"/\", \"\")\n        date = date.replace(\" \", \"\")\n        date = date.replace(\".\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"/\", \"\")\n        date = date.replace(\" \", \"\")\n        date = date.replace(\".\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"/\", \"\")\n        date = date.replace(\" \", \"\")\n        date = date.replace(\".\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"/\", \"\")\n        date = date.replace(\" \", \"\")\n        date = date.replace(\".\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"/\", \"\")\n        date = date.replace(\" \", \"\")\n        date = date.replace(\".\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"/\", \"\")\n        date = date.replace(\" \", \"\")\n        date = date.replace(\".\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"/\", \"\")\n        date = date.replace\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpvdzvadkk.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replace(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpvdzvadkk.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replace(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpvdzvadkk.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replace(\u001b[31m\" \"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpvdzvadkk.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replace(\u001b[31m\".\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpvdzvadkk.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replace(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpvdzvadkk.scala:30:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        date = date.replace(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        R",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date == \"\") {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(2, 4).toInt() < 1 || date.substring(2, 4).toInt() > 12) {\n            return false\n        }\n        if (date.substring(5, 7).toInt() < 1 || date.substring(5, 7).toInt() > 31) {\n            if (date.substring(5, 7).toInt() < 1 || date.substring(5, 7).toInt() > 30) {\n                if (date.substring(5, 7).toInt() < 1 || date.substring(5, 7).toInt() > 29) {\n                    return false\n                }\n            }\n        }\n        if (date.substring(8, 10).toInt() < 1 || date.substring(8, 10).toInt() > 12) {\n            return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpmexpk1p3.scala:28:33 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mif\u001b[0m (date.substring(\u001b[31m2\u001b[0m, \u001b[31m4\u001b[0m).toInt() < \u001b[31m1\u001b[0m || date.substring(\u001b[31m2\u001b[0m, \u001b[31m4\u001b[0m).toInt() > \u001b[31m12\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpmexpk1p3.scala:31:33 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mif\u001b[0m (date.substring(\u001b[31m5\u001b[0m, \u001b[31m7\u001b[0m).toInt() < \u001b[31m1\u001b[0m || date.substring(\u001b[31m5\u001b[0m, \u001b[31m7\u001b[0m).toInt() > \u001b[31m31\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpmexpk1p3.scala:32:37 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mif\u001b[0m (date.substring(\u001b[31m5\u001b[0m, \u001b[31m7\u001b[0m).toInt() < \u001b[31m1\u001b[0m || date.substring(\u001b[31m5\u001b[0m, \u001b[31m7\u001b[0m).toInt() > \u001b[31m30\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpmexpk1p3.scala:33:41 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                \u001b[33mif\u001b[0m (date.substring(\u001b[31m5\u001b[0m, \u001b[31m7\u001b[0m).toInt() < \u001b[31m1\u001b[0m || date.substring(\u001b[31m5\u001b[0m, \u001b[31m7\u001b[0m).toInt() > \u001b[31m29\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take paramet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var month = date.substring(0, 2).toInt\n        var day = date.substring(3, 5).toInt\n        var year = date.substring(6, 10).toInt\n        if (month < 1 || month > 12) {\n            return false\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        } else {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        }\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 31) {\n                return false\n            }\n        } else {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        }\n        if (year < 1000 || year > 9999) {\n            return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"0-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmpoysb9eu2.scala:26)\n\tat Problem$.main(tmpoysb9eu2.scala:57)\n\tat Problem.main(tmpoysb9eu2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var dateParts = date.split(\"-\")\n        if (dateParts.length != 3) {\n            return false\n        }\n        var month = dateParts[0]\n        var day = dateParts[1]\n        var year = dateParts[2]\n        if (month.length() != 2) {\n            return false\n        }\n        if (day.length() != 2) {\n            return false\n        }\n        if (year.length() != 4) {\n            return false\n        }\n        if (month.toInt() < 1 || month.toInt() > 12) {\n            return false\n        }\n        if (day.toInt() < 1 || day.toInt() > 31) {\n            return false\n        }\n        if (month.toInt() == 2 && day.toInt() > 29) {\n            return false\n        }\n        if (month.toInt() == 1 || month.toInt() == 3 || month.toInt() == 5 || month.toInt() == 7 || month.toInt() == 8 || month.toInt() == 10 || month.toInt() == 12) {\n            if (day.toInt() < 1 || day.toInt() > 30) {\n                return false\n            }\n        }\n        if (month.toInt() == 4 || month.toInt() == 6 || month.toInt() == 9 || month.toInt() == 11) {\n            if (day.toInt() < 1 || day.toInt() > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpbo41boe4.scala:29:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateParts[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbo41boe4.scala:30:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateParts[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbo41boe4.scala:31:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateParts[\u001b[31m2\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/' && date.charAt(5) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0' && date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprepuay0_.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprepuay0_.scala:67:48 --------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m0\u001b[0m) == \u001b[31m'0'\u001b[0m && date.charAt(\u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    Char\n\u001b[31m   |\u001b[0m                                     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length() == 0) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\,\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\;\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\\\\!\", \"\")\n        date = date.replaceAll(\"\\\\(\", \"\")\n        date = date.replaceAll(\"\\\\)\", \"\")\n        date = date.replaceAll(\"\\\\{\", \"\")\n        date = date.replaceAll(\"\\\\}\", \"\")\n        date = date.replaceAll(\"\\\\[\", \"\")\n        date = date.replaceAll(\"\\\\]\", \"\")\n        date = date.replaceAll(\"\\\\\\\"\", \"\")\n        date = date.replaceAll(\"\\\\'\", \"\")\n        date = date.replaceAll(\"\\\\<\", \"\")\n        date = date.replaceAll(\"\\\\>\", \"\")\n        date = date.replaceAll(\"\\\\|\", \"\")\n        date = date.replaceAll(\"\\\\^\", \"\")\n        date = date.replaceAll(\"\\\\&\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\$\", \"\")\n        date = date.replaceAll(\"\\\\#\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\@\", \"\")\n        date = date.replaceAll(\"\\\\~\", \"\")\n        date = date.replaceAll(\"\\\\`\", \"\")\n        date = date.replaceAll(\"\\\\~\", \"\")\n        date = date.replaceAll(\"\\\\=\", \"\")\n        date = date.replaceAll(\"\\\\+\", \"\")\n        date = date.replaceAll(\"\\\\/\", \"\")\n        date = date.replaceAll(\"\\\\*\", \"\")\n        date = date.replaceAll(\"\\\\-\", \"\")\n        date = date.replace\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp1rn2aldy.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp1rn2aldy.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp1rn2aldy.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp1rn2aldy.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp1rn2aldy.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\,\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp1rn2aldy.scala:30:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\:\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().isEmpty()) {\n            return false\n        }\n        var dateString = date.trim().replaceAll(\"-\", \"\")\n        var month = dateString.substring(0, 2)\n        var day = dateString.substring(3, 5)\n        var year = dateString.substring(6, 10)\n        if (month.isEmpty() || day.isEmpty() || year.isEmpty()) {\n            return false\n        }\n        var monthInt = Integer.parseInt(month)\n        var dayInt = Integer.parseInt(day)\n        var yearInt = Integer.parseInt(year)\n        if (monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if (monthInt == 2) {\n            if (dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        } else if (monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if (dayInt < 1 || dayInt > 31) {\n                return false\n            }\n        } else if (monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 6, end 10, length 8\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.validDate(tmppmwxtdl6.scala:28)\n\tat Problem$.main(tmppmwxtdl6.scala:54)\n\tat Problem.main(tmppmwxtdl6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/') {\n            return false\n        }\n        if (date.charAt(4) == '/') {\n            return false\n        }\n        if (date.charAt(6) == '/') {\n            return false\n        }\n        if (date.charAt(8) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpg6v5u_24.scala:111:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m111 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg6v5u_24.scala:110:1 --------------------\u001b[0m\u001b[0m\n\u001b[31m110 |\u001b[0m}\n\u001b[31m\u001b[31m    |\u001b[0m ^\u001b[0m\n\u001b[31m    |\u001b[0m Found:    Unit\n\u001b[31m    |\u001b[0m Required: Boolean\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpg6v5u_24.scala:91:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m91 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0')\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpphcvzuw5.scala:89:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(2) == '1') {\n            if (date.charAt(5) == '1') {\n                if (date.charAt(8) == '1') {\n                    return true\n                }\n                return false\n            }\n            if (date.charAt(5) == '3') {\n                if (date.charAt(8) == '1') {\n                    return true\n                }\n                return false\n            }\n            if (date.charAt(5) == '5') {\n                if (date.charAt(8) == '1') {\n                    return true\n                }\n                return false\n            }\n            if (date.charAt(5) == '7') {\n                if (date.charAt(8) == '1') {\n                    return true\n                }\n                return false\n            }\n            if (date.charAt(5) == '8') {\n                if (date.charAt(8) == '1') {\n                    return true\n                }\n                return\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpesdjw9qi.scala:109:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m109 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesdjw9qi.scala:87:16 --------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m                \u001b[33mreturn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    Unit\n\u001b[31m   |\u001b[0m                Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpesdjw9qi.scala:89:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m89 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/' && date.charAt(5) == '/') {\n            return false\n        }\n        if (date.charAt(0) != '0' && date.charAt(0) != '1' && date.charAt(0) != '2' && date.charAt(0) != '3' && date.charAt(0) != '4' && date.charAt(0) != '5' && date.charAt(0) != '6' && date.charAt(0) != '7' && date.charAt(0) != '8' && date.charAt(0) != '9' && date.charAt(0) != '1' && date.charAt(0) != '2' && date.charAt(0) != '3' && date.charAt(0) != '4' && date.charAt(0) != '5' && date.charAt(0) != '6' && date.charAt(0) != '7' && date.charAt(0) != '8' && date.charAt(0) != '9') {\n            return false\n        }\n        if (date.charAt(3) == '/' && date.charAt(6) == '/') {\n            return false\n        }\n        if (date.charAt(1) != '0' && date.charAt(1) != '1' && date.charAt(1) != '2' && date.charAt(1) != '3' && date.charAt(1) != '4' && date.charAt(1) != '5' && date.charAt(1) != '6' && date.charAt(1) != '7' && date.charAt(1) != '8' && date.charAt(1) != '9' && date.charAt(1) != '1' && date.charAt(1) != '2' && date.charAt(1) != '3' && date.charAt(1)\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpypghewrw.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpypghewrw.scala:37:348 -------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m1\u001b[0m) != \u001b[31m'0'\u001b[0m && date.charAt(\u001b[31m1\u001b[0m) != \u001b[31m'1'\u001b[0m && date.charAt(\u001b[31m1\u001b[0m) != \u001b[31m'2'\u001b[0m && date.charAt(\u001b[31m1\u001b[0m) != \u001b[31m'3'\u001b[0m && date.charAt(\u001b[31m1\u001b[0m) != \u001b[31m'4'\u001b[0m && date.charAt(\u001b[31m1\u001b[0m) != \u001b[31m'5'\u001b[0m && date.charAt(\u001b[31m1\u001b[0m) != \u001b[31m'6'\u001b[0m && date.charAt(\u001b[31m1\u001b[0m) != \u001b[31m'7'\u001b[0m && date.charAt(\u001b[31m1\u001b[0m) != \u001b[31m'8'\u001b[0m && date.charAt(\u001b[31m1\u001b[0m) != \u001b[31m'9'\u001b[0m && date.charAt(\u001b[31m1\u001b[0m) != \u001b[31m'1'\u001b[0m && date.charAt(\u001b[31m1\u001b[0m) != \u001b[31m'2'\u001b[0m && date.charAt(\u001b[31m1\u001b[0m) != \u001b[31m'3'\u001b[0m && date.charAt(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Found:    Char\n\u001b[31m   |\u001b[0m                                                       Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"00\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"00\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"00\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"11\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"11\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"11\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"12\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"12\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"12\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"13\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"13\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"13\")) {\n            return false\n        }\n        if (date.sub\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbt7meb8z.scala:83:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbt7meb8z.scala:82:17 ------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m (date.sub\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value sub is not a member of String\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(10, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(10, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpmbns3ktk.scala:82:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m (\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(2) ==\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpdffkumrk.scala:88:29 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m2\u001b[0m) ==\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var dateString = date.trim()\n        var month = dateString.substring(0, 2)\n        var day = dateString.substring(3, 5)\n        var year = dateString.substring(6, 10)\n        var monthInt = toInt(month)\n        var dayInt = toInt(day)\n        var yearInt = toInt(year)\n        if (monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if (monthInt == 2) {\n            if (dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        } else if (monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if (dayInt < 1 || dayInt > 31) {\n                return false\n            }\n        } else if (monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        if (yearInt < 1900 || yearInt > 2100) {\n            return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp35pykofa.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonthInt\u001b[0m = toInt(month)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp35pykofa.scala:30:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdayInt\u001b[0m = toInt(day)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp35pykofa.scala:31:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myearInt\u001b[0m = toInt(year)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length() == 0) {\n            return false\n        }\n        date = date.trim()\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\,\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\;\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\\\\!\", \"\")\n        date = date.replaceAll(\"\\\\(\", \"\")\n        date = date.replaceAll(\"\\\\)\", \"\")\n        date = date.replaceAll(\"\\\\{\", \"\")\n        date = date.replaceAll(\"\\\\}\", \"\")\n        date = date.replaceAll(\"\\\\[\", \"\")\n        date = date.replaceAll(\"\\\\]\", \"\")\n        date = date.replaceAll(\"\\\\\\\"\", \"\")\n        date = date.replaceAll(\"\\\\'\", \"\")\n        date = date.replaceAll(\"\\\\<\", \"\")\n        date = date.replaceAll(\"\\\\>\", \"\")\n        date = date.replaceAll(\"\\\\|\", \"\")\n        date = date.replaceAll(\"\\\\=\", \"\")\n        date = date.replaceAll(\"\\\\+\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\#\", \"\")\n        date = date.replaceAll(\"\\\\$\", \"\")\n        date = date.replaceAll(\"\\\\&\", \"\")\n        date = date.replaceAll(\"\\\\;\", \"\")\n        date = date.replaceAll(\"\\\\@\", \"\")\n        date = date.replaceAll(\"\\\\^\", \"\")\n        date = date.replaceAll(\"\\\\~\", \"\")\n        date = date.replaceAll(\"\\\\`\", \"\")\n        date = date.replaceAll(\"\\\\{\", \"\")\n        date = date.replaceAll(\"\\\\}\", \"\")\n        date = date.replaceAll(\"\\\\[\", \"\")\n        date = date.replaceAll(\"\\\\]\",\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp755dstus.scala:61:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp755dstus.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.trim()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp755dstus.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp755dstus.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp755dstus.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp755dstus.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp755dstus.scala:30:13 --",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"1\") || date.substring(0, 1).equals(\"2\") || date.substring(0, 1).equals(\"3\") || date.substring(0, 1).equals(\"4\") || date.substring(0, 1).equals(\"5\") || date.substring(0, 1).equals(\"6\") || date.substring(0, 1).equals(\"7\") || date.substring(0, 1).equals(\"8\") || date.substring(0, 1).equals(\"9\") || date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"1\") || date.substring(1, 3).equals(\"2\") || date.substring(1, 3).equals(\"3\") || date.substring(1, 3).equals(\"4\") || date.substring(1, 3).equals(\"5\") || date.substring(1, 3).equals(\"6\") || date.substring(1, 3).\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpc__4ic0y.scala:56:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var dateString = date.trim().split(\"-\")\n        var month = dateString[0].toInt\n        var day = dateString[1].toInt\n        var year = dateString[2].toInt\n        if (month < 1 || month > 12) {\n            return false\n        }\n        if (day < 1 || day > 31) {\n            return false\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        } else {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        }\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 31) {\n                return false\n            }\n        } else {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        } else {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp9tcfpiuf.scala:26:30 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateString[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9tcfpiuf.scala:27:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateString[\u001b[31m1\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9tcfpiuf.scala:28:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateString[\u001b[31m2\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length == 0) {\n            return false\n        }\n        if(date.length() != 10) {\n            return false\n        }\n        if(date.charAt(2) == '/') {\n            if(date.charAt(5) == '/') {\n                if(date.charAt(8) == '/') {\n                    if(date.charAt(0) == '0' && date.charAt(1) == '0') {\n                        if(date.charAt(3) == '0' && date.charAt(4) == '0') {\n                            if(date.charAt(6) == '0' && date.charAt(7) == '0') {\n                                return true\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293111,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq_813qxc.scala:44)\n\tat Problem.main(tmpq_813qxc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length() == 0) {\n            return false\n        }\n        if(date.length() != 10) {\n            return false\n        }\n        if(date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if(\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpv9_jsn2o.scala:82:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m(\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(10, 12).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(10, 12).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpbtkgry5f.scala:82:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m (\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        var dateString = date.replaceAll(\"-\", \"\")\n        var month = dateString.substring(0, 2)\n        var day = dateString.substring(3, 5)\n        var year = dateString.substring(6, 10)\n        if (month.length() != 2) {\n            return false\n        }\n        if (day.length() != 2) {\n            return false\n        }\n        if (year.length() != 4) {\n            return false\n        }\n        if (month.toInt() < 1 || month.toInt() > 12) {\n            return false\n        }\n        if (day.toInt() < 1 || day.toInt() > 31) {\n            return false\n        }\n        if (month.toInt() == 2) {\n            if (day.toInt() < 1 || day.toInt() > 29) {\n                return false\n            }\n        }\n        if (month.toInt() == 4 || month.toInt() == 6 || month.toInt() == 9 || month.toInt() == 11) {\n            if (day.toInt() < 1 || day.toInt() > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpdfa497v7.scala:38:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mif\u001b[0m (month.toInt() < \u001b[31m1\u001b[0m || month.toInt() > \u001b[31m12\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpdfa497v7.scala:41:16 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mif\u001b[0m (day.toInt() < \u001b[31m1\u001b[0m || day.toInt() > \u001b[31m31\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpdfa497v7.scala:44:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mif\u001b[0m (month.toInt() == \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpdfa497v7.scala:45:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m            \u001b[33mif\u001b[0m (day.toInt() < \u001b[31m1\u001b[0m || day.toInt() > \u001b[31m29\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpdfa497v7.scala:49:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mif\u001b[0m (month.toInt() == \u001b[31m4\u001b[0m || month.toInt() == \u001b[31m6\u001b[0m || month.toInt() == \u001b[31m9\u001b[0m || month.toInt() == \u001b[31m11\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/') {\n            return false\n        }\n        if (date.charAt(4) == '/') {\n            return false\n        }\n        if (date.charAt(6) == '/') {\n            return false\n        }\n        if (date.charAt(8) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '1') {\n            return false\n        }\n        if (date.charAt(1) == '1') {\n            return false\n        }\n        if (date.charAt(3) == '1') {\n            return false\n        }\n        if (date.charAt(5) == '1') {\n            return false\n        }\n        if (date.charAt(7) == '1') {\n            return false\n        }\n        if (date.charAt(9) == '1') {\n            return false\n        }\n        if (date.charAt(0) == '2') {\n            return false\n        }\n        if (date.charAt(1) == '2') {\n            return false\n        }\n        if (date.charAt(3) == '2') {\n            return false\n        }\n        if (date.charAt(5) == '2') {\n            return false\n        }\n        if (date.charAt(7) == '2') {\n            return\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293113,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2ejbgrpt.scala:111:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m111 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2ejbgrpt.scala:89:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m            \u001b[33mreturn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    Unit\n\u001b[31m   |\u001b[0m            Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2ejbgrpt.scala:110:1 --------------------\u001b[0m\u001b[0m\n\u001b[31m110 |\u001b[0m}\n\u001b[31m\u001b[31m    |\u001b[0m ^\u001b[0m\n\u001b[31m    |\u001b[0m Found:    Unit\n\u001b[31m    |\u001b[0m Required: Boolean\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp2ejbgrpt.scala:91:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m91 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var month = date.split(\"-\")[0].trim()\n        var day = date.split(\"-\")[1].trim()\n        var year = date.split(\"-\")[2].trim()\n        if (month.length() != 2 || day.length() != 2 || year.length() != 4) {\n            return false\n        }\n        var monthInt = Integer.parseInt(month)\n        var dayInt = Integer.parseInt(day)\n        if (monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if (dayInt < 1 || dayInt > 31) {\n            return false\n        }\n        if (monthInt == 2 && dayInt < 29) {\n            return false\n        }\n        if (monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        if (monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n            if (dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293110,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpawe4st35.scala:25:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m0\u001b[0m].trim()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpawe4st35.scala:26:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m1\u001b[0m].trim()\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpawe4st35.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m2\u001b[0m].trim()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0') {\n            return false\n        }\n        if (date.charAt(10) ==\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpe0i5597v.scala:88:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m10\u001b[0m) ==\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        var monthNum = month.toInt\n        var dayNum = day.toInt\n        var yearNum = year.toInt\n        if (monthNum < 1 || monthNum > 12) {\n            return false\n        }\n        if (dayNum < 1 || dayNum > 31) {\n            return false\n        }\n        if (monthNum == 2) {\n            if (dayNum < 1 || dayNum > 29) {\n                return false\n            }\n        }\n        if (monthNum == 1 || monthNum == 3 || monthNum == 5 || monthNum == 7 || monthNum == 8 || monthNum == 10 || monthNum == 12) {\n            if (dayNum < 1 || dayNum > 30) {\n                return false\n            }\n        }\n        if (monthNum == 4 || monthNum == 6 || monthNum == 9 || monthNum == 11) {\n            if (dayNum < 1 || dayNum > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293113,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 6, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.validDate(tmpmddu_0gh.scala:27)\n\tat Problem$.main(tmpmddu_0gh.scala:57)\n\tat Problem.main(tmpmddu_0gh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length == 0) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\,\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\;\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\\\\!\", \"\")\n        date = date.replaceAll(\"\\\\(\", \"\")\n        date = date.replaceAll(\"\\\\)\", \"\")\n        date = date.replaceAll(\"\\\\[\", \"\")\n        date = date.replaceAll(\"\\\\]\", \"\")\n        date = date.replaceAll(\"\\\\{\", \"\")\n        date = date.replaceAll(\"\\\\}\", \"\")\n        date = date.replaceAll(\"\\\\|\", \"\")\n        date = date.replaceAll(\"\\\\^\", \"\")\n        date = date.replaceAll(\"\\\\&\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\$\", \"\")\n        date = date.replaceAll(\"\\\\#\", \"\")\n        date = date.replaceAll(\"\\\\@\", \"\")\n        date = date.replaceAll(\"\\\\~\", \"\")\n        date = date.replaceAll(\"\\\\`\", \"\")\n        date = date.replaceAll(\"\\\\~\", \"\")\n        date = date.replaceAll(\"\\\\=\", \"\")\n        date = date.replaceAll(\"\\\\+\", \"\")\n        date = date.replaceAll(\"\\\\<\", \"\")\n        date = date.replaceAll(\"\\\\>\", \"\")\n        date = date.replaceAll(\"\\\\;\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\\\\!\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\;\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\\\\!\",\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293110,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphxjipzj1.scala:61:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmphxjipzj1.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmphxjipzj1.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmphxjipzj1.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmphxjipzj1.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmphxjipzj1.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\,\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date == \"\") {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"00\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"00\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"00\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"11\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"11\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"11\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"12\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"12\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"12\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"13\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"13\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"13\")) {\n            return false\n        }\n        if (date.substring(0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293111,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpolty021r.scala:83:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpolty021r.scala:82:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m (date.substring(\u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    String\n\u001b[31m   |\u001b[0m            Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var dateParts = date.split(\"-\")\n        if (dateParts.length != 3) {\n            return false\n        }\n        var month = dateParts[0]\n        var day = dateParts[1]\n        var year = dateParts[2]\n        if (month.length() != 2) {\n            return false\n        }\n        if (day.length() != 2) {\n            return false\n        }\n        if (year.length() != 4) {\n            return false\n        }\n        if (month.toInt() < 1 || month.toInt() > 12) {\n            return false\n        }\n        if (day.toInt() < 1 || day.toInt() > 31) {\n            return false\n        }\n        if (month.toInt() == 2 && day.toInt() > 29) {\n            return false\n        }\n        if (month.toInt() == 1 || month.toInt() == 3 || month.toInt() == 5 || month.toInt() == 7 || month.toInt() == 8 || month.toInt() == 10 || month.toInt() == 12) {\n            if (day.toInt() < 1 || day.toInt() > 30) {\n                return false\n            }\n        }\n        if (month.toInt() == 4 || month.toInt() == 6 || month.toInt() == 9 || month.toInt() == 11) {\n            if (day.toInt() < 1 || day.toInt() > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpbo41boe4.scala:29:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateParts[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbo41boe4.scala:30:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateParts[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbo41boe4.scala:31:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateParts[\u001b[31m2\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() < 8) {\n            return false\n        }\n        if (date.length() > 10) {\n            return false\n        }\n        if (date.length() == 10) {\n            if (date.substring(4, 6).toInt.toInt() > 12) {\n                return false\n            }\n        }\n        if (date.length() == 8) {\n            if (date.substring(4, 6).toInt.toInt() > 12) {\n                return false\n            }\n        }\n        if (date.length() == 6) {\n            if (date.substring(2, 4).toInt.toInt() > 12) {\n                return false\n            }\n        }\n        if (date.length() == 4) {\n            if (date.substring(0, 2).toInt.toInt() > 12) {\n                return false\n            }\n        }\n        if (date.length() == 2) {\n            if (date.substring(0, 1).toInt.toInt() > 12) {\n                return false\n            }\n        }\n        if (date.length() == 1) {\n            if (date.substring(0, 0).toInt.toInt() > 12) {\n                return false\n            }\n        }\n        if (date.length() == 10) {\n            if (date.substring(0, 4).toInt.toInt() > 31) {\n                return false\n            }\n        }\n        if (date.length() == 8) {\n            if (date.substring(0, 2).toInt.toInt() > 31) {\n                return false\n            }\n        }\n        if (date.length() == 6) {\n            if (date.substring(0, 1).toInt.toInt() > 31) {\n                return false\n            }\n        }\n        if (date.length() == 4) {\n            if (date.substring(0, 0).toInt.toInt() > 31) {\n                return false\n            }\n        }\n        if (date.\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293110,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_gryvggj.scala:82:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp_gryvggj.scala:32:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mif\u001b[0m (date.substring(\u001b[31m4\u001b[0m, \u001b[31m6\u001b[0m).toInt.toInt() > \u001b[31m12\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mInt\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp_gryvggj.scala:37:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            \u001b[33mif\u001b[0m (date.substring(\u001b[31m4\u001b[0m, \u001b[31m6\u001b[0m).toInt.toInt() > \u001b[31m12\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mInt\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp_gryvggj.scala:42:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m            \u001b[33mif\u001b[0m (date.substring(\u001b[31m2\u001b[0m, \u001b[31m4\u001b[0m).toInt.toInt() > \u001b[31m12\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mInt\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp_gryvggj.scala:47:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m            \u001b[33mif\u001b[0m (date.substring(\u001b[31m0\u001b[0m, \u001b[31m2\u001b[0m).toInt.toInt() > \u001b[31m12\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mInt\u001b[0m does not take parameters\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"1\") || date.substring(0, 1).equals(\"2\") || date.substring(0, 1).equals(\"3\") || date.substring(0, 1).equals(\"4\") || date.substring(0, 1).equals(\"5\") || date.substring(0, 1).equals(\"6\") || date.substring(0, 1).equals(\"7\") || date.substring(0, 1).equals(\"8\") || date.substring(0, 1).equals(\"9\") || date.substring(0, 1).equals(\"0\")) {\n            if (date.substring(3, 5).equals(\"1\") || date.substring(3, 5).equals(\"3\") || date.substring(3, 5).equals(\"5\") || date.substring(3, 5).equals(\"7\") || date.substring(3, 5).equals(\"8\") || date.substring(3, 5).equals(\"10\") || date.substring(3, 5).equals(\"12\")) {\n\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293110,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpk1e94z06.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk1e94z06.scala:52:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m        \u001b[33mif\u001b[0m (date.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m).equals(\u001b[31m\"1\"\u001b[0m) || date.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m).equals(\u001b[31m\"2\"\u001b[0m) || date.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m).equals(\u001b[31m\"3\"\u001b[0m) || date.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m).equals(\u001b[31m\"4\"\u001b[0m) || date.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m).equals(\u001b[31m\"5\"\u001b[0m) || date.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m).equals(\u001b[31m\"6\"\u001b[0m) || date.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m).equals(\u001b[31m\"7\"\u001b[0m) || date.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m).equals(\u001b[31m\"8\"\u001b[0m) || date.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m).equals(\u001b[31m\"9\"\u001b[0m) || date.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m).equals(\u001b[31m\"0\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Boolean\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m53 |\u001b[0m            \u001b[33mif\u001b[0m (date.substring(\u001b[31m3\u001b[0m, \u001b[31m5\u001b[0m).equals(\u001b[31m\"1\"\u001b[0m) || date.substring(\u001b[31m3\u001b[0m, \u001b[31m5\u001b[0m).equals(\u001b[31m\"3\"\u001b[0m) || date.substring(\u001b[31m3\u001b[0m, \u001b[31m5\u001b[0m).equals(\u001b[31m\"5\"\u001b[0m) || date.substring(\u001b[31m3\u001b[0m, \u001b[31m5\u001b[0m).equals(\u001b[31m\"7\"\u001b[0m) || date.substring(\u001b[31m3\u001b[0m, \u001b[31m5\u001b[0m).equals(\u001b[31m\"8\"\u001b[0m) || date.substring(\u001b[31m3\u001b[0m, \u001b[31m5\u001b[0m).equals(\u001b[31m\"10\"\u001b[0m) || date.substring(\u001b[31m3\u001b[0m, \u001b[31m5\u001b[0m).equals(\u001b[31m\"12\"\u001b[0m)) {\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m55 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m56 |\u001b[0m    assert(validDate((\u001b[31m\"03-11-2000\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m57 |\u001b[0m    assert(validDate((\u001b[31m\"15-01-2012\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m58 |\u001b[0m    assert(validDate((\u001b[31m\"04-0-2040\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m59 |\u001b[0m    assert(validDate((\u001b[31m\"06-04-2020\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m6",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/') {\n            if (date.charAt(5) == '/') {\n                if (date.charAt(8) == '/') {\n                    if (date.charAt(0) == '0') {\n                        if (date.charAt(1) == '0') {\n                            if (date.charAt(3) == '0') {\n                                if (date.charAt(4) == '0') {\n                                    if (date.charAt(6) == '0') {\n                                        if (date.charAt(7) == '0') {\n                                            return true\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293113,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_mmgyeb_.scala:50)\n\tat Problem.main(tmp_mmgyeb_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) return false\n        val month = date.substring(0, 2)\n        val day = date.substring(3, 5)\n        val year = date.substring(6, 10)\n        val monthInt = Integer.parseInt(month)\n        val dayInt = Integer.parseInt(day)\n        val yearInt = Integer.parseInt(year)\n        if (monthInt < 1 || monthInt > 12) return false\n        if (dayInt < 1 || dayInt > 31) return false\n        if (monthInt == 2 && dayInt < 29) return false\n        if (monthInt == 2 && dayInt > 28) return false\n        if (monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if (dayInt < 1 || dayInt > 30) return false\n        }\n        if (monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n            if (dayInt < 1 || dayInt > 29) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293114,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 6, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.validDate(tmp542oyi2i.scala:25)\n\tat Problem$.main(tmp542oyi2i.scala:44)\n\tat Problem.main(tmp542oyi2i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        var month = date.split(\"-\")[0].toInt\n        var day = date.split(\"-\")[1].toInt\n        var year = date.split(\"-\")[2].toInt\n        if (month < 1 || month > 12) {\n            return false\n        }\n        if (day < 1 || day > 31) {\n            return false\n        }\n        if (month == 2 && day > 29) {\n            return false\n        }\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293111,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpy1h2r00y.scala:25:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpy1h2r00y.scala:26:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m1\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpy1h2r00y.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m2\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().isEmpty()) return false\n        date = date.trim()\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\-\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\-\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\-\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\-\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\-\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\-\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\-\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\-\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\:\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293112,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpel583emu.scala:59:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        date = date.replaceAll(\"\\\\:\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpel583emu.scala:61:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpel583emu.scala:23:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        date = date.trim()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpel583emu.scala:24:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpel583emu.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpel583emu.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.isEmpty()) return false\n        if(date.length() != 10) return false\n        if(date.charAt(2) == '/') return false\n        if(date.charAt(5) == '/') return false\n        if(date.charAt(8) == '/') return false\n        if(date.charAt(0) < '0' || date.charAt(0) > '9') return false\n        if(date.charAt(1) < '0' || date.charAt(1) > '9') return false\n        if(date.charAt(3) < '0' || date.charAt(3) > '9') return false\n        if(date.charAt(4) < '0' || date.charAt(4) > '9') return false\n        if(date.charAt(6) < '0' || date.charAt(6) > '9') return false\n        if(date.charAt(7) < '0' || date.charAt(7) > '9') return false\n        if(date.charAt(9) < '0' || date.charAt(9) > '9') return false\n        if(date.charAt(2) > '2') return false\n        if(date.charAt(5) > '5') return false\n        if(date.charAt(8) > '9') return false\n        if(date.charAt(0) > '3') return false\n        if(date.charAt(1) > '5') return false\n        if(date.charAt(3) > '9') return false\n        if(date.charAt(4) > '6') return false\n        if(date.charAt(6) > '9') return false\n        if(date.charAt(7) > '9') return false\n        if(date.charAt(9) > '9') return false\n        if(date.charAt(2) < '1') return false\n        if(date.charAt(5) < '1') return false\n        if(date.charAt(8) < '1') return false\n        if(date.charAt(0) < '1') return false\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293112,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd_sxzwld.scala:47:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mif\u001b[0m(date.charAt(\u001b[31m0\u001b[0m) < \u001b[31m'1'\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Boolean\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 10).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"1\")) {\n            if (date.substring(2, 3).equals(\"1\")) {\n                return false\n            }\n            if (date.substring(3, 5).equals(\"1\")) {\n                return false\n            }\n            if (date.substring(5, 7).equals(\"1\")) {\n                return false\n            }\n            if (date.substring(7, 9).equals(\"1\")) {\n                return false\n            }\n            if (date.substring(9, 10).equals(\"1\")) {\n                return false\n            }\n        }\n        if (date.substring(0, 1).equals(\"2\")) {\n            if (date.substring(2, 3).equals(\"1\")) {\n                return false\n            }\n            if (date.substring(3, 5).equals(\"1\")) {\n                return false\n            }\n            if (date.substring(5, 7).equals(\"1\")) {\n                return false\n            }\n            if (date.substring(7, 9).equals\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293115,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpn75pgwv0.scala:80:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpn75pgwv0.scala:101:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m101 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn75pgwv0.scala:79:16 --------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m            \u001b[33mif\u001b[0m (date.substring(\u001b[31m7\u001b[0m, \u001b[31m9\u001b[0m).equals\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    \u001b[1m\u001b[31mObject\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m=\u001b[0m\u001b[1m\u001b[31m>\u001b[0m\u001b[1m\u001b[31m \u001b[0mBoolean\n\u001b[31m   |\u001b[0m                Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn75pgwv0.scala:100:1 --------------------\u001b[0m\u001b[0m\n\u001b[31m100 |\u001b[0m}\n\u001b[31m\u001b[31m    |\u001b[0m ^\u001b[0m\n\u001b[31m    |\u001b[0m Found:    Unit\n\u001b[31m    |\u001b[0m Required: Boolean\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpn75pgwv0.scala:81:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m81 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"1\") && date.substring(3, 5).equals(\"1\") && date.substring(6, 8).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"2\") && date.substring(3, 5).equals(\"2\") && date.substring(6, 8).equals(\"2\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"3\") && date.substring(3, 5).equals(\"3\") && date.substring(6, 8).equals(\"3\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"4\") && date.substring(3, 5).equals(\"4\") && date.substring(6, 8).equals(\"4\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"5\") && date.substring(3, 5).equals(\"5\") && date.substring(6\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvce218m7.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvce218m7.scala:64:98 --------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m        \u001b[33mif\u001b[0m (date.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m).equals(\u001b[31m\"5\"\u001b[0m) && date.substring(\u001b[31m3\u001b[0m, \u001b[31m5\u001b[0m).equals(\u001b[31m\"5\"\u001b[0m) && date.substring(\u001b[31m6\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Found:    String\n\u001b[31m   |\u001b[0m                                                       Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        if (month.length() != 2 || day.length() != 2 || year.length() != 4) {\n            return false\n        }\n        var monthInt = toInt(month)\n        var dayInt = toInt(day)\n        var yearInt = toInt(year)\n        if (monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if (monthInt == 2) {\n            if (dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        } else {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        if (monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if (dayInt < 1 || dayInt > 31) {\n                return false\n            }\n        } else {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293111,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdkrey7ep.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonthInt\u001b[0m = toInt(month)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdkrey7ep.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdayInt\u001b[0m = toInt(day)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdkrey7ep.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myearInt\u001b[0m = toInt(year)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length() == 0) {\n            return false\n        }\n        var dateString = date.trim()\n        var month = dateString.substring(0, 2)\n        var day = dateString.substring(3, 5)\n        var year = dateString.substring(6, 10)\n        var monthInt = Integer.parseInt(month)\n        var dayInt = Integer.parseInt(day)\n        var yearInt = Integer.parseInt(year)\n        if(monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if(dayInt < 1 || dayInt > 31) {\n            return false\n        }\n        if(monthInt == 2 && dayInt < 29) {\n            return false\n        }\n        if(monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if(dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        if(monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n            if(dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 6, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.validDate(tmpg19sssoi.scala:28)\n\tat Problem$.main(tmpg19sssoi.scala:56)\n\tat Problem.main(tmpg19sssoi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"/\", \"\")\n        date = date.replace(\" \", \"\")\n        date = date.replace(\".\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"-\", \"\")\n\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293116,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpquzswrln.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replace(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpquzswrln.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replace(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpquzswrln.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replace(\u001b[31m\" \"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpquzswrln.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replace(\u001b[31m\".\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpquzswrln.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replace(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpquzswrln.scala:30:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        date = date.replace(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        R",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\,\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\;\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\\\\!\", \"\")\n        date = date.replaceAll(\"\\\\(\", \"\")\n        date = date.replaceAll(\"\\\\)\", \"\")\n        date = date.replaceAll(\"\\\\{\", \"\")\n        date = date.replaceAll(\"\\\\}\", \"\")\n        date = date.replaceAll(\"\\\\[\", \"\")\n        date = date.replaceAll(\"\\\\]\", \"\")\n        date = date.replaceAll(\"\\\\\\\"\", \"\")\n        date = date.replaceAll(\"\\\\'\", \"\")\n        date = date.replaceAll(\"\\\\<\", \"\")\n        date = date.replaceAll(\"\\\\>\", \"\")\n        date = date.replaceAll(\"\\\\|\", \"\")\n        date = date.replaceAll(\"\\\\^\", \"\")\n        date = date.replaceAll(\"\\\\&\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\$\", \"\")\n        date = date.replaceAll(\"\\\\#\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\@\", \"\")\n        date = date.replaceAll(\"\\\\~\", \"\")\n        date = date.replaceAll(\"\\\\`\", \"\")\n        date = date.replaceAll(\"\\\\_\", \"\")\n        date = date.replaceAll(\"\\\\+\", \"\")\n        date = date.replaceAll(\"\\\\=\", \"\")\n        date = date.replaceAll(\"\\\\$\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\@\", \"\")\n        date = date.replace\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293116,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpdhg2k2y8.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpdhg2k2y8.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpdhg2k2y8.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpdhg2k2y8.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpdhg2k2y8.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\,\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpdhg2k2y8.scala:30:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\:\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.isEmpty()) {\n            return false\n        }\n        var month = date.split(\"-\")[0].toInt\n        var day = date.split(\"-\")[1].toInt\n        var year = date.split(\"-\")[2].toInt\n        if(month < 1 || month > 12) {\n            return false\n        }\n        if(day < 1 || day > 31) {\n            return false\n        }\n        if(month == 2) {\n            if(day < 1 || day > 29) {\n                return false\n            }\n        } else {\n            if(day < 1 || day > 30) {\n                return false\n            }\n        }\n        if(year < 1900 || year > 2100) {\n            return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293116,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpv6n__ee2.scala:25:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpv6n__ee2.scala:26:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m1\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpv6n__ee2.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m2\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/' && date.charAt(5) == '/') {\n            return false\n        }\n        if (date.charAt(2) == '-' && date.charAt(5) == '-') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0' && date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0' && date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0' && date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0' && date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0' && date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0' && date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0' && date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0' && date.charAt(4)\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgiyahhpx.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgiyahhpx.scala:67:48 --------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m3\u001b[0m) == \u001b[31m'0'\u001b[0m && date.charAt(\u001b[31m4\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    Char\n\u001b[31m   |\u001b[0m                                     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/') {\n            return false\n        }\n        if (date.charAt(4) == '/') {\n            return false\n        }\n        if (date.charAt(6) == '/') {\n            return false\n        }\n        if (date.charAt(8) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '1' && date.charAt(1) == '1' && date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '2' && date.charAt(1) == '0' && date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '3' && date.charAt(1) == '0' && date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '4' && date.charAt(1) == '0' && date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '5' && date.charAt(1) == '0' && date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '6\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293116,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpjiey469s.scala:73:30 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m0\u001b[0m) == '6\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              unclosed character literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjiey469s.scala:75:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiey469s.scala:75:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: 6def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- [E129] Potential Issue Warning: /tmp/tmpjiey469s.scala:74:4 -----------------\u001b[0m\u001b[0m\n\u001b[33m73 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m0\u001b[0m) == '6\n\u001b[33m74 |\u001b[0m    }\n\u001b[33m\u001b[33m   |\u001b[0m                                ^\u001b[0m\n\u001b[33m   |\u001b[0mA pure expression does nothing in statement position; you may be omitting necessary parentheses\n\u001b[33m   |\u001b[0m\n\u001b[33m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 10).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(9, 10).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"2\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"2\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"2\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"2\")) {\n            return false\n        }\n        if (date.substring(9, 10).equals(\"2\")) {\n            return false\n        }\n        if (date.substring(\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293117,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpkribfdqz.scala:82:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m (date.substring(\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) != '-') {\n            return false\n        }\n        if (date.charAt(5) != '-') {\n            return false\n        }\n        if (date.charAt(8) != '-') {\n            return false\n        }\n        if (date.charAt(0) < '0' || date.charAt(0) > '9') {\n            return false\n        }\n        if (date.charAt(1) < '0' || date.charAt(1) > '9') {\n            return false\n        }\n        if (date.charAt(3) < '0' || date.charAt(3) > '9') {\n            return false\n        }\n        if (date.charAt(4) < '0' || date.charAt(4) > '9') {\n            return false\n        }\n        if (date.charAt(6) < '0' || date.charAt(6) > '9') {\n            return false\n        }\n        if (date.charAt(7) < '0' || date.charAt(7) > '9') {\n            return false\n        }\n        if (date.charAt(9) < '0' || date.charAt(9) > '9') {\n            return false\n        }\n        if (date.charAt(10) < '0' || date.charAt(10) > '9') {\n            return false\n        }\n        if (date.charAt(2) == '0' || date.charAt(2) == '1' || date.charAt(2) == '2' || date.charAt(2) == '3' || date.charAt(2) == '4' || date.charAt(2) == '5' || date.charAt(2) == '6' || date.charAt(2) == '7' || date.charAt(2) == '8' || date.charAt(2) == '9') {\n            \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293120,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpunfoesmo.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpunfoesmo.scala:83:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpunfoesmo.scala:64:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m64 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(10, 11).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"2\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"2\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"2\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"2\")) {\n            return false\n        }\n        if (date.substring(10, 11).equals(\"2\")) {\n            return false\n        }\n        if (\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293117,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpzfu47q9d.scala:82:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m (\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length == 0) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\" \", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\,\", \"\")\n        date = date.replaceAll(\"\\\\-\", \"\")\n        date = date.replaceAll(\"\\\\+\", \"\")\n        date = date.replaceAll(\"\\\\*\", \"\")\n        date = date.replaceAll(\"\\\\(\", \"\")\n        date = date.replaceAll(\"\\\\)\", \"\")\n        date = date.replaceAll(\"\\\\[\", \"\")\n        date = date.replaceAll(\"\\\\]\", \"\")\n        date = date.replaceAll(\"\\\\{\", \"\")\n        date = date.replaceAll(\"\\\\}\", \"\")\n        date = date.replaceAll(\"\\\\|\", \"\")\n        date = date.replaceAll(\"\\\\^\", \"\")\n        date = date.replaceAll(\"\\\\&\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\$\", \"\")\n        date = date.replaceAll(\"\\\\#\", \"\")\n        date = date.replaceAll(\"\\\\@\", \"\")\n        date = date.replaceAll(\"\\\\!\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\\\\\\\"\", \"\")\n        date = date.replaceAll(\"\\\\'\", \"\")\n        date = date.replaceAll(\"\\\\`\", \"\")\n        date = date.replaceAll(\"\\\\~\", \"\")\n        date = date.replaceAll(\"\\\\=\", \"\")\n        date = date.replaceAll(\"\\\\<\", \"\")\n        date = date.replaceAll(\"\\\\>\", \"\")\n        date = date.replaceAll(\"\\\\;\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\'\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293117,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpoob_ghpk.scala:60:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m        date = date.replaceAll(\"\\\\'\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpoob_ghpk.scala:62:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpoob_ghpk.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpoob_ghpk.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpoob_ghpk.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpoob_ghpk.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\:\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation availab",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) != '-') {\n            return false\n        }\n        if (date.charAt(5) != '-') {\n            return false\n        }\n        if (date.charAt(8) != '-') {\n            return false\n        }\n        if (date.charAt(0) != '0' && date.charAt(0) != '1' && date.charAt(0) != '2' && date.charAt(0) != '3' && date.charAt(0) != '4' && date.charAt(0) != '5' && date.charAt(0) != '6' && date.charAt(0) != '7' && date.charAt(0) != '8' && date.charAt(0) != '9') {\n            return false\n        }\n        if (date.charAt(1) != '0' && date.charAt(1) != '1' && date.charAt(1) != '2' && date.charAt(1) != '3' && date.charAt(1) != '4' && date.charAt(1) != '5' && date.charAt(1) != '6' && date.charAt(1) != '7' && date.charAt(1) != '8' && date.charAt(1) != '9') {\n            return false\n        }\n        if (date.charAt(3) != '0' && date.charAt(3) != '1' && date.charAt(3) != '2' && date.charAt(3) != '3' && date.charAt(3) != '4' && date.charAt(3) != '5' && date.charAt(3) != '6' && date.charAt(3) != '7' && date.charAt(3) != '8' && date.charAt(3) != '9') {\n            return false\n        }\n        if (date.charAt(4) != '0'\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293118,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_d8pe5pr.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmph10nqts6.scala:111:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m111 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph10nqts6.scala:110:1 --------------------\u001b[0m\u001b[0m\n\u001b[31m110 |\u001b[0m}\n\u001b[31m\u001b[31m    |\u001b[0m ^\u001b[0m\n\u001b[31m    |\u001b[0m Found:    Unit\n\u001b[31m    |\u001b[0m Required: Boolean\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmph10nqts6.scala:91:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m91 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        if (date.length() != 10) {\n            return false\n        }\n        date = date.substring(0, 2) + \"-\" + date.substring(2, 4) + \"-\" + date.substring(4, 6)\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(2, 4).equals(\"00\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"00\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"00\")) {\n            return false\n        }\n        if (date.substring(6, 10).equals(\"00\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"01\")) {\n            if (date.substring(4, 6).equals(\"01\") || date.substring(4, 6).equals(\"02\")) {\n                return false\n            }\n        }\n        if (date.substring(0, 2).equals(\"02\")) {\n            if (date.substring(4, 6).equals(\"02\")) {\n                return false\n            }\n        }\n        if (date.substring(0, 2).equals(\"03\")) {\n            if (date.substring(4, 6).equals(\"03\")) {\n                return false\n            }\n        }\n        if (date.substring(0, 2).equals(\"04\")) {\n            if (date.substring(4, 6).equals(\"04\") || date.substring(4, 6).equals(\"05\") || date.substring(4, 6).equals(\"06\") || date.substring(4, 6).equals(\"07\") || date.substring(4, 6).equals(\"08\") || date.substring(4, 6).equals(\"09\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293117,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzgwa4qk6.scala:63:229 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m            \u001b[33mif\u001b[0m (date.substring(\u001b[31m4\u001b[0m, \u001b[31m6\u001b[0m).equals(\u001b[31m\"04\"\u001b[0m) || date.substring(\u001b[31m4\u001b[0m, \u001b[31m6\u001b[0m).equals(\u001b[31m\"05\"\u001b[0m) || date.substring(\u001b[31m4\u001b[0m, \u001b[31m6\u001b[0m).equals(\u001b[31m\"06\"\u001b[0m) || date.substring(\u001b[31m4\u001b[0m, \u001b[31m6\u001b[0m).equals(\u001b[31m\"07\"\u001b[0m) || date.substring(\u001b[31m4\u001b[0m, \u001b[31m6\u001b[0m).equals(\u001b[31m\"08\"\u001b[0m) || date.substring(\u001b[31m4\u001b[0m, \u001b[31m6\u001b[0m).equals(\"09\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzgwa4qk6.scala:65:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzgwa4qk6.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzgwa4qk6.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzgwa4qk6.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explan",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        var dateString = date.replaceAll(\"-\", \"\")\n        var dateArray = dateString.split(\"-\")\n        var month = dateArray[0].toInt\n        var day = dateArray[1].toInt\n        var year = dateArray[2].toInt\n        if (month < 1 || month > 12) {\n            return false\n        }\n        if (day < 1 || day > 31) {\n            return false\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293118,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpxn5f5oa9.scala:27:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateArray[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxn5f5oa9.scala:28:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateArray[\u001b[31m1\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxn5f5oa9.scala:29:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateArray[\u001b[31m2\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        var dateString = date.split(\"-\")\n        var month = dateString[0].toInt\n        var day = dateString[1].toInt\n        var year = dateString[2].toInt\n        if (month < 1 || month > 12) {\n            return false\n        }\n        if (day < 1 || day > 31) {\n            return false\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        }\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpmug2dlc6.scala:26:30 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateString[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmug2dlc6.scala:27:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateString[\u001b[31m1\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmug2dlc6.scala:28:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateString[\u001b[31m2\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var month = date.split(\"-\")[0]\n        var day = date.split(\"-\")[1]\n        var year = date.split(\"-\")[2]\n        if (month.length() != 2 || day.length() != 2 || year.length() != 4) {\n            return false\n        }\n        var monthInt = toInt(month)\n        var dayInt = toInt(day)\n        var yearInt = toInt(year)\n        if (monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if (dayInt < 1 || dayInt > 31) {\n            return false\n        }\n        if (monthInt == 2) {\n            if (dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        }\n        if (monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        if (monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpsc2wsbzr.scala:25:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpsc2wsbzr.scala:26:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpsc2wsbzr.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m2\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsc2wsbzr.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonthInt\u001b[0m = toInt(month)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsc2wsbzr.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdayInt\u001b[0m = toInt(day)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsc2wsbzr.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myearInt\u001b[0m = toInt(year)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) != '-') {\n            return false\n        }\n        if (date.charAt(5) != '-') {\n            return false\n        }\n        if (date.charAt(8) != '-') {\n            return false\n        }\n        if (date.charAt(0) < '0' || date.charAt(0) > '9') {\n            return false\n        }\n        if (date.charAt(1) < '0' || date.charAt(1) > '9') {\n            return false\n        }\n        if (date.charAt(3) < '0' || date.charAt(3) > '9') {\n            return false\n        }\n        if (date.charAt(4) < '0' || date.charAt(4) > '9') {\n            return false\n        }\n        if (date.charAt(6) < '0' || date.charAt(6) > '9') {\n            return false\n        }\n        if (date.charAt(7) < '0' || date.charAt(7) > '9') {\n            return false\n        }\n        if (date.charAt(9) < '0' || date.charAt(9) > '9') {\n            return false\n        }\n        if (date.charAt(10) < '0' || date.charAt(10) > '9') {\n            return false\n        }\n        if (date.charAt(2) == '0' || date.charAt(2) == '1') {\n            return false\n        }\n        if (date.charAt(5) == '0' || date.charAt(5) == '1') {\n            return false\n        }\n        if (date.charAt(8) == '0' || date.charAt(8) == '1') {\n            return false\n        }\n        if (date.charAt(0) == '0' || date.charAt(0)\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkchtl2nr.scala:71:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkchtl2nr.scala:70:48 --------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m0\u001b[0m) == \u001b[31m'0'\u001b[0m || date.charAt(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    Char\n\u001b[31m   |\u001b[0m                                     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length() == 0) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        if(!isValidMonth(month) || !isValidDay(day) || !isValidYear(year)) {\n            return false\n        }\n        return true\n    }\n\n    def isValidMonth(month : String) : Boolean = {\n        if(month.trim().length() == 0) {\n            return false\n        }\n        var monthNum = toInt(month)\n        if(monthNum < 1 || monthNum > 12) {\n            return false\n        }\n        return true\n    }\n\n    def isValidDay(day : String) : Boolean = {\n        if(day.trim().length() == 0) {\n            return false\n        }\n        var dayNum = toInt(day)\n        if(dayNum < 1 || dayNum > 31) {\n            return false\n        }\n        return true\n    }\n\n    def isValidYear(year : String) : Boolean = {\n        if(year.trim().length() == 0) {\n            return false\n        }\n        var yearNum = toInt(year)\n        if(yearNum < 0 || yearNum > 9999) {\n            return false\n        }\n        return true\n    }\n\n    def toInt(s : String) : Int = {\n        return _.toInt(s)\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293120,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp3ugdul7b.scala:68:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m        \u001b[33mreturn\u001b[0m _.toInt(s)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.toInt(s).\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) ==\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp49prhu0s.scala:88:29 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m9\u001b[0m) ==\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        if (date.length() != 10) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(2, 4)\n        var year = date.substring(4, 10)\n        if (month.isEmpty() || day.isEmpty() || year.isEmpty()) {\n            return false\n        }\n        if (month.length() != 2) {\n            return false\n        }\n        if (day.length() != 2) {\n            return false\n        }\n        if (year.length() != 4) {\n            return false\n        }\n        var monthNum = toInt(month)\n        if (monthNum < 1 || monthNum > 12) {\n            return false\n        }\n        var dayNum = toInt(day)\n        if (monthNum == 2) {\n            if (dayNum < 1 || dayNum > 29) {\n                return false\n            }\n        } else if (monthNum == 1 || monthNum == 3 || monthNum == 5 || monthNum == 7 || monthNum == 8 || monthNum == 10 || monthNum == 12) {\n            if (dayNum < 1 || dayNum > 31) {\n                return false\n            }\n        } else if (monthNum == 4 || monthNum == 6 || monthNum == 9 || monthNum == 11) {\n            if (dayNum < 1 || dayNum > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293120,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpelx4dezn.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpelx4dezn.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpelx4dezn.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelx4dezn.scala:46:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonthNum\u001b[0m = toInt(month)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelx4dezn.scala:50:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdayNum\u001b[0m = toInt(day)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        if (month.isEmpty() || day.isEmpty() || year.isEmpty()) {\n            return false\n        }\n        if (month.toInt() < 1 || month.toInt() > 12) {\n            return false\n        }\n        if (day.toInt() < 1 || day.toInt() > 31) {\n            if (month.toInt() == 2) {\n                if (day.toInt() < 1 || day.toInt() > 29) {\n                    return false\n                }\n            } else {\n                return false\n            }\n        }\n        if (month.toInt() == 1 || month.toInt() == 3 || month.toInt() == 5 || month.toInt() == 7 || month.toInt() == 8 || month.toInt() == 10 || month.toInt() == 12) {\n            if (day.toInt() < 1 || day.toInt() > 30) {\n                return false\n            }\n        } else {\n            if (day.toInt() < 1 || day.toInt() > 31) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpf62nyihm.scala:31:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mif\u001b[0m (month.toInt() < \u001b[31m1\u001b[0m || month.toInt() > \u001b[31m12\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpf62nyihm.scala:34:16 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mif\u001b[0m (day.toInt() < \u001b[31m1\u001b[0m || day.toInt() > \u001b[31m31\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpf62nyihm.scala:35:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            \u001b[33mif\u001b[0m (month.toInt() == \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpf62nyihm.scala:36:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m                \u001b[33mif\u001b[0m (day.toInt() < \u001b[31m1\u001b[0m || day.toInt() > \u001b[31m29\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpf62nyihm.scala:43:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mif\u001b[0m (month.toInt() == \u001b[31m1\u001b[0m || month.toInt() == \u001b[31m3\u001b[0m || month.toInt() == \u001b[31m5\u001b[0m || month.toInt() == \u001b[31m7\u001b[0m || month.toInt() == ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length() == 0) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        if(month.length() == 1) {\n            month = \"0\" + month\n        }\n        if(day.length() == 1) {\n            day = \"0\" + day\n        }\n        if(year.length() == 2) {\n            year = \"20\" + year\n        }\n        if(month.length() != 2 || day.length() != 2 || year.length() != 4) {\n            return false\n        }\n        if(month.toInt() < 1 || month.toInt() > 12) {\n            return false\n        }\n        if(day.toInt() < 1 || day.toInt() > 31) {\n            if(month.toInt() == 2) {\n                if(day.toInt() < 1 || day.toInt() > 29) {\n                    return false\n                }\n            } else {\n                return false\n            }\n        }\n        if(month.toInt() == 1 || month.toInt() == 3 || month.toInt() == 5 || month.toInt() == 7 || month.toInt() == 8 || month.toInt() == 10 || month.toInt() == 12) {\n            if(day.toInt() < 1 || day.toInt() > 30) {\n                return false\n            }\n        } else {\n            if(day.toInt() < 1 || day.toInt() > 31) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp0nax6z1e.scala:40:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mif\u001b[0m(month.toInt() < \u001b[31m1\u001b[0m || month.toInt() > \u001b[31m12\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp0nax6z1e.scala:43:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mif\u001b[0m(day.toInt() < \u001b[31m1\u001b[0m || day.toInt() > \u001b[31m31\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp0nax6z1e.scala:44:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m            \u001b[33mif\u001b[0m(month.toInt() == \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp0nax6z1e.scala:45:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                \u001b[33mif\u001b[0m(day.toInt() < \u001b[31m1\u001b[0m || day.toInt() > \u001b[31m29\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp0nax6z1e.scala:52:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m        \u001b[33mif\u001b[0m(month.toInt() == \u001b[31m1\u001b[0m || month.toInt() == \u001b[31m3\u001b[0m || month.toInt() == \u001b[31m5\u001b[0m || month.toInt() == \u001b[31m7\u001b[0m || month.toInt() == \u001b[31m8\u001b[0m |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        if (date.length() != 10) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        if (month.length() != 2) {\n            return false\n        }\n        if (day.length() != 2) {\n            return false\n        }\n        if (year.length() != 4) {\n            return false\n        }\n        var monthNum = toInt(month)\n        if (monthNum < 1 || monthNum > 12) {\n            return false\n        }\n        var dayNum = toInt(day)\n        if (dayNum < 1 || dayNum > 31) {\n            return false\n        }\n        if (monthNum == 2) {\n            if (dayNum < 1 || dayNum > 29) {\n                return false\n            }\n        } else {\n            if (dayNum < 1 || dayNum > 30) {\n                return false\n            }\n        }\n        var yearNum = toInt(year)\n        if (yearNum < 1000 || yearNum > 9999) {\n            return false\n        }\n        return true\n    }\n\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdjjj7f2m.scala:94:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m94 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpdjjj7f2m.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpdjjj7f2m.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpdjjj7f2m.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdjjj7f2m.scala:43:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonthNum\u001b[0m = toInt(month)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdjjj7f2m.scala:47:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdayNum\u001b[0m = toInt(day)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdjjj7f2m.scala",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\" \", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293122,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphbnxxe41.scala:61:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmphbnxxe41.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmphbnxxe41.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmphbnxxe41.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmphbnxxe41.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\:\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmphbnxxe41.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length() == 0) {\n            return false\n        }\n        if(date.length() != 10) {\n            return false\n        }\n        if(date.charAt(2) != '-') {\n            return false\n        }\n        if(date.charAt(5) != '-') {\n            return false\n        }\n        if(date.charAt(8) != '-') {\n            return false\n        }\n        if(date.charAt(0) < '0' || date.charAt(0) > '9') {\n            return false\n        }\n        if(date.charAt(1) < '0' || date.charAt(1) > '9') {\n            return false\n        }\n        if(date.charAt(3) < '0' || date.charAt(3) > '9') {\n            return false\n        }\n        if(date.charAt(4) < '0' || date.charAt(4) > '9') {\n            return false\n        }\n        if(date.charAt(6) < '0' || date.charAt(6) > '9') {\n            return false\n        }\n        if(date.charAt(7) < '0' || date.charAt(7) > '9') {\n            return false\n        }\n        if(date.charAt(9) < '0' || date.charAt(9) > '9') {\n            return false\n        }\n        if(date.charAt(10) < '0' || date.charAt(10) > '9') {\n            return false\n        }\n        if(date.charAt(2) == '-' && date.charAt(5) == '-' && date.charAt(8) == '-') {\n            if(date.charAt(0) < '1' || date.charAt(0) > '3') {\n                return false\n            }\n            if(date.charAt(1) < '1' || date.charAt(1) > '9') {\n                return false\n            }\n            if(date.charAt(3) < '1'\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293126,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeub1ihwu.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeub1ihwu.scala:90:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m90 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeub1ihwu.scala:89:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpeub1ihwu.scala:70:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m70 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/' && date.charAt(5) == '/') {\n            return false\n        }\n        if (date.charAt(2) == '-' && date.charAt(5) == '-') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0' && date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0' && date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0' && date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0' && date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0' && date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0' && date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0' && date.charAt(10) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmplm0unuk0.scala:67:49 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m0\u001b[0m) == \u001b[31m'0'\u001b[0m && date.charAt(\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(10, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(10, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.sub\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgy7w7c0m.scala:83:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgy7w7c0m.scala:82:17 ------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m (date.sub\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value sub is not a member of String\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        var monthInt = Integer.parseInt(month)\n        var dayInt = Integer.parseInt(day)\n        var yearInt = Integer.parseInt(year)\n        if (monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if (dayInt < 1 || dayInt > 31) {\n            return false\n        }\n        if (monthInt == 2) {\n            if (dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        }\n        if (monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        if (monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n            if (dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293126,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 6, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.validDate(tmpe0_em33n.scala:27)\n\tat Problem$.main(tmpe0_em33n.scala:57)\n\tat Problem.main(tmpe0_em33n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 10).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(9, 10).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"2\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"2\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"2\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"2\")) {\n            return false\n        }\n        if (date.substring(9, 10).equals(\"2\")) {\n            return false\n        }\n        if (\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293124,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpatz8y65b.scala:82:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m (\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        if (month.isEmpty() || day.isEmpty() || year.isEmpty()) {\n            return false\n        }\n        var monthNum = toInt(month)\n        var dayNum = toInt(day)\n        var yearNum = toInt(year)\n        if (monthNum < 1 || monthNum > 12) {\n            return false\n        }\n        if (monthNum == 2) {\n            if (dayNum < 1 || dayNum > 29) {\n                return false\n            }\n        } else {\n            if (dayNum < 1 || dayNum > 31) {\n                return false\n            }\n        }\n        if (monthNum == 4 || monthNum == 6 || monthNum == 9 || monthNum == 11) {\n            if (dayNum < 1 || dayNum > 30) {\n                return false\n            }\n        } else {\n            if (dayNum < 1 || dayNum > 31) {\n                return false\n            }\n        }\n        if (yearNum < 1000 || yearNum > 9999) {\n            return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293124,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_4kwnifw.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonthNum\u001b[0m = toInt(month)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_4kwnifw.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdayNum\u001b[0m = toInt(day)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_4kwnifw.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myearNum\u001b[0m = toInt(year)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) return false\n        if (date.length() != 10) return false\n        if (date.substring(0, 2).equals(\"0\")) return false\n        if (date.substring(3, 5).equals(\"0\")) return false\n        if (date.substring(6, 8).equals(\"0\")) return false\n        if (date.substring(0, 2).equals(\"00\")) return false\n        if (date.substring(3, 5).equals(\"00\")) return false\n        if (date.substring(6, 8).equals(\"00\")) return false\n        if (date.substring(0, 2).equals(\"30\")) return false\n        if (date.substring(3, 5).equals(\"30\")) return false\n        if (date.substring(6, 8).equals(\"30\")) return false\n        if (date.substring(0, 2).equals(\"29\")) return false\n        if (date.substring(3, 5).equals(\"29\")) return false\n        if (date.substring(6, 8).equals(\"29\")) return false\n        if (date.substring(0, 2).equals(\"12\")) return false\n        if (date.substring(3, 5).equals(\"12\")) return false\n        if (date.substring(6, 8).equals(\"12\")) return false\n        if (date.substring(0, 2).equals(\"1\")) return false\n        if (date.substring(3, 5).equals(\"1\")) return false\n        if (date.substring(6, 8).equals(\"1\")) return false\n        if (date.substring(0, 2).equals(\"3\")) return false\n        if (date.substring(3, 5).equals(\"3\")) return false\n        if (date.substring(6, 8).equals(\"3\")) return false\n        if (date.substring(0, 2).equals(\"5\")) return false\n        if (date.substring(3, 5).equals(\"5\")) return false\n        if (date.substring(6, 8).equals(\"5\")) return false\n        if (\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpeq8vauj6.scala:48:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mif\u001b[0m (\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        if (date.length() != 10) {\n            return false\n        }\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        if (date.length() != 8) {\n            return false\n        }\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        if (date.length() != 6) {\n            return false\n        }\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        if (date.length() != 4) {\n            return false\n        }\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"[^0-9]\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp_1krle3e.scala:77:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m        date = date.replaceAll(\"[^0-9]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_1krle3e.scala:79:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp_1krle3e.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"[^0-9]\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp_1krle3e.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"[^0-9]\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp_1krle3e.scala:33:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        date = date.replaceAll(\u001b[31m\"[^0-9]\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp_1krle3e.scala:37:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        date = date.replaceAll(\u001b[31m\"[^0-9]\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        if (month.length() != 2 || day.length() != 2 || year.length() != 4) {\n            return false\n        }\n        var monthNum = toInt(month)\n        var dayNum = toInt(day)\n        var yearNum = toInt(year)\n        if (monthNum < 1 || monthNum > 12) {\n            return false\n        }\n        if (monthNum == 2) {\n            if (dayNum < 1 || dayNum > 29) {\n                return false\n            }\n        } else {\n            if (dayNum < 1 || dayNum > 30) {\n                return false\n            }\n        }\n        if (monthNum == 1 || monthNum == 3 || monthNum == 5 || monthNum == 7 || monthNum == 8 || monthNum == 10 || monthNum == 12) {\n            if (dayNum < 1 || dayNum > 31) {\n                return false\n            }\n        } else {\n            if (dayNum < 1 || dayNum > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5k5y_mg5.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonthNum\u001b[0m = toInt(month)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5k5y_mg5.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdayNum\u001b[0m = toInt(day)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5k5y_mg5.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myearNum\u001b[0m = toInt(year)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.length() == 0) {\n            return false\n        }\n        if(date.length() != 10) {\n            return false\n        }\n        if(date.charAt(2) == '/') {\n            return false\n        }\n        if(date.charAt(4) == '/') {\n            return false\n        }\n        if(date.charAt(6) == '/') {\n            return false\n        }\n        if(date.charAt(8) == '/') {\n            return false\n        }\n        if(date.charAt(0) == '0') {\n            return false\n        }\n        if(date.charAt(1) == '0') {\n            return false\n        }\n        if(date.charAt(3) == '0') {\n            return false\n        }\n        if(date.charAt(5) == '0') {\n            return false\n        }\n        if(date.charAt(7) == '0') {\n            return false\n        }\n        if(date.charAt(9) == '0') {\n            return false\n        }\n        if(date.charAt(0) == '1') {\n            return false\n        }\n        if(date.charAt(1) == '1') {\n            return false\n        }\n        if(date.charAt(3) == '1') {\n            return false\n        }\n        if(date.charAt(5) == '1') {\n            return false\n        }\n        if(date.charAt(7) == '1') {\n            return false\n        }\n        if(date.charAt(9) == '1') {\n            return false\n        }\n        if(date.charAt(2) == '2') {\n            return false\n        }\n        if(date.charAt(4) == '2') {\n            return false\n        }\n        if(date.charAt(6) == '2') {\n            return false\n        }\n        if(date.charAt(8) == '2') {\n            return false\n        }\n        if(date.charAt(10) == '2') {\n            return\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx295fzf0.scala:111:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m111 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx295fzf0.scala:89:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m            \u001b[33mreturn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    Unit\n\u001b[31m   |\u001b[0m            Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx295fzf0.scala:110:1 --------------------\u001b[0m\u001b[0m\n\u001b[31m110 |\u001b[0m}\n\u001b[31m\u001b[31m    |\u001b[0m ^\u001b[0m\n\u001b[31m    |\u001b[0m Found:    Unit\n\u001b[31m    |\u001b[0m Required: Boolean\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpx295fzf0.scala:91:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m91 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        var validMonth = month.toInt % 12 == 0 && month.toInt >= 1 && month.toInt <= 12\n        var validDay = day.toInt % 31 == 0 && day.toInt >= 1 && day.toInt <= 31\n        var validYear = year.toInt % 100 == 0 && year.toInt >= 1900 && year.toInt <= 2099\n        return validMonth && validDay && validYear\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprl0v8029.scala:34)\n\tat Problem.main(tmprl0v8029.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) return false\n        if (date.length() != 10) return false\n        if (date.charAt(2) != '/') return false\n        if (date.charAt(5) != '/') return false\n        if (date.charAt(8) != '-') return false\n        if (date.charAt(0) < '0' || date.charAt(0) > '9') return false\n        if (date.charAt(1) < '0' || date.charAt(1) > '9') return false\n        if (date.charAt(3) < '0' || date.charAt(3) > '9') return false\n        if (date.charAt(4) < '0' || date.charAt(4) > '9') return false\n        if (date.charAt(6) < '0' || date.charAt(6) > '9') return false\n        if (date.charAt(7) < '0' || date.charAt(7) > '9') return false\n        if (date.charAt(9) < '0' || date.charAt(9) > '9') return false\n        if (date.charAt(10) < '0' || date.charAt(10) > '9') return false\n        if (date.charAt(0) == '0') return false\n        if (date.charAt(1) == '0') return false\n        if (date.charAt(3) == '0') return false\n        if (date.charAt(4) == '0') return false\n        if (date.charAt(6) == '0') return false\n        if (date.charAt(7) == '0') return false\n        if (date.charAt(9) == '0') return false\n        if (date.charAt(10) == '0') return false\n        if (date.charAt(2) == '0') return false\n        if (date.charAt(5) == '0') return false\n        if (date.charAt(8) == '0') return false\n        if (date.charAt(9) == '0') return false\n        if (\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293126,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpgcyf472w.scala:47:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mif\u001b[0m (\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length == 0) {\n            return false\n        }\n        if(date.length() != 10) {\n            return false\n        }\n        if(date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(9, 10).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(0, 1).equals(\"1\")) {\n            if(date.substring(1, 3).equals(\"1\")) {\n                if(date.substring(4, 6).equals(\"1\")) {\n                    if(date.substring(7, 9).equals(\"1\")) {\n                        return true\n                    }\n                }\n            }\n        }\n        if(date.substring(0, 1).equals(\"2\")) {\n            if(date.substring(1, 3).equals(\"2\")) {\n                if(date.substring(4, 6).equals(\"2\")) {\n                    if(date.substring(7, 9).equals(\"2\")) {\n                        return true\n                    }\n                }\n            }\n        }\n        if(date.substring(0, 1).equals(\"3\")) {\n            if(date.substring(1, 3).equals(\"3\")) {\n                if(date.substring(4, 6).equals(\"3\")) {\n                    if(date.substring(7, 9).equals(\"3\")) {\n                        return true\n\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293126,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_22smtg7.scala:97:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m97 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_22smtg7.scala:70:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m        \u001b[33mif\u001b[0m(date.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m).equals(\u001b[31m\"3\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Boolean\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m71 |\u001b[0m            \u001b[33mif\u001b[0m(date.substring(\u001b[31m1\u001b[0m, \u001b[31m3\u001b[0m).equals(\u001b[31m\"3\"\u001b[0m)) {\n\u001b[31m72 |\u001b[0m                \u001b[33mif\u001b[0m(date.substring(\u001b[31m4\u001b[0m, \u001b[31m6\u001b[0m).equals(\u001b[31m\"3\"\u001b[0m)) {\n\u001b[31m73 |\u001b[0m                    \u001b[33mif\u001b[0m(date.substring(\u001b[31m7\u001b[0m, \u001b[31m9\u001b[0m).equals(\u001b[31m\"3\"\u001b[0m)) {\n\u001b[31m74 |\u001b[0m                        \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m75 |\u001b[0m    }\n\u001b[31m76 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m77 |\u001b[0m    assert(validDate((\u001b[31m\"03-11-2000\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m78 |\u001b[0m    assert(validDate((\u001b[31m\"15-01-2012\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m79 |\u001b[0m    assert(validDate((\u001b[31m\"04-0-2040\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m80 |\u001b[0m    assert(validDate((\u001b[31m\"06-04-2020\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m81 |\u001b[0m    assert(validDate((\u001b[31m\"01-01-2007\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m82 |\u001b[0m    assert(validDate((\u001b[31m\"03-32-2011\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m83 |\u001b[0m    assert(validDate((\u001b[31m\"\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m84 |\u001b[0m    assert(validDate((\u001b[31m\"04-31-3000\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m85 |\u001b[0m    assert(validDate((\u001b[31m\"06-06-2005\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m86 |\u001b[0m    assert(validDate((\u001b[31m\"21-31-2000\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m87 |\u001b[0m    assert(validDate((\u001b[31m\"04-12-2003\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m88 |\u001b[0m    assert(validDate((\u001b[31m\"04122003\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m89 |\u001b[0m    assert(validDate((\u001b[31m\"20",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length == 0) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        if (month.length() != 2 || day.length() != 2 || year.length() != 4) {\n            return false\n        }\n        var monthInt = toInt(month)\n        var dayInt = toInt(day)\n        var yearInt = toInt(year)\n        if (monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if (monthInt == 2) {\n            if (dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        } else {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        if (monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if (dayInt < 1 || dayInt > 31) {\n                return false\n            }\n        } else {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293126,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoysb8xue.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonthInt\u001b[0m = toInt(month)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoysb8xue.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdayInt\u001b[0m = toInt(day)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoysb8xue.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myearInt\u001b[0m = toInt(year)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        var dateString = date.replaceAll(\"-\", \"\")\n        var dateArray = dateString.split(\"/\")\n        if (dateArray.length != 3) {\n            return false\n        }\n        var month = dateArray[0]\n        var day = dateArray[1]\n        var year = dateArray[2]\n        if (month.length() != 2) {\n            return false\n        }\n        if (day.length() != 2) {\n            return false\n        }\n        if (year.length() != 4) {\n            return false\n        }\n        var monthInt = Integer.parseInt(month)\n        var dayInt = Integer.parseInt(day)\n        var yearInt = Integer.parseInt(year)\n        if (monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if (dayInt < 1 || dayInt > 31) {\n            return false\n        }\n        if (monthInt == 2 && dayInt < 29) {\n            return false\n        }\n        if (monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        if (monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n            if (dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpea53lcg_.scala:30:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateArray[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpea53lcg_.scala:31:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateArray[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpea53lcg_.scala:32:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateArray[\u001b[31m2\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/' && date.charAt(5) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '/' && date.charAt(3) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '/' && date.charAt(6) == '/') {\n            return false\n        }\n        if (date.charAt(1) == '/' && date.charAt(4) == '/') {\n            return false\n        }\n        if (date.charAt(1) == '/' && date.charAt(7) == '/') {\n            return false\n        }\n        if (date.charAt(2) == '/' && date.charAt(8) == '/') {\n            return false\n        }\n        if (date.charAt(3) == '/' && date.charAt(9) == '/') {\n            return false\n        }\n        if (date.charAt(4) == '/' && date.charAt(6) == '/') {\n            return false\n        }\n        if (date.charAt(5) == '/' && date.charAt(7) == '/') {\n            return false\n        }\n        if (date.charAt(6) == '/' && date.charAt(8) == '/') {\n            return false\n        }\n        if (date.charAt(7) == '/' && date.charAt(9) == '/') {\n            return false\n        }\n        if (date.charAt(8) == '/' && date.charAt(9) == '/') {\n            return false\n        }\n        if (date.charAt(9) == '/' && date.charAt(10) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '/' && date.charAt(1) == '/') {\n            return false\n        }\n        if (date.charAt(3) == '/\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpjzc8ckkn.scala:70:30 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m3\u001b[0m) == \u001b[31m'/\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0msymbol literal '/ is no longer supported,\n\u001b[31m   |\u001b[0muse a string literal \"/\" or an application Symbol(\"/\") instead,\n\u001b[31m   |\u001b[0mor enclose in braces '{/} if you want a quoted expression.\n\u001b[31m   |\u001b[0mFor now, you can also `import language.deprecated.symbolLiterals` to accept\n\u001b[31m   |\u001b[0mthe idiom, but this possibility might no longer be available in the future.\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjzc8ckkn.scala:71:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        var dateString = date.replaceAll(\"-\", \"\")\n        var dateArray = dateString.split(\"/\")\n        var month = dateArray[0]\n        var day = dateArray[1]\n        var year = dateArray[2]\n        if (month.length() != 2) {\n            return false\n        }\n        if (day.length() != 2) {\n            return false\n        }\n        if (year.length() != 4) {\n            return false\n        }\n        if (month.toInt() < 1 || month.toInt() > 12) {\n            return false\n        }\n        if (day.toInt() < 1 || day.toInt() > 31) {\n            return false\n        }\n        if (month.toInt() == 2) {\n            if (day.toInt() < 1 || day.toInt() > 29) {\n                return false\n            }\n        }\n        if (month.toInt() == 1 || month.toInt() == 3 || month.toInt() == 5 || month.toInt() == 7 || month.toInt() == 8 || month.toInt() == 10 || month.toInt() == 12) {\n            if (day.toInt() < 1 || day.toInt() > 30) {\n                return false\n            }\n        }\n        if (month.toInt() == 4 || month.toInt() == 6 || month.toInt() == 9 || month.toInt() == 11) {\n            if (day.toInt() < 1 || day.toInt() > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293128,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmptwyj8y7x.scala:27:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateArray[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmptwyj8y7x.scala:28:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateArray[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmptwyj8y7x.scala:29:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateArray[\u001b[31m2\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var dateString = date.trim().split(\"-\")\n        if (dateString.length != 3) {\n            return false\n        }\n        var month = dateString[0].trim()\n        var day = dateString[1].trim()\n        var year = dateString[2].trim()\n        if (month.length() != 2) {\n            return false\n        }\n        if (day.length() != 2) {\n            return false\n        }\n        if (year.length() != 4) {\n            return false\n        }\n        var monthInt = Integer.parseInt(month)\n        if (monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        var dayInt = Integer.parseInt(day)\n        if (dayInt < 1 || dayInt > 31) {\n            return false\n        }\n        var yearInt = Integer.parseInt(year)\n        if (yearInt < 1000 || yearInt > 9999) {\n            return false\n        }\n        if (monthInt == 2) {\n            if (dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        } else {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293128,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprve4sy_q.scala:29:30 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateString[\u001b[31m0\u001b[0m].trim()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmprve4sy_q.scala:30:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateString[\u001b[31m1\u001b[0m].trim()\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmprve4sy_q.scala:31:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateString[\u001b[31m2\u001b[0m].trim()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length == 0) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293128,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpx2iusyar.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpx2iusyar.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpx2iusyar.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpx2iusyar.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpx2iusyar.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\d\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpx2iusyar.scala:30:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\D\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length == 0) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        if (month.length() != 2 || day.length() != 2 || year.length() != 4) {\n            return false\n        }\n        var monthInt = toInt(month)\n        var dayInt = toInt(day)\n        var yearInt = toInt(year)\n        if (monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if (monthInt == 2) {\n            if (dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        } else {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        if (monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if (dayInt < 1 || dayInt > 31) {\n                return false\n            }\n        } else {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293126,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoysb8xue.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonthInt\u001b[0m = toInt(month)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoysb8xue.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdayInt\u001b[0m = toInt(day)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoysb8xue.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myearInt\u001b[0m = toInt(year)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/') {\n            if (date.charAt(5) == '/') {\n                if (date.charAt(8) == '/') {\n                    if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n                        return false\n                    }\n                    if (date.charAt(0) != '0' && date.charAt(1) != '0') {\n                        return false\n                    }\n                    if (date.charAt(3) == '0' && date.charAt(4) == '0') {\n                        return false\n                    }\n                    if (date.charAt(3) != '0' && date.charAt(4) != '0') {\n                        return false\n                    }\n                    if (date.charAt(6) == '0' && date.charAt(7) == '0') {\n                        return false\n                    }\n                    if (date.charAt(6) != '0' && date.charAt(7) != '0') {\n                        return false\n                    }\n                    if (date.charAt(9) == '0' && date.charAt(10) == '0') {\n                        return false\n                    }\n                    if (date.charAt(9) != '0' && date.charAt(10) != '0') {\n                        return false\n                    }\n                    return true\n                } else {\n                    return false\n                }\n            } else {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293131,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpudvkmf2x.scala:67)\n\tat Problem.main(tmpudvkmf2x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"^0*\", \"\")\n        date = date.replaceAll(\"^\\\\d*\", \"\")\n        date = date.replaceAll(\"^\\\\D*\", \"\")\n        date = date.replaceAll(\"^\\\\d*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date = date.replaceAll(\"^\\\\D*$\", \"\")\n        date\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293131,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpq019x75n.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpq019x75n.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpq019x75n.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpq019x75n.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\:\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpq019x75n.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpq019x75n.scala:30:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        date = date.replaceAll(\u001b[31m\"^0*\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/') {\n            return false\n        }\n        if (date.charAt(4) == '/') {\n            return false\n        }\n        if (date.charAt(6) == '/') {\n            return false\n        }\n        if (date.charAt(8) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '1') {\n            return false\n        }\n        if (date.charAt(1) == '1') {\n            return false\n        }\n        if (date.charAt(3) == '1') {\n            return false\n        }\n        if (date.charAt(5) == '1') {\n            return false\n        }\n        if (date.charAt(7) == '1') {\n            return false\n        }\n        if (date.charAt(9) == '1') {\n            return false\n        }\n        if (date.charAt(2) == '2') {\n            return false\n        }\n        if (date.charAt(4) == '2') {\n            return false\n        }\n        if (date.charAt(6) == '2') {\n            return false\n        }\n        if (date.charAt(8) == '2') {\n            return false\n        }\n        if (date.charAt(10) == '2') {\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293133,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdo7opheu.scala:110:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m110 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7opheu.scala:109:1 --------------------\u001b[0m\u001b[0m\n\u001b[31m109 |\u001b[0m}\n\u001b[31m\u001b[31m    |\u001b[0m ^\u001b[0m\n\u001b[31m    |\u001b[0m Found:    Unit\n\u001b[31m    |\u001b[0m Required: Boolean\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpdo7opheu.scala:90:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m90 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 10).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(2, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 4).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(5, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 7).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(8, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 10).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(1, 2).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(2, 3).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(3, 4).equals(\"1\")) {\n            return false\n        }\n        if (date.sub\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293133,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptjamvuvy.scala:83:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptjamvuvy.scala:82:17 ------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m (date.sub\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value sub is not a member of String\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\,\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\;\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\\\\!\", \"\")\n        date = date.replaceAll(\"\\\\(\", \"\")\n        date = date.replaceAll(\"\\\\)\", \"\")\n        date = date.replaceAll(\"\\\\[\", \"\")\n        date = date.replaceAll(\"\\\\]\", \"\")\n        date = date.replaceAll(\"\\\\{\", \"\")\n        date = date.replaceAll(\"\\\\}\", \"\")\n        date = date.replaceAll(\"\\\\|\", \"\")\n        date = date.replaceAll(\"\\\\^\", \"\")\n        date = date.replaceAll(\"\\\\&\", \"\")\n        date = date.replaceAll(\"\\\\*\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\$\", \"\")\n        date = date.replaceAll(\"\\\\#\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\@\", \"\")\n        date = date.replaceAll(\"\\\\~\", \"\")\n        date = date.replaceAll(\"\\\\`\", \"\")\n        date = date.replaceAll(\"\\\\\\\"\", \"\")\n        date = date.replaceAll(\"\\\\\\'\", \"\")\n        date = date.replaceAll(\"\\\\<\", \"\")\n        date = date.replaceAll(\"\\\\>\", \"\")\n        date = date.replaceAll(\"\\\\=\", \"\")\n        date = date.replaceAll(\"\\\\+\", \"\")\n        date = date.replaceAll(\"\\\\/\", \"\")\n        date = date.replaceAll(\"\\\\;\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\\\\!\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpehxaj013.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpehxaj013.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpehxaj013.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpehxaj013.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpehxaj013.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\,\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpehxaj013.scala:30:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\:\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        date = date.trim()\n        var dateArr = date.split(\"-\")\n        if (dateArr.length != 3) {\n            return false\n        }\n        var month = dateArr[0]\n        var day = dateArr[1]\n        var year = dateArr[2]\n        if (month.length() != 2) {\n            return false\n        }\n        if (day.length() != 2) {\n            return false\n        }\n        if (year.length() != 4) {\n            return false\n        }\n        if (!(month.matches(\"[1-2][0-9]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|10|11|12\") && day.matches(\"[1-2][0-9]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31\") && year.matches(\"[0-9]{4}\"))) {\n            return false\n        }\n        if (!(month.matches(\"[1-2][0-9]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|10|11|12\") && day.matches(\"[1-2][0-9]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|10|11|12|13|14|15|\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293131,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpq2sx4iv6.scala:45:115 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mif\u001b[0m (!(month.matches(\u001b[31m\"[1-2][0-9]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|10|11|12\"\u001b[0m) && day.matches(\"[1-2][0-9]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|10|11|12|13|14|15|\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpq2sx4iv6.scala:47:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpq2sx4iv6.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.trim()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpq2sx4iv6.scala:30:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateArr[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpq2sx4iv6.scala:31:25 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateArr[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpq2sx4iv6.scala:32:26 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = da",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length == 0) {\n            return false\n        }\n        date = date.trim()\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        if (date.length() != 10) {\n            return false\n        }\n        date = date.replaceAll(\"^0+\", \"\")\n        date = date.replaceAll(\"^[1-9]+\", \"\")\n        date = date.replaceAll(\"^[1-9][0-9]+\", \"\")\n        date = date.replaceAll(\"^[1-9][0-9][0-9]+\", \"\")\n        date = date.replaceAll(\"^[1-9][0-9][0-9][0-9]+\", \"\")\n        date = date.replaceAll(\"^[1-9][0-9][0-9][0-9][0-9]+\", \"\")\n        date = date.replaceAll(\"^[1-9][0-9][0-9][0-9][0-9][0-9]+\", \"\")\n        date = date.replaceAll(\"^[1-9][0-9][0-9][0-9][0-9][0-9][0-9]+\", \"\")\n        date = date.replaceAll(\"^[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]+\", \"\")\n        date = date.replaceAll(\"^[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]+\", \"\")\n        date = date.replaceAll(\"^[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]+\", \"\")\n        date = date.replaceAll(\"^[1-9][0-9][0-9\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293131,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmppuyw5ab9.scala:45:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        date = date.replaceAll(\"^[1-9][0-9][0-9\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmppuyw5ab9.scala:47:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmppuyw5ab9.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.trim()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmppuyw5ab9.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmppuyw5ab9.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmppuyw5ab9.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        var dateString = date.replaceAll(\"-\", \"\")\n        var dateStringArray = dateString.split(\"/\")\n        var month = dateStringArray[0]\n        var day = dateStringArray[1]\n        var year = dateStringArray[2]\n        if (month.length() != 2) {\n            return false\n        }\n        if (day.length() != 2) {\n            return false\n        }\n        if (year.length() != 4) {\n            return false\n        }\n        var monthInt = Integer.parseInt(month)\n        if (monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        var dayInt = Integer.parseInt(day)\n        if (dayInt < 1 || dayInt > 31) {\n            return false\n        }\n        if (monthInt == 2) {\n            if (dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        }\n        if (monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if (dayInt < 1 || dayInt > 31) {\n                return false\n            }\n        }\n        if (monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293131,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmphu1113z4.scala:27:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateStringArray[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmphu1113z4.scala:28:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateStringArray[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmphu1113z4.scala:29:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateStringArray[\u001b[31m2\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.length() == 10) {\n            date = date.substring(0, 4) + \"-\" + date.substring(4, 6) + \"-\" + date.substring(6, 10)\n        }\n        if (date.length() == 10) {\n            date = date.substring(0, 2) + \"-\" + date.substring(2, 4) + \"-\" + date.substring(4, 10)\n        }\n        if (date.length() == 10) {\n            date = date.substring(0, 2) + \"-\" + date.substring(2, 4) + \"-\" + date.substring(4, 10)\n        }\n        if (date.length() == 10) {\n            date = date.substring(0, 2) + \"-\" + date.substring(2, 4) + \"-\" + date.substring(4, 10)\n        }\n        if (date.length() == 10) {\n            date = date.substring(0, 2) + \"-\" + date.substring(2, 4) + \"-\" + date.substring(4, 10)\n        }\n        if (date.length() == 10) {\n            date = date.substring(0, 2) + \"-\" + date.substring(2, 4) + \"-\" + date.substring(4, 10)\n        }\n        if (date.length() == 10) {\n            date = date.substring(0, 2) + \"-\" + date.substring(2, 4) + \"-\" + date.substring(4, 10)\n        }\n        if (date.length() == 10) {\n            date = date.substring(0, 2) + \"-\" + date.substring(2, 4) + \"-\" + date.substring(4, 10)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpl8vbfjcu.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpl8vbfjcu.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpl8vbfjcu.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpl8vbfjcu.scala:32:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            date = date.substring(\u001b[31m0\u001b[0m, \u001b[31m4\u001b[0m) + \u001b[31m\"-\"\u001b[0m + date.substring(\u001b[31m4\u001b[0m, \u001b[31m6\u001b[0m) + \u001b[31m\"-\"\u001b[0m + date.substring(\u001b[31m6\u001b[0m, \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpl8vbfjcu.scala:35:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            date = date.substring(\u001b[31m0\u001b[0m, \u001b[31m2\u001b[0m) + \u001b[31m\"-\"\u001b[0m + date.substring(\u001b[31m2\u001b[0m, \u001b[31m4\u001b[0m) + \u001b[31m\"-\"\u001b[0m + date.substring(\u001b[31m4\u001b[0m, \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length() == 0) {\n            return false\n        }\n        if(date.length() != 10) {\n            return false\n        }\n        if(date.charAt(2) == '/') {\n            return false\n        }\n        if(date.charAt(4) == '/') {\n            return false\n        }\n        if(date.charAt(6) == '/') {\n            return false\n        }\n        if(date.charAt(0) == '0') {\n            return false\n        }\n        if(date.charAt(1) == '0') {\n            return false\n        }\n        if(date.charAt(3) == '0') {\n            return false\n        }\n        if(date.charAt(5) == '0') {\n            return false\n        }\n        if(date.charAt(7) == '0') {\n            return false\n        }\n        if(date.charAt(8) == '0') {\n            return false\n        }\n        if(date.charAt(9) == '0') {\n            return false\n        }\n        if(date.charAt(0) == '0') {\n            return false\n        }\n        if(date.charAt(1) == '0') {\n            return false\n        }\n        if(date.charAt(3) == '0') {\n            return false\n        }\n        if(date.charAt(5) == '0') {\n            return false\n        }\n        if(date.charAt(7) == '0') {\n            return false\n        }\n        if(date.charAt(9) == '0') {\n            return false\n        }\n        if(date.charAt(2) == '0') {\n            return false\n        }\n        if(date.charAt(4) == '0') {\n            return false\n        }\n        if(date.charAt(6) == '0') {\n            return false\n        }\n        if(date.charAt(8) == '0') {\n            return false\n        }\n        if(date.charAt(10) == '0')\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0wnv4sba.scala:89:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        if (date.length() != 8) {\n            return false\n        }\n        date = date.replaceAll(\"/\", \"\")\n        if (date.length() != 6) {\n            return false\n        }\n        date = date.replaceAll(\"\\\\D\", \"\")\n        if (date.length() != 4) {\n            return false\n        }\n        date = date.replaceAll(\"^0+\", \"\")\n        if (date.length() != 4) {\n            return false\n        }\n        date = date.replaceAll(\"^[1-9]*$\", \"\")\n        if (date.length() != 4) {\n            return false\n        }\n        date = date.replaceAll(\"^[0-9]*$\", \"\")\n        if (date.length() != 4) {\n            return false\n        }\n        date = date.replaceAll(\"^[0-9]*$\", \"\")\n        if (date.length() != 4) {\n            return false\n        }\n        date = date.replaceAll(\"^[0-9]*$\", \"\")\n        if (date.length() != 4) {\n            return false\n        }\n        date = date.replaceAll(\"^[0-9]*$\", \"\")\n        if (date.length() != 4) {\n            return false\n        }\n        date = date.replaceAll(\"^[0-9]*$\", \"\")\n        if (date.length() != 4) {\n            return false\n        }\n        date = date.replaceAll(\"^[0-9]*$\", \"\")\n        if (date.length() != 4) {\n            return false\n        }\n        date = date.replaceAll(\"^[0-9]*$\", \"\")\n        if (date.length() != 4) {\n            return false\n        }\n        date = date.replaceAll(\"^[0-9]*$\", \"\")\n        if (date.length() != 4) {\n            return false\n        }\n        date = date.replaceAll(\"^[0-9\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprws2h6ft.scala:77:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m        date = date.replaceAll(\"^[0-9\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmprws2h6ft.scala:79:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmprws2h6ft.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmprws2h6ft.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmprws2h6ft.scala:33:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\D\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmprws2h6ft.scala:37:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        date = date.replaceAll(\u001b[31m\"^0+\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation avail",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        if (date.length() != 8) {\n            return false\n        }\n        date = date.replaceAll(\"/\", \"\")\n        if (date.length() != 6) {\n            return false\n        }\n        date = date.replaceAll(\" \", \"\")\n        if (date.length() != 4) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"/\", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\" \", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"/\", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\" \", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"/\", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\" \", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"/\", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\" \", \"\")\n        if (date.length() != 2) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        if (date.length()\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2mcjy7pr.scala:87:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp2mcjy7pr.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp2mcjy7pr.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp2mcjy7pr.scala:33:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        date = date.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp2mcjy7pr.scala:37:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp2mcjy7pr.scala:41:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Er",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length == 0) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        if(date.length() != 10) {\n            return false\n        }\n        date = date.replaceAll(\"^0+\", \"\")\n        date = date.replaceAll(\"^[1-9]+\", \"\")\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n        if(date.length() != 10) {\n            return false\n        }\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n        date = date.replaceAll(\"^[0-9]+$\", \"\")\n\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpdu9ghy14.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpdu9ghy14.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpdu9ghy14.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpdu9ghy14.scala:31:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        date = date.replaceAll(\u001b[31m\"^0+\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpdu9ghy14.scala:32:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        date = date.replaceAll(\u001b[31m\"^[1-9]+\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpdu9ghy14.scala:33:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        date = date.replaceAll(\u001b[31m\"^[0-9]+$\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().isEmpty()) {\n            return false\n        }\n        date = date.trim()\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) != '-') {\n            return false\n        }\n        if (date.charAt(5) != '-') {\n            return false\n        }\n        if (date.charAt(8) != '-') {\n            return false\n        }\n        if (date.charAt(0) < '0' || date.charAt(0) > '9') {\n            return false\n        }\n        if (date.charAt(1) < '0' || date.charAt(1) > '9') {\n            return false\n        }\n        if (date.charAt(3) < '0' || date.charAt(3) > '9') {\n            return false\n        }\n        if (date.charAt(4) < '0' || date.charAt(4) > '9') {\n            return false\n        }\n        if (date.charAt(6) < '0' || date.charAt(6) > '9') {\n            return false\n        }\n        if (date.charAt(7) < '0' || date.charAt(7) > '9') {\n            return false\n        }\n        if (date.charAt(9) < '0' || date.charAt(9) > '9') {\n            return false\n        }\n        if (date.charAt(10) < '0' || date.charAt(10) > '9') {\n            return false\n        }\n        if (date.charAt(2) > '2') {\n            return false\n        }\n        if (date.charAt(5) > '5') {\n            return false\n        }\n        if (date.charAt(8) > '8') {\n            return false\n        }\n        if (date.charAt(0) > '2') {\n            return false\n        }\n        if (date.charAt(1) > '5') {\n            return false\n        }\n\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293133,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpwti7rnk0.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.trim()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwti7rnk0.scala:74:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m1\u001b[0m) > \u001b[31m'5'\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Boolean\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m75 |\u001b[0m            \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m76 |\u001b[0m        }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.isEmpty()) {\n            return false\n        }\n        var dateString = date.split(\"-\")\n        var month = dateString[0].toInt\n        var day = dateString[1].toInt\n        var year = dateString[2].toInt\n        if(month < 1 || month > 12) {\n            return false\n        }\n        if(day < 1 || day > 31) {\n            return false\n        }\n        if(month == 2) {\n            if(day < 1 || day > 29) {\n                return false\n            }\n        } else {\n            if(day < 1 || day > 30) {\n                return false\n            }\n        }\n        if(year < 1000 || year > 9999) {\n            return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293133,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpclz9appp.scala:26:30 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateString[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpclz9appp.scala:27:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateString[\u001b[31m1\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpclz9appp.scala:28:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateString[\u001b[31m2\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        if (date.length() != 8) {\n            return false\n        }\n        date = date.replaceAll(\"^0*\", \"\")\n        date = date.replaceAll(\"^[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]$\", \"\")\n        date = date.replaceAll(\"^[^0-9]$\", \"\")\n        date = date.replaceAll(\"^[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"^[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]$\", \"\")\n        date = date.replaceAll(\"^[^0-9]$\", \"\")\n        date = date.replaceAll(\"^[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]$\", \"\")\n        date = date.replaceAll(\"^[^0-9]$\", \"\")\n        date = date.replaceAll(\"^[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]$\", \"\")\n        date = date.replaceAll(\"^[^0-9]$\", \"\")\n        date = date.replaceAll(\"^[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]$\", \"\")\n        date = date.replaceAll(\"^[^0-9]$\", \"\")\n        date = date.replaceAll(\"^[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]$\", \"\")\n        date = date.replaceAll(\"^[^0-9]$\", \"\")\n        date = date.replaceAll(\"^[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]$\", \"\")\n        date = date.replaceAll(\"^[^0-9]$\", \"\")\n\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293133,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp5syms55r.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"[^0-9]\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp5syms55r.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"^0*\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp5syms55r.scala:30:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        date = date.replaceAll(\u001b[31m\"^[^0-9]\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp5syms55r.scala:31:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        date = date.replaceAll(\u001b[31m\"[^0-9]$\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp5syms55r.scala:32:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        date = date.replaceAll(\u001b[31m\"^[^0-9]$\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp5syms55r.scala:33:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        date = date.replaceAll(\u001b[31m\"^[^0-9]\"\u001b[0m, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().isEmpty()) {\n            return false\n        }\n        var dateArray = date.split(\"-\")\n        var month = dateArray[0].toInt\n        var day = dateArray[1].toInt\n        var year = dateArray[2].toInt\n        if (month < 1 || month > 12) {\n            return false\n        }\n        if (day < 1 || day > 31) {\n            return false\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpho_dieed.scala:26:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateArray[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpho_dieed.scala:27:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateArray[\u001b[31m1\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpho_dieed.scala:28:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateArray[\u001b[31m2\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length() == 0) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        if(month.length() != 2 || day.length() != 2 || year.length() != 4) {\n            return false\n        }\n        var monthInt = toInt(month)\n        var dayInt = toInt(day)\n        var yearInt = toInt(year)\n        if(monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if(monthInt == 2) {\n            if(dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        } else {\n            if(dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        if(yearInt < 1000 || yearInt > 9999) {\n            return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293133,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy8u2vil1.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonthInt\u001b[0m = toInt(month)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy8u2vil1.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdayInt\u001b[0m = toInt(day)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy8u2vil1.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myearInt\u001b[0m = toInt(year)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        if (month.length() != 2 || day.length() != 2 || year.length() != 4) {\n            return false\n        }\n        var monthInt = toInt(month)\n        var dayInt = toInt(day)\n        var yearInt = toInt(year)\n        if (monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if (monthInt == 2) {\n            if (dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        } else {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        if (monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        } else {\n            if (dayInt < 1 || dayInt > 31) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplppvc3en.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonthInt\u001b[0m = toInt(month)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplppvc3en.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdayInt\u001b[0m = toInt(day)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplppvc3en.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myearInt\u001b[0m = toInt(year)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().isEmpty()) return false\n        val month = date.substring(0, 2)\n        val day = date.substring(3, 5)\n        val year = date.substring(6, 10)\n        val monthNum = toInt(month)\n        val dayNum = toInt(day)\n        val yearNum = toInt(year)\n        if (monthNum < 1 || monthNum > 12) return false\n        if (dayNum < 1 || dayNum > 31) return false\n        if (monthNum == 2 && dayNum > 29) return false\n        if (monthNum == 1 || monthNum == 3 || monthNum == 5 || monthNum == 7 || monthNum == 8 || monthNum == 10 || monthNum == 12) {\n            if (dayNum < 1 || dayNum > 30) return false\n        } else if (monthNum == 4 || monthNum == 6 || monthNum == 9 || monthNum == 11) {\n            if (dayNum < 1 || dayNum > 29) return false\n        }\n        if (yearNum < 1900 || yearNum > 2100) return false\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8z80x8nz.scala:26:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmonthNum\u001b[0m = toInt(month)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8z80x8nz.scala:27:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdayNum\u001b[0m = toInt(day)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8z80x8nz.scala:28:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36myearNum\u001b[0m = toInt(year)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date == \"\") {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/' && date.charAt(5) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '/' && date.charAt(7) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0' && date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(2) == '0' && date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0' && date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0' && date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0' && date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(2) == '0' && date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0' && date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0' && date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0' && date.charAt(6) == '0')\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6duint47.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var month = date.split(\"-\")[0]\n        var day = date.split(\"-\")[1]\n        var year = date.split(\"-\")[2]\n        if (month.length() != 2 || day.length() != 2 || year.length() != 4) {\n            return false\n        }\n        if (month.toInt() < 1 || month.toInt() > 12) {\n            return false\n        }\n        if (day.toInt() < 1 || day.toInt() > 31) {\n            return false\n        }\n        if (month.toInt() == 2) {\n            if (day.toInt() < 1 || day.toInt() > 29) {\n                return false\n            }\n        }\n        if (month.toInt() == 1 || month.toInt() == 3 || month.toInt() == 5 || month.toInt() == 7 || month.toInt() == 8 || month.toInt() == 10 || month.toInt() == 12) {\n            if (day.toInt() < 1 || day.toInt() > 30) {\n                return false\n            }\n        }\n        if (month.toInt() == 4 || month.toInt() == 6 || month.toInt() == 9 || month.toInt() == 11) {\n            if (day.toInt() < 1 || day.toInt() > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpbn_m1sh0.scala:25:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbn_m1sh0.scala:26:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbn_m1sh0.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m2\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date.replaceAll(\"[^0-9]\", \"\")\n        date = date\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpbg2m4996.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"[^0-9]\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpbg2m4996.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"[^0-9]\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpbg2m4996.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"[^0-9]\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpbg2m4996.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"[^0-9]\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpbg2m4996.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"[^0-9]\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpbg2m4996.scala:30:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        date = date.replaceAll(\u001b[31m\"[^0-9]\"\u001b[0m, \u001b[31m\"",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) return false\n        if (date.length() != 10) return false\n        if (date.charAt(2) != '-') return false\n        if (date.charAt(5) != '-') return false\n        if (date.charAt(8) != '-') return false\n        if (date.charAt(0) < '0' || date.charAt(0) > '9') return false\n        if (date.charAt(1) < '0' || date.charAt(1) > '9') return false\n        if (date.charAt(3) < '0' || date.charAt(3) > '9') return false\n        if (date.charAt(4) < '0' || date.charAt(4) > '9') return false\n        if (date.charAt(6) < '0' || date.charAt(6) > '9') return false\n        if (date.charAt(7) < '0' || date.charAt(7) > '9') return false\n        if (date.charAt(9) < '0' || date.charAt(9) > '9') return false\n        if (date.charAt(10) < '0' || date.charAt(10) > '9') return false\n        if (date.charAt(2) == '-') {\n            if (date.charAt(3) < '1' || date.charAt(3) > '9') return false\n            if (date.charAt(4) < '1' || date.charAt(4) > '9') return false\n            if (date.charAt(5) < '1' || date.charAt(5) > '9') return false\n            if (date.charAt(6) < '1' || date.charAt(6) > '9') return false\n            if (date.charAt(7) < '1' || date.charAt(7) > '9') return false\n            if (date.charAt(8) < '1' || date.charAt(8) > '9') return false\n            if (date.charAt(9) < '1' ||\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293139,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmprcga2toi.scala:42:39 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m            \u001b[33mif\u001b[0m (date.charAt(\u001b[31m9\u001b[0m) < \u001b[31m'1'\u001b[0m ||\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprcga2toi.scala:64:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprcga2toi.scala:63:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmprcga2toi.scala:44:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        if (date.length() != 8) {\n            return false\n        }\n        if (date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(0) < '1' || date.charAt(0) > '12') {\n            return false\n        }\n        if (date.charAt(1) < '1' || date.charAt(1) > '12') {\n            return false\n        }\n        if (date.charAt(3) < '1' || date.charAt(3) > '12') {\n            return false\n        }\n        if (date.charAt(5) < '1' || date.charAt(5) > '12') {\n            return false\n        }\n        if (date.charAt(7) < '1' || date.charAt(7) > '31') {\n            return false\n        }\n        if (date.charAt(1) == '1' && date.charAt(3) == '1' && date.charAt(5) == '1') {\n            return false\n        }\n        if (date.charAt(1) == '4' && date.charAt(3) == '1' && date.charAt(5) == '1') {\n            return false\n        }\n        if (date.charAt(1) == '6' && date.charAt(3) == '1' && date.charAt(5) == '1') {\n            return false\n        }\n        if (date.charAt(1) == '1' && date.charAt(3) == '1' && date.charAt(5) == '1' && date.charAt(7) == '1') {\n            return false\n        }\n        if (date.charAt(1) == '4' && date.charAt\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293138,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpbgq0ordu.scala:38:53 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m0\u001b[0m) < \u001b[31m'1'\u001b[0m || date.charAt(\u001b[31m0\u001b[0m) > '1\u001b[31m2\u001b[0m') {\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                              unclosed character literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbgq0ordu.scala:38:56 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m0\u001b[0m) < \u001b[31m'1'\u001b[0m || date.charAt(\u001b[31m0\u001b[0m) > '1\u001b[31m2\u001b[0m') {\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                              unclosed character literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbgq0ordu.scala:41:53 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m1\u001b[0m) < \u001b[31m'1'\u001b[0m || date.charAt(\u001b[31m1\u001b[0m) > '1\u001b[31m2\u001b[0m') {\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                              unclosed character literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbgq0ordu.scala:41:56 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m1\u001b[0m) < \u001b[31m'1'\u001b[0m || date.charAt(\u001b[31m1\u001b[0m) > '1\u001b[31m2\u001b[0m') {\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                              unclosed character literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbgq0ordu.scala:44:53 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m3\u001b[0m) < \u001b[31m'1'\u001b[0m || date.charAt(\u001b[31m3\u001b[0m) > '1\u001b[31m2\u001b[0m') {\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                              unclosed character literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbgq0ordu.scala:44:56 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mif\u001b[0m (date",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) return false\n        if (date.length() != 10) return false\n        if (date.charAt(2) != '/') return false\n        if (date.charAt(5) != '/') return false\n        if (date.charAt(8) != '-') return false\n        if (date.charAt(0) < '0' || date.charAt(0) > '9') return false\n        if (date.charAt(1) < '0' || date.charAt(1) > '9') return false\n        if (date.charAt(3) < '0' || date.charAt(3) > '9') return false\n        if (date.charAt(4) < '0' || date.charAt(4) > '9') return false\n        if (date.charAt(6) < '0' || date.charAt(6) > '9') return false\n        if (date.charAt(7) < '0' || date.charAt(7) > '9') return false\n        if (date.charAt(9) != '-') return false\n        if (date.charAt(10) != '-') return false\n        if (date.charAt(11) != '-') return false\n        if (date.charAt(12) != '-') return false\n        if (date.charAt(13) != '-') return false\n        if (date.charAt(14) != '-') return false\n        if (date.charAt(15) != '-') return false\n        if (date.charAt(16) != '-') return false\n        if (date.charAt(17) != '-') return false\n        if (date.charAt(18) != '-') return false\n        if (date.charAt(19) != '-') return false\n        if (date.charAt(20) != '-') return false\n        if (date.charAt(21) != '-') return false\n        if (date.charAt(22) != '-') return false\n        if (date.charAt(23) != '-') return false\n        if (date.\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293138,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptfqq_gcv.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length == 0) {\n            return false\n        }\n        var month = date.split(\"-\")[0]\n        var day = date.split(\"-\")[1]\n        var year = date.split(\"-\")[2]\n        if (month.length != 2) {\n            return false\n        }\n        if (day.length != 2) {\n            return false\n        }\n        if (year.length != 4) {\n            return false\n        }\n        var monthNum = toInt(month)\n        var dayNum = toInt(day)\n        var yearNum = toInt(year)\n        if (monthNum < 1 || monthNum > 12) {\n            return false\n        }\n        if (dayNum < 1 || dayNum > 31) {\n            return false\n        }\n        if (monthNum == 2) {\n            if (dayNum < 1 || dayNum > 29) {\n                return false\n            }\n        } else if (monthNum == 1 || monthNum == 3 || monthNum == 5 || monthNum == 7 || monthNum == 8 || monthNum == 10 || monthNum == 12) {\n            if (dayNum < 1 || dayNum > 30) {\n                return false\n            }\n        } else if (monthNum == 4 || monthNum == 6 || monthNum == 9 || monthNum == 11) {\n            if (dayNum < 1 || dayNum > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293138,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprnrxoabk.scala:25:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmprnrxoabk.scala:26:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmprnrxoabk.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m2\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprnrxoabk.scala:37:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonthNum\u001b[0m = toInt(month)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprnrxoabk.scala:38:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdayNum\u001b[0m = toInt(day)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprnrxoabk.scala:39:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myearNum\u001b[0m = toInt(year)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 10).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 10).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 10).equals(\"0\")) {\n            return false\n        }\n        if (\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293138,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpn2w77ekh.scala:82:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m (\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length == 0) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"^0*\", \"\")\n        date = date.replaceAll(\"^\\\\d*\", \"\")\n        date = date.replaceAll(\"^\\\\d*\\\\d*\", \"\")\n        date = date.replaceAll(\"^\\\\d*\\\\d*\\\\d*\", \"\")\n        date = date.replaceAll(\"^\\\\d*\\\\d*\\\\d*\\\\d*\", \"\")\n        date = date.replaceAll(\"^\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\", \"\")\n        date = date.replaceAll(\"^\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\", \"\")\n        date = date.replaceAll(\"^\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\", \"\")\n        date = date.replaceAll(\"^\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\", \"\")\n        date = date.replaceAll(\"^\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\", \"\")\n        date = date.replaceAll(\"^\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\", \"\")\n        date = date.replaceAll(\"^\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\", \"\")\n        date = date.replaceAll(\"^\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\", \"\")\n        date = date.replaceAll(\"^\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293138,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpxe8b6c3e.scala:42:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        date = date.replaceAll(\"^\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\\\\d*\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxe8b6c3e.scala:44:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpxe8b6c3e.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpxe8b6c3e.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpxe8b6c3e.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpxe8b6c3e.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) ==\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293139,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp8zooa3ci.scala:88:29 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m7\u001b[0m) ==\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293139,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp2lb_5498.scala:88:30 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m7\u001b[0m) == '\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              unclosed character literal\n\u001b[33m\u001b[33m-- [E129] Potential Issue Warning: /tmp/tmp2lb_5498.scala:89:4 -----------------\u001b[0m\u001b[0m\n\u001b[33m88 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m7\u001b[0m) == '\n\u001b[33m89 |\u001b[0m    }\n\u001b[33m\u001b[33m   |\u001b[0m                               ^\u001b[0m\n\u001b[33m   |\u001b[0mA pure expression does nothing in statement position; you may be omitting necessary parentheses\n\u001b[33m   |\u001b[0m\n\u001b[33m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 warning found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        var monthInt = Integer.parseInt(month)\n        var dayInt = Integer.parseInt(day)\n        var yearInt = Integer.parseInt(year)\n        if (monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if (dayInt < 1 || dayInt > 31) {\n            return false\n        }\n        if (monthInt == 2) {\n            if (dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        }\n        if (monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        if (monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293142,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 6, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.validDate(tmpgo9rt11w.scala:27)\n\tat Problem$.main(tmpgo9rt11w.scala:57)\n\tat Problem.main(tmpgo9rt11w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.length() == 0) {\n            return false\n        }\n        if(date.length() != 10) {\n            return false\n        }\n        if(date.charAt(2) == '0') {\n            return false\n        }\n        if(date.charAt(5) == '0') {\n            return false\n        }\n        if(date.charAt(8) == '0') {\n            return false\n        }\n        if(date.charAt(0) == '0') {\n            return false\n        }\n        if(date.charAt(1) == '0') {\n            return false\n        }\n        if(date.charAt(3) == '0') {\n            return false\n        }\n        if(date.charAt(4) == '0') {\n            return false\n        }\n        if(date.charAt(6) == '0') {\n            return false\n        }\n        if(date.charAt(7) == '0') {\n            return false\n        }\n        if(date.charAt(9) == '0') {\n            return false\n        }\n        if(date.charAt(2) != '0') {\n            if(date.charAt(2) != '1' && date.charAt(2) != '2' && date.charAt(2) != '3' && date.charAt(2) != '4' && date.charAt(2) != '5' && date.charAt(2) != '6' && date.charAt(2) != '7' && date.charAt(2) != '8' && date.charAt(2) != '9' && date.charAt(2) != '0') {\n                return false\n            }\n        }\n        if(date.charAt(5) != '0') {\n            if(date.charAt(5) != '1' && date.charAt(5) != '2' && date.charAt(5) != '3' && date.charAt(5) != '4' && date.charAt(5) != '5' && date.charAt(5) != '6' && date.char\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293143,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6mv7fx80.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6mv7fx80.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6mv7fx80.scala:64:170 -----------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m            \u001b[33mif\u001b[0m(date.charAt(\u001b[31m5\u001b[0m) != \u001b[31m'1'\u001b[0m && date.charAt(\u001b[31m5\u001b[0m) != \u001b[31m'2'\u001b[0m && date.charAt(\u001b[31m5\u001b[0m) != \u001b[31m'3'\u001b[0m && date.charAt(\u001b[31m5\u001b[0m) != \u001b[31m'4'\u001b[0m && date.charAt(\u001b[31m5\u001b[0m) != \u001b[31m'5'\u001b[0m && date.charAt(\u001b[31m5\u001b[0m) != \u001b[31m'6'\u001b[0m && date.char\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         value char is not a member of String - did you mean date.chars?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mv7fx80.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp6mv7fx80.scala:66:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date == \"\") {\n            return false\n        }\n        if(date.length() != 10) {\n            return false\n        }\n        if(date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(0, 2).equals(\"00\")) {\n            return false\n        }\n        if(date.substring(3, 5).equals(\"00\")) {\n            return false\n        }\n        if(date.substring(6, 8).equals(\"00\")) {\n            return false\n        }\n        if(date.substring(0, 2).equals(\"99\")) {\n            return false\n        }\n        if(date.substring(3, 5).equals(\"99\")) {\n            return false\n        }\n        if(date.substring(6, 8).equals(\"99\")) {\n            return false\n        }\n        if(date.substring(0, 2).equals(\"13\")) {\n            return false\n        }\n        if(date.substring(3, 5).equals(\"13\")) {\n            return false\n        }\n        if(date.substring(6, 8).equals(\"13\")) {\n            return false\n        }\n        if(date.substring(0, 2).equals(\"15\")) {\n            return false\n        }\n        if(date.substring(3, 5).equals(\"15\")) {\n            return false\n        }\n        if(date.substring(6, 8).equals(\"15\")) {\n            return false\n        }\n        if(date.substring(0, 2).equals(\"19\")) {\n            return false\n        }\n        if(date.substring(3, 5).equals(\"19\")) {\n            return false\n        }\n        if(date.substring(6, 8).equals(\"19\")) {\n            return false\n        }\n        if(date.substring(0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293142,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnvy3jezi.scala:83:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnvy3jezi.scala:82:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m(date.substring(\u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Found:    String\n\u001b[31m   |\u001b[0m           Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/' && date.charAt(5) == '/') {\n            return false\n        }\n        if (date.charAt(2) == '-' && date.charAt(5) == '-') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0' && date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0' && date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0' && date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0' && date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0' && date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0' && date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0' && date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0' && date.charAt(4)\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293119,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgiyahhpx.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgiyahhpx.scala:67:48 --------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m3\u001b[0m) == \u001b[31m'0'\u001b[0m && date.charAt(\u001b[31m4\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    Char\n\u001b[31m   |\u001b[0m                                     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var dateString = date.trim()\n        var dateArray = dateString.split(\"-\")\n        if (dateArray.length != 3) {\n            return false\n        }\n        var month = dateArray[0]\n        var day = dateArray[1]\n        var year = dateArray[2]\n        if (month.length() != 2) {\n            return false\n        }\n        if (day.length() != 2) {\n            return false\n        }\n        if (year.length() != 4) {\n            return false\n        }\n        if (month.toInt() < 1 || month.toInt() > 12) {\n            return false\n        }\n        if (day.toInt() < 1 || day.toInt() > 31) {\n            return false\n        }\n        if (month.toInt() == 2) {\n            if (day.toInt() < 1 || day.toInt() > 29) {\n                return false\n            }\n        }\n        if (month.toInt() == 1 || month.toInt() == 3 || month.toInt() == 5 || month.toInt() == 7 || month.toInt() == 8 || month.toInt() == 10 || month.toInt() == 12) {\n            if (day.toInt() < 1 || day.toInt() > 30) {\n                return false\n            }\n        }\n        if (month.toInt() == 4 || month.toInt() == 6 || month.toInt() == 9 || month.toInt() == 11) {\n            if (day.toInt() < 1 || day.toInt() > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293140,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp86moh3nu.scala:30:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateArray[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp86moh3nu.scala:31:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateArray[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp86moh3nu.scala:32:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateArray[\u001b[31m2\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) > '2') {\n            return false\n        }\n        if (date.charAt(1) > '0') {\n            return false\n        }\n        if (date.charAt(3) > '0') {\n            return false\n        }\n        if (date.charAt(5) > '0') {\n            return false\n        }\n        if (date.charAt(7) > '0') {\n            return false\n        }\n        if (date.charAt(9) > '0') {\n            return false\n        }\n        if (date.charAt(2) > '0') {\n            return false\n        }\n        if (date.charAt(4) > '0') {\n            return false\n        }\n        if (date.charAt(6) > '0') {\n            return false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293140,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgj29jogr.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgj29jogr.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgj29jogr.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj29jogr.scala:85:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m6\u001b[0m) > \u001b[31m'0'\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Boolean\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m86 |\u001b[0m            \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m87 |\u001b[0m        }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length == 0) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        if(month.length == 1) {\n            month = \"0\" + month\n        }\n        if(day.length == 1) {\n            day = \"0\" + day\n        }\n        if(year.length == 2) {\n            year = \"20\" + year\n        }\n        if(month.length != 2 || day.length != 2 || year.length != 4) {\n            return false\n        }\n        var monthInt = Integer.parseInt(month)\n        var dayInt = Integer.parseInt(day)\n        var yearInt = Integer.parseInt(year)\n        if(monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if(dayInt < 1 || dayInt > 31) {\n            return false\n        }\n        if(monthInt == 2 && dayInt < 29) {\n            return false\n        }\n        if(monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if(dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        if(monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n            if(dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293144,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 6, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.validDate(tmpqmdns11l.scala:27)\n\tat Problem$.main(tmpqmdns11l.scala:67)\n\tat Problem.main(tmpqmdns11l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        date = date.trim()\n        var dateArray = date.split(\"-\")\n        if (dateArray.length != 3) {\n            return false\n        }\n        var month = dateArray[0]\n        var day = dateArray[1]\n        var year = dateArray[2]\n        if (month.length() != 2) {\n            return false\n        }\n        if (day.length() != 2) {\n            return false\n        }\n        if (year.length() != 4) {\n            return false\n        }\n        if (month.toInt() < 1 || month.toInt() > 12) {\n            return false\n        }\n        if (day.toInt() < 1 || day.toInt() > 31) {\n            return false\n        }\n        if (month.toInt() == 2) {\n            if (day.toInt() < 1 || day.toInt() > 29) {\n                return false\n            }\n        } else {\n            if (day.toInt() < 1 || day.toInt() > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293141,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpb9hfwagr.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.trim()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb9hfwagr.scala:30:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateArray[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb9hfwagr.scala:31:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateArray[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb9hfwagr.scala:32:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateArray[\u001b[31m2\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/') {\n            return false\n        }\n        if (date.charAt(4) == '/') {\n            return false\n        }\n        if (date.charAt(6) == '/') {\n            return false\n        }\n        if (date.charAt(8) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '1') {\n            return false\n        }\n        if (date.charAt(1) == '1') {\n            return false\n        }\n        if (date.charAt(3) == '1') {\n            return false\n        }\n        if (date.charAt(5) == '1') {\n            return false\n        }\n        if (date.charAt(7) == '1') {\n            return false\n        }\n        if (date.charAt(9) == '1') {\n            return false\n        }\n        if (date.charAt(0) == '2') {\n            return false\n        }\n        if (date.charAt(1) == '2') {\n            return false\n        }\n        if (date.charAt(3) == '2') {\n            return false\n        }\n        if (date.charAt(5) == '2') {\n            return false\n        }\n        if (date.charAt(7) == '2') {\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293144,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkerlzdb3.scala:110:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m110 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkerlzdb3.scala:109:1 --------------------\u001b[0m\u001b[0m\n\u001b[31m109 |\u001b[0m}\n\u001b[31m\u001b[31m    |\u001b[0m ^\u001b[0m\n\u001b[31m    |\u001b[0m Found:    Unit\n\u001b[31m    |\u001b[0m Required: Boolean\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpkerlzdb3.scala:90:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m90 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() < 8) {\n            return false\n        }\n        if (date.length() > 10) {\n            return false\n        }\n        if (date.length() == 10) {\n            if (date.substring(4, 6).toInt() > 12) {\n                return false\n            }\n        }\n        if (date.length() == 8) {\n            if (date.substring(4, 6).toInt() > 12) {\n                return false\n            }\n        }\n        if (date.length() == 6) {\n            if (date.substring(2, 4).toInt() > 12) {\n                return false\n            }\n        }\n        if (date.length() == 4) {\n            if (date.substring(0, 2).toInt() > 12) {\n                return false\n            }\n        }\n        if (date.length() == 2) {\n            if (date.substring(0, 1).toInt() > 12) {\n                return false\n            }\n        }\n        if (date.length() == 1) {\n            if (date.substring(0, 0).toInt() > 12) {\n                return false\n            }\n        }\n        if (date.length() == 10) {\n            if (date.substring(6, 8).toInt() > 31) {\n                return false\n            }\n        }\n        if (date.length() == 8) {\n            if (date.substring(6, 8).toInt() > 30) {\n                return false\n            }\n        }\n        if (date.length() == 6) {\n            if (date.substring(4, 6).toInt() > 30) {\n                return false\n            }\n        }\n        if (date.length() == 4) {\n            if (date.substring(2, 4).toInt() > 30) {\n                return false\n            }\n        }\n        if (date.length() == 2) {\n            if (date.substring(0, 2).toInt() > 30) {\n                return false\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293141,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsq69q6df.scala:105:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m105 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpsq69q6df.scala:32:37 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mif\u001b[0m (date.substring(\u001b[31m4\u001b[0m, \u001b[31m6\u001b[0m).toInt() > \u001b[31m12\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpsq69q6df.scala:37:37 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            \u001b[33mif\u001b[0m (date.substring(\u001b[31m4\u001b[0m, \u001b[31m6\u001b[0m).toInt() > \u001b[31m12\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpsq69q6df.scala:42:37 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m            \u001b[33mif\u001b[0m (date.substring(\u001b[31m2\u001b[0m, \u001b[31m4\u001b[0m).toInt() > \u001b[31m12\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpsq69q6df.scala:47:37 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m            \u001b[33mif\u001b[0m (date.substring(\u001b[31m0\u001b[0m, \u001b[31m2\u001b[0m).toInt() > \u001b[31m12\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation avai",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        date = date.trim()\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\,\", \"\")\n        date = date.replaceAll(\"\\\\(\", \"\")\n        date = date.replaceAll(\"\\\\)\", \"\")\n        date = date.replaceAll(\"\\\\[\", \"\")\n        date = date.replaceAll(\"\\\\]\", \"\")\n        date = date.replaceAll(\"\\\\{\", \"\")\n        date = date.replaceAll(\"\\\\}\", \"\")\n        date = date.replaceAll(\"\\\\|\", \"\")\n        date = date.replaceAll(\"\\\\^\", \"\")\n        date = date.replaceAll(\"\\\\$\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\&\", \"\")\n        date = date.replaceAll(\"\\\\*\", \"\")\n        date = date.replaceAll(\"\\\\+\", \"\")\n        date = date.replaceAll(\"\\\\=\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\\\\\\\"\", \"\")\n        date = date.replaceAll(\"\\\\<\", \"\")\n        date = date.replaceAll(\"\\\\>\", \"\")\n        date = date.replaceAll(\"\\\\;\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\,\", \"\")\n        date = date.replaceAll(\"\\\\!\", \"\")\n        date = date.replaceAll(\"\\\\@\", \"\")\n        date = date.replaceAll(\"\\\\#\", \"\")\n        date = date.replaceAll(\"\\\\$\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\&\", \"\")\n        date = date.replaceAll(\"\\\\*\", \"\")\n        date = date.replaceAll(\"\\\\+\",\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293143,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsefxrpxz.scala:61:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpsefxrpxz.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.trim()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpsefxrpxz.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpsefxrpxz.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpsefxrpxz.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpsefxrpxz.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpsefxrpxz.scala:30:13 --",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) return false\n        if (date.length() != 10) return false\n        if (date.charAt(2) == '/') return false\n        if (date.charAt(5) == '/') return false\n        if (date.charAt(8) == '/') return false\n        if (date.charAt(0) == '0') return false\n        if (date.charAt(3) == '0') return false\n        if (date.charAt(1) == '0') return false\n        if (date.charAt(4) == '0') return false\n        if (date.charAt(6) == '0') return false\n        if (date.charAt(7) == '0') return false\n        if (date.charAt(9) == '0') return false\n        if (date.charAt(2) == '1') return false\n        if (date.charAt(5) == '1') return false\n        if (date.charAt(8) == '1') return false\n        if (date.charAt(0) == '1') return false\n        if (date.charAt(3) == '1') return false\n        if (date.charAt(1) == '1') return false\n        if (date.charAt(4) == '1') return false\n        if (date.charAt(6) == '1') return false\n        if (date.charAt(7) == '1') return false\n        if (date.charAt(9) == '1') return false\n        if (date.charAt(2) == '2') return false\n        if (date.charAt(5) == '2') return false\n        if (date.charAt(8) == '2') return false\n        if (date.charAt(0) == '2') return false\n        if (date.charAt(3) == '2') return false\n        if (date.charAt(1) == '2') return false\n        if (date.charAt(4) == '2') return false\n        if (date.charAt(6) == '2') return false\n        if (date.charAt(7) == '2') return\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293144,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxs906h_y.scala:52:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m7\u001b[0m) == \u001b[31m'2'\u001b[0m) \u001b[33mreturn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Unit\n\u001b[31m   |\u001b[0m                                   Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0')\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293142,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpenqcwp_z.scala:89:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date == \"\") {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/') {\n            return false\n        }\n        if (date.charAt(4) == '/') {\n            return false\n        }\n        if (date.charAt(6) == '/') {\n            return false\n        }\n        if (date.charAt(8) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '1') {\n            return false\n        }\n        if (date.charAt(1) == '1') {\n            return false\n        }\n        if (date.charAt(3) == '1') {\n            return false\n        }\n        if (date.charAt(5) == '1') {\n            return false\n        }\n        if (date.charAt(7) == '1') {\n            return false\n        }\n        if (date.charAt(9) == '1') {\n            return false\n        }\n        if (date.charAt(0) == '2') {\n            return false\n        }\n        if (date.charAt(1) == '2') {\n            return false\n        }\n        if (date.charAt(3) == '2') {\n            return false\n        }\n        if (date.charAt(5) == '2') {\n            return false\n        }\n        if (date.charAt(7) == '2') {\n            return false\n        \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0bl0yj48.scala:112:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m112 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0bl0yj48.scala:111:1 --------------------\u001b[0m\u001b[0m\n\u001b[31m111 |\u001b[0m}\n\u001b[31m\u001b[31m    |\u001b[0m ^\u001b[0m\n\u001b[31m    |\u001b[0m Found:    Unit\n\u001b[31m    |\u001b[0m Required: Boolean\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp0bl0yj48.scala:92:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m92 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().isEmpty()) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"/\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"^0+\", \"\")\n        date = date.replaceAll(\"^\\\\d+$\", \"\")\n        date = date.replaceAll(\"^\\\\d+\\\\.\\\\d+$\", \"\")\n        date = date.replaceAll(\"^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$\", \"\")\n        date = date.replaceAll(\"^\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+$\", \"\")\n        date = date.replaceAll(\"^\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+$\", \"\")\n        date = date.replaceAll(\"^\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+$\", \"\")\n        date = date.replaceAll(\"^\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+$\", \"\")\n        date = date.replaceAll(\"^\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+$\", \"\")\n        date = date.replaceAll(\"^\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+$\", \"\")\n        date = date.replaceAll(\"^\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+$\", \"\")\n        date = date.replaceAll(\"^\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293142,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp8evcjiwx.scala:40:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        date = date.replaceAll(\"^\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8evcjiwx.scala:42:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp8evcjiwx.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"/\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp8evcjiwx.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp8evcjiwx.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp8evcjiwx.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"1\") && date.substring(1, 3).equals(\"1\") && date.substring(3, 5).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"2\") && date.substring(1, 3).equals(\"2\") && date.substring(3, 5).equals(\"2\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"3\") && date.substring(1, 3).equals(\"3\") && date.substring(3, 5).equals(\"3\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"4\") && date.substring(1, 3).equals(\"4\") && date.substring(3, 5).equals(\"4\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"5\") && date.substring(1, 3).equals(\"5\") && date.substring(3\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptgpqslij.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptgpqslij.scala:64:98 --------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m        \u001b[33mif\u001b[0m (date.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m).equals(\u001b[31m\"5\"\u001b[0m) && date.substring(\u001b[31m1\u001b[0m, \u001b[31m3\u001b[0m).equals(\u001b[31m\"5\"\u001b[0m) && date.substring(\u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Found:    String\n\u001b[31m   |\u001b[0m                                                       Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var dateArray = date.split(\"-\")\n        var month = dateArray[0].toInt\n        var day = dateArray[1].toInt\n        var year = dateArray[2].toInt\n        if (month < 1 || month > 12) {\n            return false\n        }\n        if (day < 1 || day > 31) {\n            return false\n        }\n        if (month == 2 && day > 29) {\n            return false\n        }\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpvkf_nyk8.scala:26:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateArray[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvkf_nyk8.scala:27:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateArray[\u001b[31m1\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvkf_nyk8.scala:28:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateArray[\u001b[31m2\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0') {\n            return false\n        }\n        if (date.charAt(10) == '0') {\n\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxcdq7nfj.scala:111:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m111 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxcdq7nfj.scala:110:1 --------------------\u001b[0m\u001b[0m\n\u001b[31m110 |\u001b[0m}\n\u001b[31m\u001b[31m    |\u001b[0m ^\u001b[0m\n\u001b[31m    |\u001b[0m Found:    Unit\n\u001b[31m    |\u001b[0m Required: Boolean\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpxcdq7nfj.scala:91:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m91 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        if (month.length() != 2 || day.length() != 2 || year.length() != 4) {\n            return false\n        }\n        var monthNum = toInt(month)\n        var dayNum = toInt(day)\n        var yearNum = toInt(year)\n        if (monthNum < 1 || monthNum > 12) {\n            return false\n        }\n        if (monthNum == 2) {\n            if (dayNum < 1 || dayNum > 29) {\n                return false\n            }\n        } else if (monthNum == 1 || monthNum == 3 || monthNum == 5 || monthNum == 7 || monthNum == 8 || monthNum == 10 || monthNum == 12) {\n            if (dayNum < 1 || dayNum > 31) {\n                return false\n            }\n        } else if (monthNum == 4 || monthNum == 6 || monthNum == 9 || monthNum == 11) {\n            if (dayNum < 1 || dayNum > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjn8uqow3.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonthNum\u001b[0m = toInt(month)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjn8uqow3.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdayNum\u001b[0m = toInt(day)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjn8uqow3.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myearNum\u001b[0m = toInt(year)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/' && date.charAt(5) == '/') {\n            return false\n        }\n        if (date.charAt(2) == '-' && date.charAt(5) == '-') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0' && date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0' && date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0' && date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0' && date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0' && date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0' && date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0' && date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0' && date.charAt\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293148,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7_q0nu0i.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_q0nu0i.scala:67:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m3\u001b[0m) == \u001b[31m'0'\u001b[0m && date.charAt\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    Int => Char\n\u001b[31m   |\u001b[0m                                     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var dateParts = date.split(\"-\")\n        var month = dateParts[0].toInt\n        var day = dateParts[1].toInt\n        var year = dateParts[2].toInt\n        if (month < 1 || month > 12) {\n            return false\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 31) {\n                return false\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpmr0f21yo.scala:26:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateParts[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmr0f21yo.scala:27:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateParts[\u001b[31m1\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmr0f21yo.scala:28:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateParts[\u001b[31m2\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date == \"\") {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\" \", \"\")\n        if (date.length() != 10) {\n            return false\n        }\n        date = date.replaceAll(\"0\", \"\")\n        date = date.replaceAll(\"1\", \"\")\n        date = date.replaceAll(\"2\", \"\")\n        date = date.replaceAll(\"3\", \"\")\n        date = date.replaceAll(\"4\", \"\")\n        date = date.replaceAll(\"5\", \"\")\n        date = date.replaceAll(\"6\", \"\")\n        date = date.replaceAll(\"7\", \"\")\n        date = date.replaceAll(\"8\", \"\")\n        date = date.replaceAll(\"9\", \"\")\n        date = date.replaceAll(\"10\", \"\")\n        date = date.replaceAll(\"11\", \"\")\n        date = date.replaceAll(\"12\", \"\")\n        date = date.replaceAll(\"13\", \"\")\n        date = date.replaceAll(\"14\", \"\")\n        date = date.replaceAll(\"15\", \"\")\n        date = date.replaceAll(\"16\", \"\")\n        date = date.replaceAll(\"17\", \"\")\n        date = date.replaceAll(\"18\", \"\")\n        date = date.replaceAll(\"19\", \"\")\n        date = date.replaceAll(\"20\", \"\")\n        date = date.replaceAll(\"21\", \"\")\n        date = date.replaceAll(\"22\", \"\")\n        date = date.replaceAll(\"23\", \"\")\n        date = date.replaceAll(\"24\", \"\")\n        date = date.replaceAll(\"25\", \"\")\n        date = date.replaceAll(\"26\", \"\")\n        date = date.replaceAll(\"27\", \"\")\n        date = date.replaceAll(\"28\", \"\")\n        date = date.replaceAll(\"29\", \"\")\n        date = date.replaceAll(\"30\", \"\")\n        date = date.replaceAll(\"31\", \"\")\n        date = date.replaceAll(\"32\", \"\")\n        date = date.replaceAll(\"33\",\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293147,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7qogf73y.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp7qogf73y.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp7qogf73y.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp7qogf73y.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp7qogf73y.scala:31:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        date = date.replaceAll(\u001b[31m\"0\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp7qogf73y.scala:32:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        date = date.replaceAll(\u001b[31m\"1\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Er",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length == 0) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\,\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\;\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\\\\!\", \"\")\n        date = date.replaceAll(\"\\\\(\", \"\")\n        date = date.replaceAll(\"\\\\)\", \"\")\n        date = date.replaceAll(\"\\\\{\", \"\")\n        date = date.replaceAll(\"\\\\}\", \"\")\n        date = date.replaceAll(\"\\\\[\", \"\")\n        date = date.replaceAll(\"\\\\]\", \"\")\n        date = date.replaceAll(\"\\\\'\", \"\")\n        date = date.replaceAll(\"\\\\\\\"\", \"\")\n        date = date.replaceAll(\"\\\\<\", \"\")\n        date = date.replaceAll(\"\\\\>\", \"\")\n        date = date.replaceAll(\"\\\\|\", \"\")\n        date = date.replaceAll(\"\\\\^\", \"\")\n        date = date.replaceAll(\"\\\\&\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\#\", \"\")\n        date = date.replaceAll(\"\\\\$\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\@\", \"\")\n        date = date.replaceAll(\"\\\\~\", \"\")\n        date = date.replaceAll(\"\\\\`\", \"\")\n        date = date.replaceAll(\"\\\\~\", \"\")\n        date = date.replaceAll(\"\\\\=\", \"\")\n        date = date.replaceAll(\"\\\\+\", \"\")\n        date = date.replaceAll(\"\\\\*\", \"\")\n        date = date.replaceAll(\"\\\\/\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293147,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpp319xh9q.scala:60:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m        date = date.replaceAll(\"\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               unclosed string literal\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpp319xh9q.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpp319xh9q.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpp319xh9q.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpp319xh9q.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpp319xh9q.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\,\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        var month : Int = date.substring(0, 2).toInt\n        var day : Int = date.substring(3, 5).toInt\n        var year : Int = date.substring(6, 10).toInt\n        if (month < 1 || month > 12) {\n            return false\n        }\n        if (day < 1 || day > 31) {\n            return false\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        }\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293150,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"0-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmp69hwmv3i.scala:26)\n\tat Problem$.main(tmp69hwmv3i.scala:54)\n\tat Problem.main(tmp69hwmv3i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date == \"\") {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"00\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"00\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"00\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293150,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgbyrek2t.scala:83:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgbyrek2t.scala:82:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m (date.substring(\u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    String\n\u001b[31m   |\u001b[0m            Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.length() == 0) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        if(month.length() != 2 || day.length() != 2 || year.length() != 4) {\n            return false\n        }\n        var monthInt = toInt(month)\n        var dayInt = toInt(day)\n        var yearInt = toInt(year)\n        if(monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if(monthInt == 2) {\n            if(dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        } else {\n            if(dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        if(monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if(dayInt < 1 || dayInt > 31) {\n                return false\n            }\n        } else {\n            if(dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293147,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0chbwkk6.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonthInt\u001b[0m = toInt(month)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0chbwkk6.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdayInt\u001b[0m = toInt(day)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0chbwkk6.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myearInt\u001b[0m = toInt(year)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) < '0' || date.charAt(2) > '9') {\n            return false\n        }\n        if (date.charAt(5) < '0' || date.charAt(5) > '9') {\n            return false\n        }\n        if (date.charAt(8) < '0' || date.charAt(8) > '9') {\n            return false\n        }\n        if (date.charAt(0) < '0' || date.charAt(0) > '9') {\n            return false\n        }\n        if (date.charAt(1) < '0' || date.charAt(1) > '9') {\n            return false\n        }\n        if (date.charAt(3) < '0' || date.charAt(3) > '9') {\n            return false\n        }\n        if (date.charAt(4) < '0' || date.charAt(4) > '9') {\n            return false\n        }\n        if (date.charAt(6) < '0' || date.charAt(6) > '9') {\n            return false\n        }\n        if (date.charAt(7) < '0' || date.charAt(7) > '9') {\n            return false\n        }\n        if (date.charAt(9) < '0' || date.charAt(9) > '9') {\n            return false\n        }\n        if (date.charAt(10) < '0' || date.charAt(10) > '9') {\n            return false\n        }\n        if (date.charAt(2) > '2') {\n            return false\n        }\n        if (date.charAt(5) > '5') {\n            return false\n        }\n        if (date.\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293148,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpis7t_j66.scala:71:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpis7t_j66.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpis7t_j66.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpis7t_j66.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\" \", \"\")\n        date = date.replaceAll(\"\\\\,\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\-\", \"\")\n        date = date.replaceAll(\"\\\\_\", \"\")\n        date = date.replaceAll(\"\\\\/\", \"\")\n        date = date.replaceAll(\"\\\\*\", \"\")\n        date = date.replaceAll(\"\\\\(\", \"\")\n        date = date.replaceAll(\"\\\\)\", \"\")\n        date = date.replaceAll(\"\\\\[\", \"\")\n        date = date.replaceAll(\"\\\\]\", \"\")\n        date = date.replaceAll(\"\\\\{\", \"\")\n        date = date.replaceAll(\"\\\\}\", \"\")\n        date = date.replaceAll(\"\\\\|\", \"\")\n        date = date.replaceAll(\"\\\\^\", \"\")\n        date = date.replaceAll(\"\\\\&\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\$\", \"\")\n        date = date.replaceAll(\"\\\\#\", \"\")\n        date = date.replaceAll(\"\\\\@\", \"\")\n        date = date.replaceAll(\"\\\\!\", \"\")\n        date = date.replaceAll(\"\\\\\\\"\", \"\")\n        date = date.replaceAll(\"\\\\'\", \"\")\n        date = date.replaceAll(\"\\\\`\", \"\")\n        date = date.replaceAll(\"\\\\~\", \"\")\n        date = date.replaceAll(\"\\\\=\", \"\")\n        date = date.replaceAll(\"\\\\+\", \"\")\n        date = date.replaceAll(\"\\\\<\", \"\")\n        date = date.replaceAll(\"\\\\>\", \"\")\n        date = date.replaceAll(\"\\\\;\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293147,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpb3yo4d6r.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpb3yo4d6r.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpb3yo4d6r.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpb3yo4d6r.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\:\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpb3yo4d6r.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpb3yo4d6r.scala:30:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\,\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/' && date.charAt(5) == '/') {\n            return false\n        }\n        if (date.charAt(2) == '-' && date.charAt(5) == '-') {\n            return false\n        }\n        if (date.charAt(0) == '/' && date.charAt(3) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '-' && date.charAt(3) == '-') {\n            return false\n        }\n        if (date.charAt(4) == '/' && date.charAt(7) == '/') {\n            return false\n        }\n        if (date.charAt(4) == '-' && date.charAt(7) == '-') {\n            return false\n        }\n        if (date.charAt(6) == '/' && date.charAt(9) == '/') {\n            return false\n        }\n        if (date.charAt(6) == '-' && date.charAt(9) == '-') {\n            return false\n        }\n        if (date.charAt(8) == '/' && date.charAt(11) == '/') {\n            return false\n        }\n        if (date.charAt(8) == '-' && date.charAt(11) == '-') {\n            return false\n        }\n        if (date.charAt(10) == '/' && date.charAt(13) == '/') {\n            return false\n        }\n        if (date.charAt(10) == '-' && date.charAt(13) == '-') {\n            return false\n        }\n        if (date.charAt(12) == '/' && date.charAt(15) == '/') {\n            return false\n        }\n        if (date.charAt(12) == '-' && date.charAt(15) == '-') {\n            return false\n        }\n        if (date.\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdjocpypt.scala:71:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var month = date.split(\"-\")[0].trim()\n        var day = date.split(\"-\")[1].trim()\n        var year = date.split(\"-\")[2].trim()\n        if (month.length() != 2) {\n            return false\n        }\n        if (day.length() != 2) {\n            return false\n        }\n        if (year.length() != 4) {\n            return false\n        }\n        var monthInt = toInt(month)\n        if (monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        var dayInt = toInt(day)\n        if (monthInt == 2) {\n            if (dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        } else {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp2jea6nc8.scala:25:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m0\u001b[0m].trim()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2jea6nc8.scala:26:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m1\u001b[0m].trim()\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2jea6nc8.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m2\u001b[0m].trim()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2jea6nc8.scala:37:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonthInt\u001b[0m = toInt(month)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2jea6nc8.scala:41:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdayInt\u001b[0m = toInt(day)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length() == 0) {\n            return false\n        }\n        if(date.length() != 10) {\n            return false\n        }\n        if(date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(0, 1).equals(\"1\")) {\n            return false\n        }\n        if(date.substring(1, 3).equals(\"1\")) {\n            return false\n        }\n        if(date.substring(4, 6).equals(\"1\")) {\n            return false\n        }\n        if(date.substring(7, 9).equals(\"1\")) {\n            return false\n        }\n        if(date.substring(10, 11).equals(\"1\")) {\n            return false\n        }\n        if(date.substring(0, 1).equals(\"2\")) {\n            return false\n        }\n        if(date.substring(1, 3).equals(\"2\")) {\n            return false\n        }\n        if(date.substring(4, 6).equals(\"2\")) {\n            return false\n        }\n        if(date.substring(7, 9).equals(\"2\")) {\n            return false\n        }\n        if(date.substring(10, 11).equals(\"2\")) {\n            return false\n        }\n        if(\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293150,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp8g1mphtt.scala:82:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m(\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length == 0) {\n            return false\n        }\n        if(date.length() != 10) {\n            return false\n        }\n        if(date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if(date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if(date\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293152,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv822vpn_.scala:83:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv822vpn_.scala:82:11 --------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m(date\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Found:    (date : String)\n\u001b[31m   |\u001b[0m           Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        date = date.trim()\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\,\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\;\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\\\\!\", \"\")\n        date = date.replaceAll(\"\\\\(\", \"\")\n        date = date.replaceAll(\"\\\\)\", \"\")\n        date = date.replaceAll(\"\\\\{\", \"\")\n        date = date.replaceAll(\"\\\\}\", \"\")\n        date = date.replaceAll(\"\\\\[\", \"\")\n        date = date.replaceAll(\"\\\\]\", \"\")\n        date = date.replaceAll(\"\\\\'\", \"\")\n        date = date.replaceAll(\"\\\\\\\"\", \"\")\n        date = date.replaceAll(\"\\\\|\", \"\")\n        date = date.replaceAll(\"\\\\<\", \"\")\n        date = date.replaceAll(\"\\\\>\", \"\")\n        date = date.replaceAll(\"\\\\=\", \"\")\n        date = date.replaceAll(\"\\\\+\", \"\")\n        date = date.replaceAll(\"\\\\/\", \"\")\n        date = date.replaceAll(\"\\\\*\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\^\", \"\")\n        date = date.replaceAll(\"\\\\&\", \"\")\n        date = date.replaceAll(\"\\\\~\", \"\")\n        date = date.replaceAll(\"\\\\#\", \"\")\n        date = date.replaceAll(\"\\\\$\", \"\")\n        date = date.replaceAll(\"\\\\@\", \"\")\n        date = date.replaceAll(\"\\\\#\", \"\")\n        date = date.replaceAll(\"\\\\$\", \"\")\n        date = date.replaceAll(\"\\\\@\", \"\")\n        date = date.replaceAll(\"\\\\#\",\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293150,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz2tgavla.scala:61:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpz2tgavla.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.trim()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpz2tgavla.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpz2tgavla.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpz2tgavla.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpz2tgavla.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpz2tgavla.scala:30:13 --",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length == 0) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        if(month.length() == 1) {\n            month = \"0\" + month\n        }\n        if(day.length() == 1) {\n            day = \"0\" + day\n        }\n        if(year.length() == 2) {\n            year = \"20\" + year\n        }\n        if(month.length() != 2 || day.length() != 2 || year.length() != 4) {\n            return false\n        }\n        var monthInt = Integer.parseInt(month)\n        var dayInt = Integer.parseInt(day)\n        var yearInt = Integer.parseInt(year)\n        if(monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if(dayInt < 1 || dayInt > 31) {\n            return false\n        }\n        if(monthInt == 2) {\n            if(dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        } else {\n            if(dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        if(yearInt < 1000 || yearInt > 9999) {\n            return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293153,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 6, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.validDate(tmp25lid3xm.scala:27)\n\tat Problem$.main(tmp25lid3xm.scala:66)\n\tat Problem.main(tmp25lid3xm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        if (date.length() != 10) {\n            return false\n        }\n        date = date.substring(0, 2) + \"-\" + date.substring(2, 4) + \"-\" + date.substring(4, 6)\n        if (date.length() != 10) {\n            return false\n        }\n        if (!(date.substring(0, 2).matches(\"[0-9]{2}\"))) {\n            return false\n        }\n        if (!(date.substring(2, 4).matches(\"[0-9]{2}\"))) {\n            return false\n        }\n        if (!(date.substring(4, 6).matches(\"[0-9]{2}\"))) {\n            return false\n        }\n        if (!(date.substring(6, 10).matches(\"[0-9]{4}\"))) {\n            return false\n        }\n        if (!(date.substring(0, 2).matches(\"[0-9]{2}\"))) {\n            return false\n        }\n        if (!(date.substring(2, 4).matches(\"[0-9]{2}\"))) {\n            return false\n        }\n        if (!(date.substring(4, 6).matches(\"[0-9]{2}\"))) {\n            return false\n        }\n        if (!(date.substring(6, 10).matches(\"[0-9]{4}\"))) {\n            return false\n        }\n        if (!(date.substring(0, 2).matches(\"[0-9]{2}\"))) {\n            return false\n        }\n        if (!(date.substring(2, 4).matches(\"[0-9]{2}\"))) {\n            return false\n        }\n        if (!(date.substring(4, 6).matches(\"[0-9]{2}\"))) {\n            return false\n        }\n        if (!(\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293151,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpgklhh2_z.scala:68:14 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m        \u001b[33mif\u001b[0m (!(\n\u001b[31m\u001b[31m   |\u001b[0m              ^\u001b[0m\n\u001b[31m   |\u001b[0m              expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgklhh2_z.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgklhh2_z.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgklhh2_z.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgklhh2_z.scala:31:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        date = date.substring(\u001b[31m0\u001b[0m, \u001b[31m2\u001b[0m) + \u001b[31m\"-\"\u001b[0m + date.substring(\u001b[31m2\u001b[0m, \u001b[31m4\u001b[0m) + \u001b[31m\"-\"\u001b[0m + date.substring(\u001b[31m4\u001b[0m, \u001b[31m6\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"1\")) {\n            if (date.substring(2, 3).equals(\"1\")) {\n                return false\n            }\n            if (date.substring(2, 3).equals(\"2\")) {\n                if (date.substring(4, 5).equals(\"1\")) {\n                    return false\n                }\n                return true\n            }\n            return false\n        }\n        if (date.substring(1, 3).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(9, 11).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"2\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"2\")) {\n            return false\n        }\n        if (\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293152,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmplunrq0vp.scala:82:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m (\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/') {\n            return false\n        }\n        if (date.charAt(4) == '/') {\n            return false\n        }\n        if (date.charAt(6) == '/') {\n            return false\n        }\n        if (date.charAt(8) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '1') {\n            return false\n        }\n        if (date.charAt(1) == '1') {\n            return false\n        }\n        if (date.charAt(3) == '1') {\n            return false\n        }\n        if (date.charAt(5) == '1') {\n            return false\n        }\n        if (date.charAt(7) == '1') {\n            return false\n        }\n        if (date.charAt(9) == '1') {\n            return false\n        }\n        if (date.charAt(0) == '2') {\n            return false\n        }\n        if (date.charAt(1) == '2') {\n            return false\n        }\n        if (date.charAt(3) == '2') {\n            return false\n        }\n        if (date.charAt(5) == '2') {\n            return false\n        }\n        if (date.charAt(7) == '2') {\n            return\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293113,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2ejbgrpt.scala:111:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m111 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2ejbgrpt.scala:89:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m            \u001b[33mreturn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    Unit\n\u001b[31m   |\u001b[0m            Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2ejbgrpt.scala:110:1 --------------------\u001b[0m\u001b[0m\n\u001b[31m110 |\u001b[0m}\n\u001b[31m\u001b[31m    |\u001b[0m ^\u001b[0m\n\u001b[31m    |\u001b[0m Found:    Unit\n\u001b[31m    |\u001b[0m Required: Boolean\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp2ejbgrpt.scala:91:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m91 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length == 0) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\" \", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replace\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293152,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp0bovekft.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp0bovekft.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp0bovekft.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp0bovekft.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\:\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp0bovekft.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp0bovekft.scala:30:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var dateArr = date.split(\"-\")\n        var month = dateArr[0].toInt\n        var day = dateArr[1].toInt\n        var year = dateArr[2].toInt\n        if (month < 1 || month > 12) {\n            return false\n        }\n        if (day < 1 || day > 31) {\n            return false\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        }\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 31) {\n                return false\n            }\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293151,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpob8odkxt.scala:26:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateArr[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpob8odkxt.scala:27:25 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateArr[\u001b[31m1\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpob8odkxt.scala:28:26 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateArr[\u001b[31m2\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.isEmpty()) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"/\")\n        if(date.length() != 10) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        if(month.length() != 2 || day.length() != 2 || year.length() != 4) {\n            return false\n        }\n        var monthInt = toInt(month)\n        var dayInt = toInt(day)\n        var yearInt = toInt(year)\n        if(monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if(dayInt < 1 || dayInt > 31) {\n            return false\n        }\n        if(monthInt == 2) {\n            if(dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        }\n        if(monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if(dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        if(monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n            if(dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293152,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpavx9993q.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"/\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpavx9993q.scala:35:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonthInt\u001b[0m = toInt(month)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpavx9993q.scala:36:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdayInt\u001b[0m = toInt(day)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpavx9993q.scala:37:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myearInt\u001b[0m = toInt(year)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var dateParts = date.split(\"-\")\n        var month = dateParts[0].toInt\n        var day = dateParts[1].toInt\n        var year = dateParts[2].toInt\n        if (month < 1 || month > 12) {\n            return false\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 31) {\n                return false\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpmr0f21yo.scala:26:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateParts[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmr0f21yo.scala:27:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateParts[\u001b[31m1\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmr0f21yo.scala:28:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateParts[\u001b[31m2\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) != '-') {\n            return false\n        }\n        if (date.charAt(5) != '-') {\n            return false\n        }\n        if (date.charAt(8) != '-') {\n            return false\n        }\n        if (date.charAt(0) < '0' || date.charAt(0) > '9') {\n            return false\n        }\n        if (date.charAt(1) < '0' || date.charAt(1) > '9') {\n            return false\n        }\n        if (date.charAt(3) < '0' || date.charAt(3) > '9') {\n            return false\n        }\n        if (date.charAt(4) < '0' || date.charAt(4) > '9') {\n            return false\n        }\n        if (date.charAt(6) < '0' || date.charAt(6) > '9') {\n            return false\n        }\n        if (date.charAt(7) < '0' || date.charAt(7) > '9') {\n            return false\n        }\n        if (date.charAt(9) < '0' || date.charAt(9) > '9') {\n            return false\n        }\n        if (date.charAt(10) < '0' || date.charAt(10) > '9') {\n            return false\n        }\n        if (date.charAt(2) == '-' && date.charAt(5) == '-' && date.charAt(8) == '-') {\n            if (date.charAt(0) < '1' || date.charAt(0) > '3') {\n                return false\n            }\n            if (date.charAt(1) < '0' || date.charAt(1) > '2') {\n                return false\n            }\n            if (date.charAt(3) < '1'\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvi4i1g1t.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvi4i1g1t.scala:90:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m90 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvi4i1g1t.scala:89:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpvi4i1g1t.scala:70:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m70 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\,\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\;\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\\\\!\", \"\")\n        date = date.replaceAll(\"\\\\(\", \"\")\n        date = date.replaceAll(\"\\\\)\", \"\")\n        date = date.replaceAll(\"\\\\[\", \"\")\n        date = date.replaceAll(\"\\\\]\", \"\")\n        date = date.replaceAll(\"\\\\{\", \"\")\n        date = date.replaceAll(\"\\\\}\", \"\")\n        date = date.replaceAll(\"\\\\|\", \"\")\n        date = date.replaceAll(\"\\\\^\", \"\")\n        date = date.replaceAll(\"\\\\&\", \"\")\n        date = date.replaceAll(\"\\\\*\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\$\", \"\")\n        date = date.replaceAll(\"\\\\#\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\@\", \"\")\n        date = date.replaceAll(\"\\\\~\", \"\")\n        date = date.replaceAll(\"\\\\`\", \"\")\n        date = date.replaceAll(\"\\\\\\\"\", \"\")\n        date = date.replaceAll(\"\\\\<\", \"\")\n        date = date.replaceAll(\"\\\\>\", \"\")\n        date = date.replaceAll(\"\\\\=\", \"\")\n        date = date.replaceAll(\"\\\\+\", \"\")\n        date = date.replaceAll(\"\\\\/\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\\\\-\", \"\")\n        date = date.replaceAll(\"\\\\_\", \"\")\n        date = date.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpp5en3ogr.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpp5en3ogr.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpp5en3ogr.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpp5en3ogr.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpp5en3ogr.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\,\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpp5en3ogr.scala:30:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\:\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0') {\n            return false\n        }\n        if (date.charAt(10) == '0')\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293153,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsywdk7fo.scala:89:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"00\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"00\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"00\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"99\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"11\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"11\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"11\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"12\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"12\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"12\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"13\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"13\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"13\")) {\n            return false\n        }\n        if (\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293154,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpnmrtc8rh.scala:82:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m (\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"1\") && date.substring(3, 5).equals(\"1\") && date.substring(6, 8).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"2\") && date.substring(3, 5).equals(\"1\") && date.substring(6, 8).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"2\") && date.substring(3, 5).equals(\"2\") && date.substring(6, 8).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"2\") && date.substring(3, 5).equals(\"2\") && date.substring(6, 8).equals(\"2\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"3\") && date.substring(3, 5).equals(\"1\") && date.substring(6, 8).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"3\") && date.substring(3, 5).equals(\"1\") && date.substring(6, 8).equals(\"2\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"3\") && date.substring(3, 5).equals(\"2\") && date.substring(6, 8).equals(\"1\")) {\n            return false\n        }\n        \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293155,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt7cttbao.scala:55:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mif\u001b[0m (date.substring(\u001b[31m0\u001b[0m, \u001b[31m2\u001b[0m).equals(\u001b[31m\"3\"\u001b[0m) && date.substring(\u001b[31m3\u001b[0m, \u001b[31m5\u001b[0m).equals(\u001b[31m\"2\"\u001b[0m) && date.substring(\u001b[31m6\u001b[0m, \u001b[31m8\u001b[0m).equals(\u001b[31m\"1\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Boolean\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m56 |\u001b[0m            \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m57 |\u001b[0m        }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(10, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(10, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpmbns3ktk.scala:82:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m (\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(2, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(5, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(8, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(10, 12).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(12, 14).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(15, 17).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(18, 20).equals(\"0\")) {\n            return false\n        }\n        if (date.sub\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4rhlsq6o.scala:83:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4rhlsq6o.scala:82:17 ------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m (date.sub\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value sub is not a member of String\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length == 0) {\n            return false\n        }\n        date = date.trim()\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\,\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\;\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\\\\!\", \"\")\n        date = date.replaceAll(\"\\\\(\", \"\")\n        date = date.replaceAll(\"\\\\)\", \"\")\n        date = date.replaceAll(\"\\\\{\", \"\")\n        date = date.replaceAll(\"\\\\}\", \"\")\n        date = date.replaceAll(\"\\\\[\", \"\")\n        date = date.replaceAll(\"\\\\]\", \"\")\n        date = date.replaceAll(\"\\\\\\\"\", \"\")\n        date = date.replaceAll(\"\\\\'\", \"\")\n        date = date.replaceAll(\"\\\\<\", \"\")\n        date = date.replaceAll(\"\\\\>\", \"\")\n        date = date.replaceAll(\"\\\\|\", \"\")\n        date = date.replaceAll(\"\\\\=\", \"\")\n        date = date.replaceAll(\"\\\\&\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\#\", \"\")\n        date = date.replaceAll(\"\\\\$\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\^\", \"\")\n        date = date.replaceAll(\"\\\\~\", \"\")\n        date = date.replaceAll(\"\\\\`\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\\\\@\", \"\")\n        date = date.replaceAll(\"\\\\#\", \"\")\n        date = date.replaceAll(\"\\\\$\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\^\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293153,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpj75n5e0t.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.trim()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpj75n5e0t.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpj75n5e0t.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpj75n5e0t.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpj75n5e0t.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpj75n5e0t.scala:30:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\,\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"^0+\", \"\")\n        date = date.replaceAll(\"^\\\\d+$\", \"\")\n        date = date.replaceAll(\"^\\\\d+\\\\D+\\\\d+$\", \"\")\n        date = date.replaceAll(\"^\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+$\", \"\")\n        date = date.replaceAll(\"^\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+$\", \"\")\n        date = date.replaceAll(\"^\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+$\", \"\")\n        date = date.replaceAll(\"^\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+$\", \"\")\n        date = date.replaceAll(\"^\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+$\", \"\")\n        date = date.replaceAll(\"^\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+$\", \"\")\n        date = date.replaceAll(\"^\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+$\", \"\")\n        date = date.replaceAll(\"^\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293154,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpjz69c0xi.scala:39:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        date = date.replaceAll(\"^\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d+\\\\D+\\\\d\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjz69c0xi.scala:41:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpjz69c0xi.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpjz69c0xi.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpjz69c0xi.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpjz69c0xi.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val da",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length == 0) {\n            return false\n        }\n        if(date.length() != 10) {\n            return false\n        }\n        if(date.charAt(2) == '/') {\n            if(date.charAt(5) == '/') {\n                if(date.charAt(8) == '/') {\n                    if(date.charAt(0) != '0' && date.charAt(0) != '1' && date.charAt(0) != '2') {\n                        if(date.charAt(1) != '0' && date.charAt(1) != '1' && date.charAt(1) != '2') {\n                            if(date.charAt(3) != '0' && date.charAt(3) != '1' && date.charAt(3) != '2') {\n                                if(date.charAt(4) != '0' && date.charAt(4) != '1' && date.charAt(4) != '2') {\n                                    if(date.charAt(6) != '0' && date.charAt(6) != '1' && date.charAt(6) != '2') {\n                                        if(date.charAt(7) != '0' && date.charAt(7) != '1' && date.charAt(7) != '2') {\n                                            return true\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphq783are.scala:50)\n\tat Problem.main(tmphq783are.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() < 8) {\n            return false\n        }\n        if (date.length() > 10) {\n            return false\n        }\n        if (date.length() == 10) {\n            if (date.charAt(4) != '-' || date.charAt(7) != '-') {\n                return false\n            }\n        }\n        if (date.length() == 8) {\n            if (date.charAt(4) != '/' || date.charAt(7) != '/') {\n                return false\n            }\n        }\n        if (date.length() == 6) {\n            if (date.charAt(4) != '-' || date.charAt(7) != '-') {\n                return false\n            }\n        }\n        if (date.length() == 4) {\n            if (date.charAt(4) != '/' || date.charAt(7) != '/') {\n                return false\n            }\n        }\n        if (date.length() == 2) {\n            if (date.charAt(4) != '-' || date.charAt(7) != '-') {\n                return false\n            }\n        }\n        if (date.length() == 1) {\n            if (date.charAt(4) != '/' || date.charAt(7) != '/') {\n                return false\n            }\n        }\n        if (date.length() == 10) {\n            if (date.charAt(4) != '-' || date.charAt(7) != '-') {\n                return false\n            }\n        }\n        if (date.length() == 8) {\n            if (date.charAt(4) != '/' || date.charAt(7) != '/') {\n                return false\n            }\n        }\n        if (date.length() == 6) {\n            if (date.charAt(4) != '-' || date.charAt(7) != '-') {\n                return false\n            }\n        }\n        if (date.length() == 4) {\n            if (date.char\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3mx97clq.scala:78:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3mx97clq.scala:99:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m99 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3mx97clq.scala:77:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m            \u001b[33mif\u001b[0m (date.char\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         value char is not a member of String - did you mean date.chars?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3mx97clq.scala:98:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m98 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp3mx97clq.scala:79:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m79 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length() == 0) {\n            return false\n        }\n        var dateArr = date.split(\"-\")\n        if(dateArr.length != 3) {\n            return false\n        }\n        var month = dateArr[0]\n        var day = dateArr[1]\n        var year = dateArr[2]\n        if(month.length() != 2 || day.length() != 2 || year.length() != 4) {\n            return false\n        }\n        if(!(month.matches(\"[1-2][0-9]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|10[0-9]|11[0-9]|12[0-9]\") && day.matches(\"[1-2][0-9]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|10[0-9]|11[0-9]|12[0-9]\") && year.matches(\"[0-9]{4}\"))) {\n            return false\n        }\n        if(!(month.matches(\"[1-2][0-9]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|10[0-9]|11[0-9]|12[0-9]\") && day.matches(\"[1-2][0-9]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|10[0-9]|11[0-9]|12[0-9]\") && year.matches(\"[0-9]{4}\")))\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293156,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp95etd_76.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp95etd_76.scala:29:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateArr[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp95etd_76.scala:30:25 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateArr[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp95etd_76.scala:31:26 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateArr[\u001b[31m2\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/' && date.charAt(5) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '/' && date.charAt(7) == '/') {\n            return false\n        }\n        if (date.charAt(6) == '/' && date.charAt(8) == '/') {\n            return false\n        }\n        if (date.charAt(1) == '0' && date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0' && date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0' && date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0' && date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0' && date.charAt(8) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0' && date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0' && date.charAt(3) == '0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293156,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpigwsbbfo.scala:67:55 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m1\u001b[0m) == \u001b[31m'0'\u001b[0m && date.charAt(\u001b[31m3\u001b[0m) == '0\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                              unclosed character literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpigwsbbfo.scala:69:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpigwsbbfo.scala:69:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: 0def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- [E129] Potential Issue Warning: /tmp/tmpigwsbbfo.scala:68:4 -----------------\u001b[0m\u001b[0m\n\u001b[33m67 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m1\u001b[0m) == \u001b[31m'0'\u001b[0m && date.charAt(\u001b[31m3\u001b[0m) == '0\n\u001b[33m68 |\u001b[0m    }\n\u001b[33m\u001b[33m   |\u001b[0m                                                         ^\u001b[0m\n\u001b[33m   |\u001b[0mA pure expression does nothing in statement position; you may be omitting necessary parentheses\n\u001b[33m   |\u001b[0m\n\u001b[33m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        date = date.trim()\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\,\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\;\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\\\\!\", \"\")\n        date = date.replaceAll(\"\\\\(\", \"\")\n        date = date.replaceAll(\"\\\\)\", \"\")\n        date = date.replaceAll(\"\\\\[\", \"\")\n        date = date.replaceAll(\"\\\\]\", \"\")\n        date = date.replaceAll(\"\\\\{\", \"\")\n        date = date.replaceAll(\"\\\\}\", \"\")\n        date = date.replaceAll(\"\\\\|\", \"\")\n        date = date.replaceAll(\"\\\\^\", \"\")\n        date = date.replaceAll(\"\\\\&\", \"\")\n        date = date.replaceAll(\"\\\\*\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\$\", \"\")\n        date = date.replaceAll(\"\\\\#\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\+\", \"\")\n        date = date.replaceAll(\"\\\\=\", \"\")\n        date = date.replaceAll(\"\\\\<\", \"\")\n        date = date.replaceAll(\"\\\\>\", \"\")\n        date = date.replaceAll(\"\\\\\\\"\", \"\")\n        date = date.replaceAll(\"\\\\'\", \"\")\n        date = date.replaceAll(\"\\\\~\", \"\")\n        date = date.replaceAll(\"\\\\`\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\;\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\\\\!\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpx8_2ip22.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.trim()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpx8_2ip22.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpx8_2ip22.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpx8_2ip22.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpx8_2ip22.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpx8_2ip22.scala:30:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\,\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        var monthInt = toInt(month)\n        var dayInt = toInt(day)\n        var yearInt = toInt(year)\n        if (monthInt < 1 || monthInt > 12) {\n            return false\n        }\n        if (monthInt == 2) {\n            if (dayInt < 1 || dayInt > 29) {\n                return false\n            }\n        } else if (monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n            if (dayInt < 1 || dayInt > 31) {\n                return false\n            }\n        } else if (monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11) {\n            if (dayInt < 1 || dayInt > 30) {\n                return false\n            }\n        }\n        if (yearInt < 1 || yearInt > 9999) {\n            return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3q2ymuu_.scala:28:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonthInt\u001b[0m = toInt(month)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3q2ymuu_.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdayInt\u001b[0m = toInt(day)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3q2ymuu_.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myearInt\u001b[0m = toInt(year)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        var dateString = date.trim().split(\"-\")\n        var month = dateString[0].toInt\n        var day = dateString[1].toInt\n        var year = dateString[2].toInt\n        if (month < 1 || month > 12) {\n            return false\n        }\n        if (day < 1 || day > 31) {\n            return false\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        } else {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        }\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 31) {\n                return false\n            }\n        } else {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        } else {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp9tcfpiuf.scala:26:30 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateString[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9tcfpiuf.scala:27:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateString[\u001b[31m1\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9tcfpiuf.scala:28:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateString[\u001b[31m2\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        if (date.length() != 10) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(2, 4)\n        var year = date.substring(4, 10)\n        if (month.isEmpty() || day.isEmpty() || year.isEmpty()) {\n            return false\n        }\n        var monthNum = Integer.parseInt(month)\n        if (monthNum < 1 || monthNum > 12) {\n            return false\n        }\n        var dayNum = Integer.parseInt(day)\n        if (dayNum < 1 || dayNum > 31) {\n            return false\n        }\n        if (monthNum == 2) {\n            if (dayNum < 1 || dayNum > 29) {\n                return false\n            }\n        } else {\n            if (dayNum < 1 || dayNum > 30) {\n                return false\n            }\n        }\n        var yearNum = Integer.parseInt(year)\n        if (yearNum < 1900 || yearNum > 2100) {\n            return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmphef5n6fq.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmphef5n6fq.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmphef5n6fq.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length == 0) {\n            return false\n        }\n        var dateParts = date.split(\"-\")\n        if (dateParts.length != 3) {\n            return false\n        }\n        var month = dateParts[0].toInt\n        var day = dateParts[1].toInt\n        var year = dateParts[2].toInt\n        if (month < 1 || month > 12) {\n            return false\n        }\n        if (day < 1 || day > 31) {\n            return false\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp9h_2_xof.scala:29:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = dateParts[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9h_2_xof.scala:30:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = dateParts[\u001b[31m1\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9h_2_xof.scala:31:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = dateParts[\u001b[31m2\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(2, 4).toInt() < 1 || date.substring(2, 4).toInt() > 12) {\n            return false\n        }\n        if (date.substring(5, 7).toInt() < 1 || date.substring(5, 7).toInt() > 31) {\n            return false\n        }\n        if (date.substring(8, 10).toInt() < 1 || date.substring(8, 10).toInt() > 30) {\n            return false\n        }\n        if (date.substring(0, 2).toInt() < 1 || date.substring(0, 2).toInt() > 29) {\n            return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp4d3am8ma.scala:28:33 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mif\u001b[0m (date.substring(\u001b[31m2\u001b[0m, \u001b[31m4\u001b[0m).toInt() < \u001b[31m1\u001b[0m || date.substring(\u001b[31m2\u001b[0m, \u001b[31m4\u001b[0m).toInt() > \u001b[31m12\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp4d3am8ma.scala:31:33 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mif\u001b[0m (date.substring(\u001b[31m5\u001b[0m, \u001b[31m7\u001b[0m).toInt() < \u001b[31m1\u001b[0m || date.substring(\u001b[31m5\u001b[0m, \u001b[31m7\u001b[0m).toInt() > \u001b[31m31\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp4d3am8ma.scala:34:34 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mif\u001b[0m (date.substring(\u001b[31m8\u001b[0m, \u001b[31m10\u001b[0m).toInt() < \u001b[31m1\u001b[0m || date.substring(\u001b[31m8\u001b[0m, \u001b[31m10\u001b[0m).toInt() > \u001b[31m30\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp4d3am8ma.scala:37:33 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mif\u001b[0m (date.substring(\u001b[31m0\u001b[0m, \u001b[31m2\u001b[0m).toInt() < \u001b[31m1\u001b[0m || date.substring(\u001b[31m0\u001b[0m, \u001b[31m2\u001b[0m).toInt() > \u001b[31m29\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        date = date.trim()\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        if (month.length() != 2 || day.length() != 2 || year.length() != 4) {\n            return false\n        }\n        month = month.toInt\n        day = day.toInt\n        year = year.toInt\n        if (month < 1 || month > 12) {\n            return false\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        } else {\n            if (day < 1 || day > 31) {\n                return false\n            }\n        }\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 31) {\n                return false\n            }\n        } else {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpm9hymwfk.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.trim()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9hymwfk.scala:32:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        month = month.toInt\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    Int\n\u001b[31m   |\u001b[0m                Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9hymwfk.scala:33:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        day = day.toInt\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              Found:    Int\n\u001b[31m   |\u001b[0m              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9hymwfk.scala:34:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        year = year.toInt\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    Int\n\u001b[31m   |\u001b[0m               Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9hymwfk.scala:35:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mif\u001b[0m (month < \u001b[31m1\u001b[0m || month > \u001b[31m12\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    (\u001b[31m1\u001b[0m : Int)\n\u001b[31m   |\u001b[0m                    Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9hymwfk.scala:35:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mif\u001b[0m (month < \u001b[31m1\u001b[0m || month > \u001b[31m12\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/' && date.charAt(5) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '/' && date.charAt(7) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0' && date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '/' && date.charAt(6) == '/') {\n            return false\n        }\n        if (date.charAt(1) == '0' && date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(2) == '0' && date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0' && date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0' && date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0' && date.charAt(3) ==\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp51tqzgvs.scala:67:54 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m0\u001b[0m) == \u001b[31m'0'\u001b[0m && date.charAt(\u001b[31m3\u001b[0m) ==\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length == 0) return false\n        if (date.length() != 10) return false\n        if (date.charAt(2) == '/') return false\n        if (date.charAt(5) == '/') return false\n        if (date.charAt(8) == '/') return false\n        if (date.charAt(0) == '0') return false\n        if (date.charAt(1) == '0') return false\n        if (date.charAt(3) == '0') return false\n        if (date.charAt(4) == '0') return false\n        if (date.charAt(6) == '0') return false\n        if (date.charAt(7) == '0') return false\n        if (date.charAt(9) == '0') return false\n        if (date.charAt(2) == '-') return false\n        if (date.charAt(5) == '-') return false\n        if (date.charAt(8) == '-') return false\n        if (date.charAt(0) < '1' || date.charAt(0) > '9') return false\n        if (date.charAt(1) < '1' || date.charAt(1) > '9') return false\n        if (date.charAt(3) < '1' || date.charAt(3) > '9') return false\n        if (date.charAt(4) < '1' || date.charAt(4) > '9') return false\n        if (date.charAt(6) < '1' || date.charAt(6) > '9') return false\n        if (date.charAt(7) < '1' || date.charAt(7) > '9') return false\n        if (date.charAt(9) < '1' || date.charAt(9) > '9') return false\n        if (date.charAt(2) > '2') return false\n        if (date.charAt(5) > '2') return false\n        if (date.charAt(8) > '2') return false\n        if (date.charAt(0) > '\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp6ymwfq55.scala:47:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m0\u001b[0m) > '\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             unclosed character literal\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp6ymwfq55.scala:47:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m0\u001b[0m) > '\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m>\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mChar\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double): Boolean\n\u001b[31m   |\u001b[0m (x: Float): Boolean\n\u001b[31m   |\u001b[0m (x: Long): Boolean\n\u001b[31m   |\u001b[0m (x: Int): Boolean\n\u001b[31m   |\u001b[0m (x: Char): Boolean\n\u001b[31m   |\u001b[0m (x: Short): Boolean\n\u001b[31m   |\u001b[0m (x: Byte): Boolean\n\u001b[31m   |\u001b[0mmatch arguments (Null)\n\u001b[33m\u001b[33m-- [E129] Potential Issue Warning: /tmp/tmp6ymwfq55.scala:48:4 -----------------\u001b[0m\u001b[0m\n\u001b[33m47 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m0\u001b[0m) > '\n\u001b[33m48 |\u001b[0m    }\n\u001b[33m\u001b[33m   |\u001b[0m                              ^\u001b[0m\n\u001b[33m   |\u001b[0mA pure expression does nothing in statement position; you may be omitting necessary parentheses\n\u001b[33m   |\u001b[0m\n\u001b[33m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date == \"\") {\n            return false\n        }\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"/\", \"\")\n        date = date.replace(\" \", \"\")\n        if (date.length() != 10) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        if (month.length() != 2) {\n            return false\n        }\n        if (day.length() != 2) {\n            return false\n        }\n        if (year.length() != 4) {\n            return false\n        }\n        if (month.toInt() < 1 || month.toInt() > 12) {\n            return false\n        }\n        if (day.toInt() < 1 || day.toInt() > 31) {\n            return false\n        }\n        if (month.toInt() == 2) {\n            if (day.toInt() < 1 || day.toInt() > 29) {\n                return false\n            }\n        } else {\n            if (day.toInt() < 1 || day.toInt() > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpmsfbyjlj.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.replace(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpmsfbyjlj.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replace(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpmsfbyjlj.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replace(\u001b[31m\" \"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpmsfbyjlj.scala:43:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mif\u001b[0m (month.toInt() < \u001b[31m1\u001b[0m || month.toInt() > \u001b[31m12\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpmsfbyjlj.scala:46:16 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mif\u001b[0m (day.toInt() < \u001b[31m1\u001b[0m || day.toInt() > \u001b[31m31\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpmsfbyjlj.scala:49:18 ---------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/' && date.charAt(5) == '/') {\n            return false\n        }\n        if (date.charAt(0) != '0' && date.charAt(0) != '1' && date.charAt(0) != '2' && date.charAt(0) != '3' && date.charAt(0) != '4' && date.charAt(0) != '5' && date.charAt(0) != '6' && date.charAt(0) != '7' && date.charAt(0) != '8' && date.charAt(0) != '9' && date.charAt(0) != '-') {\n            return false\n        }\n        if (date.charAt(3) == '/' && date.charAt(6) == '/') {\n            return false\n        }\n        if (date.charAt(1) != '0' && date.charAt(1) != '1' && date.charAt(1) != '2' && date.charAt(1) != '3' && date.charAt(1) != '4' && date.charAt(1) != '5' && date.charAt(1) != '6' && date.charAt(1) != '7' && date.charAt(1) != '8' && date.charAt(1) != '9' && date.charAt(1) != '-') {\n            return false\n        }\n        if (date.charAt(4) == '/' && date.charAt(7) == '/') {\n            return false\n        }\n        if (date.charAt(4) != '0' && date.charAt(4) != '1' && date.charAt(4) != '2' && date.charAt(4) != '3' && date.charAt(4) != '4' && date.charAt(4) != '5' && date.charAt(4) != '6' && date.\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkwnxyaca.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/' && date.charAt(5) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '/' && date.charAt(3) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '/' && date.charAt(6) == '/') {\n            return false\n        }\n        if (date.charAt(4) == '/' && date.charAt(7) == '/') {\n            return false\n        }\n        if (date.charAt(1) == '/' && date.charAt(4) == '/') {\n            return false\n        }\n        if (date.charAt(1) == '/' && date.charAt(8) == '/') {\n            return false\n        }\n        if (date.charAt(2) == '/' && date.charAt(5) == '/') {\n            return false\n        }\n        if (date.charAt(2) == '/' && date.charAt(9) == '/') {\n            return false\n        }\n        if (date.charAt(3) == '/' && date.charAt(6) == '/') {\n            return false\n        }\n        if (date.charAt(3) == '/' && date.charAt(10) == '/') {\n            return false\n        }\n        if (date.charAt(4) == '/' && date.charAt(7) == '/') {\n            return false\n        }\n        if (date.charAt(4) == '/' && date.charAt(11) == '/') {\n            return false\n        }\n        if (date.charAt(5) == '/' && date.charAt(8) == '/') {\n            return false\n        }\n        if (date.charAt(5) == '/' && date.charAt(12) == '/') {\n            return false\n        }\n        if (date.charAt(6) == '/\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpv2nkksyy.scala:70:30 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m        \u001b[33mif\u001b[0m (date.charAt(\u001b[31m6\u001b[0m) == \u001b[31m'/\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0msymbol literal '/ is no longer supported,\n\u001b[31m   |\u001b[0muse a string literal \"/\" or an application Symbol(\"/\") instead,\n\u001b[31m   |\u001b[0mor enclose in braces '{/} if you want a quoted expression.\n\u001b[31m   |\u001b[0mFor now, you can also `import language.deprecated.symbolLiterals` to accept\n\u001b[31m   |\u001b[0mthe idiom, but this possibility might no longer be available in the future.\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv2nkksyy.scala:71:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) != '-') {\n            return false\n        }\n        if (date.charAt(5) != '-') {\n            return false\n        }\n        if (date.charAt(8) != '-') {\n            return false\n        }\n        if (date.charAt(0) < '0' || date.charAt(0) > '9') {\n            return false\n        }\n        if (date.charAt(1) < '0' || date.charAt(1) > '9') {\n            return false\n        }\n        if (date.charAt(3) < '0' || date.charAt(3) > '9') {\n            return false\n        }\n        if (date.charAt(4) < '0' || date.charAt(4) > '9') {\n            return false\n        }\n        if (date.charAt(6) < '0' || date.charAt(6) > '9') {\n            return false\n        }\n        if (date.charAt(7) < '0' || date.charAt(7) > '9') {\n            return false\n        }\n        if (date.charAt(9) < '0' || date.charAt(9) > '9') {\n            return false\n        }\n        if (date.charAt(10) < '0' || date.charAt(10) > '9') {\n            return false\n        }\n        if (date.charAt(2) == '-' && date.charAt(5) == '-' && date.charAt(8) == '-') {\n            if (date.charAt(0) < '1' || date.charAt(0) > '3') {\n                return false\n            }\n            if (date.charAt(1) < '1' || date.charAt(1) > '9') {\n                return false\n            }\n            if (date.charAt(3) < '1' || date.charAt\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu0xz2ide.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu0xz2ide.scala:90:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m90 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0xz2ide.scala:68:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m            \u001b[33mif\u001b[0m (date.charAt(\u001b[31m3\u001b[0m) < \u001b[31m'1'\u001b[0m || date.charAt\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Int => Char\n\u001b[31m   |\u001b[0m                                        Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0xz2ide.scala:89:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpu0xz2ide.scala:70:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m70 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/' && date.charAt(5) == '/') {\n            return false\n        }\n        if (date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false\n        }\n        if (date.charAt(0) < '0' || date.charAt(0) > '2') {\n            return false\n        }\n        if (date.charAt(3) < '0' || date.charAt(3) > '9') {\n            return false\n        }\n        if (date.charAt(4) < '0' || date.charAt(4) > '9') {\n            return false\n        }\n        if (date.charAt(6) < '0' || date.charAt(6) > '9') {\n            return false\n        }\n        if (date.charAt(7) < '0' || date.charAt(7) > '9') {\n            return false\n        }\n        if (date.charAt(8) < '0' || date.charAt(8) > '9') {\n            return false\n        }\n        if (date.charAt(9) < '0' || date.charAt(9) > '9') {\n            return false\n        }\n        if (date.charAt(1) < '0' || date.charAt(1) > '2') {\n            return false\n        }\n        if (date.charAt(1) == '0' && date.charAt(0) != '1') {\n            return false\n        }\n        if (date.charAt(1) == '1' && date.charAt(0) != '0' && date.charAt(0) != '2') {\n            return false\n        }\n        if (date.charAt(1) == '2' && date.charAt(0) != '0' && date.charAt(0) != '2') {\n            return\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpiyskbcvs.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiyskbcvs.scala:65:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m            \u001b[33mreturn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    Unit\n\u001b[31m   |\u001b[0m            Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiyskbcvs.scala:86:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpiyskbcvs.scala:67:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m67 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        var month = date.substring(0, 2)\n        var day = date.substring(3, 5)\n        var year = date.substring(6, 10)\n        if (month.length() != 2 || day.length() != 2 || year.length() != 4) {\n            return false\n        }\n        var monthNum = toInt(month)\n        var dayNum = toInt(day)\n        var yearNum = toInt(year)\n        if (monthNum < 1 || monthNum > 12) {\n            return false\n        }\n        if (monthNum == 2) {\n            if (dayNum < 1 || dayNum > 29) {\n                return false\n            }\n        } else {\n            if (dayNum < 1 || dayNum > 31) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbem4lazb.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonthNum\u001b[0m = toInt(month)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbem4lazb.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdayNum\u001b[0m = toInt(day)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbem4lazb.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myearNum\u001b[0m = toInt(year)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.isEmpty()) {\n            return false\n        }\n        var month = date.split(\"-\")[0].toInt\n        var day = date.split(\"-\")[1].toInt\n        var year = date.split(\"-\")[2].toInt\n        if (month < 1 || month > 12) {\n            return false\n        }\n        if (day < 1 || day > 31) {\n            return false\n        }\n        if (month == 2 && day > 29) {\n            return false\n        }\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 30) {\n                return false\n            }\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 29) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293111,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpy1h2r00y.scala:25:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmonth\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpy1h2r00y.scala:26:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mday\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m1\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpy1h2r00y.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36myear\u001b[0m = date.split(\u001b[31m\"-\"\u001b[0m)[\u001b[31m2\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        date = date.trim()\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\,\", \"\")\n        date = date.replaceAll(\"\\\\:\", \"\")\n        date = date.replaceAll(\"\\\\;\", \"\")\n        date = date.replaceAll(\"\\\\?\", \"\")\n        date = date.replaceAll(\"\\\\!\", \"\")\n        date = date.replaceAll(\"\\\\(\", \"\")\n        date = date.replaceAll(\"\\\\)\", \"\")\n        date = date.replaceAll(\"\\\\{\", \"\")\n        date = date.replaceAll(\"\\\\}\", \"\")\n        date = date.replaceAll(\"\\\\[\", \"\")\n        date = date.replaceAll(\"\\\\]\", \"\")\n        date = date.replaceAll(\"\\\\\\\"\", \"\")\n        date = date.replaceAll(\"\\\\'\", \"\")\n        date = date.replaceAll(\"\\\\<\", \"\")\n        date = date.replaceAll(\"\\\\>\", \"\")\n        date = date.replaceAll(\"\\\\|\", \"\")\n        date = date.replaceAll(\"\\\\^\", \"\")\n        date = date.replaceAll(\"\\\\&\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\$\", \"\")\n        date = date.replaceAll(\"\\\\#\", \"\")\n        date = date.replaceAll(\"\\\\%\", \"\")\n        date = date.replaceAll(\"\\\\@\", \"\")\n        date = date.replaceAll(\"\\\\~\", \"\")\n        date = date.replaceAll(\"\\\\`\", \"\")\n        date = date.replaceAll(\"\\\\~\", \"\")\n        date = date.replaceAll(\"\\\\=\", \"\")\n        date = date.replaceAll(\"\\\\+\", \"\")\n        date = date.replaceAll(\"\\\\/\", \"\")\n        date = date.replaceAll(\"\\\\*\", \"\")\n        date = date.replaceAll(\"\\\\-\",\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293161,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwptzj7fp.scala:61:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpwptzj7fp.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.trim()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpwptzj7fp.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpwptzj7fp.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpwptzj7fp.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpwptzj7fp.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpwptzj7fp.scala:30:13 --",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        date = date.trim()\n        if (date.length() != 10) {\n            return false\n        }\n        month = date.substring(0, 2)\n        day = date.substring(3, 5)\n        year = date.substring(6, 10)\n        if (month.length() != 2) {\n            return false\n        }\n        if (day.length() != 2) {\n            return false\n        }\n        if (year.length() != 4) {\n            return false\n        }\n        if (month.toInt() < 1 || month.toInt() > 12) {\n            return false\n        }\n        if (day.toInt() < 1 || day.toInt() > 31) {\n            return false\n        }\n        if (month.toInt() == 2) {\n            if (day.toInt() < 1 || day.toInt() > 29) {\n                return false\n            }\n        }\n        if (month.toInt() == 4 || month.toInt() == 6 || month.toInt() == 9 || month.toInt() == 11) {\n            if (day.toInt() < 1 || day.toInt() > 30) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293161,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpscp53jv1.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.trim()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpscp53jv1.scala:29:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        month = date.substring(\u001b[31m0\u001b[0m, \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Not found: month\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpscp53jv1.scala:30:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        day = date.substring(\u001b[31m3\u001b[0m, \u001b[31m5\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Not found: day\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpscp53jv1.scala:31:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        year = date.substring(\u001b[31m6\u001b[0m, \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Not found: year\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpscp53jv1.scala:32:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mif\u001b[0m (month.length() != \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: month\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpscp53jv1.scala:35:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mif\u001b[0m (day.length() != \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: day\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpscp53jv1.scala:38:12 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date == \"\") {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvfth_6hj.scala:83:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvfth_6hj.scala:82:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m (date.substring(\u001b[31m9\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    String\n\u001b[31m   |\u001b[0m            Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.trim().length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(9, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(10, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(1, 3).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(4, 6).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(7, 9).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(10, 11).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 1).equals(\"0\")) {\n            return false\n        }\n        if (\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpmbns3ktk.scala:82:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m        \u001b[33mif\u001b[0m (\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(3, 5).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(6, 8).equals(\"0\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"1\") && date.substring(3, 5).equals(\"1\") && date.substring(6, 10).equals(\"1\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"2\") && date.substring(3, 5).equals(\"2\") && date.substring(6, 10).equals(\"2\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"3\") && date.substring(3, 5).equals(\"3\") && date.substring(6, 10).equals(\"3\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"4\") && date.substring(3, 5).equals(\"4\") && date.substring(6, 10).equals(\"4\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"5\") && date.substring(3, 5).equals(\"5\") && date.substring(6, 10).equals(\"5\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"6\") && date.substring(3, 5).equals(\"6\") && date.substring(6, 10).equals(\"6\")) {\n            return false\n        }\n        if (date.substring(0, 2).equals(\"7\") && date.substring(3, 5).equals(\"7\") && date.substring(6, 10).equals(\"7\")) {\n            return false\n        }\n        if (date\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsdqqg116.scala:59:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsdqqg116.scala:58:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m        \u001b[33mif\u001b[0m (date\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (date : String)\n\u001b[31m   |\u001b[0m            Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if(date.trim().length() == 0) {\n            return false\n        }\n        date = date.trim()\n        date = date.replaceAll(\"-\", \"\")\n        date = date.replaceAll(\"/\", \"\")\n        date = date.replaceAll(\"\\\\.\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\\\\d\", \"\")\n        date = date.replaceAll(\"\\\\D\", \"\")\n        date = date.replaceAll(\"\\\\s\", \"\")\n        date = date.replaceAll(\"\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp92bia_jg.scala:60:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m        date = date.replaceAll(\"\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               unclosed string literal\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp92bia_jg.scala:25:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        date = date.trim()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp92bia_jg.scala:26:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        date = date.replaceAll(\u001b[31m\"-\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp92bia_jg.scala:27:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        date = date.replaceAll(\u001b[31m\"/\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp92bia_jg.scala:28:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\.\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp92bia_jg.scala:29:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        date = date.replaceAll(\u001b[31m\"\\\\s\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val date\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling wi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '0') {\n            return false\n        }\n        if (date.charAt(4) == '0') {\n            return false\n        }\n        if (date.charAt(6) == '0') {\n            return false\n        }\n        if (date.charAt(8) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0')\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpphcvzuw5.scala:89:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        if (date.length() == 0) {\n            return false\n        }\n        if (date.length() != 10) {\n            return false\n        }\n        if (date.charAt(2) == '/') {\n            return false\n        }\n        if (date.charAt(4) == '/') {\n            return false\n        }\n        if (date.charAt(6) == '/') {\n            return false\n        }\n        if (date.charAt(0) == '0') {\n            return false\n        }\n        if (date.charAt(1) == '0') {\n            return false\n        }\n        if (date.charAt(3) == '0') {\n            return false\n        }\n        if (date.charAt(5) == '0') {\n            return false\n        }\n        if (date.charAt(7) == '0') {\n            return false\n        }\n        if (date.charAt(9) == '0') {\n            return false\n        }\n        if (date.charAt(0) == '1') {\n            return false\n        }\n        if (date.charAt(1) == '1') {\n            return false\n        }\n        if (date.charAt(3) == '1') {\n            return false\n        }\n        if (date.charAt(5) == '1') {\n            return false\n        }\n        if (date.charAt(7) == '1') {\n            return false\n        }\n        if (date.charAt(9) == '1') {\n            return false\n        }\n        if (date.charAt(2) == '1') {\n            return false\n        }\n        if (date.charAt(4) == '1') {\n            return false\n        }\n        if (date.charAt(6) == '1') {\n            return false\n        }\n        if (date.charAt(8) == '1') {\n            return false\n        }\n        if (date.charAt(10) == '1') {\n            return false\n        }\n        if (date.charAt(0) == '2') {\n            \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxzxtyo_f.scala:111:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m111 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxzxtyo_f.scala:110:1 --------------------\u001b[0m\u001b[0m\n\u001b[31m110 |\u001b[0m}\n\u001b[31m\u001b[31m    |\u001b[0m ^\u001b[0m\n\u001b[31m    |\u001b[0m Found:    Unit\n\u001b[31m    |\u001b[0m Required: Boolean\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpxzxtyo_f.scala:91:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m91 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}