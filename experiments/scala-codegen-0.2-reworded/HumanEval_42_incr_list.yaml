name: HumanEval_42_incr_list
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
  \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
  \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
  \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
  \ 124l.toLong))\n    def incrList(l : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
  \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
  \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
  \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
  \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
  \ 124l.toLong))));\n    }\n\n}\n"
completions: ["        var result = List[Long](0l)\n        for (i <- 0 until l.length)\
    \ {\n            result = result.updated(i, l(i).toLong + 1)\n        }\n    \
    \    return result\n    }\n\n    // Return list with elements incremented by 1.\n\
    \    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong, 3l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n\
    \    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong,\
    \ 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l : List[Long]) : List[Long]\
    \ = {\n        var result = List[Long](0l)\n        for (i <- 0 until l.length)\
    \ {\n            result = result.updated(i, l(i) + 1)\n        }\n        return\
    \ result\n    }\n\n    // Return list with elements incremented by 1.\n    //\
    \ >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong, 3l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n\
    \    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong,\
    \ 10l.toLong, 1l.toLong,", "        var result = List[Long](l.size)\n        for\
    \ (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i) + 1)\n\
    \        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i).plus(1l))\n\
    \        }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i).plus(1l))\n\
    \        }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.to", "        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i).plus(1l))\n\
    \        }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i).plus(1l))\n\
    \        }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.to", "        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n       \
    \ }\n        return result", "        var result = List[Long](l.size)\n      \
    \  for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](0)\n\
    \        for (i <- 0 until l.length) {\n            result = result.updated(i,\
    \ l(i).toLong + 1)\n        }\n        return result\n    }\n\n    // Return list\
    \ with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))\n    def incrList2(l : List[Long]) : List[Long] = {\n        var\
    \ result = List[Long](0)\n        for (i <- 0 until l.length) {\n            result\
    \ = result.updated(i, l(i) + 1)\n        }\n        return result\n    }\n\n \
    \   // Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l", "        var result = List[Long](0l)\n        for (i <- 0 until l.length)\
    \ {\n            result = result.updated(i, l(i) + 1l)\n        }\n        return\
    \ result", "        var result = List[Long](l.size)\n        for (i <- 0 until\
    \ l.size) {\n            result = result.updated(i, l.get(i) + 1)\n        }\n\
    \        return result", "        var result = List[Long](l.size)\n        for\
    \ (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i) + 1)\n\
    \        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](0)\n        for\
    \ (i <- 0 until l.length) {\n            result = result.updated(i, l(i) + 1)\n\
    \        }\n        return result", "        var result = List[Long](0l)\n   \
    \     for (i <- 0 until l.length) {\n            result = result.updated(i, l(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n       \
    \ }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    ", "       \
    \ var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n     \
    \       result[i] = l[i] + 1\n        }\n        return result", "        var\
    \ result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n         \
    \   result = result.updated(i, l.get(i) + 1)\n        }\n        return result",
  "        var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n\
    \            result = result.updated(i, l.apply(i) + 1)\n        }\n        return\
    \ result", "        var result = List[Long](0)\n        for (i <- 0 until l.length)\
    \ {\n            result = result.updated(i, l(i) + 1)\n        }\n        return\
    \ result\n    }\n\n    // Return list with elements incremented by 1.\n    //\
    \ >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong, 3l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n\
    \    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong,\
    \ 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l : List[Long]) : List[Long]\
    \ = {\n        var result = List[Long](0)\n        for (i <- 0 until l.length)\
    \ {\n            result = result.updated(i, l(i) + 1)\n        }\n        return\
    \ result\n    }\n\n    // Return list with elements incremented by 1.\n    //\
    \ >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong, 3l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n\
    \    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong,\
    \ 10l.toLong, 1l.toLong, 124l.to", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n        }\n\
    \        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n       \
    \ }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    ", "       \
    \ var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n     \
    \       result[i] = l[i] + 1\n        }\n        return result\n    }\n\n    //\
    \ Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))\n    def incrList2(l : List[Long]) : List[Long] = {\n        var\
    \ result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n         \
    \   result[i] = l[i] + 1\n        }\n        return result\n    }\n\n    // Return\
    \ list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))\n    ", "        var result = List[Long](l.size)\n        for\
    \ (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n        }\n     \
    \   return result", "        var result = List[Long](l.size)\n        for (i <-\
    \ 0 until l.size) {\n            result = result.updated(i, l.get(i) + 1)\n  \
    \      }\n        return result", "        var result = List[Long](l.size)\n \
    \       for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n      \
    \  }\n        return result", "        var result = List[Long](l.size)\n     \
    \   for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n        }\n\
    \        return result", "        var result = List[Long](l.size)\n        for\
    \ (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i) + 1)\n\
    \        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](0l)\n        for\
    \ (i <- 0 until l.length) {\n            result = result.updated(i, l(i) + 1l)\n\
    \        }\n        return result", "        var result = List[Long](0l)\n   \
    \     for (i <- 0 until l.length) {\n            result = result.updated(i, l(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](0l)\n        for\
    \ (i <- 0 until l.length) {\n            result = result.updated(i, l(i).toLong\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](0l)\n\
    \        for (i <- 0 until l.length) {\n            result = result.updated(i,\
    \ l(i) + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n       \
    \ }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    ", "       \
    \ var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n     \
    \       result = result.updated(i, l.get(i) + 1)\n        }\n        return result",
  "        var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n\
    \            result = result.updated(i, l.apply(i) + 1)\n        }\n        return\
    \ result\n    }\n\n    // Return list with elements incremented by 1.\n    //\
    \ >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong, 3l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n\
    \    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong,\
    \ 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l : List[Long]) : List[Long]\
    \ = {\n        var result = List[Long](l.size)\n        for (i <- 0 until l.size)\
    \ {\n            result = result.updated(i, l.apply(i) + 1)\n        }\n     \
    \   return result\n    }\n\n    // Return list with elements incremented by 1.\n\
    \    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong, 3l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n\
    \    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong,\
    \ 10l.toLong, 1l", "        var result = List[Long](l.size)\n        for (i <-\
    \ 0 until l.size) {\n            result = result.updated(i, l.apply(i).plus(1l))\n\
    \        }\n        return result", "        var result = List[Long](0l)\n   \
    \     for (i <- 0 until l.length) {\n            result = result.updated(i, l(i)\
    \ + 1l)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](0l)\n      \
    \  for (i <- 0 until l.length) {\n            result = result.updated(i, l(i)\
    \ + 1l)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](0)\n\
    \        for (i <- 0 until l.length) {\n            result = result.updated(i,\
    \ l(i) + 1)\n        }\n        return result\n    }\n\n    // Return list with\
    \ elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>>\
    \ incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))\n    def incrList2(l : List[Long]) : List[Long] = {\n        var\
    \ result = List[Long](0)\n        for (i <- 0 until l.length) {\n            result\
    \ = result.updated(i, l(i) + 1)\n        }\n        return result\n    }\n\n \
    \   // Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.to", "        var result = List[Long](l.size)\n        for (i <- 0 until\
    \ l.size) {\n            result[i] = l[i] + 1\n        }\n        return result",
  "        var result = List[Long](0)\n        for (i <- 0 until l.length) {\n   \
    \         result = result.updated(i, l(i).toLong + 1)\n        }\n        return\
    \ result", "        var result = List[Long](l.size)\n        for (i <- 0 until\
    \ l.size) {\n            result[i] = l[i] + 1\n        }\n        return result",
  "        var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n\
    \            result[i] = l[i] + 1\n        }\n        return result", "      \
    \  var result = List[Long](0)\n        for (i <- 0 until l.length) {\n       \
    \     result = result.updated(i, l(i).toLong + 1)\n        }\n        return result",
  "        var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n\
    \            result = result.updated(i, l.get(i) + 1)\n        }\n        return\
    \ result", "        var result = List[Long](l.size)\n        for (i <- 0 until\
    \ l.size) {\n            result[i] = l[i] + 1\n        }\n        return result",
  "        var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n\
    \            result[i] = l[i] + 1\n        }\n        return result", "      \
    \  var result = List[Long](0l)\n        for (i <- 0 until l.length) {\n      \
    \      result = result.updated(i, l(i) + 1)\n        }\n        return result\n\
    \    }\n\n    // Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))\n    def incrList2(l : List[Long]) : List[Long] = {\n        var\
    \ result = List[Long](0l)\n        for (i <- 0 until l.length) {\n           \
    \ result = result.updated(i, l(i) + 1)\n        }\n        return result\n   \
    \ }\n\n    // Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l", "        var result = List[Long](l.size)\n        for (i <- 0 until l.size)\
    \ {\n            result = result.updated(i, l.get(i) + 1)\n        }\n       \
    \ return result", "        var result = List[Long](l.size)\n        for (i <-\
    \ 0 until l.size) {\n            result[i] = l[i] + 1\n        }\n        return\
    \ result", "        var result = List[Long](l.size)\n        for (i <- 0 until\
    \ l.size) {\n            result = result.updated(i, l.apply(i) + 1)\n        }\n\
    \        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](0)\n\
    \        for (i <- 0 until l.length) {\n            result = result.updated(i,\
    \ l(i).toLong + 1)\n        }\n        return result\n    }\n\n    // Return list\
    \ with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))\n    def incrList2(l : List[Long]) : List[Long] = {\n        var\
    \ result = List[Long](0)\n        for (i <- 0 until l.length) {\n            result\
    \ = result.updated(i, l(i) + 1)\n        }\n        return result\n    }\n\n \
    \   // Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l", "        var result = List[Long](l.size)\n        for (i <- 0 until l.size)\
    \ {\n            result[i] = l[i] + 1\n        }\n        return result\n    }\n\
    \n    // Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))\n    def incrList2(l : List[Long]) : List[Long] = {\n        var\
    \ result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n         \
    \   result[i] = l[i] + 1\n        }\n        return result\n    }\n\n    // Return\
    \ list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))\n    ", "        var result = List[Long](l.size)\n        for\
    \ (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i) + 1)\n\
    \        }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](0l)\n\
    \        for (i <- 0 until l.length) {\n            result = result.updated(i,\
    \ l(i) + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n        }\n\
    \        return result", "        var result = List[Long](0)\n        for (i <-\
    \ 0 until l.length) {\n            result = result.updated(i, l(i).toLong + 1)\n\
    \        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](0l)\n\
    \        for (i <- 0 until l.length) {\n            result = result.updated(i,\
    \ l(i).toLong + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n        }\n\
    \        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n       \
    \ }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    ", "       \
    \ var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n     \
    \       result = result.updated(i, l.get(i) + 1)\n        }\n        return result",
  "        var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n\
    \            result[i] = l[i] + 1\n        }\n        return result", "      \
    \  var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n    \
    \        result = result.updated(i, l.get(i) + 1)\n        }\n        return result\n\
    \    }\n\n    // Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))\n    def incrList2(l : List[Long]) : List[Long] = {\n        var\
    \ result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n         \
    \   result = result.updated(i, l.get(i) + 1)\n        }\n        return result\n\
    \    }\n\n    // Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l", "  \
    \      var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n\
    \            result = result.updated(i, l.get(i) + 1)\n        }\n        return\
    \ result", "        var result = List[Long](l.size)\n        for (i <- 0 until\
    \ l.size) {\n            result[i] = l[i] + 1\n        }\n        return result",
  "        var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n\
    \            result = result.updated(i, l.apply(i).plus(1l))\n        }\n    \
    \    return result", "        var result = List[Long](l.size)\n        for (i\
    \ <- 0 until l.size) {\n            result = result.updated(i, l.apply(i) + 1)\n\
    \        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n        }\n\
    \        return result", "        var result = List[Long](l.size)\n        for\
    \ (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i) + 1)\n\
    \        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n       \
    \ }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    ", "       \
    \ var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n     \
    \       result = result.updated(i, l.get(i) + 1)\n        }\n        return result\n\
    \    }\n\n    // Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))\n    def incrList2(l : List[Long]) : List[Long] = {\n        var\
    \ result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n         \
    \   result = result.updated(i, l.get(i) + 1)\n        }\n        return result\n\
    \    }\n\n    // Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l", "  \
    \      var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n\
    \            result = result.updated(i, l.apply(i) + 1)\n        }\n        return\
    \ result", "        var result = List[Long](l.size)\n        for (i <- 0 until\
    \ l.size) {\n            result = result.updated(i, l.apply(i) + 1)\n        }\n\
    \        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n        }\n\
    \        return result", "        var result = List[Long](l.size)\n        for\
    \ (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i) + 1)\n\
    \        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](0)\n        for\
    \ (i <- 0 until l.length) {\n            result = result.updated(i, l(i).toLong\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n        }\n\
    \        return result", "        var result = List[Long](l.size)\n        for\
    \ (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i) + 1)\n\
    \        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i).plus(1l))\n\
    \        }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i).plus(1l))\n\
    \        }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.to", "        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i).plus(1))\n\
    \        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](0l)\n        for\
    \ (i <- 0 until l.length) {\n            result = result.updated(i, l(i) + 1)\n\
    \        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long]()\n        for\
    \ (i <- 0 until l.length) {\n            result = result.append(l.apply(i).increment())\n\
    \        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i).plus(1))\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until l.length) {\n            result = result.append(l.apply(i).increment())\n\
    \        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n       \
    \ }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    ", "       \
    \ var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n     \
    \       result = result.updated(i, l.apply(i) + 1)\n        }\n        return\
    \ result", "        var result = List[Long](l.size)\n        for (i <- 0 until\
    \ l.size) {\n            result[i] = l[i] + 1\n        }\n        return result",
  "        var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n\
    \            result[i] = l[i] + 1\n        }\n        return result", "      \
    \  var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n    \
    \        result = result.updated(i, l.get(i) + 1)\n        }\n        return result\n\
    \    }\n\n    // Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))\n    def incrList2(l : List[Long]) : List[Long] = {\n        var\
    \ result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n         \
    \   result = result.updated(i, l.get(i) + 1)\n        }\n        return result\n\
    \    }\n\n    // Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l", "  \
    \      var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n\
    \            result = result.updated(i, l.get(i) + 1)\n        }\n        return\
    \ result", "        var result = List[Long](l.size)\n        for (i <- 0 until\
    \ l.size) {\n            result = result.updated(i, l.get(i) + 1)\n        }\n\
    \        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](0l)\n\
    \        for (i <- 0 until l.length) {\n            result = result.updated(i,\
    \ l(i) + 1)\n        }\n        return result\n    }\n\n    // Return list with\
    \ elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>>\
    \ incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))\n    def incrList2(l : List[Long]) : List[Long] = {\n        var\
    \ result = List[Long](0l)\n        for (i <- 0 until l.length) {\n           \
    \ result = result.updated(i, l(i) + 1)\n        }\n        return result\n   \
    \ }\n\n    // Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l", "        var result = List[Long](l.size)\n        for (i <- 0 until l.size)\
    \ {\n            result = result.updated(i, l.apply(i) + 1)\n        }\n     \
    \   return result", "        var result = List[Long](l.size)\n        for (i <-\
    \ 0 until l.size) {\n            result[i] = l[i] + 1\n        }\n        return\
    \ result", "        var result = List[Long](l.size)\n        for (i <- 0 until\
    \ l.size) {\n            result = result.updated(i, l.get(i) + 1)\n        }\n\
    \        return result", "        var result = List[Long](l.size)\n        for\
    \ (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i) + 1)\n\
    \        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](0l)\n\
    \        for (i <- 0 until l.length) {\n            result = result.updated(i,\
    \ l(i) + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](0)\n        for\
    \ (i <- 0 until l.length) {\n            result = result.updated(i, l(i).toLong\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](0)\n       \
    \ for (i <- 0 until l.length) {\n            result = result.updated(i, l(i) +\
    \ 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n        }\n\
    \        return result", "        var result = List[Long](l.size)\n        for\
    \ (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n        }\n     \
    \   return result", "        var result = List[Long](l.size)\n        for (i <-\
    \ 0 until l.size) {\n            result = result.updated(i, l.get(i) + 1)\n  \
    \      }\n        return result", "        var result = List[Long](l.size)\n \
    \       for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](l.size)\n    \
    \    for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n        }\n\
    \        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n       \
    \ }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    ", "       \
    \ var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n     \
    \       result[i] = l[i] + 1\n        }\n        return result", "        var\
    \ result = List[Long](0)\n        for (i <- 0 until l.length) {\n            result\
    \ = result.updated(i, l(i) + 1)\n        }\n        return result", "        var\
    \ result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n         \
    \   result[i] = l[i] + 1\n        }\n        return result", "        var result\
    \ = List[Long](0l)\n        for (i <- 0 until l.length) {\n            result\
    \ = result.updated(i, l(i) + 1l)\n        }\n        return result", "       \
    \ var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n     \
    \       result[i] = l[i] + 1\n        }\n        return result", "        var\
    \ result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n         \
    \   result = result.updated(i, l.apply(i).plus(1))\n        }\n        return\
    \ result", "        var result = List[Long](l.size)\n        for (i <- 0 until\
    \ l.size) {\n            result[i] = l[i] + 1\n        }\n        return result",
  "        var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n\
    \            result = result.updated(i, l.get(i) + 1)\n        }\n        return\
    \ result", "        var result = List[Long](l.size)\n        for (i <- 0 until\
    \ l.size) {\n            result[i] = l[i] + 1\n        }\n        return result\n\
    \    }\n\n    // Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))\n    def incrList2(l : List[Long]) : List[Long] = {\n        var\
    \ result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n         \
    \   result[i] = l[i] + 1\n        }\n        return result\n    }\n\n    // Return\
    \ list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))\n    ", "        var result = List[Long](l.size)\n        for\
    \ (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n        }\n     \
    \   return result", "        var result = List[Long](l.size)\n        for (i <-\
    \ 0 until l.size) {\n            result = result.updated(i, l.get(i) + 1)\n  \
    \      }\n        return result", "        var result = List[Long](l.size)\n \
    \       for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long](0l)\n        for\
    \ (i <- 0 until l.length) {\n            result = result.updated(i, l(i) + 1l)\n\
    \        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result = result.updated(i, l.apply(i)\
    \ + 1)\n        }\n        return result\n    }\n\n    // Return list with elements\
    \ incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList2(l\
    \ : List[Long]) : List[Long] = {\n        var result = List[Long](l.size)\n  \
    \      for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n       \
    \ }\n        return result\n    }\n\n    // Return list with elements incremented\
    \ by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong,\
    \ 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    ", "       \
    \ var result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n     \
    \       result[i] = l[i] + 1\n        }\n        return result\n    }\n\n    //\
    \ Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))\n    def incrList2(l : List[Long]) : List[Long] = {\n        var\
    \ result = List[Long](l.size)\n        for (i <- 0 until l.size) {\n         \
    \   result[i] = l[i] + 1\n        }\n        return result\n    }\n\n    // Return\
    \ list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong,\
    \ 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))\n    ", "        var result = List[Long](0l)\n        for (i <-\
    \ 0 until l.length) {\n            result = result.updated(i, l(i) + 1)\n    \
    \    }\n        return result", "        var result = List[Long](l.size)\n   \
    \     for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result[i] = l[i] + 1\n     \
    \   }\n        return result", "        var result = List[Long]()\n        for\
    \ (i <- 0 until l.length) {\n            result = result.append(l.apply(i).increment())\n\
    \        }\n        return result", "        var result = List[Long](l.size)\n\
    \        for (i <- 0 until l.size) {\n            result = result.updated(i, l.get(i)\
    \ + 1)\n        }\n        return result"]
stop_tokens:
- "\n    }\n"
