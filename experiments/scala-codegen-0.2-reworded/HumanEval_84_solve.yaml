name: HumanEval_84_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer N, return the total sum of its digits in binary.\n\
  \    // Example\n    // >>> solve((1000l))\n    // (\"1\")\n    // >>> solve((150l))\n\
  \    // (\"110\")\n    // >>> solve((147l))\n    // (\"1100\")\n    // Variables:\n\
  \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
  \    // a string of binary number\n    def solve(N : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
  1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
  1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
  10010\")));\n    }\n\n}\n"
completions: ["        var digits = \"\"\n        var sum = 0l\n        while(N >\
    \ 0) {\n            digits = digits + String.valueOf(N % 2)\n            N /=\
    \ 2\n        }\n        return digits", "        val digits = toDigits(N)\n  \
    \      val sum = digits.reduce(0, (a, b) => a + b)\n        val result = \"\"\n\
    \        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n\
    \        }\n        result\n    }\n\n    // Convert a positive integer to a string\
    \ of its digits in binary.\n    // Example\n    // >>> toDigits(1000l)\n    //\
    \ (\"1\")\n    // >>> toDigits(150l)\n    // (\"110\")\n    // >>> toDigits(147l)\n\
    \    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n\
    \    def toDigits(N : Long) : String = {\n        val digits = \"\"\n        while\
    \ (N > 0) {\n            digits = digits + (N % 2)\n            N /= 2\n     \
    \   }\n        digits", "        val digits = \"\"\n        for (i <- 0 until\
    \ N) {\n            digits = digits + to_string(i % 2)\n            i /= 2\n \
    \       }\n        return digits", "        val digits = toDigits(N)\n       \
    \ val sum = digits.reduce(0, (a, b) => a + b)\n        return toBinary(sum)\n\
    \    }\n\n    // Convert a positive integer to a string of its digits in binary.\n\
    \    // Example\n    // >>> toDigits(1000l)\n    // (\"100000000\")\n    // >>>\
    \ toDigits(150l)\n
  "        val digits = to_string(N)\n        val sum = 0l\n        for (i in 0 until\
    \ digits.length) {\n            sum += digits[i].charCodeAt(0) - 48\n        }\n\
    \        return to_string(sum)", "        var digits = \"\"\n        for (i <-\
    \ 0 until N) {\n            digits = digits + String.valueOf(N % 2)\n        \
    \    N /= 2\n        }\n        return digits", "        var digits = \"\"\n \
    \       var sum = 0l\n        for (var i = 0; i < N.toInt; i++) {\n          \
    \  digits = digits + N.toInt % 2\n            sum = sum + N.toInt % 2\n      \
    \      N = N / 2\n        }\n        return digits", "        var digits = \"\"\
    \n        var n = N\n        while (n > 0) {\n            digits = (digits + (n\
    \ % 2).toString())\n            n /= 2\n        }\n        return digits", " \
    \       if (N == 0) return \"0\"\n        if (N == 1) return \"1\"\n        if\
    \ (N == 2) return \"10\"\n        if (N == 3) return \"11\"\n        if (N ==\
    \ 4) return \"100\"\n        if (N == 5) return \"101\"\n        if (N == 6) return\
    \ \"110\"\n        if (N == 7) return \"111\"\n        if (N == 8) return \"1000\"\
    \n        if (N == 9) return \"1001\"\n        if (N == 10) return \"1010\"\n\
    \        if (N == 11) return \"1011\"\n        if (N == 12) return \"1100\"\n\
    \        if (N == 13) return \"1101\"\n        if (N == 14) return \"1110\"\n\
    \        if (N == 15) return \"1111\"\n        if (N == 16) return \"10000\"\n\
    \        if (N == 17) return \"10001\"\n        if (N == 18) return \"10010\"\n\
    \        if (N == 19) return \"10011\"\n        if (N == 20) return \"10100\"\n\
    \        if (N == 21) return \"10101\"\n        if (N == 22) return \"10110\"\n\
    \        if (N == 23) return \"10111\"\n        if (N == 24) return \"11000\"\n\
    \        if (N == 25) return \"11001\"\n        if (N == 26) return \"11010\"\n\
    \        if (N == 27) return \"11011\"\n        if (N == 28) return \"11100\"\n\
    \        if (N == 29) return \"11101\"\n        if (N == 30) return \"11110\"\n\
    \        if (N == 31) return \"11111\"\n        if (N == 32) return \"100000\"\
    \n        if (N == 33) return \"100001\"\n        if (N == 34) return \"100010\"\
    \n        if (N == 35) return \"100011\"\n        if (N == 36) return \"100100\"\
    \n        if (N == 37) return \"100101\"\n        if (N == 38) return \"100110\"\
    \n        if (N == 39) return \"100111\"\n        if (N ==", "        var digits\
    \ = \"\"\n        var i = 0\n        while (i < N.intValue()) {\n            digits\
    \ = digits + String.valueOf(N % 2)\n            N = N / 2\n            i = i +\
    \ 1\n        }\n        return digits", "        val digits = toDigits(N)\n  \
    \      val sum = digits.reduce(_.sum)\n        return sum.toString()\n    }\n\n\
    \    // Convert a positive integer to a string of its digits in binary.\n    //\
    \ Example\n    // >>> toDigits(1000l)\n    // \"100\"\n    // >>> toDigits(150l)\n\
    \    // \"110\"\n    // >>> toDigits(147l)\n    // \"1100\"\n    // Variables:\n\
    \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
    \    // a string of binary number\n    def toDigits(N : Long) : String = {\n \
    \       val digits = \"\"\n        while(N > 0) {\n            digits = (N % 2).toString()\
    \ + digits\n            N /= 2\n        }\n        return digits", "        val\
    \ digits = toDigits(N)\n        val sum = digits.reduce(0, (a, b) => a + b)\n\
    \        return sum.toString()\n    }\n\n    // Convert a positive integer to\
    \ a string of its digits in binary.\n    // Example\n    // >>> toDigits(1000l)\n\
    \    // (\"1\")\n    // >>> toDigits(150l)\n    // (\"110\")\n    // >>> toDigits(147l)\n\
    \    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n\
    \    def toDigits(N : Long) : String = {\n        val digits = \"\"\n        while\
    \ (N > 0) {\n            digits = (N % 2).toString() + digits\n            N /=\
    \ 2\n        }\n        return digits", "        val digits = new StringBuilder()\n\
    \        for (i <- 0 until N) {\n            digits.append(i % 2)\n          \
    \  i /= 2\n        }\n        return digits.toString()", "        val digits =\
    \ new StringBuilder()\n        while (N > 0) {\n            digits.append(N %\
    \ 2)\n            N /= 2\n        }\n        return digits.reverse().toString()",
  "        val digits = N.toString().split(\"\")\n        val sum = 0l\n        for\
    \ (i <- 0 until digits.length) {\n            sum += digits[i].toLong\n      \
    \  }\n        return sum.toString", "        if (N == 0) {\n            return\
    \ \"\"\n        }\n        var sum = 0l\n        while (N > 0) {\n           \
    \ sum = sum + N % 2\n            N = N / 2\n        }\n        return String.valueOf(sum)",
  "        val digits = toDigits(N)\n        val sum = digits.reduce(0, (a, b) =>\
    \ a + b)\n        val result = \"\"\n        for (i <- 0 until digits.size) {\n\
    \            result = result + digits.get(i)\n        }\n        result\n    }\n\
    \n    // Convert a positive integer to a string of its digits in binary.\n   \
    \ // Example\n    // >>> toDigits(1000l)\n    // (\"1\")\n    // >>> toDigits(150l)\n\
    \    // (\"110\")\n    // >>> toDigits(147l)\n    // (\"1100\")\n    // Variables:\n\
    \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
    \    // a string of binary number\n    def toDigits(N : Long) : Seq[Long] = {\n\
    \        val digits = \"\"\n        while (N > 0) {\n            digits = digits\
    \ + toBinary(N % 2)\n            N /= 2\n        }\n        digits\n    }\n\n\
    \    // Convert a positive integer to a string of its digits in binary.\n    //\
    \ Example\n    // >>> toBinary(1)\n    // (\"1\")\n    // >>> toBinary(2)\n  \
    \  // (\"10\")\n    // >>> toBinary(3)\n    // (\"11\")\n    // >>> toBinary(4)\n\
    \    // (\"100\")\n    // >>> toBinary(5)\n    // (\"101\")\n    // >>> toBinary(6)\n\
    \    // (\"110\")\n    // >>> toBinary(7)\n    // (\"111\")\n    // >>> toBinary(8)\n\
    \    // (\"1000\")\n    // >>> toBinary(9)\n    // (\"1001\")\n    // >>> toBinary(10)\n\
    \    // (\"1010\")\n    // >>> toBinary(11)\n    // (\"1011\")\n    // >>> toBinary(12)\n\
    \    // (\"1100\")\n    // >>> toBinary(13)\n    // (\"1101\")\n    // >>> toBinary(14)\n\
    \    // (\"1110\")\n    // >>> toBinary(15)\n    // (\"1111\")\n    ", "     \
    \   if (N == 0) return \"0\"\n        if (N == 1) return \"1\"\n        if (N\
    \ == 2) return \"10\"\n        if (N == 3) return \"11\"\n        if (N == 4)\
    \ return \"100\"\n        if (N == 5) return \"101\"\n        if (N == 6) return\
    \ \"110\"\n        if (N == 7) return \"111\"\n        if (N == 8) return \"1000\"\
    \n        if (N == 9) return \"1001\"\n        if (N == 10) return \"1010\"\n\
    \        if (N == 11) return \"1011\"\n        if (N == 12) return \"1100\"\n\
    \        if (N == 13) return \"1101\"\n        if (N == 14) return \"1110\"\n\
    \        if (N == 15) return \"1111\"\n        if (N == 16) return \"10000\"\n\
    \        if (N == 17) return \"10001\"\n        if (N == 18) return \"10010\"\n\
    \        if (N == 19) return \"10011\"\n        if (N == 20) return \"10100\"\n\
    \        if (N == 21) return \"10101\"\n        if (N == 22) return \"10110\"\n\
    \        if (N == 23) return \"10111\"\n        if (N == 24) return \"11000\"\n\
    \        if (N == 25) return \"11001\"\n        if (N == 26) return \"11010\"\n\
    \        if (N == 27) return \"11011\"\n        if (N == 28) return \"11100\"\n\
    \        if (N == 29) return \"11101\"\n        if (N == 30) return \"11110\"\n\
    \        if (N == 31) return \"11111\"\n        if (N == 32) return \"100000\"\
    \n        if (N == 33) return \"100001\"\n        if (N == 34) return \"100010\"\
    \n        if (N == 35) return \"100011\"\n        if (N == 36) return \"100100\"\
    \n        if (N == 37) return \"100101\"\n        if (N == 38) return \"100110\"\
    \n        if (N == 39) return \"100111\"\n        if (N ==", "        val digits\
    \ = toCharArray(N)\n        val sum = 0\n        for (i <- 0 until digits.length)\
    \ {\n            sum += digits[i].charValue()\n        }\n        return sum.toString()",
  "        val digits = N.toString().split(\"\")\n        val sum = 0l\n        for\
    \ (i <- 0 until digits.length) {\n            sum += digits[i].toLong()\n    \
    \    }\n        return sum.toString()", "        val n = N.toString()\n      \
    \  val s = \"\"\n        for (i <- 0 until n.length) {\n            s += n[i]\n\
    \        }\n        return s", "        val digits = new StringBuilder()\n   \
    \     while(N > 0) {\n            digits.append(N % 2)\n            N /= 2\n \
    \       }\n        return digits.reverse().toString()", "        val digits =\
    \ toDigits(N)\n        val sum = digits.reduce(0, (a, b) => a + b)\n        val\
    \ result = toBinary(sum)\n        return result\n    }\n\n    // Convert a positive\
    \ integer to a string of its digits in binary.\n    // Example\n    // >>> toDigits(1000l)\n\
    \    // (\"100000000\")\n    // >>> toDigits(150l)\n
  "        var digits = \"\"\n        var i = 0\n        while (i < N.intValue())\
    \ {\n            digits = digits + N.div(10).toString\n            i = i + 1\n\
    \        }\n        return digits", "        val digits = new StringBuilder()\n\
    \        while(N > 0) {\n            digits.append(N % 2)\n            N /= 2\n\
    \        }\n        return digits.reverse().toString()", "        val digits =\
    \ N.toString().split(\"\")\n        val result = \"\"\n        for (i <- 0 until\
    \ digits.length) {\n            result += digits[i].toString()\n        }\n  \
    \      return result", "        val digits = new StringBuilder()\n        for\
    \ (i <- 0 until N) {\n            digits.append(i % 2)\n            i /= 2\n \
    \       }\n        return digits.toString()", "        val digits = toDigits(N)\n\
    \        val sum = digits.reduce(_.sum)\n        return sum.toString()\n    }\n\
    \n    // Convert a positive integer to a string of its digits in binary.\n   \
    \ // Example\n    // >>> toDigits(1000l)\n    // (\"1\")\n    // >>> toDigits(150l)\n\
    \    // (\"110\")\n    // >>> toDigits(147l)\n    // (\"1100\")\n    // Variables:\n\
    \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
    \    // a string of binary number\n    def toDigits(N : Long) : String = {\n \
    \       val digits = \"\"\n        while(N > 0) {\n            digits = (N % 2).toString()\
    \ + digits\n            N /= 2\n        }\n        return digits", "        val\
    \ digits = to_string(N)\n        val sum = 0\n        for (i <- 0 until digits.length)\
    \ {\n            sum += to_i(digits[i])\n        }\n        return to_string(sum)",
  "        val n = N.toString\n        val s = \"\"\n        for (i <- 0 until n.length)\
    \ {\n            s += n[i]\n        }\n        return s", "        val digits\
    \ = \"\"\n        for (i <- 0 until N) {\n            digits = digits + to_string(i\
    \ % 2)\n            i /= 2\n        }\n        return digits", "        val digits\
    \ = to_string(N)\n        val sum = 0\n        for (i in digits) {\n         \
    \   sum += i.char_value() - '0'\n        }\n        return to_string(sum)", " \
    \       val digits = toDigits(N)\n        val sum = digits.reduce(0, (a, b) =>\
    \ a + b)\n        return toBinary(sum)\n    }\n\n    // Convert a positive integer\
    \ to a string of its digits in binary.\n    // Example\n    // >>> toDigits(1000l)\n\
    \    // (\"1\")\n    // >>> toDigits(150l)\n    // (\"1101\")\n    // >>> toDigits(147l)\n\
    \    // (\"110111\")\n    // Variables:\n    // @N integer\n    // Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n\
    \    def toDigits(N : Long) : String = {\n        val digits = \"\"\n        while(N\
    \ > 0) {\n            digits = (N % 2).toString() + digits\n            N /= 2\n\
    \        }\n        return digits\n    }\n\n    // Convert a positive integer\
    \ to a string of its digits in binary.\n    // Example\n    // >>> toBinary(1l)\n\
    \    // (\"1\")\n    // >>> toBinary(10l)\n    // (\"1010\")\n    // >>> toBinary(100l)\n\
    \    // (\"10001\")\n    // >>> toBinary(1000l)\n    // (\"100010001\")\n    //\
    \ >>> toBinary(10000l)\n    // (\"1000100010001\")\n    // Variables:\n    //\
    \ @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n \
    \   // a string of binary number\n    def toBinary(N : Long) : String = {\n  \
    \      val digits = \"\"\n        while(N > 0) {\n            digits = (N % 2).toString()\
    \ + digits\n            N /= 2\n        }\n        return digits", "        val\
    \ digits = toDigits(N)\n        val sum = digits.reduceLeft((0, x) => x + x)\n\
    \        return sum.toString\n    }\n\n    // Convert a positive integer to a\
    \ string of its digits in binary.\n    // Example\n    // >>> toDigits(1000l)\n\
    \    // (\"1\")\n    // >>> toDigits(150l)\n    // (\"110\")\n    // >>> toDigits(147l)\n\
    \    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n\
    \    def toDigits(N : Long) : String = {\n        val digits = \"\"\n        while(N\
    \ > 0) {\n            digits = (N % 2).toString() + digits\n            N /= 2\n\
    \        }\n        return digits", "        val n = N.toString()\n        val\
    \ s = \"\"\n        for (i <- 0 until n.length) {\n            val digit = n[i]\n\
    \            if (digit.isDigit()) {\n                s += digit\n            }\
    \ else {\n                s += \"0\"\n            }\n        }\n        return\
    \ s", "        var digits = \"\"\n        var i = 0\n        while (N > 0) {\n\
    \            digits = digits + (N % 2)\n            N /= 2\n            i += 1\n\
    \        }\n        return digits", "        val digits = toDigits(N)\n      \
    \  val sum = digits.reduce(0, (a, b) => a + b)\n        val result = \"\"\n  \
    \      while (sum > 0) {\n            result = (sum % 2) + result\n          \
    \  sum /= 2\n        }\n        return result\n    }\n\n    // Converts a positive\
    \ integer to a string of its digits in binary.\n    // Example\n    // >>> toDigits(1000l)\n\
    \    // (\"1\")\n    // >>> toDigits(150l)\n    // (\"110\")\n    // >>> toDigits(147l)\n\
    \    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Output:\n   \
    \ // a string of binary number\n    def toDigits(N : Long) : String = {\n    \
    \    val digits = \"\"\n        while (N > 0) {\n            digits = (N % 2)\
    \ + digits\n            N /= 2\n        }\n        return digits", "        var\
    \ digits = \"\"\n        var i = 0\n        while (N > 0) {\n            digits\
    \ = digits + String.valueOf(N % 2)\n            N /= 2\n            i += 1\n \
    \       }\n        return digits", "        val digits = new StringBuilder()\n\
    \        while(N > 0) {\n            digits.append(N % 2)\n            N /= 2\n\
    \        }\n        return digits.reverse().toString()", "        val digits =\
    \ to_string(N)\n        val sum = 0l\n        for (i in 1 to digits.length) {\n\
    \            sum += to_i(digits[i - 1])\n        }\n        return to_string(sum)",
  "        var digits = \"\"\n        var sum = 0\n        for (var i = 0; i < N.intValue();\
    \ i++) {\n            digits = digits + (N % 2)\n            N /= 2\n        \
    \    sum += N % 10\n        }\n        return digits + (sum % 2)", "        val\
    \ digits = toDigits(N)\n        val sum = digits.reduce(0, (a, b) => a + b)\n\
    \        return toBinary(sum)\n    }\n\n    // Convert a positive integer to a\
    \ string of digits in binary.\n    // Example\n    // >>> toDigits(1000l)\n  \
    \  // (\"1\")\n    // >>> toDigits(150l)\n    // (\"110\")\n    // >>> toDigits(147l)\n\
    \    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of digits in binary\n\
    \    def toDigits(N : Long) : String = {\n        val digits = \"\"\n        while\
    \ (N > 0) {\n            digits = (N % 2) + digits\n            N /= 2\n     \
    \   }\n        return digits\n    }\n\n    // Convert a positive integer to a\
    \ string of binary number.\n    // Example\n    // >>> toBinary(1l)\n    // (\"\
    1\")\n    // >>> toBinary(2l)\n    // (\"10\")\n    // >>> toBinary(3l)\n    //\
    \ (\"11\")\n    // >>> toBinary(4l)\n    // (\"100\")\n    // >>> toBinary(5l)\n\
    \    // (\"101\")\n    // >>> toBinary(6l)\n    // (\"110\")\n    // >>> toBinary(7l)\n\
    \    // (\"111\")\n    // >>> toBinary(8l)\n    // (\"1000\")\n    // >>> toBinary(9l)\n\
    \    // (\"1001\")\n    // >>> toBinary(10l)\n    // (\"1010\")\n    // >>> toBinary(11l)\n\
    \    // (\"1011\")\n    // >>> toBinary(12l)\n    // (\"1100\")\n    // >>> toBinary(13l)\n\
    \    // (\"1101\")\n    // >>> toBinary(14l)\n    // (\"1110\")\n    // >>> toBinary(15l)\n\
    \    // (\"1111\")\n    // >>> toBinary(16l)\n    // (\"10000\")\n    // >>> toBinary",
  "        var digits = \"\"\n        var i = 0\n        while (i < N.intValue())\
    \ {\n            digits = digits + to_string(N % 2)\n            N /= 2\n    \
    \        i += 1\n        }\n        return digits", "        var digits = \"\"\
    \n        var sum = 0l\n        while (N > 0) {\n            digits = digits +\
    \ String.valueOf(N % 2)\n            N /= 2\n        }\n        for (i <- 1 to\
    \ digits.length) {\n            sum += digits.charAt(i) * Math.pow(2, i)\n   \
    \     }\n        return sum.toString()", "        val n = N.toString()\n     \
    \   val s = \"\"\n        for (i <- 0 until n.length) {\n            s += n[i]\n\
    \        }\n        return s", "        val digits = toBinaryString(N)\n     \
    \   val sum = 0\n        for (i <- 0 until digits.length) {\n            sum +=\
    \ digits[i]\n        }\n        return sum.toString", "        if (N == 0) return\
    \ \"0\"\n        if (N == 1) return \"1\"\n        if (N == 2) return \"10\"\n\
    \        if (N == 3) return \"11\"\n        if (N == 4) return \"100\"\n     \
    \   if (N == 5) return \"101\"\n        if (N == 6) return \"110\"\n        if\
    \ (N == 7) return \"111\"\n        if (N == 8) return \"1000\"\n        if (N\
    \ == 9) return \"1001\"\n        if (N == 10) return \"1010\"\n        if (N ==\
    \ 11) return \"1011\"\n        if (N == 12) return \"1100\"\n        if (N ==\
    \ 13) return \"1101\"\n        if (N == 14) return \"1110\"\n        if (N ==\
    \ 15) return \"1111\"\n        if (N == 16) return \"10000\"\n        if (N ==\
    \ 17) return \"10001\"\n        if (N == 18) return \"10010\"\n        if (N ==\
    \ 19) return \"10011\"\n        if (N == 20) return \"10100\"\n        if (N ==\
    \ 21) return \"10101\"\n        if (N == 22) return \"10110\"\n        if (N ==\
    \ 23) return \"10111\"\n        if (N == 24) return \"11000\"\n        if (N ==\
    \ 25) return \"11001\"\n        if (N == 26) return \"11010\"\n        if (N ==\
    \ 27) return \"11011\"\n        if (N == 28) return \"11100\"\n        if (N ==\
    \ 29) return \"11101\"\n        if (N == 30) return \"11110\"\n        if (N ==\
    \ 31) return \"11111\"\n        if (N == 32) return \"100000\"\n        if (N\
    \ == 33) return \"100001\"\n        if (N == 34) return \"100010\"\n        if\
    \ (N == 35) return \"100011\"\n        if (N == 36) return \"100100\"\n      \
    \  if (N == 37) return \"100101\"\n        if (N == 38) return \"100110\"\n  \
    \      if (N == 39) return \"100111\"\n        if (N ==", "        val digits\
    \ = N.toString().toCharArray\n        val sum = 0l\n        for (i <- 0 until\
    \ digits.length) {\n            sum += digits[i].digitValue\n        }\n     \
    \   return sum.toString", "        val digits = toBinaryString(N)\n        val\
    \ sum = 0l\n        for(i <- 0 until digits.length) {\n            sum += digits[i]\n\
    \        }\n        return sum.toString()\n    }\n\n    // Converts a number to\
    \ a string of binary digits.\n    def toBinaryString(N : Long) : String = {\n\
    \        val s = \"\"\n        while(N > 0) {\n            s = s + (N % 2)\n \
    \           N /= 2\n        }\n        return s", "        var digits = \"\"\n\
    \        var n = N\n        while (n > 0) {\n            digits = (n % 2).toString()\
    \ + digits\n            n /= 2\n        }\n        return digits", "        var\
    \ digits = \"\"\n        var sum = 0l\n        for (var i = 0; i < N.intValue();\
    \ i++) {\n            var digit = N.div(scala.math.pow(2, i)).toInt\n        \
    \    digits = digits + digit.toString(2)\n            sum = sum + digit\n    \
    \    }\n        return digits", "        var digits = \"\"\n        var sum =\
    \ 0l\n        while (N > 0l) {\n            digits = digits + (N % 2)\n      \
    \      N /= 2l\n            sum += N\n        }\n        return digits", "   \
    \     val digits = new StringBuilder()\n        while (N > 0) {\n            digits.append(N\
    \ % 2)\n            N /= 2\n        }\n        return digits.reverse().toString()",
  "        var digits = \"\"\n        var sum = 0l\n        while (N > 0) {\n    \
    \        digits = digits + (N % 2)\n            N /= 2\n        }\n        for\
    \ (i <- 0 until len(digits)) {\n            sum += (digits[i] * Math.pow(2, i))\n\
    \        }\n        return sum.toString()", "        val digits = \"\"\n     \
    \   for (i <- 0 until N) {\n            digits = digits + to_string(i % 2)\n \
    \           i /= 2\n        }\n        return digits", "        var digits = \"\
    \"\n        var sum = 0l\n        for(var i = 0; i < N.intValue(); i++) {\n  \
    \          digits = digits + (N % 2l)\n            sum = sum + N % 2l\n      \
    \      N = N / 2l\n        }\n        return digits + \"(\" + sum + \")\"", " \
    \       var digits = \"\"\n        for (i <- 0 until N) {\n            digits\
    \ = digits + toString(i % 2)\n            i /= 2\n        }\n        return digits",
  "        var result = \"\"\n        var i = 0\n        while (i < N.intValue())\
    \ {\n            result = result + Integer.toBinaryString(N.intValue() % 2)\n\
    \            i = i + 1\n        }\n        return result", "        val digits\
    \ = new StringBuilder()\n        while (N > 0) {\n            digits.append(N\
    \ % 2)\n            N /= 2\n        }\n        return digits.reverse().toString()",
  "        val digits = toBinaryString(N)\n        val sum = 0l\n        for (i <-\
    \ 0 until digits.length) {\n            sum += toLong(digits[i])\n        }\n\
    \        return digits.mkString(\"\") + sum\n    }\n\n    // Converts a positive\
    \ integer to a string of binary digits.\n    // Example\n    // >>> toBinaryString(1000l)\n\
    \    // \"1\"\n    // >>> toBinaryString(150l)\n    // \"110\"\n    // >>> toBinaryString(147l)\n\
    \    // \"1100\"\n    // Variables:\n    // @N integer\n    // Constraints: 0\
    \ \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary digits\n \
    \   def toBinaryString(N : Long) : String = {\n        val digits = \"\"\n   \
    \     while (N > 0) {\n            digits = (N % 2).toString() + digits\n    \
    \        N /= 2\n        }\n        return digits\n    }\n\n    // Converts a\
    \ string of binary digits to a positive integer.\n    // Example\n    // >>> toLong(\"\
    1\")\n    // 1\n    // >>> toLong(\"110\")\n    // 110\n    // >>> toLong(\"1100\"\
    )\n    // 1100\n    // Variables:\n    // @digits string\n    // Constraints:\n\
    \    // 0 \u2264 digits.length \u2264 10000.\n    // Output:\n    // a positive\
    \ integer\n    def toLong(digits : String) : Long = {\n        val sum = 0l\n\
    \        for (i <- 0 until digits.length) {\n            sum += toLong(digits[i])\n\
    \        }\n        return sum\n    }\n\n    // Converts a single digit to a positive\
    \ integer.\n    // Example\n    // >>> toLong(\"1\")\n    // 1\n    // >>> toLong(\"\
    0\")\n    // 0\n    // >>> toLong(\"10\")\n    // 10\n    // Variables:\n    //\
    \ @digit string\n    // Constraints:\n    // 0 \u2264 digit.length \u2264 10000.\n\
    \    // Output:\n    // a positive integer\n    def toLong(digit : String) : Long\
    \ = {\n        return (digit.charAt(0)", "        var digits = \"\"\n        var\
    \ sum = 0l\n        while (N > 0) {\n            var digit = N % 2\n         \
    \   digits = digit + digits\n            N /= 2\n            sum += digit\n  \
    \      }\n        return digits", "        val digits = toDigits(N)\n        val\
    \ sum = digits.reduce(_.sum)\n        return sum.toString()\n    }\n\n    // Convert\
    \ a positive integer to a string of its digits in binary.\n    // Example\n  \
    \  // >>> toDigits(1000l)\n    // \"100\"\n    // >>> toDigits(150l)\n    // \"\
    110\"\n    // >>> toDigits(147l)\n    // \"1100\"\n    // Variables:\n    // @N\
    \ integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    //\
    \ a string of binary number\n    def toDigits(N : Long) : String = {\n       \
    \ val digits = \"\"\n        while(N > 0) {\n            digits = (N % 2).toString()\
    \ + digits\n            N /= 2\n        }\n        return digits", "        val\
    \ digits = to_string(N)\n        val sum = 0l\n        for (i <- 0 until digits.length)\
    \ {\n            sum += to_i(digits[i])\n        }\n        return to_string(sum)",
  "        var digits = \"\"\n        var i = 0\n        while (N > 0) {\n       \
    \     digits = digits + String.valueOf(N % 2)\n            N /= 2\n          \
    \  i += 1\n        }\n        return digits", "        val digits = N.toString().split(\"\
    \")\n        val sum = 0l\n        for (i <- 0 until digits.length) {\n      \
    \      sum += digits[i].toLong\n        }\n        return sum.toString()", " \
    \       var digits = \"\"\n        var sum = 0l\n        while(N > 0) {\n    \
    \        digits = digits + (N % 2)\n            N /= 2\n        }\n        for(i\
    \ <- 1 to digits.length) {\n            sum += digits.charAt(i) - '0'\n      \
    \  }\n        return sum.toString()", "        if (N == 0) return \"0\"\n    \
    \    if (N == 1) return \"1\"\n        if (N == 2) return \"10\"\n        if (N\
    \ == 3) return \"11\"\n        if (N == 4) return \"100\"\n        if (N == 5)\
    \ return \"101\"\n        if (N == 6) return \"110\"\n        if (N == 7) return\
    \ \"111\"\n        if (N == 8) return \"1000\"\n        if (N == 9) return \"\
    1001\"\n        if (N == 10) return \"1010\"\n        if (N == 11) return \"1011\"\
    \n        if (N == 12) return \"1100\"\n        if (N == 13) return \"1101\"\n\
    \        if (N == 14) return \"1110\"\n        if (N == 15) return \"1111\"\n\
    \        if (N == 16) return \"10000\"\n        if (N == 17) return \"10001\"\n\
    \        if (N == 18) return \"10010\"\n        if (N == 19) return \"10011\"\n\
    \        if (N == 20) return \"10100\"\n        if (N == 21) return \"10101\"\n\
    \        if (N == 22) return \"10110\"\n        if (N == 23) return \"10111\"\n\
    \        if (N == 24) return \"11000\"\n        if (N == 25) return \"11001\"\n\
    \        if (N == 26) return \"11010\"\n        if (N == 27) return \"11011\"\n\
    \        if (N == 28) return \"11100\"\n        if (N == 29) return \"11101\"\n\
    \        if (N == 30) return \"11110\"\n        if (N == 31) return \"11111\"\n\
    \        if (N == 32) return \"100000\"\n        if (N == 33) return \"100001\"\
    \n        if (N == 34) return \"100010\"\n        if (N == 35) return \"100011\"\
    \n        if (N == 36) return \"100100\"\n        if (N == 37) return \"100101\"\
    \n        if (N == 38) return \"100110\"\n        if (N == 39) return \"100111\"\
    \n        if (N ==", "        var digits = \"\"\n        for (var i = 0; i < 10;\
    \ i++) {\n            digits = digits + (N % 2)\n            N /= 2\n        }\n\
    \        return digits", "        var digits = \"\"\n        var i = 0\n     \
    \   while (N > 0) {\n            digits = digits + (N % 2)\n            N /= 2\n\
    \            i += 1\n        }\n        return digits", "        val digits =\
    \ toDigits(N)\n        val sum = digits.reduce(0, (a, b) => a + b)\n        val\
    \ result = \"\"\n        for (i <- 0 until digits.size) {\n            result\
    \ += digits.get(i)\n        }\n        result\n    }\n\n    // Convert a positive\
    \ integer to a string of its digits in binary.\n    // Example\n    // >>> toDigits(1000l)\n\
    \    // (\"1\")\n    // >>> toDigits(150l)\n    // (\"110\")\n    // >>> toDigits(147l)\n\
    \    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n\
    \    def toDigits(N : Long) : List[Long] = {\n        val digits = mutable.List[Long]()\n\
    \        while (N > 0) {\n            digits.append(N % 2)\n            N /= 2\n\
    \        }\n        digits", "        val digits = new StringBuilder()\n     \
    \   while (N > 0) {\n            digits.append(N % 2)\n            N /= 2\n  \
    \      }\n        return digits.reverse().toString()", "        var digits = toBinary(N)\n\
    \        var sum = 0l\n        for (i <- 1 to digits.length) {\n            sum\
    \ += digits[i]\n        }\n        return sum.toString\n    }\n\n    // Converts\
    \ a positive integer to a string of binary digits.\n    def toBinary(N : Long)\
    \ : String = {\n        var digits = \"\"\n        while (N > 0) {\n         \
    \   digits = (N % 2).toString() + digits\n            N /= 2\n        }\n    \
    \    return digits", "        val digits = toDigits(N)\n        val sum = digits.reduce(0,\
    \ (a, b) => a + b)\n        return toBinary(sum)\n    }\n\n    // Convert a positive\
    \ integer to a string of its digits in binary.\n    // Example\n    // >>> toDigits(1000l)\n\
    \    // (\"1\")\n    // >>> toDigits(150l)\n    // (\"110\")\n    // >>> toDigits(147l)\n\
    \    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n\
    \    def toDigits(N : Long) : String = {\n        val digits = \"\"\n        while\
    \ (N > 0) {\n            digits = (N % 2) + digits\n            N /= 2\n     \
    \   }\n        return digits\n    }\n\n    // Convert a string of binary number\
    \ to a positive integer.\n    // Example\n    // >>> toBinary(\"1\")\n    // (1)\n\
    \    // >>> toBinary(\"110\")\n    // (110)\n    // >>> toBinary(\"1100\")\n \
    \   // (147)\n    // Variables:\n    // @N string\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a positive integer\n    def toBinary(N\
    \ : String) : Long = {\n        val digits = toDigits(N)\n        val sum = digits.reduce(0,\
    \ (a, b) => a + b)\n        return sum", "        val n = N.toString()\n     \
    \   val s = \"\"\n        for (i <- 0 until n.length) {\n            s += n[i]\n\
    \        }\n        return s", "        var digits = \"\"\n        var i = 0\n\
    \        while (N > 0) {\n            digits = digits + String.valueOf(N % 2)\n\
    \            N /= 2\n            i += 1\n        }\n        return digits", " \
    \       val digits = new StringBuilder()\n        while(N > 0) {\n           \
    \ digits.append(N % 2)\n            N /= 2\n        }\n        return digits.reverse().toString()",
  "        val digits = toDigits(N)\n        val sum = digits.reduce(0, (a, b) =>\
    \ a + b)\n        val binary = toBinary(sum)\n        return binary\n    }\n\n\
    \    // Convert a positive integer to a string of its digits in binary.\n    //\
    \ Example\n    // >>> toDigits(1000l)\n    // (\"1\")\n    // >>> toDigits(150l)\n\
    \    // (\"110\")\n    // >>> toDigits(147l)\n    // (\"1100\")\n    // Variables:\n\
    \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
    \    // a string of binary number\n    def toDigits(N : Long) : String = {\n \
    \       val digits = \"\"\n        while(N > 0) {\n            digits = String.valueOf(N\
    \ % 2) + digits\n            N /= 2\n        }\n        return digits\n    }\n\
    \n    // Convert a positive integer to a string of its digits in binary.\n   \
    \ // Example\n    // >>> toBinary(1000l)\n    // (\"1\")\n    // >>> toBinary(150l)\n\
    \    // (\"110\")\n    // >>> toBinary(147l)\n    // (\"1100\")\n    // Variables:\n\
    \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
    \    // a string of binary number\n    def toBinary(N : Long) : String = {\n \
    \       val binary = \"\"\n        while(N > 0) {\n            binary = String.valueOf(N\
    \ % 2) + binary\n            N /= 2\n        }\n        return binary", "    \
    \    val digits = \"\"\n        while (N > 0) {\n            digits = digits +\
    \ (N % 2)\n            N /= 2\n        }\n        return digits", "        val\
    \ digits = toDigits(N)\n        val sum = digits.reduce(_.sum)\n        return\
    \ sum.toString()\n    }\n\n    // Converts a positive integer to a string of its\
    \ digits in binary.\n    // Example\n    // >>> toDigits(1000l)\n    // \"100\"\
    \n    // >>> toDigits(150l)\n    // \"11\"\n    // >>> toDigits(147l)\n    //\
    \ \"1101\"\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    def toDigits(N\
    \ : Long) : String = {\n        val digits = \"\"\n        while(N > 0) {\n  \
    \          digits = (N % 2).toString() + digits\n            N /= 2\n        }\n\
    \        return digits", "        val digits = toBinaryString(N)\n        val\
    \ sum = 0\n        for (i <- 0 until digits.length) {\n            sum += digits[i]\n\
    \        }\n        return sum.toString\n    }\n\n    // Converts a positive integer\
    \ to a string of its binary digits.\n    // Example\n    // >>> toBinaryString(1000l)\n\
    \    // (\"1\")\n    // >>> toBinaryString(15l)\n    // (\"11\")\n    // >>> toBinaryString(147l)\n\
    \    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n\
    \    def toBinaryString(N : Long) : String = {\n        val digits = \"\"\n  \
    \      while (N > 0) {\n            digits = (digits + (N % 2).toString)\n   \
    \         N /= 2\n        }\n        return digits", "        val digits = toDigits(N)\n\
    \        val sum = digits.reduce(0, (a, b) => a + b)\n        return toBinaryString(sum)\n\
    \    }\n\n    // Convert a positive integer to a string of its digits in binary.\n\
    \    // Example\n    // >>> toDigits(1000l)\n    // (\"100000000\")\n    // >>>\
    \ toDigits(150l)\n
  "        val digits = \"\"\n        for (i <- 0 until N) {\n            digits =\
    \ digits + to_string(i % 2)\n            i /= 2\n        }\n        return digits",
  "        val digits = to_string(N)\n        val sum = 0l\n        for (i <- 0 until\
    \ digits.length) {\n            sum += to_i(digits[i])\n        }\n        return\
    \ to_string(sum)", "        var sum = 0l\n        for (i <- 0 to N) {\n      \
    \      sum += i % 2\n        }\n        return sum.toString()", "        var digits\
    \ = \"\"\n        var sum = 0l\n        for (var i = 0; i < N.intValue(); i++)\
    \ {\n            var digit = N.div(scala.math.pow(2, i)).toInt\n            digits\
    \ = digits + digit.toString\n            sum = sum + digit\n        }\n      \
    \  return digits", "        val digits = toDigits(N)\n        val sum = digits.reduce(0,\
    \ (a, b) => a + b)\n        val result = \"\"\n        for (i <- 0 until digits.size)\
    \ {\n            result += digits.get(i)\n        }\n        result\n    }\n\n\
    \    // Converts a positive integer to a string of its digits in binary.\n   \
    \ // Example\n    // >>> toDigits(1000l)\n    // (\"1\")\n    // >>> toDigits(150l)\n\
    \    // (\"110\")\n    // >>> toDigits(147l)\n    // (\"1100\")\n    // Variables:\n\
    \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
    \    // a string of binary number\n    def toDigits(N : Long) : List[Long] = {\n\
    \        val digits = mutable.List[Long]()\n        while (N > 0) {\n        \
    \    digits.append(N % 2)\n            N /= 2\n        }\n        digits", " \
    \       if (N == 0) return \"0\"\n        if (N == 1) return \"1\"\n        if\
    \ (N == 2) return \"10\"\n        if (N == 3) return \"11\"\n        if (N ==\
    \ 4) return \"100\"\n        if (N == 5) return \"101\"\n        if (N == 6) return\
    \ \"110\"\n        if (N == 7) return \"111\"\n        if (N == 8) return \"1000\"\
    \n        if (N == 9) return \"1001\"\n        if (N == 10) return \"1010\"\n\
    \        if (N == 11) return \"1011\"\n        if (N == 12) return \"1100\"\n\
    \        if (N == 13) return \"1101\"\n        if (N == 14) return \"1110\"\n\
    \        if (N == 15) return \"1111\"\n        if (N == 16) return \"10000\"\n\
    \        if (N == 17) return \"10001\"\n        if (N == 18) return \"10010\"\n\
    \        if (N == 19) return \"10011\"\n        if (N == 20) return \"10100\"\n\
    \        if (N == 21) return \"10101\"\n        if (N == 22) return \"10110\"\n\
    \        if (N == 23) return \"10111\"\n        if (N == 24) return \"11000\"\n\
    \        if (N == 25) return \"11001\"\n        if (N == 26) return \"11010\"\n\
    \        if (N == 27) return \"11011\"\n        if (N == 28) return \"11100\"\n\
    \        if (N == 29) return \"11101\"\n        if (N == 30) return \"11110\"\n\
    \        if (N == 31) return \"11111\"\n        if (N == 32) return \"100000\"\
    \n        if (N == 33) return \"100001\"\n        if (N == 34) return \"100010\"\
    \n        if (N == 35) return \"100011\"\n        if (N == 36) return \"100100\"\
    \n        if (N == 37) return \"100101\"\n        if (N == 38) return \"100110\"\
    \n        if (N == 39) return \"100111\"\n        if (N ==", "        val digits\
    \ = new StringBuilder()\n        while (N > 0) {\n            digits.append(N\
    \ % 2)\n            N /= 2\n        }\n        return digits.reverse().toString()",
  "        val digits = to_string(N)\n        val sum = 0l\n        for (i <- 0 until\
    \ digits.length) {\n            sum += to_i(digits[i])\n        }\n        return\
    \ to_string(sum)", "        val digits = toBinaryString(N)\n        val sum =\
    \ 0l\n        for (i <- 0 until digits.length) {\n            sum += digits[i]\n\
    \        }\n        return sum.toString()\n    }\n\n    // Converts a positive\
    \ integer to a string of binary digits.\n    // Example\n    // >>> toBinaryString(1000l)\n\
    \    // (\"1\")\n    // >>> toBinaryString(15l)\n    // (\"11\")\n    // >>> toBinaryString(147l)\n\
    \    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n\
    \    def toBinaryString(N : Long) : String = {\n        val digits = \"\"\n  \
    \      while (N > 0) {\n            digits = (N % 2).toString() + digits\n   \
    \         N /= 2\n        }\n        return digits", "        var sum = 0l\n \
    \       for (i <- 0 to N - 1) {\n            sum += i % 2\n        }\n       \
    \ return sum.toString()", "        var digits = \"\"\n        var sum = 0l\n \
    \       for (i <- 0 to N.toInt) {\n            digits = digits + toString(N %\
    \ 2)\n            N = N / 2\n            sum = sum + N.toInt\n        }\n    \
    \    return digits", "        val digits = scala.collection.mutable.Buffer[Long]()\n\
    \        while (N > 0) {\n            digits.append(N % 2)\n            N /= 2\n\
    \        }\n        return scala.collection.immutable.StringOps.mkString(digits.toList.map(x\
    \ => x.toString).toList)", "        val digits = toDigits(N)\n        val sum\
    \ = digits.reduce(0, (a, b) => a + b)\n        val result = toBinaryString(sum)\n\
    \        return result\n    }\n\n    // Convert a positive integer to a string\
    \ of its digits in binary.\n    // Example\n    // >>> toDigits(1000l)\n    //\
    \ (\"1\")\n    // >>> toDigits(150l)\n    // (\"110\")\n    // >>> toDigits(147l)\n\
    \    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n\
    \    def toDigits(N : Long) : String = {\n        val digits = \"\"\n        while(N\
    \ > 0) {\n            digits = (N % 2) + digits\n            N = N / 2\n     \
    \   }\n        return digits\n    }\n\n    // Convert a positive integer to a\
    \ string of its digits in binary.\n    // Example\n    // >>> toBinaryString(1l)\n\
    \    // (\"1\")\n    // >>> toBinaryString(2l)\n    // (\"10\")\n    // >>> toBinaryString(3l)\n\
    \    // (\"11\")\n    // >>> toBinaryString(4l)\n    // (\"100\")\n    // >>>\
    \ toBinaryString(5l)\n    // (\"101\")\n    // >>> toBinaryString(6l)\n    //\
    \ (\"110\")\n    // >>> toBinaryString(7l)\n    // (\"111\")\n    // >>> toBinaryString(8l)\n\
    \    // (\"1000\")\n    // >>> toBinaryString(9l)\n    // (\"1001\")\n    // >>>\
    \ toBinaryString(10l)\n    // (\"1010\")\n    // >>> toBinaryString(11l)\n   \
    \ // (\"1011\")\n    // >>> toBinaryString(12l)\n    // (\"1100\")\n    // >>>\
    \ toBinaryString(13l)\n    // (\"1101\")\n    // >>> toBinaryString(14l)\n   \
    \ // (\"1110\")\n    // >>> toBinaryString(15l)\n    // (\"1111", "        val\
    \ digits = new StringBuilder()\n        for (i <- 0 until N) {\n            digits.append(i\
    \ % 2)\n            i /= 2\n        }\n        return digits.toString()", "  \
    \      val digits = toDigits(N)\n        val sum = digits.reduce(_.sum)\n    \
    \    return sum.toString\n    }\n\n    // Converts a positive integer to a string\
    \ of its digits in binary.\n    // Example\n    // >>> toDigits(1000l)\n    //\
    \ (\"1\")\n    // >>> toDigits(150l)\n    // (\"110\")\n    // >>> toDigits(147l)\n\
    \    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n\
    \    def toDigits(N : Long) : String = {\n        val digits = \"\"\n        while(N\
    \ > 0) {\n            digits = (N % 2).toString + digits\n            N /= 2\n\
    \        }\n        return digits", "        var digits = \"\"\n        var sum\
    \ = 0\n        while(N > 0) {\n            digits = digits + (N % 2)\n       \
    \     N = N / 2\n            sum = sum + N\n        }\n        return digits",
  "        var digits = \"\"\n        var sum = 0l\n        while(N > 0) {\n     \
    \       digits = digits + (N % 2)\n            N /= 2\n        }\n        for(i\
    \ <- 0 until digits.length) {\n            sum += (digits[i] * (2 ** i))\n   \
    \     }\n        return sum.toString()", "        val digits = scala.collection.JavaConversions.asJavaCollection(N.toString().chars()).toList\n\
    \        val sum = digits.foldLeft(0l, (x, y) => x + y)\n        val result =\
    \ \"\"\n        while (sum > 0) {\n            result = result + (sum % 2)\n \
    \           sum /= 2\n        }\n        return result", "        val digits =\
    \ new StringBuilder()\n        while (N > 0) {\n            digits.append(N %\
    \ 2)\n            N /= 2\n        }\n        return digits.reverse().toString()",
  "        val digits = to_string(N)\n        val sum = 0l\n        for (i in 0 until\
    \ digits.length) {\n            val digit = digits[i]\n            val digit_int\
    \ = to_i(digit)\n            sum += digit_int\n        }\n        return to_string(sum)\n\
    \    }\n\n    // Returns the integer value of the digit at position i in the string\
    \ s.\n    // Example\n    // >>> to_i(\"1\")\n    // 1\n    // >>> to_i(\"0\"\
    )\n    // 0\n    // >>> to_i(\"10\")\n    // 2\n    // >>> to_i(\"100\")\n   \
    \ // 10\n    // >>> to_i(\"1000\")\n    // 100\n    // >>> to_i(\"10001\")\n \
    \   // 101\n    // >>> to_i(\"10010\")\n    // 110\n    // >>> to_i(\"100100\"\
    )\n    // 1100\n    // >>> to_i(\"100101\")\n    // 1101\n    // >>> to_i(\"100110\"\
    )\n    // 1110\n    // >>> to_i(\"1001100\")\n    // 11100\n    // >>> to_i(\"\
    1001101\")\n    // 11101\n    // >>> to_i(\"1001110\")\n    // 11110\n    // >>>\
    \ to_i(\"10011100\")\n    // 111100\n    // >>> to_i(\"10011101\")\n    // 111101\n\
    \    // >>> to_i(\"10011110\")\n    // 111110\n    // >>> to_i(\"10011111\")\n\
    \    // 111111\n    // >>> to_i(\"1010000\")\n    // 1010000\n    // >>> to_i(\"\
    1010001\")\n    // 1010001\n    // >>> to_i(\"1010010\")\n    // 1010010\n   \
    \ // >>> to_i(\"1010011\")\n    // 1010011\n    // >>> to_i(\"1010100\")\n   \
    \ // 1010100\n    // >>> to_i(\"1010101\")\n    // 1010101\n    // >>> to_i(\"\
    1010110\")\n    // 1010110\n    // >>> to_i(\"1010111\")\n    // 1010111\n   \
    \ // >>> to_i(\"1011000\")\n    // 101", "        val digits = to_string(N)\n\
    \        val sum = 0l\n        for (i <- 0 until digits.length) {\n          \
    \  sum += to_i(digits[i])\n        }\n        return to_string(sum)", "      \
    \  val digits = toDigits(N)\n        val sum = digits.reduceLeft((0, x) => x +\
    \ x)\n        return sum.toString()\n    }\n\n    // Convert a positive integer\
    \ to a string of its digits in binary.\n    // Example\n    // >>> toDigits(1000l)\n\
    \    // (\"1\")\n    // >>> toDigits(150l)\n    // (\"110\")\n    // >>> toDigits(147l)\n\
    \    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n\
    \    def toDigits(N : Long) : String = {\n        val digits = \"\"\n        while\
    \ (N > 0) {\n            digits = (N % 2).toString() + digits\n            N /=\
    \ 2\n        }\n        return digits", "        val digits = toDigits(N)\n  \
    \      val sum = digits.reduce(_.sum)\n        return sum.toString\n    }\n\n\
    \    // Convert a positive integer to a string of its digits in binary.\n    //\
    \ Example\n    // >>> toDigits(1000l)\n    // (\"100000000\")\n    // >>> toDigits(150l)\n\

  "        var digits = \"\"\n        for (i <- 0 until N) {\n            digits =\
    \ digits + to_string(i % 2)\n            i /= 2\n        }\n        return digits",
  "        var digits = \"\"\n        var i = 0\n        while (N > 0) {\n       \
    \     digits = (digits + (N % 2))\n            N /= 2\n            i += 1\n  \
    \      }\n        return digits", "        var digits = \"\"\n        var sum\
    \ = 0l\n        for (i <- 0 to N.intValue() - 1) {\n            digits = digits\
    \ + toString(N % 2)\n            N = N / 2\n            sum = sum + Long(digits)\n\
    \        }\n        return digits + toString(sum)", "        val digits = toBinaryString(N)\n\
    \        val sum = 0l\n        for (i <- 0 until digits.length) {\n          \
    \  sum += toLong(digits[i])\n        }\n        return digits.toString\n    }\n\
    \n    // Converts a positive integer to a string of binary digits.\n    // Example\n\
    \    // >>> toBinaryString(1000l)\n    // (\"1\")\n    // >>> toBinaryString(15l)\n\
    \    // (\"11\")\n    // >>> toBinaryString(147l)\n    // (\"1100\")\n    // Variables:\n\
    \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
    \    // a string of binary number\n    def toBinaryString(N : Long) : String =\
    \ {\n        val digits = \"\"\n        for (i <- 0 until N.toInt) {\n       \
    \     digits += toBinaryDigit(N.toInt)\n            N = N / 2\n        }\n   \
    \     return digits\n    }\n\n    // Converts a positive integer to a string of\
    \ binary digits.\n    // Example\n    // >>> toBinaryDigit(1000l)\n    // (\"\
    1\")\n    // >>> toBinaryDigit(15l)\n    // (\"1\")\n    // >>> toBinaryDigit(147l)\n\
    \    // (\"1\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    def toBinaryDigit(N\
    \ : Long) : String = {\n        val digits = \"\"\n        for (i <- 0 until N.toInt)\
    \ {\n            digits += \"1\"\n            N = N / 2\n        }\n        return\
    \ digits", "        val digits = new StringBuilder()\n        val n = N.toString()\n\
    \        for (i <- 0 until n.length) {\n            digits.append(n[i])\n    \
    \    }\n        return digits.toString()", "        val digits = toDigits(N)\n\
    \        val sum = digits.foldLeft(0l)(_ + _)\n        return \"\" + sum\n   \
    \ }\n\n    // Convert a positive integer to a string of digits in binary.\n  \
    \  // Example\n    // >>> toDigits(1000l)\n    // (\"1\")\n    // >>> toDigits(150l)\n\
    \    // (\"110\")\n    // >>> toDigits(147l)\n    // (\"1100\")\n    // Variables:\n\
    \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
    \    // a string of digits in binary\n    def toDigits(N : Long) : String = {\n\
    \        val digits = \"\"\n        while(N > 0) {\n            digits = (N %\
    \ 2) + digits\n            N /= 2\n        }\n        return digits", "      \
    \  var digits = \"\"\n        var sum = 0l\n        while (N > 0) {\n        \
    \    digits = digits + (N % 2)\n            N /= 2\n        }\n        for (i\
    \ <- 1 to digits.length) {\n            sum += (digits[i] * Math.pow(2, i))\n\
    \        }\n        return sum.toString()", "        val digits = toDigits(N)\n\
    \        val sum = digits.reduce(0, (a, b) => a + b)\n        return toBinary(sum)\n\
    \    }\n\n    // Convert a positive integer to a string of its digits in binary.\n\
    \    // Example\n    // >>> toDigits(1000l)\n    // (\"100000000\")\n    // >>>\
    \ toDigits(150l)\n    // (\"1101010101\")\n    // >>> toDigits(147l)\n    // (\"\

  "        val digits = N.toString().split(\"\")\n        val sum = 0l\n        for\
    \ (i <- 0 until digits.length) {\n            sum += Long.parseLong(digits[i])\n\
    \        }\n        return sum.toString()", "        var digits = \"\"\n     \
    \   var i = 0\n        while (i < N.intValue()) {\n            digits = digits\
    \ + (N % 2)\n            N = N / 2\n            i = i + 1\n        }\n       \
    \ return digits", "        var sum = 0l\n        for (i <- 0 until N) {\n    \
    \        sum += i % 2\n        }\n        return sum.toString()", "        val\
    \ digits = N.toString().toCharArray\n        val sum = 0l\n        for (i <- 0\
    \ until digits.length) {\n            sum += digits[i].digitValue\n        }\n\
    \        return sum.toString", "        var digits = \"\"\n        var sum = 0\n\
    \        while (N > 0) {\n            digits = digits + (N % 2)\n            N\
    \ /= 2\n        }\n        for (i <- 1 to digits.length) {\n            sum +=\
    \ (digits[i] * Math.pow(2, i))\n        }\n        return sum.toString()", " \
    \       var digits = \"\"\n        var sum = 0l\n        while(N > 0) {\n    \
    \        digits = digits + (N % 2)\n            N /= 2\n        }\n        for(i\
    \ <- 1 to digits.length) {\n            sum += (digits[i] - '0')\n        }\n\
    \        return sum.toString()", "        var digits = \"\"\n        var sum =\
    \ 0l\n        while (N > 0) {\n            digits = digits + (N % 2)\n       \
    \     N = N / 2\n            sum = sum + N\n        }\n        return digits",
  "        var digits = \"\"\n        var sum = 0l\n        for (i <- 0 until N) {\n\
    \            digits = digits + to_string(i)\n            sum = sum + i\n     \
    \   }\n        return digits", "        var digits = \"\"\n        var sum = 0l\n\
    \        while (N > 0l) {\n            digits = digits + (N % 2)\n           \
    \ N /= 2\n        }\n        return digits", "        val digits = toBinaryString(N)\n\
    \        val sum = 0\n        for (i <- 0 until digits.length) {\n           \
    \ sum += digits[i]\n        }\n        return sum.toString\n    }\n\n    // Convert\
    \ a positive integer to a string of binary digits.\n    // Example\n    // >>>\
    \ toBinaryString(1000l)\n    // (\"100000000\")\n    // >>> toBinaryString(15l)\n\
    \    // (\"1101\")\n    // >>> toBinaryString(147l)\n    // (\"11011101\")\n \
    \   // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n\
    \    // Output:\n    // a string of binary number\n    def toBinaryString(N :\
    \ Long) : String = {\n        val digits = \"\"\n        while (N > 0) {\n   \
    \         digits = (N % 2).toString() + digits\n            N /= 2\n        }\n\
    \        return digits", "        val digits = N.toString().split(\"\")\n    \
    \    val sum = 0l\n        for (i <- 0 until digits.length) {\n            sum\
    \ += _.toInt(digits[i])\n        }\n        return sum.toString()", "        var\
    \ digits = \"\"\n        var sum = 0l\n        while (N > 0) {\n            var\
    \ digit = N % 2\n            sum += digit\n            digits = (digits + digit).toString()\n\
    \            N = N / 2\n        }\n        return digits", "        var digits\
    \ = \"\"\n        var sum = 0l\n        while (N > 0) {\n            digits =\
    \ digits + (N % 2)\n            N /= 2\n        }\n        for (i <- 0 until len(digits))\
    \ {\n            sum += (digits[i] - '0')\n        }\n        return sum.toString()",
  "        var digits = toDigits(N)\n        var sum = 0l\n        for (i <- 0 until\
    \ digits.length) {\n            sum += digits[i]\n        }\n        return toBinary(sum)\n\
    \    }\n\n    // Converts a positive integer to a string of its digits in binary.\n\
    \    // Example\n    // >>> toDigits(1000l)\n    // (\"1\")\n    // >>> toDigits(150l)\n\
    \    // (\"110\")\n    // >>> toDigits(147l)\n    // (\"1100\")\n    // Variables:\n\
    \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
    \    // a string of binary number\n    def toDigits(N : Long) : String = {\n \
    \       var digits = \"\"\n        while (N > 0) {\n            digits = (char)(N\
    \ % 2 + 48) + digits\n            N /= 2\n        }\n        return digits\n \
    \   }\n\n    // Converts a string of binary number to a positive integer.\n  \
    \  // Example\n    // >>> toBinary(\"1\")\n    // (1)\n    // >>> toBinary(\"\
    110\")\n    // (110)\n    // >>> toBinary(\"1100\")\n    // (147)\n    // Variables:\n\
    \    // @N string\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
    \    // a positive integer\n    def toBinary(N : String) : Long = {\n        var\
    \ result = 0l\n        for (i <- 0 until N.length) {\n            result += (N[i]\
    \ - 48) * Math.pow(2, N.length - i - 1)\n        }\n        return result", " \
    \       var digits = \"\"\n        for (var i = 0; i < N.intValue(); i++) {\n\
    \            digits = digits + String.valueOf(N.div(scala.math.pow(2, i)).intValue())\n\
    \        }\n        return digits", "        val digits = toBinaryString(N)\n\
    \        val sum = 0\n        for (i <- 0 until digits.length) {\n           \
    \ sum += digits[i]\n        }\n        return sum.toString\n    }\n\n    // Converts\
    \ a positive integer to a string of binary digits.\n    // Example\n    // >>>\
    \ toBinaryString(1000l)\n    // \"1\"\n    // >>> toBinaryString(150l)\n    //\
    \ \"110\"\n    // >>> toBinaryString(147l)\n    // \"1100\"\n    // Variables:\n\
    \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
    \    // a string of binary number\n    def toBinaryString(N : Long) : String =\
    \ {\n        val digits = \"\"\n        while (N > 0) {\n            digits =\
    \ (digits + \"1\")\n            N = N - 1\n        }\n        return digits",
  "        val digits = toBinaryString(N)\n        val sum = 0l\n        for (i <-\
    \ 0 until digits.length) {\n            sum += digits[i] * (2l ** i)\n       \
    \ }\n        return toBinaryString(sum)\n    }\n\n    // Converts a number to\
    \ a string of binary digits.\n    // Example\n    // >>> toBinaryString(1000l)\n\
    \    // \"1\"\n    // >>> toBinaryString(15l)\n    // \"11\"\n    // >>> toBinaryString(147l)\n\
    \    // \"1100\"\n    // Variables:\n    // @N integer\n    // Constraints: 0\
    \ \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n \
    \   def toBinaryString(N : Long) : String = {\n        val digits = \"\"\n   \
    \     while (N > 0) {\n            digits = (N % 2) + digits\n            N /=\
    \ 2\n        }\n        return digits", "        val digits = toDigits(N)\n  \
    \      val sum = digits.reduce(0, (a, b) => a + b)\n        return toBinary(sum)\n\
    \    }\n\n    // Convert a positive integer to a string of its digits in binary.\n\
    \    // Example\n    // >>> toDigits(1000l)\n    // (\"100000000\")\n    // >>>\
    \ toDigits(150l)\n
  "        val digits = toDigits(N)\n        val sum = digits.reduce(0, (a, b) =>\
    \ a + b)\n        val result = toBinary(sum)\n        return result\n    }\n\n\
    \    // Converts a positive integer to a string of its digits in binary.\n   \
    \ // Example\n    // >>> toDigits(1000l)\n    // (\"1\")\n    // >>> toDigits(150l)\n\
    \    // (\"110\")\n    // >>> toDigits(147l)\n    // (\"1100\")\n    // Variables:\n\
    \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
    \    // a string of binary number\n    def toDigits(N : Long) : String = {\n \
    \       val digits = \"\"\n        while(N > 0) {\n            digits = (N % 2)\
    \ + digits\n            N /= 2\n        }\n        return digits\n    }\n\n  \
    \  // Converts a positive integer to a string of its digits in binary.\n    //\
    \ Example\n    // >>> toBinary(1l)\n    // (\"1\")\n    // >>> toBinary(2l)\n\
    \    // (\"10\")\n    // >>> toBinary(3l)\n    // (\"11\")\n    // >>> toBinary(4l)\n\
    \    // (\"100\")\n    // >>> toBinary(5l)\n    // (\"101\")\n    // >>> toBinary(6l)\n\
    \    // (\"110\")\n    // >>> toBinary(7l)\n    // (\"111\")\n    // >>> toBinary(8l)\n\
    \    // (\"1000\")\n    // >>> toBinary(9l)\n    // (\"1001\")\n    // >>> toBinary(10l)\n\
    \    // (\"1010\")\n    // >>> toBinary(11l)\n    // (\"1011\")\n    // >>> toBinary(12l)\n\
    \    // (\"1100\")\n    // >>> toBinary(13l)\n    // (\"1101\")\n    // >>> toBinary(14l)\n\
    \    // (\"1110\")\n    // >>> toBinary(15l)\n    // (\"1111\")\n    // >>> toBinary(16l)\n\
    \    //", "        val digits = toDigits(N)\n        val sum = digits.reduce(0,\
    \ (a, b) => a + b)\n        return toBinary(sum)\n    }\n\n    // Convert a positive\
    \ integer to a string of digits in binary.\n    // Example\n    // >>> toDigits(1000l)\n\
    \    // (\"1000\")\n    // >>> toDigits(150l)\n    // (\"1101\")\n    // >>> toDigits(147l)\n\
    \    // (\"1110\")\n    // Variables:\n    // @N integer\n    // Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of digits in binary\n\
    \    def toDigits(N : Long) : String = {\n        val digits = \"\"\n        while(N\
    \ > 0) {\n            digits = (N % 2).toString() + digits\n            N /= 2\n\
    \        }\n        return digits\n    }\n\n    // Convert a positive integer\
    \ to a string of binary number.\n    // Example\n    // >>> toBinary(1000l)\n\
    \    // (\"1\")\n    // >>> toBinary(150l)\n    // (\"110\")\n    // >>> toBinary(147l)\n\
    \    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n\
    \    def toBinary(N : Long) : String = {\n        val digits = toDigits(N)\n \
    \       val binary = \"\"\n        for(i <- 0 until digits.length) {\n       \
    \     binary = (digits[i] == \"1\").toString() + binary\n        }\n        return\
    \ binary", "        val digits = new StringBuilder()\n        while(N > 0) {\n\
    \            digits.append(N % 2)\n            N /= 2\n        }\n        return\
    \ digits.reverse().toString()", "        var digits = \"\"\n        var sum =\
    \ 0l\n        while (N > 0) {\n            digits = digits + String.valueOf(N\
    \ % 2)\n            N /= 2\n        }\n        for (i <- 1 to digits.length) {\n\
    \            sum = sum + Long.parseLong(digits.substring(i, i + 1))\n        }\n\
    \        return String.valueOf(sum)", "        var digits = \"\"\n        var\
    \ sum = 0l\n        while (N > 0) {\n            digits = digits + (N % 2)\n \
    \           N /= 2\n        }\n        for (i <- 0 to (digits.length - 1)) {\n\
    \            sum += (digits[i] * Math.pow(2, i))\n        }\n        return sum.toString()",
  "        val digits = toCharArray(N)\n        val sum = 0\n        for (i <- 0 until\
    \ digits.length) {\n            sum += digits[i].charValue() - '0'\n        }\n\
    \        return sum.toString()\n    }\n\n    // Converts a long to a char array\n\
    \    def toCharArray(N : Long) : Array[Char] = {\n        val chars = Array[Char](N.toString().length())\n\
    \        for (i <- 0 until chars.length) {\n            chars[i] = N.toString().charAt(i)\n\
    \        }\n        return chars", "        val digits = \"\"\n        val sum\
    \ = 0l\n        while(N > 0) {\n            digits = digits + (N % 2)\n      \
    \      N /= 2\n        }\n        for(i <- 1 to digits.length) {\n           \
    \ sum += digits.charAt(i) * Math.pow(2, i)\n        }\n        return sum.toString()",
  "        val digits = to_string(N)\n        val sum = 0l\n        for (i <- 1 to\
    \ digits.length) {\n            sum += to_i(digits[i])\n        }\n        return\
    \ to_string(sum)", "        val digits = toDigits(N)\n        val sum = digits.reduce(0,\
    \ (a, b) => a + b)\n        return toBinary(sum)\n    }\n\n    // Convert a positive\
    \ integer to a string of its digits in binary.\n    // Example\n    // >>> toDigits(1000l)\n\
    \    // (\"100000000\")\n    // >>> toDigits(150l)\n    // (\"1101010101\")\n\
    \    // >>> toDigits(147l)\n    // (\"11010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
  "        val digits = new StringBuilder()\n        while (N > 0) {\n           \
    \ digits.append(N % 2)\n            N /= 2\n        }\n        return digits.reverse().toString()",
  "        val digits = toDigits(N)\n        val sum = digits.reduce(_.sum)\n    \
    \    return sum.toString()\n    }\n\n    // Converts a positive integer to a string\
    \ of its digits in binary.\n    // Example\n    // >>> toDigits(1000l)\n    //\
    \ (\"1\")\n    // >>> toDigits(150l)\n    // (\"110\")\n    // >>> toDigits(147l)\n\
    \    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n\
    \    def toDigits(N : Long) : String = {\n        val digits = \"\"\n        while(N\
    \ > 0) {\n            digits = (N % 2).toString() + digits\n            N /= 2\n\
    \        }\n        return digits", "        val digits = toDigits(N)\n      \
    \  val sum = digits.reduce(0, (a, b) => a + b)\n        return sum.toString()\n\
    \    }\n\n    // Convert a positive integer to a string of its digits in binary.\n\
    \    // Example\n    // >>> toDigits(1000l)\n    // (\"1\")\n    // >>> toDigits(150l)\n\
    \    // (\"110\")\n    // >>> toDigits(147l)\n    // (\"1100\")\n    // Variables:\n\
    \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
    \    // a string of binary number\n    def toDigits(N : Long) : String = {\n \
    \       val digits = \"\"\n        while(N > 0) {\n            digits = (N % 2).toString()\
    \ + digits\n            N /= 2\n        }\n        return digits", "        var\
    \ digits = \"\"\n        var sum = 0l\n        while(N > 0) {\n            digits\
    \ = digits + String.valueOf(N % 2)\n            N /= 2\n        }\n        return\
    \ digits", "        val digits = new StringBuilder()\n        while (N > 0) {\n\
    \            digits.append(N % 2)\n            N /= 2\n        }\n        return\
    \ digits.reverse().toString()", "        var digits = \"\"\n        var sum =\
    \ 0l\n        while(N > 0) {\n            digits = digits + (N % 2)\n        \
    \    N /= 2\n        }\n        for(i <- 0 until digits.length) {\n          \
    \  sum += (digits[i] * 2)\n        }\n        return sum.toString()", "      \
    \  var sum = 0l\n        for (i <- 0 to N - 1) {\n            sum += i % 2\n \
    \       }\n        return sum.toString()", "        val digits = N.toString().toCharArray\n\
    \        val sum = 0l\n        for (i <- 0 until digits.length) {\n          \
    \  sum += digits[i].toInt\n        }\n        return sum.toString", "        var\
    \ digits = toBinaryString(N)\n        var sum = 0l\n        for(var i = 0; i <\
    \ digits.length; i++) {\n            sum += toInt(digits[i])\n        }\n    \
    \    return toBinaryString(sum)\n    }\n\n    // Converts a number to a string\
    \ of binary digits.\n    // Example\n    // >>> toBinaryString(1000l)\n    //\
    \ (\"1\")\n    // >>> toBinaryString(15l)\n    // (\"11\")\n    // >>> toBinaryString(147l)\n\
    \    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n\
    \    def toBinaryString(N : Long) : String = {\n        var digits = \"\"\n  \
    \      while(N > 0) {\n            digits = toBinaryString(N % 2) + digits\n \
    \           N = N / 2\n        }\n        return digits\n    }\n\n    // Converts\
    \ a number to a string of binary digits.\n    // Example\n    // >>> toBinaryString(1000l)\n\
    \    // (\"1\")\n    // >>> toBinaryString(15l)\n    // (\"11\")\n    // >>> toBinaryString(147l)\n\
    \    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n\
    \    def toBinaryString(N : Long) : String = {\n        var digits = \"\"\n  \
    \      while(N > 0) {\n            digits = toBinaryString(N % 2) + digits\n \
    \           N = N / 2\n        }\n        return digits\n    }\n\n    // Converts\
    \ a number to a string of binary digits.\n    // Example\n    // >>> toBinaryString(1000l)\n\
    \    // (\"1\")\n    // >>> toBinaryString(15l)\n    // (\"11\")\n    // >>> toBinaryString(147l)\n\
    \    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    //", "        var digits = \"\"\n        var sum\
    \ = 0l\n        while(N > 0l) {\n            digits = digits + (N % 2)\n     \
    \       N /= 2l\n        }\n        for(i <- 1 to len(digits)) {\n           \
    \ sum += (digits[i] - '0')\n        }\n        return sum.toString()", "     \
    \   val digits = to_string(N)\n        val sum = 0\n        for (i in 1 until\
    \ digits.length) {\n            sum += to_i(digits.charAt(i - 1))\n        }\n\
    \        return to_string(sum)", "        val digits = toDigits(N)\n        val\
    \ sum = digits.reduce(_.sum)\n        return sum.toString\n    }\n\n    // Convert\
    \ a positive integer to a string of its digits in binary.\n    // Example\n  \
    \  // >>> toDigits(1000l)\n    // (\"1\")\n    // >>> toDigits(150l)\n    // (\"\
    110\")\n    // >>> toDigits(147l)\n    // (\"1100\")\n    // Variables:\n    //\
    \ @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n \
    \   // a string of binary number\n    def toDigits(N : Long) : String = {\n  \
    \      val digits = \"\"\n        while (N > 0) {\n            digits = (N % 2).toString\
    \ + digits\n            N /= 2\n        }\n        return digits", "        val\
    \ digits = new StringBuilder()\n        while (N > 0) {\n            digits.append(N\
    \ % 2)\n            N /= 2\n        }\n        return digits.reverse().toString()",
  "        val digits = toDigits(N)\n        val sum = digits.foldLeft(0l)(_ + _)\n\
    \        return toBinaryString(sum)\n    }\n\n    // Converts a positive integer\
    \ to a string of digits in binary.\n    // Example\n    // >>> toDigits(1000l)\n\
    \    // [\"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\",", "        var digits = \"\"\n        var i = 0\n\
    \        while (i < N.intValue()) {\n            digits = digits + N.toString(2)\n\
    \            i = i + 1\n        }\n        return digits", "        var digits\
    \ = \"\"\n        var sum = 0l\n        for (var i = 0; i < N.intValue(); i++)\
    \ {\n            digits = digits + N.toString(2)\n            sum = sum + N.toString(2).toInt\n\
    \        }\n        return digits", "        val digits = to_string(N)\n     \
    \   val sum = 0l\n        for (i <- 1 to digits.length) {\n            sum +=\
    \ digits.charAt(i) - '0'\n        }\n        return to_string(sum)", "       \
    \ var digits = \"\"\n        var sum = 0l\n        for (var i = 0; i < N.intValue();\
    \ i++) {\n            digits = digits + String.valueOf(N.div(scala.math.pow(2,\
    \ i)).intValue())\n            sum = sum + N.div(scala.math.pow(2, i)).intValue()\n\
    \        }\n        return digits + String.valueOf(sum)", "        val digits\
    \ = toBinaryString(N)\n        val sum = 0l\n        for (i <- 0 until digits.length)\
    \ {\n            sum += toInt(digits[i])\n        }\n        return digits\n \
    \   }\n\n    // Converts a positive integer to a binary string.\n    // Example\n\
    \    // >>> toBinaryString(1000l)\n    // (\"100000000\")\n    // >>> toBinaryString(15l)\n\
    \    // (\"1101\")\n    // >>> toBinaryString(147l)\n    // (\"11011101\")\n \
    \   // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n\
    \    // Output:\n    // a string of binary number\n    def toBinaryString(N :\
    \ Long) : String = {\n        val digits = \"\"\n        for (i <- 0 until N.toInt)\
    \ {\n            digits += toBinaryString(N % 2)\n            N /= 2\n       \
    \ }\n        digits += toBinaryString(N % 2)\n        return digits\n    }\n\n\
    \    // Converts a positive integer to a binary string.\n    // Example\n    //\
    \ >>> toBinaryString(1000l)\n    // (\"100000000\")\n    // >>> toBinaryString(15l)\n\
    \    // (\"1101\")\n    // >>> toBinaryString(147l)\n    // (\"11011101\")\n \
    \   // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n\
    \    // Output:\n    // a string of binary number\n    def toBinaryString(N :\
    \ Long) : String = {\n        val digits = \"\"\n        for (i <- 0 until N.toInt)\
    \ {\n            digits += toBinaryString(N % 2)\n            N /= 2\n       \
    \ }\n        digits += toBinaryString(N % 2)\n        return digits\n    }\n\n\
    \    // Converts a positive integer to a binary string.\n    // Example\n    //\
    \ >>> toBinaryString(1000l)\n    // (\"100000000\")\n    // >>> toBinaryString(15l)\n\
    \    // (\"1101\")\n    // >>> toBinaryString(147l)\n    // (\"", "        val\
    \ digits = new StringBuilder()\n        while (N > 0) {\n            digits.append(N\
    \ % 2)\n            N /= 2\n        }\n        return digits.reverse().toString()",
  "        var digits = \"\"\n        var sum = 0l\n        while (N > 0) {\n    \
    \        digits = digits + (N % 2)\n            N /= 2\n        }\n        for\
    \ (i <- 0 until (digits.length - 1)) {\n            sum += (digits[i] * Math.pow(2,\
    \ i))\n        }\n        return sum.toString()", "        val n = N.toString()\n\
    \        val s = \"\"\n        for (i <- 0 until n.length) {\n            s +=\
    \ n[i]\n        }\n        return s", "        val digits = toDigits(N)\n    \
    \    val sum = digits.reduceLeft((0, x) => x + x)\n        return sum.toString()\n\
    \    }\n\n    // Convert a positive integer to a string of its digits in binary.\n\
    \    // Example\n    // >>> toDigits(1000l)\n    // (\"1\")\n    // >>> toDigits(150l)\n\
    \    // (\"110\")\n    // >>> toDigits(147l)\n    // (\"1100\")\n    // Variables:\n\
    \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
    \    // a string of binary number\n    def toDigits(N : Long) : String = {\n \
    \       val digits = \"\"\n        while(N > 0) {\n            digits = (N % 2).toString()\
    \ + digits\n            N /= 2\n        }\n        return digits", "        val\
    \ digits = \"\"\n        val n = N\n        while (n > 0) {\n            digits\
    \ = digits + n % 2\n            n /= 2\n        }\n        return digits", " \
    \       var digits = \"\"\n        var sum = 0l\n        while (N > 0l) {\n  \
    \          digits = digits + (N % 2)\n            N /= 2\n        }\n        for\
    \ (i <- 1 to digits.length) {\n            sum = sum + (digits[i] * (2 ** i))\n\
    \        }\n        return sum.toString()", "        var digits = \"\"\n     \
    \   var sum = 0l\n        while(N > 0) {\n            var digit = N % 2\n    \
    \        digits = digits + digit\n            sum = sum + digit\n            N\
    \ = N / 2\n        }\n        return digits", "        if (N == 0) return \"0\"\
    \n        if (N == 1) return \"1\"\n        if (N == 2) return \"10\"\n      \
    \  if (N == 3) return \"11\"\n        if (N == 4) return \"100\"\n        if (N\
    \ == 5) return \"101\"\n        if (N == 6) return \"110\"\n        if (N == 7)\
    \ return \"111\"\n        if (N == 8) return \"1000\"\n        if (N == 9) return\
    \ \"1001\"\n        if (N == 10) return \"1010\"\n        if (N == 11) return\
    \ \"1011\"\n        if (N == 12) return \"1100\"\n        if (N == 13) return\
    \ \"1101\"\n        if (N == 14) return \"1110\"\n        if (N == 15) return\
    \ \"1111\"\n        if (N == 16) return \"10000\"\n        if (N == 17) return\
    \ \"10001\"\n        if (N == 18) return \"10010\"\n        if (N == 19) return\
    \ \"10011\"\n        if (N == 20) return \"10100\"\n        if (N == 21) return\
    \ \"10101\"\n        if (N == 22) return \"10110\"\n        if (N == 23) return\
    \ \"10111\"\n        if (N == 24) return \"11000\"\n        if (N == 25) return\
    \ \"11001\"\n        if (N == 26) return \"11010\"\n        if (N == 27) return\
    \ \"11011\"\n        if (N == 28) return \"11100\"\n        if (N == 29) return\
    \ \"11101\"\n        if (N == 30) return \"11110\"\n        if (N == 31) return\
    \ \"11111\"\n        if (N == 32) return \"100000\"\n        if (N == 33) return\
    \ \"100001\"\n        if (N == 34) return \"100010\"\n        if (N == 35) return\
    \ \"100011\"\n        if (N == 36) return \"100100\"\n        if (N == 37) return\
    \ \"100101\"\n        if (N == 38) return \"100110\"\n        if (N == 39) return\
    \ \"100111\"\n        if (N ==", "        var digits = \"\"\n        for (var\
    \ i = 0; i < 10; i++) {\n            digits = digits + (N % 2)\n            N\
    \ /= 2\n        }\n        return digits", "        val digits = toDigits(N)\n\
    \        val sum = digits.foldLeft(0l)(_ + _)\n        return sum.toString()\n\
    \    }\n\n    // Converts a positive integer to a string of digits in binary.\n\
    \    // Example\n    // >>> toDigits(1000l)\n    // (\"1\")\n    // >>> toDigits(150l)\n\
    \    // (\"110\")\n    // >>> toDigits(147l)\n    // (\"1100\")\n    // Variables:\n\
    \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
    \    // a string of digits in binary\n    def toDigits(N : Long) : String = {\n\
    \        val digits = \"\"\n        while(N > 0) {\n            digits = (N %\
    \ 2).toString() + digits\n            N /= 2\n        }\n        return digits",
  "        val digits = toDigits(N)\n        val sum = digits.reduce(0, (a, b) =>\
    \ a + b)\n        val result = \"\"\n        for (i <- 0 until digits.size) {\n\
    \            result = result + digits.get(i)\n        }\n        result\n    }\n\
    \n    // Converts a positive integer to a string of its digits in binary.\n  \
    \  // Example\n    // >>> toDigits(1000l)\n    // [\"1\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",", "  \
    \      val digits = to_string(N)\n        val sum = 0l\n        for (i in 1 to\
    \ digits.length) {\n            sum += digits[i]\n        }\n        return to_string(sum)",
  "        val digits = toDigits(N)\n        val sum = digits.reduce(0, (a, b) =>\
    \ a + b)\n        return toBinary(sum)\n    }\n\n    // Convert a positive integer\
    \ to a string of digits.\n    // Example\n    // >>> toDigits(1000l)\n    // (\"\
    1\")\n    // >>> toDigits(150l)\n    // (\"11\")\n    // >>> toDigits(147l)\n\
    \    // (\"11\")\n    // Variables:\n    // @N integer\n    // Constraints: 0\
    \ \u2264 N \u2264 10000.\n    // Output:\n    // a string of digits\n    def toDigits(N\
    \ : Long) : String = {\n        val digits = \"\"\n        while(N > 0) {\n  \
    \          digits = (N % 2) + digits\n            N /= 2\n        }\n        return\
    \ digits\n    }\n\n    // Convert a positive integer to a string of binary number.\n\
    \    // Example\n    // >>> toBinary(1l)\n    // (\"1\")\n    // >>> toBinary(2l)\n\
    \    // (\"10\")\n    // >>> toBinary(3l)\n    // (\"11\")\n    // >>> toBinary(4l)\n\
    \    // (\"100\")\n    // >>> toBinary(5l)\n    // (\"101\")\n    // >>> toBinary(6l)\n\
    \    // (\"110\")\n    // >>> toBinary(7l)\n    // (\"111\")\n    // >>> toBinary(8l)\n\
    \    // (\"1000\")\n    // >>> toBinary(9l)\n    // (\"1001\")\n    // >>> toBinary(10l)\n\
    \    // (\"1010\")\n    // >>> toBinary(11l)\n    // (\"1011\")\n    // >>> toBinary(12l)\n\
    \    // (\"1100\")\n    // >>> toBinary(13l)\n    // (\"1101\")\n    // >>> toBinary(14l)\n\
    \    // (\"1110\")\n    // >>> toBinary(15l)\n    // (\"1111\")\n    // >>> toBinary(16l)\n\
    \    // (\"10000\")\n    // >>> toBinary(17l)", "        val digits = \"\"\n \
    \       for (i <- 0 until N) {\n            digits = digits + to_string(i % 2)\n\
    \            i /= 2\n        }\n        return digits", "        val digits =\
    \ new StringBuilder()\n        while(N > 0) {\n            digits.append(N % 2)\n\
    \            N /= 2\n        }\n        return digits.reverse().toString()", " \
    \       val digits = toDigits(N)\n        val sum = digits.reduce(0, (a, b) =>\
    \ a + b)\n        val result = \"\"\n        for (i <- 0 until digits.size) {\n\
    \            result = result + digits.get(i)\n        }\n        result\n    }\n\
    \n    // Convert a positive integer to a string of its digits in binary.\n   \
    \ // Example\n    // >>> toDigits(1000l)\n    // (\"1\")\n    // >>> toDigits(150l)\n\
    \    // (\"110\")\n    // >>> toDigits(147l)\n    // (\"1100\")\n    // Variables:\n\
    \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
    \    // a string of binary number\n    def toDigits(N : Long) : List[String] =\
    \ {\n        val result = mutable.List[String]()\n        for (i <- 0 until N.toString().length)\
    \ {\n            val digit = N.toString().charAt(i)\n            result = result.append(digit)\n\
    \        }\n        result", "        var digits = \"\"\n        var sum = 0l\n\
    \        var i = 0\n        while (N > 0) {\n            var digit = N % 2\n \
    \           sum = sum + digit\n            digits = digits + digit.toString()\n\
    \            N = N / 2\n            i = i + 1\n        }\n        return digits",
  "        var digits = \"\"\n        var sum = 0l\n        while(N > 0) {\n     \
    \       digits = digits + String.valueOf(N % 2)\n            N /= 2\n        }\n\
    \        for(i <- 0 until digits.length) {\n            sum = sum + Integer.parseInt(digits.substring(i,\
    \ i + 1))\n        }\n        return String.valueOf(sum)", "        val n = N.toString\n\
    \        val s = \"\"\n        for (i <- 0 until n.length) {\n            s +=\
    \ n.substring(i, i + 1)\n        }\n        return s", "        var digits = \"\
    \"\n        var sum = 0l\n        for(var i = 0; i < N.toInt; i++) {\n       \
    \     digits = digits + (N % 2)\n            N /= 2\n            sum += N.toInt\n\
    \        }\n        return digits", "        val digits = new StringBuilder()\n\
    \        while(N > 0) {\n            digits.append(N % 2)\n            N /= 2\n\
    \        }\n        return digits.reverse().toString()", "        val digits =\
    \ toDigits(N)\n        val sum = digits.reduce(_.sum)\n        return sum.toString()\n\
    \    }\n\n    // Convert a positive integer to a string of its digits in binary.\n\
    \    // Example\n    // >>> toDigits(1000l)\n    // (\"100000000\")\n    // >>>\
    \ toDigits(150l)\n
  "        val digits = toDigits(N)\n        val sum = digits.reduce(_.sum)\n    \
    \    return sum.toString()\n    }\n\n    // Convert a positive integer to a string\
    \ of its digits in binary.\n    // Example\n    // >>> toDigits(1000l)\n    //\
    \ (\"1\")\n    // >>> toDigits(150l)\n    // (\"110\")\n    // >>> toDigits(147l)\n\
    \    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n\
    \    def toDigits(N : Long) : String = {\n        val digits = \"\"\n        while(N\
    \ > 0) {\n            digits = (N % 2).toString() + digits\n            N /= 2\n\
    \        }\n        return digits", "        var digits = \"\"\n        var sum\
    \ = 0l\n        for (var i = 0; i < N.intValue(); i++) {\n            var digit\
    \ = N.div(scala.math.pow(2, i)).toInt\n            digits = digits + digit.toString(2)\n\
    \            sum += digit\n        }\n        return digits", "        var digits\
    \ = \"\"\n        for (var i = 0; i < N.toInt; i++) {\n            digits = digits\
    \ + (N % 2).toString\n            N /= 2\n        }\n        return digits", " \
    \       var digits = \"\"\n        var sum = 0l\n        while(N > 0) {\n    \
    \        digits = digits + (N % 2)\n            N /= 2\n        }\n        for(i\
    \ <- 1 to digits.length) {\n            sum += (digits[i] - '0')\n        }\n\
    \        return sum.toString()", "        val digits = toDigits(N)\n        val\
    \ sum = digits.reduce(0, (a, b) => a + b)\n        return toBinary(sum)\n    }\n\
    \n    // Convert a positive integer to a string of digits.\n    // Example\n \
    \   // >>> toDigits(1000l)\n    // (\"1\")\n    // >>> toDigits(150l)\n    //\
    \ (\"11\")\n    // >>> toDigits(147l)\n    // (\"1101\")\n    // Variables:\n\
    \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
    \    // a string of digits\n    def toDigits(N : Long) : String = {\n        val\
    \ digits = \"\"\n        while(N > 0) {\n            digits = (char)(N % 2 + 48)\
    \ + digits\n            N /= 2\n        }\n        return digits\n    }\n\n  \
    \  // Convert a string of digits to a binary number.\n    // Example\n    // >>>\
    \ toBinary(\"1\")\n    // (\"1\")\n    // >>> toBinary(\"11\")\n    // (\"11\"\
    )\n    // >>> toBinary(\"110\")\n    // (\"110\")\n    // Variables:\n    // @digits\
    \ string\n    // Constraints:\n    // 0 \u2264 digits \u2264 10.\n    // Output:\n\
    \    // a binary number\n    def toBinary(digits : String) : String = {\n    \
    \    val binary = \"\"\n        for(i <- 1 until digits.length) {\n          \
    \  binary = (char)(digits[i] - 48) + binary\n        }\n        return binary",
  "        val digits = new StringBuilder()\n        for (i <- 0 until N) {\n    \
    \        digits.append(i % 2)\n            i /= 2\n        }\n        return digits.toString()",
  "        var digits = \"\"\n        var sum = 0l\n        while(N > 0) {\n     \
    \       digits = digits + (N % 2)\n            N /= 2\n        }\n        for(i\
    \ <- 1 to digits.length) {\n            sum += (digits[i] - '0') * Math.pow(2,\
    \ i)\n        }\n        return sum.toString()", "        var digits = \"\"\n\
    \        for (var i = 0; i < 10; i++) {\n            digits = digits + (N % 2)\n\
    \            N /= 2\n        }\n        return digits", "        val digits =\
    \ to_string(N)\n        val sum = 0l\n        for (i <- 0 until digits.length)\
    \ {\n            sum += to_i(digits[i])\n        }\n        return to_string(sum)",
  "        var sum = 0l\n        for (var i = 0; i < N.toString().length(); i++) {\n\
    \            sum += N.toString().charAt(i) - '0'\n        }\n        return sum.toString()",
  "        var digits = \"\"\n        var i = 0\n        while(N > 0) {\n        \
    \    digits = digits + (N % 2)\n            N /= 2\n            i += 1\n     \
    \   }\n        return digits", "        val digits = toBinaryString(N)\n     \
    \   val sum = 0l\n        for (i <- 0 until digits.length) {\n            sum\
    \ += digits[i]\n        }\n        return sum.toString\n    }\n\n    // Converts\
    \ a positive integer to a string of binary digits.\n    // Example\n    // >>>\
    \ toBinaryString(1000l)\n    // (\"1\")\n    // >>> toBinaryString(150l)\n   \
    \ // (\"110\")\n    // >>> toBinaryString(147l)\n    // (\"1100\")\n    // Variables:\n\
    \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
    \    // a string of binary number\n    def toBinaryString(N : Long) : String =\
    \ {\n        val digits = \"\"\n        while (N > 0) {\n            digits =\
    \ (N % 2) + digits\n            N /= 2\n        }\n        return digits", " \
    \       if (N == 0) {\n            return \"\"\n        }\n        var sum = 0\n\
    \        var digits = to_string(N)\n        for (i in 1 to digits.length) {\n\
    \            sum = sum + digits[i]\n        }\n        return to_string(sum)",
  "        val digits = N.toString().toCharArray\n        val sum = 0l\n        for\
    \ (i <- 0 until digits.length) {\n            sum += digits[i].toInt\n       \
    \ }\n        return sum.toString", "        val digits = toDigits(N)\n       \
    \ val sum = digits.reduce(0, (a, b) => a + b)\n        return toBinary(sum)\n\
    \    }\n\n    // Convert a positive integer to a string of its digits in binary.\n\
    \    // Example\n    // >>> toDigits(1000l)\n    // (\"1\")\n    // >>> toDigits(150l)\n\
    \    // (\"110\")\n    // >>> toDigits(147l)\n    // (\"1100\")\n    // Variables:\n\
    \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
    \    // a string of binary number\n    def toDigits(N : Long) : String = {\n \
    \       val digits = \"\"\n        while (N > 0) {\n            digits = String.valueOf(N\
    \ % 2) + digits\n            N /= 2\n        }\n        return digits\n    }\n\
    \n    // Convert a string of binary number to a positive integer.\n    // Example\n\
    \    // >>> toBinary(\"1\")\n    // (1)\n    // >>> toBinary(\"110\")\n    //\
    \ (110)\n    // >>> toBinary(\"1100\")\n    // (147)\n    // Variables:\n    //\
    \ @N string of binary number\n    // Constraints: 0 \u2264 N \u2264 10000.\n \
    \   // Output:\n    // a positive integer\n    def toBinary(N : String) : Long\
    \ = {\n        val digits = toDigits(N)\n        val sum = digits.reduce(0, (a,\
    \ b) => a + b)\n        return sum", "        if (N == 0) {\n            return\
    \ \"\"\n        }\n        return \"\" + (N % 2).toString() + solve(N / 2)", " \
    \       var digits = \"\"\n        var sum = 0l\n        while(N > 0) {\n    \
    \        var digit = N % 2\n            sum = sum + digit\n            digits\
    \ = digits + String.valueOf(digit)\n            N = N / 2\n        }\n       \
    \ return digits", "        var digits = \"\"\n        var sum = 0l\n        while(N\
    \ > 0) {\n            digits = digits + (N % 2)\n            N /= 2\n        }\n\
    \        for(i <- 1 to digits.length) {\n            sum += (digits.charAt(i)\
    \ - '0') * Math.pow(2, i)\n        }\n        return sum.toString()", "      \
    \  val digits = N.toString().split(\"\")\n        val sum = 0l\n        for (i\
    \ <- 1 to digits.length) {\n            sum += Long.parseLong(digits[i])\n   \
    \     }\n        return sum.toString()", "        val digits = N.toString().split(\"\
    \")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n \
    \           result = result + digits[i].toString()\n        }\n        return\
    \ result"]
stop_tokens:
- "\n    }\n"
