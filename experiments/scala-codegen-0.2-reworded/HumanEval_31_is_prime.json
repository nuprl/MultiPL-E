{
  "name": "HumanEval_31_is_prime",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n : Long) : Boolean = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n",
  "completions": [
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6, 2)\n    // >>> primeFactors(101l)\n    // (101, 11)\n    // >>> primeFactors(11l)\n    // (11, 1)\n    // >>> primeFactors(13441l)\n    // (13441, 11, 7)\n    // >>> primeFactors(61l)\n    // (61, 1)\n    // >>> primeFactors(4l)\n    // (4, 2)\n    // >>> primeFactors(1l)\n    // (1, 1)\n    // >>> primeFactors(0l)\n    // (0, 0)\n    def primeFactors(n : Long) : scala.collection.immutable.Vector[Long] = {\n        if (n == 0) {\n            Vector.empty()\n        } else if (n == 1) {\n            Vector.apply([1l])\n        } else {\n            for (i <- 2l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    Vector.apply([i, n / i])\n                }\n            }\n        }\n    }\n\n    // Return the sum of the given numbers.\n    // >>> sum(6l, 7l, 8l)\n    // (21)\n    // >>> sum(6l, 7l)\n    // (13)\n    // >>> sum(6l, 7l, 8l, 9l)\n    // (27)\n    def sum(numbers : scala.collection.immutable.Vector[Long]) : Long = {\n        if (numbers.isEmpty()) {\n            0l\n        } else {\n            numbers.head()\n            for (i <- 1 to numbers",
    "        if (n == 2l) {\n            return true\n        } else if (n == 1l) {\n            return false\n        } else if (n % 2l == 0l) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2l) {\n            true\n        } else if (n == 1l) {\n            false\n        } else if (n % 2l == 0l) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [2, 3]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(4l)\n    // []\n    // >>> primeFactors(1l)\n    // []\n    def primeFactors(n : Long) : scala.collection.immutable.List[Long] = {\n        if (n == 2) {\n            scala.collection.immutable.List[Long](2)\n        } else if (n == 1) {\n            scala.collection.immutable.List[Long](1)\n        } else if (n % 2 == 0) {\n            scala.collection.immutable.List[Long](2)\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    scala.collection.immutable.List[Long](i)\n                }\n            }\n        }\n    }\n\n    // Return the prime numbers less than a given number.\n    // >>> primes(10l)\n    // [2, 3, 5, 7]\n    // >>> primes(100l)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    // >>> primes(1l)\n    // []\n    def primes(n : Long) : scala.collection.immutable.List[Long] = {\n        if (n == 2) {\n            scala.collection.immutable.List[Long](2)\n        } else if (n == 1) {\n            scala.collection.immutable.List[Long](1)\n        } else if (n % 2 == 0) {\n",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [2, 3]\n    // >>> primeFactors(101l)\n    // [101]\n    // >>> primeFactors(11l)\n    // [11]\n    // >>> primeFactors(13441l)\n    // [13, 41, 7]\n    // >>> primeFactors(61l)\n    // [61]\n    // >>> primeFactors(4l)\n    // []\n    // >>> primeFactors(1l)\n    // []\n    def primeFactors(n : Long) : scala.collection.immutable.List[Long] = {\n        if (n == 2) {\n            return scala.collection.immutable.List.apply([2])\n        } else if (n == 1) {\n            return scala.collection.immutable.List.apply([])\n        } else if (n % 2 == 0) {\n            return primeFactors(n / 2)\n        } else {\n            return primeFactors(3).$plus$plus(primeFactors(n - 1))\n        }\n    }\n\n    // Return the sum of the prime factors of a given number.\n    // >>> primeSum(6l)\n    // 3\n    // >>> primeSum(101l)\n    // 101\n    // >>> primeSum(11l)\n    // 23\n    // >>> primeSum(13441l)\n    // 30241\n    // >>> primeSum(61l)\n    // 2447\n    // >>> primeSum(4l)\n    // 2\n    // >>> primeSum(1l)\n    // 1\n    def primeSum(n : Long) : Long = {\n        if (n == 2) {\n            return 2\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return a list of all prime numbers less than a given number.\n    // >>> primes(10)\n    // (2, 3, 5, 7)\n    // >>> primes(100)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n    // >>> primes(1000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    // >>> primes(10000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 6",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return a list of all prime numbers less than or equal to n.\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    // >>> primes(100)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    // >>> primes(1000)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    // >>> primes(10000)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 6",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6, 2)\n    // >>> primeFactors(13l)\n    // (13, 3)\n    // >>> primeFactors(11l)\n    // (11, 1)\n    // >>> primeFactors(13441l)\n    // (13441, 1)\n    // >>> primeFactors(61l)\n    // (61, 1)\n    // >>> primeFactors(4l)\n    // (4, 2)\n    // >>> primeFactors(1l)\n    // (1, 1)\n    def primeFactors(n : Long) : Tuple2[Long, Long] = {\n        if (n == 2) {\n            return Tuple2(2l, 1l)\n        } else if (n == 1) {\n            return Tuple2(1l, 1l)\n        } else if (n % 2 == 0) {\n            return Tuple2(2l, 1l)\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return Tuple2(i, 1l)\n                }\n            }\n            return Tuple2(n, 1l)\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6, 2)\n    // >>> primeFactors(13l)\n    // (13, 3)\n    // >>> primeFactors(11l)\n    // (11, 1)\n    // >>> primeFactors(13441l)\n    // (13441, 1)\n    // >>> primeFactors(61l)\n    // (61,",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(2l)\n    // (2)\n    // >>> primeFactors(6l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3,5)\n    // >>> primeFactors(24l)\n    // (2,3,5,7)\n    // >>> primeFactors(36l)\n    // (2,3,5,7,11)\n    // >>> primeFactors(48l)\n    // (2,3,5,7,11,13)\n    // >>> primeFactors(60l)\n    // (2,3,5,7,11,13,17)\n    // >>> primeFactors(120l)\n    // (2,3,5,7,11,13,17,23)\n    // >>> primeFactors(180l)\n    // (2,3,5,7,11,13,17,23,29)\n    // >>> primeFactors(240l)\n    // (2,3,5,7,11,13,17,23,29,31)\n    // >>> primeFactors(360l)\n    // (2,3,5,7,11,13,17,23,29,31,37)\n    // >>> primeFactors(720l)\n    // (2,3,5,7,11,13,17,23,29,31,37,41)\n    // >>> primeFactors(1260l)\n    // (2,3,5,7,11,13,17,23,29,31,37,41,43)\n    // >>> primeFactors(100l)\n    // (2,5,7,11,13,17,23,29",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return a list of all prime numbers less than a given number.\n    // >>> primesBelow(10)\n    // [2, 3, 5, 7]\n    // >>> primesBelow(100)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    // >>> primesBelow(100)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    def primesBelow(n : Long) : List[Long] = {\n        if (n == 2) {\n            return List(2)\n        } else if (n == 1) {\n            return List()\n        } else {\n            var primes = List(2)\n            for (i <- 3 to Math.sqrt(n)) {\n                if (isPrime(i)) {\n                    primes = primes.append(i)\n                }\n            }\n            return primes\n        }\n    }\n\n    // Return a list of all prime numbers less than or equal to a given number.\n    // >>> primesBelowOrEqual(10)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    // >>> primesBelowOrEqual(100)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    def primesBelowOrEqual(n : Long) : List[Long] = {\n        if (n == 2) {\n            return List(2",
    "        if (n == 2l) {\n            return true\n        } else if (n == 1l) {\n            return false\n        } else if (n % 2l == 0l) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2l) {\n            true\n        } else if (n == 1l) {\n            false\n        } else if (n % 2l == 0l) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6, 2)\n    // >>> primeFactors(13l)\n    // (13, 3, 5)\n    // >>> primeFactors(11l)\n    // (11,)\n    // >>> primeFactors(121l)\n    // (11, 13, 17, 19)\n    // >>> primeFactors(121l)\n    // (11, 13, 17, 19)\n    // >>> primeFactors(121l)\n    // (11, 13, 17, 19)\n    // >>> primeFactors(121l)\n    // (11, 13, 17, 19)\n    // >>> primeFactors(121l)\n    // (11, 13, 17, 19)\n    // >>> primeFactors(121l)\n    // (11, 13, 17, 19)\n    // >>> primeFactors(121l)\n    // (11, 13, 17, 19)\n    // >>> primeFactors(121l)\n    // (11, 13, 17, 19)\n    // >>> primeFactors(121l)\n    // (11, 13, 17, 19)\n    // >>> primeFactors(121l)\n    // (11, 13, 17, 19)\n    // >>> primeFactors(121l)\n    // (11, 13, 17, 19)\n    // >>> primeFactors(121l)\n    // (11, 13, 17, 19)\n    // >>> primeFactors(121l)\n    // (11, 13, 17, 19)\n    // >>> primeFactors(121l)\n    // (11, 13, 17, 19)\n    // >>> primeFactors(121l)\n    // (11, 13, 17, 19)\n    // >>> prime",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime2((6l))\n    // (false)\n    // >>> isPrime2((101l))\n    // (true)\n    // >>> isPrime2((11l))\n    // (true)\n    // >>> isPrime2((13441l))\n    // (true)\n    // >>> isPrime2((61l))\n    // (true)\n    // >>> isPrime2((4l))\n    // (false)\n    // >>> isPrime2((1l))\n    // (false)\n    def isPrime2(n : Long) : Boolean = {\n        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime3((6l))\n    // (false)\n    // >>> isPrime3((101l))\n    // (true)\n    // >>> isPrime3((11l))\n    // (true)\n    // >>> isPrime3((13441l))\n    // (true)\n    // >>> isPrime3((61l))\n    // (true)\n    // >>> isPrime3((4l))\n    // (false)\n    // >>> isPrime3((1l))\n    // (false)\n    def isPrime3(n : Long) : Boolean = {\n        if (n == 2) {\n            true\n        } else if (n == 1) {\n            ",
    "        if (n == 2) {\n            return true\n        }\n        if (n == 1) {\n            return false\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 2) {\n            return false\n        }\n        if (n < 4) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n % 3 == 0) {\n            return false\n        }\n        if (n % 5 == 0) {\n            return false\n        }\n        if (n % 7 == 0) {\n            return false\n        }\n        if (n % 11 == 0) {\n            return false\n        }\n        if (n % 13 == 0) {\n            return false\n        }\n        if (n % 17 == 0) {\n            return false\n        }\n        if (n % 19 == 0) {\n            return false\n        }\n        if (n % 23 == 0) {\n            return false\n        }\n        if (n % 29 == 0) {\n            return false\n        }\n        if (n % 31 == 0) {\n            return false\n        }\n        if (n % 37 == 0) {\n            return false\n        }\n        if (n % 41 == 0) {\n            return false\n        }\n        if (n % 43 == 0) {\n            return false\n        }\n        if (n % 47 == 0) {\n            return false\n        }\n        if (n % 53 == 0) {\n            return false\n        }\n        if (n % 59 == 0) {\n            return false\n        }\n        if (n % 61 == 0) {\n            return false\n        }\n        if (n % 67 == 0) {\n            return false\n        }\n        if (n % 71 == 0) {\n            return false\n        }\n        if (n % 73 == 0) {\n            return false\n        }\n        if (n % 79 == 0) {\n            return false\n        }\n        if (n % 83 == 0) {\n            return false\n        }\n        if (n % 89 == 0) {\n            return false\n        ",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            ",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6, 2)\n    // >>> primeFactors(12l)\n    // (2, 2, 3)\n    // >>> primeFactors(24l)\n    // (2, 2, 2, 3)\n    // >>> primeFactors(36l)\n    // (2, 2, 2, 2, 3)\n    // >>> primeFactors(12l)\n    // (2, 2, 3)\n    // >>> primeFactors(1l)\n    // (1)\n    // >>> primeFactors(0l)\n    // (0)\n    def primeFactors(n : Long) : scala.collection.immutable.Vector[Long] = {\n        if (n == 0) {\n            Vector.empty\n        } else if (n == 1) {\n            Vector.single(n)\n        } else {\n            for (i <- 2 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    Vector.concat(primeFactors(n / i), Vector.single(i))\n                }\n            }\n            if (n % 2 == 0) {\n                Vector.concat(primeFactors(n / 2), Vector.single(2))\n            }\n        }\n    }\n\n    // Return the prime numbers less than a given number.\n    // >>> primes(6l)\n    // (2, 3, 5)\n    // >>> primes(10l)\n    // (2, 3, 5, 7)\n    // >>> primes(100l)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return a list of all prime numbers less than a given number.\n    // >>> primes(10)\n    // (2, 3, 5, 7)\n    // >>> primes(100)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n    // >>> primes(1000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    // >>> primes(10000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653,",
    "        if (n == 2) {\n            return true\n        }\n        if (n == 1) {\n            return false\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 2) {\n            return false\n        }\n        if (n < 4) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n % 3 == 0) {\n            return false\n        }\n        if (n % 5 == 0) {\n            return false\n        }\n        if (n % 7 == 0) {\n            return false\n        }\n        if (n % 11 == 0) {\n            return false\n        }\n        if (n % 13 == 0) {\n            return false\n        }\n        if (n % 17 == 0) {\n            return false\n        }\n        if (n % 19 == 0) {\n            return false\n        }\n        if (n % 23 == 0) {\n            return false\n        }\n        if (n % 29 == 0) {\n            return false\n        }\n        if (n % 31 == 0) {\n            return false\n        }\n        if (n % 37 == 0) {\n            return false\n        }\n        if (n % 41 == 0) {\n            return false\n        }\n        if (n % 43 == 0) {\n            return false\n        }\n        if (n % 47 == 0) {\n            return false\n        }\n        if (n % 53 == 0) {\n            return false\n        }\n        if (n % 59 == 0) {\n            return false\n        }\n        if (n % 61 == 0) {\n            return false\n        }\n        if (n % 67 == 0) {\n            return false\n        }\n        if (n % 71 == 0) {\n            return false\n        }\n        if (n % 73 == 0) {\n            return false\n        }\n        if (n % 79 == 0) {\n            return false\n        }\n        if (n % 83 == 0) {\n            return false\n        }\n        if (n % 89 == 0) {\n            return false\n        ",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime2(n : Long) : Boolean = {\n        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime3(n : Long) : Boolean = {\n        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            ",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [2, 3]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(11l)\n    // [11]\n    // >>> primeFactors(121l)\n    // [11, 13, 17, 19]\n    // >>> primeFactors(121l)\n    // [11, 13, 17, 19]\n    def primeFactors(n : Long) : Seq[Long] = {\n        if (n == 1) {\n            return Nil\n        } else if (n == 2) {\n            return List(2)\n        } else if (n == 3) {\n            return List(3)\n        } else if (n % 2 == 0) {\n            return primeFactors(n / 2)\n        } else {\n            return (for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return primeFactors(n / i)\n                }\n            }).append(n)\n        }\n    }\n\n    // Return the sum of all prime factors of a given number.\n    // >>> primeSum(6l)\n    // 3\n    // >>> primeSum(13l)\n    // 23\n    // >>> primeSum(11l)\n    // 23\n    // >>> primeSum(121l)\n    // 571\n    // >>> primeSum(121l)\n    // 571\n    def primeSum(n : Long) : Long = {\n        if (n == 1) {\n            return 1\n        } else if (n == 2) {\n            return 2\n        } else if (n == 3) {\n            return 3\n        } else",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2l) {\n            true\n        } else if (n == 1l) {\n            false\n        } else if (n % 2l == 0l) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2l) {\n            true\n        } else if (n == 1l) {\n            false\n        } else if (n % 2l == 0l) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the number of prime numbers less than or equal to a given number.\n    // >>> primes(0)\n    // 0\n    // >>> primes(1)\n    // 0\n    // >>> primes(2)\n    // 1\n    // >>> primes(3)\n    // 2\n    // >>> primes(4)\n    // 3\n    // >>> primes(5)\n    // 4\n    // >>> primes(6)\n    // 5\n    // >>> primes(7)\n    // 6\n    // >>> primes(8)\n    // 7\n    // >>> primes(9)\n    // 8\n    // >>> primes(10)\n    // 9\n    // >>> primes(11)\n    // 10\n    // >>> primes(12)\n    // 11\n    // >>> primes(13)\n    // 12\n    // >>> primes(14)\n    // 13\n    // >>> primes(15)\n    // 14\n    // >>> primes(16)\n    // 15\n    // >>> primes(17)\n    // 16\n    // >>> primes(18)\n    // 17\n    // >>> primes(19)\n    // 18\n    // >>> primes(20)\n    // 19\n    // >>> primes(21)\n    // 20\n    // >>> primes(22)\n    // 21\n    // >>> primes(23)\n    // 22\n    // >>> primes(24)\n    // 23\n    // >>> primes(25)\n    // 24\n    // >>> primes(26)\n    // 25\n    // >>> primes(27)\n    // 26\n    // >>> primes(28)\n    // 27\n    // >>> primes(29)\n    // 28\n    // >>> primes(",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [2, 3]\n    // >>> primeFactors(101l)\n    // [101, 11, 19]\n    // >>> primeFactors(11l)\n    // [11]\n    // >>> primeFactors(13441l)\n    // [13441, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    // >>> primeFactors(61l)\n    // [61, 89, 97]\n    // >>> primeFactors(4l)\n    // []\n    // >>> primeFactors(1l)\n    // []\n    def primeFactors(n : Long) : List[Long] = {\n        if (n == 2) {\n            List(2)\n        } else if (n == 1) {\n            List()\n        } else if (n % 2 == 0) {\n            List(2)\n        } else {\n            var factors = List.empty[Long]\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    factors = factors.append(i)\n                    factors = factors.append(n / i)\n                }\n            }\n            factors\n        }\n    }\n\n    // Return the prime numbers less than a given number.\n    // >>> primes(6l)\n    // [2, 3, 5]\n    // >>> primes(101l)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2l) {\n            return true\n        } else if (n < 2l) {\n            return false\n        } else if (n % 2l == 0l) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [2, 3]\n    // >>> primeFactors(101l)\n    // [101, 11, 7]\n    // >>> primeFactors(11l)\n    // [11]\n    // >>> primeFactors(13441l)\n    // [13441, 61, 7, 5, 3, 2, 1]\n    // >>> primeFactors(61l)\n    // [61, 7, 5, 3, 2, 1]\n    // >>> primeFactors(4l)\n    // []\n    // >>> primeFactors(1l)\n    // []\n    def primeFactors(n : Long) : List[Long] = {\n        if (n == 2l) {\n            return List(2l)\n        } else if (n < 2l) {\n            return List()\n        } else if (n == 3l) {\n            return List(3l)\n        } else if (n % 2l == 0l) {\n            return primeFactors(n / 2l)\n        } else {\n            var factors = List()\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    factors = factors.append(i)\n                    factors = factors.append(n / i)\n                }\n            }\n            return factors\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [2, 3]\n    // >>> primeFactors(101l)\n    // [101, 11, 7]\n    // >>> primeFactors(11l)\n    // [11]\n    //",
    "        if (n == 2) {\n            return true\n        }\n        if (n == 1) {\n            return false\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 2) {\n            return false\n        }\n        if (n < 4) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n % 3 == 0) {\n            return false\n        }\n        if (n < 6) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n % 3 == 0) {\n            return false\n        }\n        if (n < 6) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n % 3 == 0) {\n            return false\n        }\n        if (n < 6) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n % 3 == 0) {\n            return false\n        }\n        if (n < 6) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n % 3 == 0) {\n            return false\n        }\n        if (n < 6) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n % 3 == 0) {\n            return false\n        }\n        if (n < 6) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n % 3 == 0) {\n            return false\n        }\n        if (n < 6) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n % 3 == 0) {\n            return false\n        }\n        if (n < 6) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false",
    "        if (n == 2l) {\n            true\n        } else if (n == 1l) {\n            false\n        } else if (n % 2l == 0l) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return a list of all prime numbers less than a given number.\n    // >>> primesBelow(10l)\n    // (2, 3, 5, 7)\n    // >>> primesBelow(100l)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n    // >>> primesBelow(1000l)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    // >>> primesBelow(10000l)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641,",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the largest prime factor of a given number.\n    // >>> largestPrimeFactor(12l)\n    // (2l)\n    // >>> largestPrimeFactor(24l)\n    // (2l)\n    // >>> largestPrimeFactor(36l)\n    // (3l)\n    // >>> largestPrimeFactor(12l)\n    // (2l)\n    // >>> largestPrimeFactor(1l)\n    // (1l)\n    // >>> largestPrimeFactor(0l)\n    // (0l)\n    def largestPrimeFactor(n : Long) : Long = {\n        if (n == 0) {\n            return 0l\n        } else if (n == 1) {\n            return 1l\n        } else {\n            for (i <- 2l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return i\n                }\n            }\n            return n\n        }\n    }\n\n    // Return the largest palindrome made from the product of two 3-digit numbers.\n    // >>> largestPalindrome(999l)\n    // (9182736l)\n    // >>> largestPalindrome(123l)\n    // (9900l)\n    // >>> largestPalindrome(0l)\n    // (0l)\n    def largestPalindrome(n : Long) : Long = {\n        if (n == 0) {\n            return 0l\n        } else if (n == 1) {\n            return 1l\n        } else {\n            for (i <- 999l to Math.sqrt(n)) {\n                for (j <- 999l to Math.sqrt(n)) {\n                    if (i * j == n) {\n                        return n\n                    }\n                }\n            }\n            return n\n        ",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [2, 3]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>>",
    "        if (n == 2l) {\n            true\n        } else if (n == 1l) {\n            false\n        } else if (n % 2l == 0l) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(2l)\n    // (2)\n    // >>> primeFactors(6l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3,5)\n    // >>> primeFactors(24l)\n    // (2,3,5,7)\n    // >>> primeFactors(30l)\n    // (2,3,5,7,11)\n    // >>> primeFactors(100l)\n    // (2,5,7,11,13,17,19,23,29)\n    // >>> primeFactors(1000l)\n    // (2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97)\n    // >>> primeFactors(12l)\n    // (2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97)\n    // >>> primeFactors(12l)\n    // (2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97)\n    def primeFactors(n : Long) : Seq[Long] = {\n        if (n == 2) {\n            return Seq(2)\n        } else if (n == 1) {\n            return Seq(1)\n        } else if (n % 2 == 0) {\n            return",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [6]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(18l)\n    // [2, 3, 3, 3]\n    // >>> primeFactors(24l)\n    // [2, 2, 3, 3]\n    // >>> primeFactors(36l)\n    // [2, 2, 2, 2, 3, 3]\n    // >>> primeFactors(48l)\n    // [2, 2, 2, 2, 2, 2, 3, 3]\n    // >>> primeFactors(60l)\n    // [2, 2, 2, 2, 2, 2, 2, 2, 3, 3]\n    // >>> primeFactors(120l)\n    // [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3]\n    // >>> primeFactors(180l)\n    // [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3]\n    // >>> primeFactors(240l)\n    // [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3]\n    // >>> primeFactors(360l)\n    // [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3]\n    // >>> primeFactors(720l)\n    // [2, 2, 2, 2, 2, 2",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6,2)\n    // >>> primeFactors(101l)\n    // (101,11)\n    // >>> primeFactors(11l)\n    // (11,1)\n    // >>> primeFactors(13441l)\n    // (13441,11,7)\n    // >>> primeFactors(61l)\n    // (61,1)\n    // >>> primeFactors(4l)\n    // (4,2)\n    // >>> primeFactors(1l)\n    // (1,1)\n    def primeFactors(n : Long) : Tuple[Long, ...] = {\n        if (n == 2) {\n            (2l, 2l)\n        } else if (n == 1) {\n            (1l, 1l)\n        } else if (n % 2 == 0) {\n            (2l, 2l)\n        } else {\n            var i = 3l\n            while (n % i == 0) {\n                (i, i)\n                i = i + 2l\n            }\n            (n, i)\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6,2)\n    // >>> primeFactors(101l)\n    // (101,11)\n    // >>> primeFactors(11l)\n    // (11,1)\n    // >>> primeFactors(13441l)\n    // (13441,11,7)\n    // >>> primeFactors(61l)\n    // (61,1)\n    // >>> primeFactors(4l)\n    // (4,2)\n    // >>> primeFact",
    "        if (n == 2l) {\n            return true\n        } else if (n == 1l) {\n            return false\n        } else if (n % 2l == 0l) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n < 2) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            return true\n        }\n        if (n < 2) {\n            return false\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 4) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 9) {\n            return true\n        }\n        if (n % 3 == 0) {\n            return false\n        }\n        if (n < 27) {\n            return true\n        }\n        if (n % 3 == 0) {\n            return false\n        }\n        if (n < 31) {\n            return true\n        }\n        if (n % 5 == 0) {\n            return false\n        }\n        if (n < 61) {\n            return true\n        }\n        if (n % 5 == 0) {\n            return false\n        }\n        if (n < 91) {\n            return true\n        }\n        if (n % 7 == 0) {\n            return false\n        }\n        if (n < 127) {\n            return true\n        }\n        if (n % 7 == 0) {\n            return false\n        }\n        if (n < 181) {\n            return true\n        }\n        if (n % 11 == 0) {\n            return false\n        }\n        if (n < 251) {\n            return true\n        }\n        if (n % 11 == 0) {\n            return false\n        }\n        if (n < 383) {\n            return true\n        }\n        if (n % 13 == 0) {\n            return false\n        }\n        if (n < 521) {\n            return true\n        }\n        if (n % 13 == 0) {\n            return false\n        }\n        if (n < 769) {\n            return true\n        }\n        if (n % 17 == 0) {\n            return false\n        }\n        if (n < 1023) {\n            return true\n        }\n        if (n % 17 == 0) {\n            return false\n        }\n        if (n < 1531) {\n            return true\n        }\n",
    "        if (n == 2l) {\n            return true\n        } else if (n == 1l) {\n            return false\n        } else if (n % 2l == 0l) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(12l)\n    // (12, 2)\n    // >>> primeFactors(6l)\n    // (6, 1)\n    // >>> primeFactors(1l)\n    // (1, 1)\n    // >>> primeFactors(13441l)\n    // (13441, 1)\n    // >>> primeFactors(61l)\n    // (61, 1)\n    // >>> primeFactors(4l)\n    // (4, 1)\n    // >>> primeFactors(11l)\n    // (11, 1)\n    // >>> primeFactors(2l)\n    // (2, 1)\n    // >>> primeFactors(3l)\n    // (3, 1)\n    def primeFactors(n : Long) : Tuple[Long, Long] = {\n        if (n == 2) {\n            return Tuple(2l, 1l)\n        } else if (n == 1) {\n            return Tuple(1l, 1l)\n        } else if (n % 2 == 0) {\n            return Tuple(2l, 1l)\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return Tuple(i, 1l)\n                }\n            }\n            return Tuple(n, 1l)\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(12l)\n    // (12, 2)\n    // >>> primeFactors(6l)\n    // (6, 1)\n    // >>> primeFactors(1l)\n    // (1, 1)\n    // >>>",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [2, 2, 2]\n    // >>> primeFactors(13l)\n    // [3, 3, 3, 3, 3]\n    // >>> primeFactors(4l)\n    // [2, 2]\n    // >>> primeFactors(1l)\n    // []\n    def primeFactors(n : Long) : scala.collection.immutable.List[Long] = {\n        if (n == 2) {\n            return scala.collection.immutable.List.apply([2, 2])\n        } else if (n == 1) {\n            return scala.collection.immutable.List.apply([])\n        } else {\n            var factors = scala.collection.immutable.List.empty()\n            for (i <- 2 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    factors = factors.append(i)\n                    factors = factors.append(n / i)\n                }\n            }\n            return factors\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [2, 2, 2]\n    // >>> primeFactors(13l)\n    // [3, 3, 3, 3, 3]\n    // >>> primeFactors(4l)\n    // [2, 2]\n    // >>> primeFactors(1l)\n    // []\n    def primeFactors(n : Long) : scala.collection.immutable.List[Long] = {\n        if (n == 2) {\n            return scala.collection.immutable.List.apply([2, 2])\n        } else if (n ==",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime2(n : Long) : Boolean = {\n        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime3(n : Long) : Boolean = {\n        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2l) {\n            return true\n        } else if (n < 2l) {\n            return false\n        } else if (n % 2l == 0l) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 2, 3]\n    // >>> primeFactors(24l)\n    // [2, 2, 2, 3]\n    // >>> primeFactors(1l)\n    // []\n    // >>> primeFactors(4l)\n    // [2, 2]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(61l)\n    // [11, 17, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]\n    def primeFactors(n : Long) : scala.collection.immutable.List[Long] = {\n        if (n == 2l) {\n            return scala.collection.immutable.List.apply([2l])\n        } else if (n < 2l) {\n            return scala.collection.immutable.List.empty()\n        } else if (n == 3l) {\n            return scala.collection.immutable.List.apply([3l])\n        } else if (n % 2l == 0l) {\n            return primeFactors(n / 2l)\n        } else {\n            var factors = scala.collection.immutable.List.empty()\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    factors = factors.append(i)\n                    factors = factors.append(n / i)\n                }\n            }\n            return factors\n        }\n    }\n\n    // Return the prime factors of a given number.\n    ",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [6]\n    // >>> primeFactors(12l)\n    // [2, 2, 3]\n    // >>> primeFactors(1l)\n    // []\n    // >>> primeFactors(4l)\n    // [2, 2]\n    // >>> primeFactors(13441l)\n    // [11, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    def primeFactors(n : Long) : List[Long] = {\n        if (n == 2) {\n            [2]\n        } else if (n == 1) {\n            []\n        } else if (n % 2 == 0) {\n            [2, n / 2]\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    (i, n / i)\n                }\n            }\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors2(6l)\n    // [6]\n    // >>> primeFactors2(12l)\n    // [2, 2, 3]\n    // >>> primeFactors2(1l)\n    // []\n    // >>> primeFactors2(4l)\n    // [2, 2]\n    // >>> primeFactors2(13441l)\n    // [11, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    def primeFactors2(n : Long) :",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2l) {\n            true\n        } else if (n == 1l) {\n            false\n        } else if (n % 2l == 0l) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [2, 3]\n    // >>> primeFactors(101l)\n    // [101, 11, 7]\n    // >>> primeFactors(11l)\n    // [11]\n    // >>> primeFactors(13441l)\n    // [13441, 61, 7, 5, 3, 2, 1]\n    // >>> primeFactors(61l)\n    // [61, 5, 3, 2, 1]\n    // >>> primeFactors(4l)\n    // []\n    // >>> primeFactors(1l)\n    // []\n    def primeFactors(n : Long) : scala.collection.immutable.List[Long] = {\n        if (n == 2) {\n            return scala.collection.immutable.List.apply([2])\n        } else if (n == 1) {\n            return scala.collection.immutable.List.apply([])\n        } else if (n % 2 == 0) {\n            return primeFactors(n / 2)\n        } else {\n            return primeFactors(3).$plus$plus(primeFactors(n - 1))\n        }\n    }\n\n    // Return the sum of the prime factors of a given number.\n    // >>> primeSum(6l)\n    // 3\n    // >>> primeSum(101l)\n    // 101\n    // >>> primeSum(11l)\n    // 23\n    // >>> primeSum(13441l)\n    // 30241\n    // >>> primeSum(61l)\n    // 4181\n    // >>> primeSum(4l)\n    // 2\n    // >>> primeSum(1l)\n    // 1\n    def primeSum(n : Long",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 1 to (n - 1) / 2) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return a list of all prime numbers less than or equal to n.\n    // >>> primes(10)\n    // (2, 3, 5, 7)\n    // >>> primes(100)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n    // >>> primes(1000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    def primes(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            Seq.empty[Long]\n        } else if (n == 1) {\n            Seq.single(2l)\n        } else {\n            for (i <- 2 to n) {\n                if (isPrime(i)) {\n                    Seq.append(i, primes(n - 1))\n                }\n            }\n        }\n    }\n\n    // Return a list of all prime numbers less than or equal to n.\n    // >>> primes2(10)\n    // (2, 3, 5, 7)\n    // >>> primes2(100)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n    // >>> primes2(1000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    def primes2(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            Seq.empty[Long]\n",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(2l)\n    // [2]\n    // >>> primeFactors(6l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 2, 3]\n    // >>> primeFactors(24l)\n    // [2, 2, 2, 3, 3]\n    // >>> primeFactors(30l)\n    // [2, 5, 3]\n    // >>> primeFactors(60l)\n    // [2, 2, 2, 2, 2, 2, 2, 2, 3, 3]\n    // >>> primeFactors(120l)\n    // [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3]\n    // >>> primeFactors(1260l)\n    // [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to (n - 1) / 2) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [2, 3]\n    // >>> primeFactors(101l)\n    // [101, 11, 7]\n    // >>> primeFactors(11l)\n    // [11]\n    // >>> primeFactors(13441l)\n    // [13441, 61, 7, 5, 3, 2, 1]\n    // >>> primeFactors(61l)\n    // [61, 5, 3, 2, 1]\n    // >>> primeFactors(4l)\n    // []\n    // >>> primeFactors(1l)\n    // []\n    def primeFactors(n : Long) : List[Long] = {\n        if (n == 2) {\n            return List(2)\n        } else if (n == 1) {\n            return List()\n        } else if (n % 2 == 0) {\n            return primeFactors(n / 2)\n        } else {\n            var factors = List()\n            for (i <- 3 to (n - 1) / 2) {\n                if (n % i == 0) {\n                    factors = factors.append(i)\n                    factors = factors.append(n / i)\n                }\n            }\n            return factors\n        }\n    }\n\n    // Return the sum of the prime factors of a given number.\n    // >>> primeSum(6l)\n    // 3\n    // >>> primeSum(101l)\n    // 101\n    // >>> primeSum(11l)\n    // 23\n    // >>> primeSum(13441l)\n    // 30241\n    // >>> primeSum(61l)\n    // 661\n    // >>> primeSum(4l)\n    // 0\n    // >>>",
    "        if (n == 2) {\n            return true\n        }\n        if (n == 1) {\n            return false\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 2) {\n            return false\n        }\n        if (n < 4) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n % 3 == 0) {\n            return false\n        }\n        if (n % 5 == 0) {\n            return false\n        }\n        if (n % 7 == 0) {\n            return false\n        }\n        if (n % 11 == 0) {\n            return false\n        }\n        if (n % 13 == 0) {\n            return false\n        }\n        if (n % 17 == 0) {\n            return false\n        }\n        if (n % 19 == 0) {\n            return false\n        }\n        if (n % 23 == 0) {\n            return false\n        }\n        if (n % 29 == 0) {\n            return false\n        }\n        if (n % 31 == 0) {\n            return false\n        }\n        if (n % 37 == 0) {\n            return false\n        }\n        if (n % 41 == 0) {\n            return false\n        }\n        if (n % 43 == 0) {\n            return false\n        }\n        if (n % 47 == 0) {\n            return false\n        }\n        if (n % 53 == 0) {\n            return false\n        }\n        if (n % 59 == 0) {\n            return false\n        }\n        if (n % 61 == 0) {\n            return false\n        }\n        if (n % 67 == 0) {\n            return false\n        }\n        if (n % 71 == 0) {\n            return false\n        }\n        if (n % 73 == 0) {\n            return false\n        }\n        if (n % 79 == 0) {\n            return false\n        }\n        if (n % 83 == 0) {\n            return false\n        }\n        if (n % 89 == 0) {\n            return false\n        ",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return a list of all prime numbers less than a given number.\n    // >>> primesBelow(10l)\n    // (2, 3, 5, 7)\n    // >>> primesBelow(100l)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n    // >>> primesBelow(1000l)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    // >>> primesBelow(10000l)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6,2)\n    // >>> primeFactors(12l)\n    // (2,2,3)\n    // >>> primeFactors(12l)\n    // (2,3,3)\n    // >>> primeFactors(12l)\n    // (2,3,5)\n    // >>> primeFactors(12l)\n    // (2,3,5,7)\n    // >>> primeFactors(12l)\n    // (2,3,5,7,11)\n    // >>> primeFactors(12l)\n    // (2,3,5,7,11,13)\n    // >>> primeFactors(12l)\n    // (2,3,5,7,11,13,17)\n    // >>> primeFactors(12l)\n    // (2,3,5,7,11,13,17,19)\n    // >>> primeFactors(12l)\n    // (2,3,5,7,11,13,17,19,23)\n    // >>> primeFactors(12l)\n    // (2,3,5,7,11,13,17,19,23,29)\n    // >>> primeFactors(12l)\n    // (2,3,5,7,11,13,17,19,23,29,31)\n    // >>> primeFactors(12l)\n    // (2,3,5,7,11,13,17,19,23,29,31,37)\n    // >>> primeFactors(12l)\n    // (2,3,5,7,11,13,17,19,23,29,31,37,41)\n    // >>> primeFactors",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(2l)\n    // (2)\n    // >>> primeFactors(6l)\n    // (2, 3)\n    // >>> primeFactors(12l)\n    // (2, 3, 5)\n    // >>> primeFactors(13l)\n    // (13, 11)\n    // >>> primeFactors(61l)\n    // (31, 41)\n    // >>> primeFactors(4l)\n    // (2, 2)\n    // >>> primeFactors(1l)\n    // (1)\n    def primeFactors(n : Long) : scala.collection.immutable.Set[Long] = {\n        if (n == 2) {\n            return scala.collection.immutable.Set(2)\n        } else if (n == 1) {\n            return scala.collection.immutable.Set(1)\n        } else if (n % 2 == 0) {\n            return primeFactors(n / 2)\n        } else {\n            var factors = scala.collection.immutable.Set.empty()\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    factors = factors.updated(i)\n                    factors = factors.updated(n / i)\n                }\n            }\n            return factors\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors2(2l)\n    // (2)\n    // >>> primeFactors2(6l)\n    // (2, 3)\n    // >>> primeFactors2(12l)\n    // (2, 3, 5)\n    // >>> primeFactors2(13",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [2, 3]\n    // >>> primeFactors(101l)\n    // [101, 11, 7]\n    // >>> primeFactors(11l)\n    // [11]\n    // >>> primeFactors(13441l)\n    // [13441, 61, 7, 5, 3, 2, 1]\n    // >>> primeFactors(61l)\n    // [61, 5, 3, 2, 1]\n    // >>> primeFactors(4l)\n    // []\n    // >>> primeFactors(1l)\n    // []\n    def primeFactors(n : Long) : Seq[Long] = {\n        if (n == 2) {\n            return Seq(2)\n        } else if (n == 1) {\n            return Seq()\n        } else if (n % 2 == 0) {\n            return primeFactors(n / 2)\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return primeFactors(n / i).append(i)\n                }\n            }\n            return primeFactors(n)\n        }\n    }\n\n    // Return the sum of all prime factors of a given number.\n    // >>> primeSum(6l)\n    // 3\n    // >>> primeSum(101l)\n    // 101\n    // >>> primeSum(11l)\n    // 23\n    // >>> primeSum(13441l)\n    // 13441\n    // >>> primeSum(61l)\n    // 2401\n    // >>> primeSum(4l)\n    // 2\n    // >>> primeSum(1l)\n    // 1",
    "        if (n == 2) {\n            return true\n        } else if (n < 2) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6)\n    // (6, 2)\n    // >>> primeFactors(12)\n    // (2, 2, 3)\n    // >>> primeFactors(12)\n    // (2, 3, 2)\n    // >>> primeFactors(12)\n    // (2, 2, 2, 2, 2)\n    // >>> primeFactors(12)\n    // (2, 2, 2, 2, 2, 2, 2)\n    // >>> primeFactors(12)\n    // (2, 2, 2, 2, 2, 2, 2, 2, 2)\n    // >>> primeFactors(12)\n    // (2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n    // >>> primeFactors(12)\n    // (2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n    // >>> primeFactors(12)\n    // (2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n    // >>> primeFactors(12)\n    // (2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n    // >>> primeFactors(12)\n    // (2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n    // >>> primeFactors(12)\n    // (2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n    // >>> primeFactors(12)\n    // (2,",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6)\n    // [2, 2, 2]\n    // >>> primeFactors(12)\n    // [2, 2, 2, 3]\n    // >>> primeFactors(1)\n    // []\n    // >>> primeFactors(13)\n    // [13]\n    // >>> primeFactors(13 * 13)\n    // [13, 13]\n    // >>> primeFactors(13 * 13 * 13)\n    // [13, 13, 13]\n    // >>> primeFactors(13 * 13 * 13 * 13)\n    // [13, 13, 13, 13]\n    def primeFactors(n : Long) : List[Long] = {\n        if (n == 1) {\n            return Nil\n        } else if (n == 2) {\n            return List(2)\n        } else {\n            var factors = List.empty[Long]\n            for (i <- 2 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    factors = factors.append(i)\n                    factors = factors.append(n / i)\n                }\n            }\n            return factors\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors2(6)\n    // [2, 2, 2]\n    // >>> primeFactors2(12)\n    // [2, 2, 2, 3]\n    // >>> primeFactors2(1)\n    // []\n    // >>> primeFactors2(13)\n    // [13]\n    // >>> primeFactors2(13 * 13)\n    // [13, 13]\n    // >>> primeFactors2(13 * 13 * 13)\n    // [",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6, 2)\n    // >>> primeFactors(13l)\n    // (13, 3)\n    // >>> primeFactors(11l)\n    // (11, 1)\n    // >>> primeFactors(13441l)\n    // (13441, 1)\n    // >>> primeFactors(61l)\n    // (61, 1)\n    // >>> primeFactors(4l)\n    // (4, 2)\n    // >>> primeFactors(1l)\n    // (1, 1)\n    def primeFactors(n : Long) : Tuple2[Long, Long] = {\n        if (n == 2) {\n            return Tuple2(2l, 1l)\n        } else if (n == 1) {\n            return Tuple2(1l, 1l)\n        } else if (n % 2 == 0) {\n            return Tuple2(2l, 1l)\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return Tuple2(i, 1l)\n                }\n            }\n            return Tuple2(n, 1l)\n        }\n    }\n\n    // Return the sum of the prime factors of a given number.\n    // >>> primeSum(6l)\n    // 3\n    // >>> primeSum(13l)\n    // 5\n    // >>> primeSum(11l)\n    // 2\n    // >>> primeSum(13441l)\n    // 13\n    // >>> primeSum(61l)\n    // 3\n    // >>> primeSum(4l)\n    // 2\n    // >>> primeSum(",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6,2)\n    // >>> primeFactors(13l)\n    // (13,3,5)\n    // >>> primeFactors(4l)\n    // (4,2)\n    // >>> primeFactors(1l)\n    // (1,1)\n    // >>> primeFactors(11l)\n    // (11,1)\n    // >>> primeFactors(101l)\n    // (101,1)\n    // >>> primeFactors(61l)\n    // (61,1)\n    // >>> primeFactors(4l)\n    // (4,2)\n    // >>> primeFactors(1l)\n    // (1,1)\n    def primeFactors(n : Long) : scala.collection.immutable.Vector[Long] = {\n        if (n == 2) {\n            Vector(2)\n        } else if (n == 1) {\n            Vector(1)\n        } else if (n % 2 == 0) {\n            Vector(2)\n        } else {\n            var factors = Vector.empty()\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    factors = factors.updated(i)\n                    factors = factors.updated(n / i)\n                }\n            }\n            factors\n        }\n    }\n\n    // Return the prime numbers less than a given number.\n    // >>> primes(6l)\n    // (5,2,3)\n    // >>> primes(13l)\n    // (11,13)\n    // >>> primes(4l)\n    // (3,2)\n    // >>> primes(1l",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6, 2)\n    // >>> primeFactors(12l)\n    // (2, 2, 3)\n    // >>> primeFactors(24l)\n    // (2, 2, 2, 3)\n    // >>> primeFactors(12l)\n    // (2, 2, 3)\n    // >>> primeFactors(1l)\n    // (1)\n    // >>> primeFactors(0l)\n    // (0)\n    def primeFactors(n : Long) : scala.collection.immutable.Vector[Long] = {\n        if (n == 0) {\n            return scala.collection.immutable.Vector.empty()\n        } else if (n == 1) {\n            return scala.collection.immutable.Vector.singleton(1l)\n        } else {\n            var factors = scala.collection.immutable.Vector.empty()\n            for (i <- 2l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    factors = factors.append(i)\n                    factors = factors.append(n / i)\n                }\n            }\n            return factors\n        }\n    }\n\n    // Return the sum of the prime factors of a given number.\n    // >>> primeSum(6l)\n    // 3\n    // >>> primeSum(12l)\n    // 3\n    // >>> primeSum(24l)\n    // 3\n    // >>> primeSum(12l)\n    // 3\n    // >>> primeSum(1l)\n    // 1\n    // >>> primeSum(0l)\n    // 0\n    def primeSum(n : Long) : Long = {\n        ",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6,2)\n    // >>> primeFactors(101l)\n    // (101,11)\n    // >>> primeFactors(11l)\n    // (11,1)\n    // >>> primeFactors(13441l)\n    // (13441,11,7)\n    // >>> primeFactors(61l)\n    // (61,1)\n    // >>> primeFactors(4l)\n    // (4,2)\n    // >>> primeFactors(1l)\n    // (1,1)\n    // >>> primeFactors(0l)\n    // (0,0)\n    def primeFactors(n : Long) : Tuple2[Long, Tuple2[Long, ...]] = {\n        if (n == 0) {\n            (0, (0,))\n        } else if (n == 1) {\n            (1, (1,))\n        } else {\n            for (i <- 2 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    (n / i, (i,))\n                }\n            }\n            (n, ())\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors2(6l)\n    // (6,2)\n    // >>> primeFactors2(101l)\n    // (101,11)\n    // >>> primeFactors2(11l)\n    // (11,1)\n    // >>> primeFactors2(13441l)\n    // (13441,11,7)\n    // >>> primeFactors2(61l)\n    // (61,1)\n    // >>> primeFactors2(",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return a list of all prime numbers less than a given number.\n    // >>> primesBelow(10)\n    // [2, 3, 5, 7]\n    // >>> primesBelow(100)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    // >>> primesBelow(1000)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    // >>> primesBelow(10000)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 6",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2l) {\n            return true\n        }\n        if (n == 1l) {\n            return false\n        }\n        if (n % 2l == 0l) {\n            return false\n        }\n        if (n < 2l) {\n            return false\n        }\n        if (n < 4l) {\n            return true\n        }\n        if (n % 2l == 0l) {\n            return false\n        }\n        if (n < 9l) {\n            return true\n        }\n        if (n % 3l == 0l) {\n            return false\n        }\n        if (n < 27l) {\n            return true\n        }\n        if (n % 3l == 0l) {\n            return false\n        }\n        if (n < 31l) {\n            return true\n        }\n        if (n % 5l == 0l) {\n            return false\n        }\n        if (n < 61l) {\n            return true\n        }\n        if (n % 5l == 0l) {\n            return false\n        }\n        if (n < 91l) {\n            return true\n        }\n        if (n % 7l == 0l) {\n            return false\n        }\n        if (n < 121l) {\n            return true\n        }\n        if (n % 7l == 0l) {\n            return false\n        }\n        if (n < 169l) {\n            return true\n        }\n        if (n % 11l == 0l) {\n            return false\n        }\n        if (n < 241l) {\n            return true\n        }\n        if (n % 11l == 0l) {\n            return false\n        }\n        if (n < 361l) {\n            return true\n        }\n        if (n % 13l == 0l) {\n            return false\n        }\n        if (n < 491l) {\n            return true\n        }\n        if (n % 13l == 0l) {\n            return false\n        }\n        if (n < 661l) {\n            return true\n        }\n        if (n % 17l == 0l) {\n            return",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [2, 3]\n    // >>> primeFactors(101l)\n    // [101, 11, 19]\n    // >>> primeFactors(11l)\n    // [11]\n    // >>> primeFactors(13441l)\n    // [13441, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    // >>> primeFactors(61l)\n    // [61, 89, 137]\n    // >>> primeFactors(4l)\n    // []\n    // >>> primeFactors(1l)\n    // []\n    def primeFactors(n : Long) : Seq[Long] = {\n        if (n == 2) {\n            Seq(2)\n        } else if (n == 1) {\n            Seq()\n        } else if (n % 2 == 0) {\n            Seq(2)\n        } else {\n            var factors = new java.util.ArrayList()\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    factors.add(i)\n                    factors.add(n / i)\n                }\n            }\n            factors.add(n)\n            scala.collection.immutable.List.fromIterator(factors.iterator()).toSeq()\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors2(6l)\n    // [2, 3]\n    // >>> primeFactors2(101l)\n    // [101, 11, 19]\n    // >>> primeFact",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6,2)\n    // >>> primeFactors(13l)\n    // (13,3,5)\n    // >>> primeFactors(4l)\n    // (4,2)\n    // >>> primeFactors(1l)\n    // (1,1)\n    // >>> primeFactors(0l)\n    // (0,0)\n    def primeFactors(n : Long) : scala.collection.immutable.Vector[Long] = {\n        if (n == 0) {\n            scala.collection.immutable.Vector.empty()\n        } else if (n == 1) {\n            scala.collection.immutable.Vector.single(1)\n        } else {\n            for (i <- 2 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    scala.collection.immutable.Vector.single(i)\n                }\n            }\n            scala.collection.immutable.Vector.single(n)\n        }\n    }\n\n    // Return the prime numbers less than a given number.\n    // >>> primes(6l)\n    // (5,2,3)\n    // >>> primes(13l)\n    // (11,13)\n    // >>> primes(4l)\n    // (3,2)\n    // >>> primes(1l)\n    // (1)\n    // >>> primes(0l)\n    // ()\n    def primes(n : Long) : scala.collection.immutable.Vector[Long] = {\n        if (n == 0) {\n            scala.collection.immutable.Vector.empty()\n        } else if (n == 1) {\n            ",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 1 to (n - 1) / 2) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n < 2) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n < 2) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return a list of all prime numbers less than a given number.\n    // >>> primesBelow(10)\n    // [2, 3, 5, 7]\n    // >>> primesBelow(100)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    // >>> primesBelow(100)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    def primesBelow(n : Long) : List[Long] = {\n        if (n == 2) {\n            List(2)\n        } else if (n == 1) {\n            List(1)\n        } else {\n            var primes = List(2)\n            for (i <- 3 to Math.sqrt(n)) {\n                if (isPrime(i)) {\n                    primes = primes.append(i)\n                }\n            }\n            primes\n        }\n    }\n\n    // Return a list of all prime numbers less than a given number.\n    // >>> primesBelow(100)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    def primesBelow2(n : Long) : List[Long] = {\n        if (n == 2) {\n            List(2)\n        } else if (n == 1) {\n            List(1)\n        } else {\n            var primes = List(2)\n            for (i <- 3 to Math.sqrt(n)) {\n                if",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime2((6l))\n    // (false)\n    // >>> isPrime2((101l))\n    // (true)\n    // >>> isPrime2((11l))\n    // (true)\n    // >>> isPrime2((13441l))\n    // (true)\n    // >>> isPrime2((61l))\n    // (true)\n    // >>> isPrime2((4l))\n    // (false)\n    // >>> isPrime2((1l))\n    // (false)\n    def isPrime2(n : Long) : Boolean = {\n        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime3((6l))\n    // (false)\n    // >>> isPrime3((101l))\n    // (true)\n    // >>> isPrime3((11l))\n    // (true)\n    // >>> isPrime3((13441l))\n    // (true)\n    // >>> isPrime3((61l))\n    // (true)\n    // >>> isPrime3((4l))\n    // (false)\n    // >>> isPrime3((1l))\n    // (false)\n    def isPrime3(n : Long) : Boolean = {\n        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6)\n    // [2, 3]\n    // >>> primeFactors(4)\n    // [2]\n    // >>> primeFactors(1)\n    // []\n    // >>> primeFactors(13441)\n    // [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    def primeFactors(n : Long) : Seq[Long] = {\n        if (n == 2) {\n            return Seq(2)\n        } else if (n == 1) {\n            return Seq()\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return primeFactors(n / i)\n                }\n            }\n            return primeFactors(n)\n        }\n    }\n\n    // Return the sum of the prime factors of a given number.\n    // >>> primeFactorSum(6)\n    // 3\n    // >>> primeFactorSum(4)\n    // 2\n    // >>> primeFactorSum(1)\n    // 0\n    // >>> primeFactorSum(13441)\n    // 7\n    def primeFactorSum(n : Long) : Long = {\n        if (n == 2) {\n            return 2\n        } else if (n == 1) {\n            return 0\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return primeFactorSum(n / i) + i\n                }\n            }\n            return primeFactorSum(n)\n        }\n    }\n\n",
    "        if (n == 2) {\n            return true\n        } else if (n < 2) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(2l)\n    // (2)\n    // >>> primeFactors(6l)\n    // (2, 3)\n    // >>> primeFactors(12l)\n    // (2, 3, 5)\n    // >>> primeFactors(13441l)\n    // (2, 3, 5, 7)\n    // >>> primeFactors(61l)\n    // (2, 3, 5, 7, 11)\n    // >>> primeFactors(4l)\n    // (2, 2)\n    // >>> primeFactors(1l)\n    // (1)\n    def primeFactors(n : Long) : scala.collection.immutable.Set[Long] = {\n        if (n < 2) {\n            return scala.collection.immutable.Set.empty()\n        } else if (n == 2) {\n            return scala.collection.immutable.Set.of(2)\n        } else {\n            var factors = scala.collection.immutable.Set.empty()\n            for (i <- 2 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    factors = factors.updated(i)\n                    factors = factors.updated(n / i)\n                }\n            }\n            return factors\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors2(2l)\n    // (2)\n    // >>> primeFactors2(6l)\n    // (2, 3)\n    // >>> primeFactors2(12l)\n    // (2, 3, 5)\n    // >>> primeFactors2(13441l)\n    // (2, 3, 5,",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6,2)\n    // >>> primeFactors(13l)\n    // (13,3,5)\n    // >>> primeFactors(4l)\n    // (4,2)\n    // >>> primeFactors(1l)\n    // (1,1)\n    // >>> primeFactors(11l)\n    // (11,1)\n    // >>> primeFactors(101l)\n    // (101,1)\n    // >>> primeFactors(61l)\n    // (61,1)\n    // >>> primeFactors(4l)\n    // (4,2)\n    // >>> primeFactors(1l)\n    // (1,1)\n    def primeFactors(n : Long) : scala.collection.immutable.Vector[Long] = {\n        if (n == 2) {\n            Vector(2)\n        } else if (n == 1) {\n            Vector(1)\n        } else if (n % 2 == 0) {\n            Vector(2, n / 2)\n        } else {\n            var factors = Vector(1, n)\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    factors = factors.updated(i)\n                    factors = factors.updated(n / i)\n                }\n            }\n            factors\n        }\n    }\n\n    // Return the prime numbers less than a given number.\n    // >>> primes(6l)\n    // (2,3,5)\n    // >>> primes(13l)\n    // (2,3,5,7,11)\n    // >>> primes(4l)\n    // (",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        }\n        if (n == 1) {\n            return false\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 2) {\n            return false\n        }\n        if (n < 4) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 6) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 8) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 16) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 32) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 64) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 128) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 256) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 512) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 1024) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 2048) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 4096) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 8192) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (",
    "        if (n == 2l) {\n            return true\n        } else if (n == 1l) {\n            return false\n        } else if (n % 2l == 0l) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(2l)\n    // (2)\n    // >>> primeFactors(6l)\n    // (2, 3)\n    // >>> primeFactors(12l)\n    // (2, 3, 5)\n    // >>> primeFactors(13l)\n    // (13, 11)\n    // >>> primeFactors(61l)\n    // (31, 41)\n    // >>> primeFactors(4l)\n    // (2, 2)\n    // >>> primeFactors(1l)\n    // ()\n    def primeFactors(n : Long) : scala.collection.immutable.Set[Long] = {\n        if (n == 2) {\n            return scala.collection.immutable.Set(2)\n        } else if (n == 1) {\n            return scala.collection.immutable.Set()\n        } else {\n            var factors = scala.collection.mutable.Set[Long]()\n            for (i <- 2 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    factors.add(i)\n                    factors.add(n / i)\n                }\n            }\n            return factors.toSet()\n        }\n    }\n\n    // Return the prime numbers less than a given number.\n    // >>> primes(10l)\n    // (2, 3, 5, 7)\n    // >>> primes(100l)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n    // >>> primes(1000l)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return a list of all prime numbers less than a given number.\n    // >>> primesBelow(10)\n    // [2, 3, 5, 7]\n    // >>> primesBelow(100)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    // >>> primesBelow(1000)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    // >>> primesBelow(10000)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 6",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6, 2)\n    // >>> primeFactors(13l)\n    // (13, 3)\n    // >>> primeFactors(4l)\n    // (4, 2)\n    // >>> primeFactors(1l)\n    // (1, 1)\n    // >>> primeFactors(11l)\n    // (11, 1)\n    // >>> primeFactors(61l)\n    // (61, 1)\n    // >>> primeFactors(4l)\n    // (4, 2)\n    // >>> primeFactors(1l)\n    // (1, 1)\n    def primeFactors(n : Long) : Tuple2[Long, Long] = {\n        if (n == 2) {\n            (2, 1)\n        } else if (n == 1) {\n            (1, 1)\n        } else if (n % 2 == 0) {\n            (2, 1)\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    (i, 1)\n                }\n            }\n            (n, 1)\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6, 2)\n    // >>> primeFactors(13l)\n    // (13, 3)\n    // >>> primeFactors(4l)\n    // (4, 2)\n    // >>> primeFactors(1l)\n    // (1, 1)\n    // >>> primeFactors(11l)\n    // (11, 1)\n    // >>> primeFactors(61l)\n    // (61",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to (n - 1) / 2) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(2l)\n    // (2)\n    // >>> primeFactors(6l)\n    // (2, 3)\n    // >>> primeFactors(12l)\n    // (2, 3, 5)\n    // >>> primeFactors(13l)\n    // (13, 11)\n    // >>> primeFactors(61l)\n    // (31, 41)\n    // >>> primeFactors(4l)\n    // (2, 2)\n    // >>> primeFactors(1l)\n    // (1)\n    def primeFactors(n : Long) : scala.collection.immutable.Vector[Long] = {\n        if (n == 2) {\n            return scala.collection.immutable.Vector.apply([2])\n        } else if (n == 1) {\n            return scala.collection.immutable.Vector.apply([1])\n        } else {\n            var factors = scala.collection.mutable.Vector[Long]()\n            for (i <- 3 to (n - 1) / 2) {\n                if (n % i == 0) {\n                    factors = factors.append(i)\n                    factors = factors.append(n / i)\n                }\n            }\n            return factors.toVector()\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors2(2l)\n    // (2)\n    // >>> primeFactors2(6l)\n    // (2, 3)\n    // >>> primeFactors2(12l)\n    // (2, 3, 5)\n    // >>> primeFactors2(13l)\n    // (13, 11)\n    // >>> prime",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return a list of all prime numbers less than or equal to n.\n    // >>> primes(10)\n    // (2, 3, 5, 7)\n    // >>> primes(100)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n    // >>> primes(1000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    // >>> primes(10000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 6",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6,2,3)\n    // >>> primeFactors(12l)\n    // (2,3,3,2)\n    // >>> primeFactors(13l)\n    // (13,11,7)\n    // >>> primeFactors(61l)\n    // (61,41,31,23,17,13,11,7,5,3,2,1)\n    // >>> primeFactors(4l)\n    // (4,2,2)\n    // >>> primeFactors(1l)\n    // (1)\n    def primeFactors(n : Long) : scala.collection.immutable.Vector[Long] = {\n        if (n == 2) {\n            Vector(2)\n        } else if (n == 1) {\n            Vector(1)\n        } else if (n % 2 == 0) {\n            Vector(2, n / 2)\n        } else {\n            var factors = Vector(1, n)\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    factors = factors.updated(i)\n                    factors = factors.updated(n / i)\n                }\n            }\n            factors\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6,2,3)\n    // >>> primeFactors(12l)\n    // (2,3,3,2)\n    // >>> primeFactors(13l)\n    // (13,11,7)\n    // >>> primeFactors(61l)\n    // (61,41,31,23,17",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6)\n    // [2, 3]\n    // >>> primeFactors(12)\n    // [2, 2, 3]\n    // >>> primeFactors(13)\n    // [13]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    // >>> primeFactors(1337)\n    ",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [6]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(18l)\n    // [2, 3, 3, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    ",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the number of prime numbers less than or equal to a given number.\n    // >>> primes(10)\n    // (2)\n    // >>> primes(100)\n    // (3)\n    // >>> primes(1000)\n    // (3)\n    // >>> primes(10000)\n    // (5)\n    // >>> primes(100000)\n    // (11)\n    // >>> primes(1000000)\n    // (101)\n    def primes(n : Long) : Long = {\n        if (n == 2) {\n            2\n        } else if (n == 3) {\n            3\n        } else if (n == 5) {\n            5\n        } else if (n == 7) {\n            7\n        } else if (n == 11) {\n            11\n        } else if (n == 13) {\n            13\n        } else if (n == 17) {\n            17\n        } else if (n == 19) {\n            19\n        } else if (n == 23) {\n            23\n        } else if (n == 29) {\n            29\n        } else if (n == 31) {\n            31\n        } else if (n == 37) {\n            37\n        } else if (n == 41) {\n            41\n        } else if (n == 43) {\n            43\n        } else if (n == 47) {\n            47\n        } else if (n == 53) {\n            53\n        } else if (n == 59) {\n            59\n        } else if (n == 61) {\n            61\n        } else if (n == 67) {\n            67\n        } else if (n == 71) {\n            71\n        } else if (n == 73) {\n            73\n        } else if",
    "        if (n == 2l) {\n            return true\n        } else if (n == 1l) {\n            return false\n        } else if (n % 2l == 0l) {\n            return false\n        } else {\n            for (i <- 1l to (n - 1l)) {\n                if (n % i == 0l) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(2l)\n    // (2)\n    // >>> primeFactors(6l)\n    // (2, 3)\n    // >>> primeFactors(12l)\n    // (2, 3, 5)\n    // >>> primeFactors(13441l)\n    // (2, 7, 29, 67, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677,",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        }\n        if (n == 1) {\n            return false\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 2) {\n            return false\n        }\n        if (n < 4) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 6) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 8) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 16) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 32) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 64) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 128) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 256) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 512) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 1024) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 2048) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 4096) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 8192) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime2((6l))\n    // (false)\n    // >>> isPrime2((101l))\n    // (true)\n    // >>> isPrime2((11l))\n    // (true)\n    // >>> isPrime2((13441l))\n    // (true)\n    // >>> isPrime2((61l))\n    // (true)\n    // >>> isPrime2((4l))\n    // (false)\n    // >>> isPrime2((1l))\n    // (false)\n    def isPrime2(n : Long) : Boolean = {\n        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime3((6l))\n    // (false)\n    // >>> isPrime3((101l))\n    // (true)\n    // >>> isPrime3((11l))\n    // (true)\n    // >>> isPrime3((13441l))\n    // (true)\n    // >>> isPrime3((61l))\n    // (true)\n    // >>> isPrime3((4l))\n    // (false)\n    // >>> isPrime3((1l))\n    // (false)\n    def isPrime3(n : Long) : Boolean = {\n        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n",
    "        if (n == 2) {\n            return true\n        }\n        if (n == 1) {\n            return false\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 2) {\n            return false\n        }\n        if (n < 4) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 6) {\n            return true\n        }\n        if (n % 3 == 0) {\n            return false\n        }\n        if (n < 9) {\n            return true\n        }\n        if (n % 5 == 0) {\n            return false\n        }\n        if (n < 25) {\n            return true\n        }\n        if (n % 7 == 0) {\n            return false\n        }\n        if (n < 49) {\n            return true\n        }\n        if (n % 11 == 0) {\n            return false\n        }\n        if (n < 121) {\n            return true\n        }\n        if (n % 13 == 0) {\n            return false\n        }\n        if (n < 169) {\n            return true\n        }\n        if (n % 17 == 0) {\n            return false\n        }\n        if (n < 257) {\n            return true\n        }\n        if (n % 19 == 0) {\n            return false\n        }\n        if (n < 321) {\n            return true\n        }\n        if (n % 23 == 0) {\n            return false\n        }\n        if (n < 491) {\n            return true\n        }\n        if (n % 29 == 0) {\n            return false\n        }\n        if (n < 661) {\n            return true\n        }\n        if (n % 31 == 0) {\n            return false\n        }\n        if (n < 1009) {\n            return true\n        }\n        if (n % 37 == 0) {\n            return false\n        }\n        if (n < 1601) {\n            return true\n        }\n        if (n % 41 == 0) {\n            return false\n        }\n",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6)\n    // [2, 3]\n    // >>> primeFactors(13)\n    // [13, 5, 7]\n    // >>> primeFactors(4)\n    // []\n    // >>> primeFactors(1)\n    // []\n    def primeFactors(n : Long) : Seq[Long] = {\n        if (n == 2) {\n            Seq(2)\n        } else if (n == 1) {\n            Seq()\n        } else if (n % 2 == 0) {\n            Seq(2)\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    Seq(i, n / i)\n                }\n            }\n        }\n    }\n\n    // Return the prime numbers less than a given number.\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    // >>> primes(100)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    // >>> primes(1000)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    def primes(n : Long) : Seq[Long] = {\n        if (n == 2) {\n            Seq(2)\n        } else if (n == 1) {\n            Seq()\n        } else if (n % 2 == 0) {\n            Seq(2)\n        } else {\n            for (i <- 3 to Math.sqrt",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the largest prime factor of a given number.\n    // >>> largestPrimeFactor(6l)\n    // (3l)\n    // >>> largestPrimeFactor(12l)\n    // (2l)\n    // >>> largestPrimeFactor(13l)\n    // (13l)\n    // >>> largestPrimeFactor(14l)\n    // (2l)\n    // >>> largestPrimeFactor(15l)\n    // (3l)\n    // >>> largestPrimeFactor(16l)\n    // (2l)\n    // >>> largestPrimeFactor(17l)\n    // (17l)\n    // >>> largestPrimeFactor(19l)\n    // (19l)\n    // >>> largestPrimeFactor(20l)\n    // (2l)\n    // >>> largestPrimeFactor(21l)\n    // (3l)\n    // >>> largestPrimeFactor(22l)\n    // (2l)\n    // >>> largestPrimeFactor(23l)\n    // (23l)\n    def largestPrimeFactor(n : Long) : Long = {\n        if (n == 1) {\n            return 1l\n        } else if (n == 2) {\n            return 2l\n        } else if (n % 2 == 0) {\n            return 2l\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return i\n                }\n            }\n            return n\n        }\n    }\n\n    // Return the sum of all prime factors of a given number.\n    // >>> sumOfPrimeFactors(6l)\n    // (3l)\n    // >>> sumOfPrimeFactors(12l)\n    // (2l)\n    // >>> sumOfPrimeFactors(13l)\n    ",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return a list of all prime numbers less than a given number.\n    // >>> primes(10)\n    // (2, 3, 5, 7)\n    // >>> primes(100)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n    // >>> primes(1000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    // >>> primes(10000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return a list of all prime numbers less than a given number.\n    // >>> primes(10)\n    // (2, 3, 5, 7)\n    // >>> primes(100)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n    // >>> primes(1000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    // >>> primes(10000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653,",
    "        if (n == 2l) {\n            return true\n        } else if (n == 1l) {\n            return false\n        } else if (n % 2l == 0l) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [2, 3]\n    // >>> primeFactors(101l)\n    // [101, 11]\n    // >>> primeFactors(11l)\n    // [11]\n    // >>> primeFactors(13441l)\n    // [13441, 61]\n    // >>> primeFactors(61l)\n    // [61]\n    // >>> primeFactors(4l)\n    // []\n    // >>> primeFactors(1l)\n    // []\n    def primeFactors(n : Long) : scala.collection.immutable.List[Long] = {\n        if (n == 2) {\n            scala.collection.immutable.List[Long](2)\n        } else if (n == 1) {\n            scala.collection.immutable.List[Long](1)\n        } else if (n % 2 == 0) {\n            scala.collection.immutable.List[Long](2)\n        } else {\n            var factors = scala.collection.immutable.List[Long](1)\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    factors = factors.append(i)\n                    factors = factors.append(n / i)\n                }\n            }\n            factors\n        }\n    }\n\n    // Return the sum of all prime factors of a given number.\n    // >>> primeSum(6l)\n    // 3\n    // >>> primeSum(101l)\n    // 101\n    // >>> primeSum(11l)\n    // 23\n    // >>> primeSum(13441l)\n    // 30241\n    // >>> primeSum(61l)\n    //",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n < 2) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2l) {\n            return true\n        } else if (n == 1l) {\n            return false\n        } else if (n % 2l == 0l) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        }\n        if (n == 1) {\n            return false\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 2) {\n            return false\n        }\n        if (n < 4) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n % 3 == 0) {\n            return false\n        }\n        if (n % 5 == 0) {\n            return false\n        }\n        if (n % 7 == 0) {\n            return false\n        }\n        if (n % 11 == 0) {\n            return false\n        }\n        if (n % 13 == 0) {\n            return false\n        }\n        if (n % 17 == 0) {\n            return false\n        }\n        if (n % 19 == 0) {\n            return false\n        }\n        if (n % 23 == 0) {\n            return false\n        }\n        if (n % 29 == 0) {\n            return false\n        }\n        if (n % 31 == 0) {\n            return false\n        }\n        if (n % 37 == 0) {\n            return false\n        }\n        if (n % 41 == 0) {\n            return false\n        }\n        if (n % 43 == 0) {\n            return false\n        }\n        if (n % 47 == 0) {\n            return false\n        }\n        if (n % 53 == 0) {\n            return false\n        }\n        if (n % 59 == 0) {\n            return false\n        }\n        if (n % 61 == 0) {\n            return false\n        }\n        if (n % 67 == 0) {\n            return false\n        }\n        if (n % 71 == 0) {\n            return false\n        }\n        if (n % 73 == 0) {\n            return false\n        }\n        if (n % 79 == 0) {\n            return false\n        }\n        if (n % 83 == 0) {\n            return false\n        }\n        if (n % 89 == 0) {\n            return false\n        ",
    "        if (n == 2) {\n            return true\n        } else if (n < 2) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6)\n    // [2, 3]\n    // >>> primeFactors(12)\n    // [2, 2, 3]\n    // >>> primeFactors(13)\n    // [13]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    // >>> primeFactors(1337)\n    // [13, 37]\n    def primeFactors(n : Long) : scala.collection.immutable.List[Long] = {\n        if (n == 2) {\n            return scala.collection.immutable.List.apply([2])\n        } else if (n == 3) {\n            return scala.collection.immutable.List.apply([3])\n        } else if (n == 5) {\n            return scala.collection.immutable.List.apply([5])\n        } else if (n == 7) {\n            return scala.collection.immutable.List.apply([7])\n        } else if (n == 11) {\n            return scala.collection.immutable.List.apply([11])\n        } else if (n == 13) {\n            return scala.collection.immutable.List.apply([13])\n        } else if (n == 17) {\n            return scala.collection.immutable.List.apply([17])\n        } else if (n == 19) {\n            return scala.collection.immutable.List.apply([19])\n        } else if (n == 23) {\n            return scala.collection.immutable.List.apply([23])\n        } else if (n == 29) {\n            return scala.collection.immutable.List.apply([29])\n        } else if (n ==",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return a list of all prime numbers less than a given number.\n    // >>> primesBelow(10)\n    // (2, 3, 5, 7)\n    // >>> primesBelow(100)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n    // >>> primesBelow(100000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    def primesBelow(n : Long) : List[Long] = {\n        if (n == 2) {\n            List(2)\n        } else if (n == 1) {\n            List()\n        } else {\n            var primes = List(2)\n            var i = 3\n            while (i < n) {\n                if (isPrime(i)) {\n                    primes = primes.append(i)\n                }\n                i = i + 2\n            }\n            primes\n        }\n    }\n\n    // Return a list of all prime numbers less than or equal to a given number.\n    // >>> primesBelowOrEqual(10)\n    // (2, 3, 5, 7)\n    // >>> primesBelowOrEqual(100)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n    // >>> primesBelowOrEqual(100000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    def primesBelowOrEqual(n :",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [6]\n    // >>> primeFactors(13l)\n    // [13, 5]\n    // >>> primeFactors(23l)\n    // [23, 11, 7]\n    // >>> primeFactors(29l)\n    // [29, 13, 11, 7]\n    // >>> primeFactors(37l)\n    // [37, 19, 13, 11, 7]\n    // >>> primeFactors(41l)\n    // [41, 23, 19, 13, 11, 7]\n    // >>> primeFactors(43l)\n    // [43, 23, 19, 13, 11, 7]\n    // >>> primeFactors(47l)\n    // [47, 23, 19, 13, 11, 7]\n    // >>> primeFactors(53l)\n    // [53, 29, 23, 19, 13, 11, 7]\n    // >>> primeFactors(59l)\n    // [59, 29, 23, 19, 13, 11, 7]\n    // >>> primeFactors(61l)\n    // [61, 29, 23, 19, 13, 11, 7]\n    // >>> primeFactors(67l)\n    // [67, 31, 29, 23, 19, 13, 11, 7]\n    // >>> primeFactors(71l)\n    // [71, 37, 31, 29, 23, 19, 13, 11, 7]\n    // >>> primeFactors(73l)\n    // [73, 37, 31, 29, 23, 19, 13, 11, 7]\n    // >>> primeFactors(79l)\n    // [79, 37, 31, 29, 23, 19, 13, 11, 7]",
    "        if (n == 2) {\n            return true\n        } else if (n < 2) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6, 2)\n    // >>> primeFactors(12l)\n    // (2, 2, 3)\n    // >>> primeFactors(13l)\n    // (13, 1)\n    // >>> primeFactors(15l)\n    // (3, 1, 5)\n    // >>> primeFactors(61l)\n    // (61, 1)\n    // >>> primeFactors(4l)\n    // (4, 1)\n    // >>> primeFactors(1l)\n    // (1, 1)\n    def primeFactors(n : Long) : scala.collection.immutable.Vector[Long] = {\n        if (n == 2) {\n            return scala.collection.immutable.Vector.empty()\n        } else if (n < 2) {\n            return scala.collection.immutable.Vector.empty()\n        } else if (n % 2 == 0) {\n            return primeFactors(n / 2)\n        } else {\n            var factors = scala.collection.immutable.Vector.empty()\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    factors = factors.append(i)\n                    factors = factors.append(n / i)\n                }\n            }\n            return factors\n        }\n    }\n\n    // Return the prime numbers less than a given number.\n    // >>> primes(6l)\n    // (5, 2, 3)\n    // >>> primes(12l)\n    // (11, 2, 3)\n    // >>> primes(13l)\n    // (13, 1)\n    // >>> primes(",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 1 until (n - 1) / 2) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the number of prime numbers less than or equal to a given number.\n    // >>> primes(0)\n    // 0\n    // >>> primes(1)\n    // 0\n    // >>> primes(2)\n    // 1\n    // >>> primes(3)\n    // 2\n    // >>> primes(4)\n    // 3\n    // >>> primes(5)\n    // 4\n    // >>> primes(6)\n    // 5\n    // >>> primes(7)\n    // 6\n    // >>> primes(8)\n    // 7\n    // >>> primes(9)\n    // 8\n    // >>> primes(10)\n    // 9\n    // >>> primes(11)\n    // 10\n    // >>> primes(12)\n    // 11\n    // >>> primes(13)\n    // 12\n    // >>> primes(14)\n    // 13\n    // >>> primes(15)\n    // 14\n    // >>> primes(16)\n    // 15\n    // >>> primes(17)\n    // 16\n    // >>> primes(18)\n    // 17\n    // >>> primes(19)\n    // 18\n    // >>> primes(20)\n    // 19\n    // >>> primes(21)\n    // 20\n    // >>> primes(22)\n    // 21\n    // >>> primes(23)\n    // 22\n    // >>> primes(24)\n    // 23\n    // >>> primes(25)\n    // 24\n    // >>> primes(26)\n    // 25\n    // >>> primes(27)\n    // 26\n    // >>> primes(28)\n    // 27\n    // >>> primes(29)\n    // 28\n    // >>> primes(30)\n    //",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(2l)\n    // (2)\n    // >>> primeFactors(6l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3,5)\n    // >>> primeFactors(13441l)\n    // (11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97)\n    // >>> primeFactors(61l)\n    // (61,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,8",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the largest prime factor of a given number.\n    // >>> getPrimeFactor(6)\n    // (2)\n    // >>> getPrimeFactor(12)\n    // (2)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)\n    // (2l)\n    // >>> getPrimeFactor(12l)",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [6]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime2((6l))\n    // (false)\n    // >>> isPrime2((101l))\n    // (true)\n    // >>> isPrime2((11l))\n    // (true)\n    // >>> isPrime2((13441l))\n    // (true)\n    // >>> isPrime2((61l))\n    // (true)\n    // >>> isPrime2((4l))\n    // (false)\n    // >>> isPrime2((1l))\n    // (false)\n    def isPrime2(n : Long) : Boolean = {\n        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime3((6l))\n    // (false)\n    // >>> isPrime3((101l))\n    // (true)\n    // >>> isPrime3((11l))\n    // (true)\n    // >>> isPrime3((13441l))\n    // (true)\n    // >>> isPrime3((61l))\n    // (true)\n    // >>> isPrime3((4l))\n    // (false)\n    // >>> isPrime3((1l))\n    // (false)\n    def isPrime3(n : Long) : Boolean = {\n        if (n == 2) {\n            true\n        } else if (n == 1) {\n            ",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(2l)\n    // (2)\n    // >>> primeFactors(6l)\n    // (2, 3)\n    // >>> primeFactors(12l)\n    // (2, 3, 5)\n    // >>> primeFactors(24l)\n    // (2, 3, 5, 7)\n    // >>> primeFactors(60l)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23)\n    // >>> primeFactors(100l)\n    // (2, 5, 7, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    // >>> primeFactors(1000l)\n    // (2, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 5",
    "        if (n == 2l) {\n            return true\n        } else if (n == 1l) {\n            return false\n        } else if (n % 2l == 0l) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6, 2)\n    // >>> primeFactors(12l)\n    // (2, 2, 3)\n    // >>> primeFactors(12l)\n    // (2, 3, 2)\n    // >>> primeFactors(12l)\n    // (2, 2, 2, 2)\n    // >>> primeFactors(12l)\n    // (2, 2, 2, 3)\n    // >>> primeFactors(12l)\n    // (2, 2, 2, 2, 2)\n    // >>> primeFactors(12l)\n    // (2, 2, 2, 2, 2, 2)\n    // >>> primeFactors(12l)\n    // (2, 2, 2, 2, 2, 2, 2)\n    // >>> primeFactors(12l)\n    // (2, 2, 2, 2, 2, 2, 2, 2)\n    // >>> primeFactors(12l)\n    // (2, 2, 2, 2, 2, 2, 2, 2, 2)\n    // >>> primeFactors(12l)\n    // (2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n    // >>> primeFactors(12l)\n    // (2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n    // >>> primeFactors(12l)\n    // (2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n    // >>> primeFactors(12l)\n    // (2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [6]\n    // >>> primeFactors(12l)\n    // [2, 3]\n    // >>> primeFactors(13l)\n    // [13]\n    // >>> primeFactors(14l)\n    // [2, 7]\n    // >>> primeFactors(15l)\n    // [3, 5]\n    // >>> primeFactors(16l)\n    // [2, 2, 2, 2]\n    // >>> primeFactors(17l)\n    // [17]\n    // >>> primeFactors(18l)\n    // [2, 2, 2, 2, 2]\n    // >>> primeFactors(19l)\n    // [19]\n    // >>> primeFactors(20l)\n    // [2, 2, 2, 2, 2, 2]\n    // >>> primeFactors(21l)\n    // [3, 7]\n    // >>> primeFactors(22l)\n    // [2, 2, 2, 2, 2, 2]\n    // >>> primeFactors(23l)\n    // [23]\n    // >>> primeFactors(24l)\n    // [2, 2, 2, 2, 2, 2, 2]\n    // >>> primeFactors(25l)\n    // [5, 5]\n    // >>> primeFactors(26l)\n    // [2, 2, 2, 2, 2, 2, 2]\n    // >>> primeFactors(27l)\n    // [3, 3, 3]\n    // >>> primeFactors(28l)\n    // [2, 2, 2, 2, 2, 2, 2]\n    // >>> primeFactors(29l)\n    //",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return a list of all prime numbers less than a given number.\n    // >>> primesBelow(10)\n    // [2, 3, 5, 7]\n    // >>> primesBelow(100)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    // >>> primesBelow(1000)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    // >>> primesBelow(10000)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653,",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return a list of all prime numbers less than a given number.\n    // >>> primesBelow(10l)\n    // [2, 3, 5, 7]\n    // >>> primesBelow(100l)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    // >>> primesBelow(1000l)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    // >>> primesBelow(10000l)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647",
    "        if (n == 2l) {\n            return true\n        } else if (n == 1l) {\n            return false\n        } else if (n % 2l == 0l) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 1 to (n - 1) / 2) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n < 2) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(12)\n    // (2, 2, 3)\n    // >>> primeFactors(6)\n    // (2, 3)\n    // >>> primeFactors(1)\n    // ()\n    def primeFactors(n : Long) : scala.collection.immutable.Vector[Long] = {\n        if (n == 0) {\n            return scala.collection.immutable.Vector.empty()\n        } else if (n == 1) {\n            return scala.collection.immutable.Vector.empty()\n        } else {\n            var factors = scala.collection.immutable.Vector.empty()\n            for (i <- 2 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    factors = factors.append(i)\n                    factors = factors.append(n / i)\n                }\n            }\n            return factors\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(12)\n    // (2, 2, 3)\n    // >>> primeFactors(6)\n    // (2, 3)\n    // >>> primeFactors(1)\n    // ()\n    def primeFactors(n : Long) : scala.collection.immutable.Vector[Long] = {\n        if (n == 0) {\n            return scala.collection.immutable.Vector.empty()\n        } else if (n == 1) {\n            return scala.collection.immutable.Vector.empty()\n        } else {\n            var factors = scala.collection.immutable.Vector.empty()\n            for (i <- 2 to Math.sqrt(n)) {\n                if (n % i == 0",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the number of prime numbers less than or equal to a given number.\n    // >>> countPrimes(0)\n    // 0\n    // >>> countPrimes(1)\n    // 0\n    // >>> countPrimes(2)\n    // 1\n    // >>> countPrimes(3)\n    // 2\n    // >>> countPrimes(4)\n    // 2\n    // >>> countPrimes(5)\n    // 3\n    // >>> countPrimes(6)\n    // 3\n    // >>> countPrimes(7)\n    // 4\n    // >>> countPrimes(8)\n    // 4\n    // >>> countPrimes(9)\n    // 5\n    // >>> countPrimes(10)\n    // 5\n    def countPrimes(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else if (n == 1) {\n            0\n        } else if (n == 2) {\n            1\n        } else if (n == 3) {\n            2\n        } else if (n == 4) {\n            2\n        } else if (n == 5) {\n            3\n        } else if (n == 6) {\n            3\n        } else if (n == 7) {\n            4\n        } else if (n == 8) {\n            4\n        } else if (n == 9) {\n            5\n        } else if (n == 10) {\n            5\n        } else {\n            for (i <- 11 to n) {\n                if (isPrime(i)) {\n                    countPrimes(n) + 1\n                }\n            }\n        }\n    }\n\n    // Return the sum of the primes less than or equal to a given number.\n    // >>> sumPrimes(0)\n    // 0",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6,2,3)\n    // >>> primeFactors(13l)\n    // (13,5,7)\n    // >>> primeFactors(4l)\n    // (4,2,2)\n    // >>> primeFactors(1l)\n    // (1,1)\n    // >>> primeFactors(11l)\n    // (11,1)\n    // >>> primeFactors(13441l)\n    // (13441,1,1)\n    // >>> primeFactors(61l)\n    // (61,1)\n    // >>> primeFactors(4l)\n    // (4,2,2)\n    // >>> primeFactors(1l)\n    // (1,1)\n    def primeFactors(n : Long) : scala.collection.immutable.Vector[Long] = {\n        if (n == 2) {\n            Vector(2)\n        } else if (n == 1) {\n            Vector(1)\n        } else if (n % 2 == 0) {\n            Vector(2, n / 2)\n        } else {\n            var factors = Vector(1, n)\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    factors = factors.updated(i)\n                    factors = factors.updated(n / i)\n                }\n            }\n            factors\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6,2,3)\n    // >>> primeFactors(13l)\n    // (13,5,7)\n    // >>> primeFactors(",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6,2)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12l)\n    // (2,3)\n    // >>> primeFactors(12",
    "        if (n == 2) {\n            return true\n        }\n        if (n == 1) {\n            return false\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 2) {\n            return false\n        }\n        if (n < 4) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n % 3 == 0) {\n            return false\n        }\n        if (n % 5 == 0) {\n            return false\n        }\n        if (n % 7 == 0) {\n            return false\n        }\n        if (n % 11 == 0) {\n            return false\n        }\n        if (n % 13 == 0) {\n            return false\n        }\n        if (n % 17 == 0) {\n            return false\n        }\n        if (n % 19 == 0) {\n            return false\n        }\n        if (n % 23 == 0) {\n            return false\n        }\n        if (n % 29 == 0) {\n            return false\n        }\n        if (n % 31 == 0) {\n            return false\n        }\n        if (n % 37 == 0) {\n            return false\n        }\n        if (n % 41 == 0) {\n            return false\n        }\n        if (n % 43 == 0) {\n            return false\n        }\n        if (n % 47 == 0) {\n            return false\n        }\n        if (n % 53 == 0) {\n            return false\n        }\n        if (n % 59 == 0) {\n            return false\n        }\n        if (n % 61 == 0) {\n            return false\n        }\n        if (n % 67 == 0) {\n            return false\n        }\n        if (n % 71 == 0) {\n            return false\n        }\n        if (n % 73 == 0) {\n            return false\n        }\n        if (n % 79 == 0) {\n            return false\n        }\n        if (n % 83 == 0) {\n            return false\n        }\n        if (n % 89 == 0) {\n            return false\n        ",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime(6)\n    // (false)\n    // >>> isPrime(101)\n    // (true)\n    // >>> isPrime(11)\n    // (true)\n    // >>> isPrime(13441)\n    // (true)\n    // >>> isPrime(61)\n    // (true)\n    // >>> isPrime(4)\n    // (false)\n    // >>> isPrime(1)\n    // (false)\n    def isPrime(n : Int) : Boolean = {\n        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime(6.0)\n    // (false)\n    // >>> isPrime(101.0)\n    // (true)\n    // >>> isPrime(11.0)\n    // (true)\n    // >>> isPrime(13441.0)\n    // (true)\n    // >>> isPrime(61.0)\n    // (true)\n    // >>> isPrime(4.0)\n    // (false)\n    // >>> isPrime(1.0)\n    // (false)\n    def isPrime(n : Double) : Boolean = {\n        if (n == 2.0) {\n            return true\n        } else if (n == 1.0) {\n            return false",
    "        if (n == 2) {\n            return true\n        } else if (n < 2) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n < 2) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6)\n    // [2, 2, 2]\n    // >>> primeFactors(4)\n    // [2, 2]\n    // >>> primeFactors(1)\n    // []\n    // >>> primeFactors(11)\n    // [11]\n    // >>> primeFactors(13441)\n    // [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    def primeFactors(n : Long) : Seq[Long] = {\n        if (n == 2) {\n            return Seq(2)\n        } else if (n < 2) {\n            return Seq.empty\n        } else if (n % 2 == 0) {\n            return primeFactors(n / 2)\n        } else {\n            var factors = Seq.empty\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    factors = factors.append(i)\n                    factors = factors.append(n / i)\n                }\n            }\n            return factors\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors2(6)\n    // [2, 2, 2]\n    // >>> primeFactors2(4)\n    // [2, 2]\n    // >>> primeFactors2(1)\n    // []\n    // >>> primeFactors2(11)\n    // [11]\n    // >>> primeFactors2(13441)\n    // [11, 13, 17, 19, 23, 29, 31, 37, 41, 43,",
    "        if (n == 2) {\n            return true\n        }\n        if (n == 1) {\n            return false\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 2) {\n            return false\n        }\n        if (n < 4) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 6) {\n            return true\n        }\n        if (n % 3 == 0) {\n            return false\n        }\n        if (n < 9) {\n            return true\n        }\n        if (n % 5 == 0) {\n            return false\n        }\n        if (n < 25) {\n            return true\n        }\n        if (n % 7 == 0) {\n            return false\n        }\n        if (n < 49) {\n            return true\n        }\n        if (n % 11 == 0) {\n            return false\n        }\n        if (n < 121) {\n            return true\n        }\n        if (n % 13 == 0) {\n            return false\n        }\n        if (n < 169) {\n            return true\n        }\n        if (n % 17 == 0) {\n            return false\n        }\n        if (n < 257) {\n            return true\n        }\n        if (n % 19 == 0) {\n            return false\n        }\n        if (n < 321) {\n            return true\n        }\n        if (n % 23 == 0) {\n            return false\n        }\n        if (n < 343) {\n            return true\n        }\n        if (n % 29 == 0) {\n            return false\n        }\n        if (n < 421) {\n            return true\n        }\n        if (n % 31 == 0) {\n            return false\n        }\n        if (n < 433) {\n            return true\n        }\n        if (n % 37 == 0) {\n            return false\n        }\n        if (n < 449) {\n            return true\n        }\n        if (n % 41 == 0) {\n            return false\n        }\n        if (",
    "        if (n == 2) {\n            return true\n        } else if (n < 2) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2l) {\n            true\n        } else if (n == 1l) {\n            false\n        } else if (n % 2l == 0l) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return a list of all prime numbers less than a given number.\n    // >>> primesBelow(10)\n    // (2, 3, 5, 7)\n    // >>> primesBelow(100)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n    // >>> primesBelow(1000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    // >>> primesBelow(10000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(2l)\n    // [2]\n    // >>> primeFactors(6l)\n    // [2, 3]\n    // >>> primeFactors(12l)\n    // [2, 3, 5]\n    // >>> primeFactors(30l)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    // >>> primeFactors(20l)\n    // [2, 5, 10, 11, 13, 17, 19, 23, 29]\n    // >>> primeFactors(1l)\n    // []\n    def primeFactors(n : Long) : List[Long] = {\n        if (n == 0) {\n            []\n        } else if (n == 1) {\n            []\n        } else if (n == 2) {\n            [2]\n        } else {\n            var factors = List[Long]()\n            for (i <- 2 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    factors = factors.append(i)\n                    factors = factors.append(n / i)\n                }\n            }\n            factors\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors2(2l)\n    // [2]\n    // >>> primeFactors2(6l)\n    // [2, 3]\n    // >>> primeFactors2(12l)\n    // [2, 3, 5]\n    // >>> primeFactors2(30l)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    // >>> primeFactors2(20l)\n    // [2, 5",
    "        if (n == 2l) {\n            true\n        } else if (n == 1l) {\n            false\n        } else if (n % 2l == 0l) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6,2,3)\n    // >>> primeFactors(12l)\n    // (2,3,3,2)\n    // >>> primeFactors(13l)\n    // (13,11,7)\n    // >>> primeFactors(13441l)\n    // (13,11,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [2, 2, 3]\n    // >>> primeFactors(13l)\n    // [13, 5, 7]\n    // >>> primeFactors(4l)\n    // []\n    // >>> primeFactors(1l)\n    // []\n    def primeFactors(n : Long) : scala.collection.immutable.List[Long] = {\n        if (n == 1) {\n            return scala.collection.immutable.List.empty()\n        } else if (n == 2) {\n            return scala.collection.immutable.List.of(2l)\n        } else if (n == 3) {\n            return scala.collection.immutable.List.of(3l)\n        } else {\n            var factors = scala.collection.immutable.List.empty()\n            for (i <- 2l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    factors = factors.append(i)\n                    factors = factors.append(n / i)\n                }\n            }\n            return factors\n        }\n    }\n\n    // Return the sum of the primes below a given number.\n    // >>> sumPrimes(10l)\n    // 29\n    // >>> sumPrimes(100l)\n    // 471\n    // >>> sumPrimes(1000l)\n    // 983\n    // >>> sumPrimes(10000l)\n    // 9973\n    // >>> sumPrimes(100000l)\n    // 99709\n    def sumPrimes(n : Long) : Long = {\n        if (n == 2) {\n            return 2l\n        } else if (n == 3",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [6]\n    // >>> primeFactors(13l)\n    // [13, 5]\n    // >>> primeFactors(11l)\n    // [11]\n    // >>> primeFactors(13441l)\n    // [13, 5, 7, 17, 31, 61, 89, 107, 163, 251, 367, 557, 919, 1429, 2161,\n    //  3289, 5461, 8971, 13161, 2161, 3289, 5461, 8971, 13161, 2161, 3289,\n    //  5461, 8971, 13161, 2161, 3289, 5461, 8971, 13161, 2161, 3289, 5461,\n    //  8971, 13161, 2161, 3289, 5461, 8971, 13161, 2161, 3289, 5461, 8971,\n    //  13161, 2161, 3289, 5461, 8971, 13161, 2161, 3289, 5461, 8971, 13161,\n    //  2161, 3289, 5461, 8971, 13161, 2161, 3289, 5461, 8971, 13161, 2161,\n    //  3289, 5461, 8971, 13161, 2161, 3289, 5461, 8971, 13161, 2161, 3289,\n    //  5461, 8971, 13161, 2161, 3289, 5461, 8971, 13161, 2161, 3289, 5461,\n    //  8971, 13161, 2161, 3289, 5461, 8971, 13161, 2161, 3289, 5461, 8971,\n    //  13161, 2161",
    "        if (n == 2l) {\n            true\n        } else if (n == 1l) {\n            false\n        } else if (n % 2l == 0l) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return a list of all prime numbers less than a given number.\n    // >>> primesBelow(10l)\n    // (2, 3, 5, 7)\n    // >>> primesBelow(100l)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n    // >>> primesBelow(1000l)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    // >>> primesBelow(10000l)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641,",
    "        if (n == 2l) {\n            return true\n        } else if (n == 1l) {\n            return false\n        } else if (n % 2l == 0l) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [2, 3]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(11l)\n    // [11]\n    // >>> primeFactors(13441l)\n    // [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    // >>> primeFactors(61l)\n    // [61, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 7",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6, 2)\n    // >>> primeFactors(101l)\n    // (101, 11)\n    // >>> primeFactors(11l)\n    // (11, 1)\n    // >>> primeFactors(13441l)\n    // (13441, 11, 7)\n    // >>> primeFactors(61l)\n    // (61, 1)\n    // >>> primeFactors(4l)\n    // (4, 2)\n    // >>> primeFactors(1l)\n    // (1, 1)\n    def primeFactors(n : Long) : Tuple2[Long, Tuple2[Long, ...]] = {\n        if (n == 2) {\n            (2, (2,))\n        } else if (n == 1) {\n            (1, (1,))\n        } else if (n % 2 == 0) {\n            (2, (2,))\n        } else {\n            var i = 3l\n            var factors = new Tuple2[1]\n            while (n % i == 0) {\n                n /= i\n                factors = factors.updated(0, i)\n                i = i + 2l\n            }\n            factors = factors.updated(0, n)\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors2(6l)\n    // (6, 2)\n    // >>> primeFactors2(101l)\n    // (101, 11)\n    // >>> primeFactors2(11l)\n    // (11, 1)\n    // >>> primeFactors2(13441l)\n    // (13441, 11, 7)\n    //",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return a list of all prime numbers less than or equal to a given number.\n    // >>> primes(10)\n    // (2, 3, 5, 7)\n    // >>> primes(100)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n    // >>> primes(1000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    // >>> primes(10000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647",
    "        if (n == 2) {\n            return true\n        }\n        if (n == 1) {\n            return false\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n < 2) {\n            return false\n        }\n        if (n < 4) {\n            return true\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        if (n % 3 == 0) {\n            return false\n        }\n        if (n % 5 == 0) {\n            return false\n        }\n        if (n % 7 == 0) {\n            return false\n        }\n        if (n % 11 == 0) {\n            return false\n        }\n        if (n % 13 == 0) {\n            return false\n        }\n        if (n % 17 == 0) {\n            return false\n        }\n        if (n % 19 == 0) {\n            return false\n        }\n        if (n % 23 == 0) {\n            return false\n        }\n        if (n % 29 == 0) {\n            return false\n        }\n        if (n % 31 == 0) {\n            return false\n        }\n        if (n % 37 == 0) {\n            return false\n        }\n        if (n % 41 == 0) {\n            return false\n        }\n        if (n % 43 == 0) {\n            return false\n        }\n        if (n % 47 == 0) {\n            return false\n        }\n        if (n % 53 == 0) {\n            return false\n        }\n        if (n % 59 == 0) {\n            return false\n        }\n        if (n % 61 == 0) {\n            return false\n        }\n        if (n % 67 == 0) {\n            return false\n        }\n        if (n % 71 == 0) {\n            return false\n        }\n        if (n % 73 == 0) {\n            return false\n        }\n        if (n % 79 == 0) {\n            return false\n        }\n        if (n % 83 == 0) {\n            return false\n        }\n        if (n % 89 == 0) {\n            return false\n        ",
    "        if (n == 2l) {\n            return true\n        } else if (n == 1l) {\n            return false\n        } else if (n % 2l == 0l) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [6]\n    // >>> primeFactors(12l)\n    // [2, 2, 3]\n    // >>> primeFactors(24l)\n    // [2, 2, 2, 3, 3]\n    // >>> primeFactors(30l)\n    // [2, 5, 5, 7]\n    // >>> primeFactors(60l)\n    // [2, 2, 2, 2, 2, 2, 3, 3, 5, 5, 7]\n    // >>> primeFactors(100l)\n    // [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [2, 3]\n    // >>> primeFactors(13l)\n    // [13, 5, 7]\n    // >>> primeFactors(4l)\n    // []\n    // >>> primeFactors(1l)\n    // []\n    def primeFactors(n : Long) : Seq[Long] = {\n        if (n == 2) {\n            return Seq(2l)\n        } else if (n == 1) {\n            return Seq()\n        } else {\n            for (i <- 2l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return primeFactors(n / i)\n                }\n            }\n            return Seq(n)\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors2(6l)\n    // [2, 3]\n    // >>> primeFactors2(13l)\n    // [13, 5, 7]\n    // >>> primeFactors2(4l)\n    // []\n    // >>> primeFactors2(1l)\n    // []\n    def primeFactors2(n : Long) : Seq[Long] = {\n        if (n == 2) {\n            return Seq(2l)\n        } else if (n == 1) {\n            return Seq()\n        } else {\n            for (i <- 2l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return primeFactors2(n / i)\n                }\n            }\n            return Seq(n)\n        }\n    }\n\n    // Return the prime factors of a",
    "        if (n == 2l) {\n            return true\n        } else if (n < 2l) {\n            return false\n        } else if (n % 2l == 0l) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2l) {\n            true\n        } else if (n == 1l) {\n            false\n        } else if (n % 2l == 0l) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6, 2)\n    // >>> primeFactors(13l)\n    // (13, 3)\n    // >>> primeFactors(11l)\n    // (11, 1)\n    // >>> primeFactors(13441l)\n    // (13441, 1)\n    // >>> primeFactors(61l)\n    // (61, 1)\n    // >>> primeFactors(4l)\n    // (4, 2)\n    // >>> primeFactors(1l)\n    // (1, 1)\n    def primeFactors(n : Long) : Tuple2[Long, Long] = {\n        if (n == 0) {\n            return Tuple2(0l, 0l)\n        } else if (n == 1) {\n            return Tuple2(1l, 1l)\n        } else if (n % 2 == 0) {\n            return Tuple2(2l, 2l)\n        } else {\n            var factors = new ArrayList[Long]()\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    factors.add(i)\n                    factors.add(n / i)\n                }\n            }\n            return Tuple2(n, factors.size())\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors2(6l)\n    // (6, 2)\n    // >>> primeFactors2(13l)\n    // (13, 3)\n    // >>> primeFactors2(11l)\n    // (11, 1)\n    // >>> primeFactors2(13441l",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n < 2) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6,2,3)\n    // >>> primeFactors(101l)\n    // (101,19,23)\n    // >>> primeFactors(11l)\n    // (11,2,3,5)\n    // >>> primeFactors(13441l)\n    // (13441,2,7,19,23,31,37,41,47,53,59,61,67,71,73,79,83,89,97)\n    // >>> primeFactors(61l)\n    // (61,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
    "        if (n == 2l) {\n            true\n        } else if (n == 1l) {\n            false\n        } else if (n % 2l == 0l) {\n            false\n        } else {\n            for (i <- 1l to (n - 1l)) {\n                if (n % i == 0l) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // (6, 2)\n    // >>> primeFactors(13l)\n    // (13, 3, 5)\n    // >>> primeFactors(11l)\n    // (11,)\n    // >>> primeFactors(13441l)\n    // (13441, 7, 11, 17, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    // >>> primeFactors(61l)\n    // (61, 29, 23, 19, 17, 13, 11, 7, 5, 3, 2)\n    // >>> primeFactors(4l)\n    // (4, 2)\n    // >>> primeFactors(1l)\n    // ()\n    def primeFactors(n : Long) : scala.collection.immutable.Vector[Long] = {\n        if (n == 2l) {\n            Vector(2l)\n        } else if (n == 1l) {\n            Vector()\n        } else if (n % 2l == 0l) {\n            Vector(2l)\n        } else {\n            var factors = Vector(n)\n            for (i <- 1l to (n - 1l)) {\n                if (n % i == 0l) {\n                    factors = factors.updated(i)\n                }\n            }\n            factors\n        }\n    }\n\n    // Return the prime numbers less than a given number.\n    // >>> primes(6l)\n    // (2, 3, 5)\n    // >>> primes(13l)\n    // (2, 3, 5, 7, 11, 13)\n    // >>> primes(",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2l) {\n            return true\n        } else if (n == 1l) {\n            return false\n        } else if (n % 2l == 0l) {\n            return false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0l) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime((6))\n    // (false)\n    // >>> isPrime((101))\n    // (true)\n    // >>> isPrime((11))\n    // (true)\n    // >>> isPrime((13441))\n    // (true)\n    // >>> isPrime((61))\n    // (true)\n    // >>> isPrime((4))\n    // (false)\n    // >>> isPrime((1))\n    // (false)\n    def isPrime(n : Int) : Boolean = {\n        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime((6))\n    // (false)\n    // >>> isPrime((101))\n    // (true)\n    // >>> isPrime((11))\n    // (true)\n    // >>> isPrime((13441))\n    // (true)\n    // >>> isPrime((61))\n    // (true)\n    // >>> isPrime((4))\n    // (false)\n    // >>> isPrime((1))\n    // (false)\n    def isPrime(n : Int) : Boolean = {\n        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3 to Math",
    "        if (n == 2) {\n            return true\n        } else if (n < 2) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Return the prime factors of a given number.\n    // >>> primeFactors(6l)\n    // [2, 3]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> primeFactors(13l)\n    // [11, 13]\n    // >>> prime",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 3l to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }\n    }\n\n    // Return a list of all prime numbers less than a given number.\n    // >>> primes(10)\n    // (2, 3, 5, 7)\n    // >>> primes(100)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n    // >>> primes(1000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    // >>> primes(10000)\n    // (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 6",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        if (n == 2) {\n            true\n        } else if (n == 1) {\n            false\n        } else if (n % 2 == 0) {\n            false\n        } else {\n            for (i <- 1 to (n - 1) / 2) {\n                if (n % i == 0) {\n                    false\n                }\n            }\n            true\n        }",
    "        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            for (i <- 3 to Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return false\n                }\n            }\n            return true\n        }"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}