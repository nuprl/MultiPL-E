name: HumanEval_57_monotonic
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return true is list elements are monotonically increasing or decreasing.\n\
  \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
  \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
  \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
  \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long]) :\
  \ Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
  \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
  \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong,\
  \ 9l.toLong, 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
completions: ["        if (l.size == 0) {\n            return true\n        }\n  \
    \      var last = l.head\n        for (i <- l.tail.size) {\n            if (l.tail.head\
    \ < last) {\n                return false\n            }\n            last = l.tail.head\n\
    \        }\n        return true\n    }\n\n    // Return true if list elements\
    \ are strictly increasing.\n    // >>> strictlyIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> strictlyIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> strictlyIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def strictlyIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.size == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.size) {\n\
    \            if (l.tail.head <= last) {\n                return false\n      \
    \      }\n            last = l.tail.head\n        }\n        return true\n   \
    \ }\n\n    // Return true if list elements are strictly decreasing.\n    // >>>\
    \ strictlyDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> strictlyDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> strictlyDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def strictlyDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.size == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.size) {\n\
    \            if (l.", "        var i = 0\n        while (i < l.length - 1) {\n\
    \            if (l[i] > l[i + 1]) {\n                return false\n          \
    \  }\n            i = i + 1\n        }\n        return true", "        if (l.size\
    \ == 0) {\n            return true\n        }\n        var last = l.head\n   \
    \     for (i <- l.tail.size - 1) {\n            if (l.tail.head - last > 0) {\n\
    \                return false\n            }\n            last = l.tail.head\n\
    \        }\n        return true", "        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i += 1\n        }\n        return true", "        var\
    \ i = 0\n        while (i < l.length - 1) {\n            if (l[i] > l[i + 1])\
    \ {\n                return false\n            }\n            i = i + 1\n    \
    \    }\n        return true\n    }\n\n    // Return true if list elements are\
    \ strictly increasing.\n    // >>> strictlyIncreasing((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> strictlyIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> strictlyIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def strictlyIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] >= l[i + 1]) {\n                return false\n\
    \            }\n            i = i + 1\n        }\n        return true\n    }\n\
    \n    // Return true if list elements are strictly decreasing.\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> strictlyDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def strictlyDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] <= l[i + 1]) {\n                return false\n\
    \            }\n            i = i + 1\n        }\n        return true\n    }\n\
    \n    // Return true if list elements are monotonically increasing.\n    // >>>\
    \ monotonicallyIncreasing((", "        if (l.length == 0) {\n            return\
    \ true\n        }\n        if (l.length == 1) {\n            return true\n   \
    \     }\n        if (l.length == 2) {\n            return l.head == l.tail.head\n\
    \        }\n        if (l.length == 3) {\n            return l.head == l.tail.head\
    \ && l.tail.head == l.tail.tail.head\n        }\n        if (l.length == 4) {\n\
    \            return l.head == l.tail.head && l.tail.head == l.tail.tail.head &&\
    \ l.tail.tail.head == l.tail.tail.tail.head\n        }\n        if (l.length ==\
    \ 5) {\n            return l.head == l.tail.head && l.tail.head == l.tail.tail.head\
    \ && l.tail.tail.head == l.tail.tail.tail.head && l.tail.tail.tail.head == l.tail.tail.tail.tail.head\n\
    \        }\n        if (l.length == 6) {\n            return l.head == l.tail.head\
    \ && l.tail.head == l.tail.tail.head && l.tail.tail.head == l.tail.tail.tail.head\
    \ && l.tail.tail.tail.head == l.tail.tail.tail.tail.head && l.tail.tail.tail.tail.head\
    \ == l.tail.tail.tail.tail.tail.head\n        }\n        if (l.length == 7) {\n\
    \            return l.head == l.tail.head && l.tail.head == l.tail.tail.head &&\
    \ l.tail.tail.head == l.tail.tail.tail.head && l.tail.tail.tail.head == l.tail.tail.tail.tail.head\
    \ && l.tail.tail.tail.tail.head == l.tail.tail.tail.tail.tail.head\n        }\n\
    \        if (l.length == 8) {\n            return l.head == l.tail.head && l.tail.head\
    \ == l.tail.tail.head && l.tail.tail.head == l.tail.tail.tail.head && l.tail.tail",
  "        if (l.length == 0) {\n            return true\n        }\n        var i\
    \ = 0\n        var last = l.head\n        while (i < l.length - 1) {\n       \
    \     var next = l.apply(i + 1)\n            if (next < last) {\n            \
    \    return false\n            }\n            last = next\n            i += 1\n\
    \        }\n        return true\n    }\n\n    // Return true if list elements\
    \ are strictly increasing.\n    // >>> strictlyIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> strictlyIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> strictlyIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    // >>> strictlyIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong)))\n    // (false)\n    def strictlyIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var i = 0\n        var last = l.head\n        while\
    \ (i < l.length - 1) {\n            var next = l.apply(i + 1)\n            if\
    \ (next <= last) {\n                return false\n            }\n            last\
    \ = next\n            i += 1\n        }\n        return true\n    }\n\n    //\
    \ Return true if list elements are strictly decreasing.\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> strictlyDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -", "        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- 1 until l.length)\
    \ {\n            if (l.apply(i).toLong > last.toLong) {\n                last\
    \ = l.apply(i)\n            } else if (l.apply(i).toLong < last.toLong) {\n  \
    \              return false\n            }\n        }\n        return true", " \
    \       var first = l.head\n        var last = l.last\n        var result = true\n\
    \        for (i <- l.size - 1) {\n            if (l.apply(i).compareTo(first)\
    \ < 0) {\n                result = false\n                break\n            }\n\
    \            if (l.apply(i).compareTo(last) > 0) {\n                result = false\n\
    \                break\n            }\n        }\n        return result", "  \
    \      var i = 0\n        while (i < l.length - 1) {\n            if (l[i] > l[i\
    \ + 1]) {\n                return false\n            }\n            i = i + 1\n\
    \        }\n        return true\n    }\n\n    // Return true if list elements\
    \ are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return", "        if (l.length == 0) {\n            return true\n    \
    \    }\n        var last = l.head\n        for (i <- l.tail.toList) {\n      \
    \      if (i.head < last) {\n                return false\n            }\n   \
    \         last = i.head\n        }\n        return true", "        var i = 0\n\
    \        var j = l.length - 1\n        while (i < j) {\n            if (l[i] >\
    \ l[j]) {\n                return false\n            } else if (l[i] < l[j]) {\n\
    \                return true\n            }\n            i += 1\n            j\
    \ -= 1\n        }\n        return true", "        if (l.length == 0) {\n     \
    \       return true\n        }\n        var i = 0\n        var last = l.head\n\
    \        while (i < l.length - 1) {\n            if (l.apply(i).toLong > l.apply(i\
    \ + 1).toLong) {\n                return false\n            }\n            i =\
    \ i + 1\n        }\n        return true", "        if (l.isEmpty()) {\n      \
    \      return true\n        }\n        if (l.size() == 1) {\n            return\
    \ true\n        }\n        if (l.size() == 2) {\n            return l.apply(0)\
    \ <= l.apply(1)\n        }\n        var last = l.apply(0)\n        for (i <- 1\
    \ until l.size()) {\n            if (l.apply(i) <= last) {\n                return\
    \ false\n            }\n            last = l.apply(i)\n        }\n        return\
    \ true", "        var i = 0\n        while (i < l.length - 1) {\n            if\
    \ (l[i] > l[i + 1]) {\n                return false\n            }\n         \
    \   i = i + 1\n        }\n        return true", "        if (l.size == 0) {\n\
    \            return true\n        }\n        var last = l.head\n        for (i\
    \ <- l.tail.size) {\n            if (l.tail.head - last < 0) {\n             \
    \   return false\n            }\n            last = l.tail.head\n        }\n \
    \       return true\n    }\n\n    // Return true if list elements are monotonically\
    \ increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.size == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.size) {\n\
    \            if (l.tail.head - last > 0) {\n                return false\n   \
    \         }\n            last = l.tail.head\n        }\n        return true\n\
    \    }\n\n    // Return true if list elements are monotonically decreasing.\n\
    \    // >>> monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.size == 0) {\n            return\
    \ true\n        }\n        var", "        if (l.length == 0) {\n            return\
    \ true\n        }\n        if (l.length == 1) {\n            return true\n   \
    \     }\n        if (l.length == 2) {\n            return l.head == l.tail\n \
    \       }\n        if (l.length == 3) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 4) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 5) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 6) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 7) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 8) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 9) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 10) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 11) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 12) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 13) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 14) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 15) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 16) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 17) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 18) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 19) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 20) {\n            return l.head <= l.tail\n\
    \        }\n        return false", "        if (l.length == 0) {\n           \
    \ return true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (i.head < last) {\n                return false\n        \
    \    }\n            last = i.head\n        }\n        return true", "        if\
    \ (l.size == 0) {\n            return true\n        }\n        var last = l.head\n\
    \        for (i <- l.tail.size - 1) {\n            if (l.tail.head - last > 0)\
    \ {\n                return false\n            }\n            last = l.tail.head\n\
    \        }\n        return true", "        if (l.length == 0) {\n            return\
    \ true\n        }\n        if (l.length == 1) {\n            return true\n   \
    \     }\n        if (l.length == 2) {\n            return l.head == l.tail\n \
    \       }\n        if (l.length == 3) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 4) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 5) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 6) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 7) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 8) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 9) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 10) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 11) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 12) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 13) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 14) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 15) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 16) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 17) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 18) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 19) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 20) {\n            return l.head <= l.tail\n\
    \        }\n        if (l.length == 21) {\n            return l.head <= l.tail",
  "        if (l.size == 0) {\n            return true\n        }\n        if (l.size\
    \ == 1) {\n            return true\n        }\n        if (l.size == 2) {\n  \
    \          return l.apply(0) <= l.apply(1)\n        }\n        var i = 0\n   \
    \     var j = l.size - 1\n        while (i < j) {\n            if (l.apply(i)\
    \ > l.apply(j)) {\n                return false\n            }\n            if\
    \ (l.apply(i) < l.apply(j)) {\n                return true\n            }\n  \
    \          i = i + 1\n            j = j - 1\n        }\n        return true",
  "        if (l.length == 0) {\n            return true\n        }\n        var last\
    \ = l.head\n        for (i <- l.tail.toList) {\n            if (i.head < last)\
    \ {\n                return false\n            }\n            last = i.head\n\
    \        }\n        return true\n    }\n\n    // Return true if list elements\
    \ are strictly increasing.\n    // >>> strictlyIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> strictlyIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> strictlyIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def strictlyIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (i.head <= last) {\n                return false\n       \
    \     }\n            last = i.head\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are strictly decreasing.\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> strictlyDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def strictlyDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (i.head >= last) {", "        var i = 0\n        var last\
    \ = l.head\n        while (i < l.size) {\n            if (l.apply(i).toLong >\
    \ last.toLong) {\n                last = l.apply(i)\n            } else if (l.apply(i).toLong\
    \ < last.toLong) {\n                return false\n            }\n            i\
    \ = i + 1\n        }\n        return true", "        if (l.size == 0) {\n    \
    \        return true\n        }\n        var i = 0\n        var last = l.head\n\
    \        while (i < l.size - 1) {\n            var next = l.apply(i + 1)\n   \
    \         if (next < last) {\n                return false\n            }\n  \
    \          last = next\n            i += 1\n        }\n        return true", " \
    \       var i = 0\n        while (i < l.length - 1) {\n            var j = i +\
    \ 1\n            while (j < l.length) {\n                if (l[i] > l[j]) {\n\
    \                    return false\n                } else if (l[i] < l[j]) {\n\
    \                    return true\n                }\n                j += 1\n\
    \            }\n            i += 1\n        }\n        return true", "       \
    \ if (l.length == 0) {\n            return true\n        }\n        var last =\
    \ l.head\n        for (i <- l.tail.toList) {\n            if (last > i) {\n  \
    \              return false\n            }\n            last = i\n        }\n\
    \        return true", "        if (l.size == 0) {\n            return true\n\
    \        }\n        var last = l.head\n        for (i <- l.tail.size) {\n    \
    \        if (l.tail.head - last > 0) {\n                return false\n       \
    \     }\n            last = l.tail.head\n        }\n        return true", "  \
    \      l.length > 1\n        && l.head.toLong() <= l.tail.head.toLong()\n    \
    \    && l.tail.head.toLong() <= l.head.toLong()", "        if (l.size == 0) {\n\
    \            return true\n        }\n        var i = 0\n        var last = l.head\n\
    \        while (i < l.size - 1) {\n            var cur = l.apply(i)\n        \
    \    if (cur < last) {\n                return false\n            }\n        \
    \    last = cur\n            i = i + 1\n        }\n        return true", "   \
    \     if (l.length == 0) {\n            return true\n        }\n        var last\
    \ = l.head\n        for (i <- l.tail.toList) {\n            if (i.head < last)\
    \ {\n                return false\n            }\n            last = i.head\n\
    \        }\n        return true", "        if (l.length == 0) {\n            return\
    \ true\n        }\n        var first = l.head\n        var last = l.last\n   \
    \     var diff = last - first\n        if (diff < 0) {\n            return false\n\
    \        }\n        for (i <- l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail",
  "        if (l.size == 0) {\n            return true\n        }\n        var first\
    \ = l.head\n        var last = l.last\n        var prev = first\n        for (i\
    \ <- l.size - 1) {\n            var curr = l.apply(i)\n            if (curr <\
    \ prev) {\n                return false\n            }\n            prev = curr\n\
    \        }\n        return true", "        if (l.size == 0) {\n            return\
    \ true\n        }\n        if (l.size == 1) {\n            return true\n     \
    \   }\n        if (l.size == 2) {\n            return true\n        }\n      \
    \  if (l.size == 3) {\n            return true\n        }\n        if (l.size\
    \ == 4) {\n            return true\n        }\n        if (l.size == 5) {\n  \
    \          return true\n        }\n        if (l.size == 6) {\n            return\
    \ true\n        }\n        if (l.size == 7) {\n            return true\n     \
    \   }\n        if (l.size == 8) {\n            return true\n        }\n      \
    \  if (l.size == 9) {\n            return true\n        }\n        if (l.size\
    \ == 10) {\n            return true\n        }\n        if (l.size == 11) {\n\
    \            return true\n        }\n        if (l.size == 12) {\n           \
    \ return true\n        }\n        if (l.size == 13) {\n            return true\n\
    \        }\n        if (l.size == 14) {\n            return true\n        }\n\
    \        if (l.size == 15) {\n            return true\n        }\n        if (l.size\
    \ == 16) {\n            return true\n        }\n        if (l.size == 17) {\n\
    \            return true\n        }\n        if (l.size == 18) {\n           \
    \ return true\n        }\n        if (l.size == 19) {\n            return true\n\
    \        }\n        if (l.size == 20) {\n            return true\n        }\n\
    \        if (l.size == 21) {\n            return true\n        }\n        if (l.size\
    \ == 22) {\n            return true\n        }\n        if (l.size == 23) {\n\
    \            return true\n        }\n        if (l.size == 24) {\n           \
    \ return true\n        }\n        if (l.size == 25) {\n            return true\n\
    \        }\n        if (l.size == 26) {\n            return true\n        }\n\
    \        if (l.size == 27) {\n            return true\n        }\n        if (l.size\
    \ == 28", "        if (l.length == 0) {\n            return true\n        }\n\
    \        if (l.length == 1) {\n            return true\n        }\n        if\
    \ (l.length == 2) {\n            return true\n        }\n        if (l.length\
    \ == 3) {\n            return true\n        }\n        if (l.length == 4) {\n\
    \            return true\n        }\n        if (l.length == 5) {\n          \
    \  return true\n        }\n        if (l.length == 6) {\n            return true\n\
    \        }\n        if (l.length == 7) {\n            return true\n        }\n\
    \        if (l.length == 8) {\n            return true\n        }\n        if\
    \ (l.length == 9) {\n            return true\n        }\n        if (l.length\
    \ == 10) {\n            return true\n        }\n        if (l.length == 11) {\n\
    \            return true\n        }\n        if (l.length == 12) {\n         \
    \   return true\n        }\n        if (l.length == 13) {\n            return\
    \ true\n        }\n        if (l.length == 14) {\n            return true\n  \
    \      }\n        if (l.length == 15) {\n            return true\n        }\n\
    \        if (l.length == 16) {\n            return true\n        }\n        if\
    \ (l.length == 17) {\n            return true\n        }\n        if (l.length\
    \ == 18) {\n            return true\n        }\n        if (l.length == 19) {\n\
    \            return true\n        }\n        if (l.length == 20) {\n         \
    \   return true\n        }\n        if (l.length == 21) {\n            return\
    \ true\n        }\n        if (l.length == 22) {\n            return true\n  \
    \      }\n        if (l.length == 23) {\n            return true\n        }\n\
    \        if (l.length == 24) {\n            return true\n        }\n        if\
    \ (l.length == 25) {\n            return true\n        }\n        if (l.length\
    \ == 26) {\n            return true\n        }\n        if (l.length == 27) {\n\
    \            return true\n        }\n        if (l.length == 28", "        l.length\
    \ > 1\n        && (l.head == l.tail.head && l.tail.tail == l.tail.head)\n    \
    \    && (l.head > l.tail.head || l.tail.tail > l.tail.head)\n    }\n\n    // Return\
    \ true if list elements are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        l.length > 1\n        && (l.head > l.tail.head\
    \ || l.tail.tail > l.tail.head)\n    }\n\n    // Return true if list elements\
    \ are monotonically decreasing.\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        l.length > 1\n        && (l.head < l.tail.head\
    \ || l.tail.tail < l.tail.head)\n    }\n\n    // Return true if list elements\
    \ are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20", "        if (l.length == 0) {\n            return\
    \ true\n        }\n        if (l.length == 1) {\n            return true\n   \
    \     }\n        if (l.length == 2) {\n            return l.apply(0) <= l.apply(1)\n\
    \        }\n        var i = 0\n        var j = l.length - 1\n        while (i\
    \ < j) {\n            if (l.apply(i) > l.apply(j)) {\n                return false\n\
    \            }\n            if (l.apply(i) < l.apply(j)) {\n                return\
    \ true\n            }\n            i += 1\n            j -= 1\n        }\n   \
    \     return true", "        if (l.length == 0) {\n            return true\n \
    \       }\n        var last = l.head\n        for (i <- l.tail.toList) {\n   \
    \         if (i.head < last) {\n                return false\n            }\n\
    \            last = i.head\n        }\n        return true\n    }\n\n    // Return\
    \ true if list elements are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (i.head <= last) {\n                return false\n       \
    \     }\n            last = i.head\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i", "        if (l.length\
    \ == 0) {\n            return true\n        }\n        var last = l.head\n   \
    \     for (i <- l.tail.toList) {\n            if (i.head < last) {\n         \
    \       return false\n            }\n            last = i.head\n        }\n  \
    \      return true\n    }\n\n    // Return true if list elements are monotonically\
    \ increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (i.head <= last) {\n                return false\n       \
    \     }\n            last = i.head\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i", "        if (l.length\
    \ == 0) {\n            return true\n        }\n        if (l.length == 1) {\n\
    \            return true\n        }\n        if (l.length == 2) {\n          \
    \  return true\n        }\n        if (l.length == 3) {\n            return true\n\
    \        }\n        if (l.length == 4) {\n            return true\n        }\n\
    \        if (l.length == 5) {\n            return true\n        }\n        if\
    \ (l.length == 6) {\n            return true\n        }\n        if (l.length\
    \ == 7) {\n            return true\n        }\n        if (l.length == 8) {\n\
    \            return true\n        }\n        if (l.length == 9) {\n          \
    \  return true\n        }\n        if (l.length == 10) {\n            return true\n\
    \        }\n        if (l.length == 11) {\n            return true\n        }\n\
    \        if (l.length == 12) {\n            return true\n        }\n        if\
    \ (l.length == 13) {\n            return true\n        }\n        if (l.length\
    \ == 14) {\n            return true\n        }\n        if (l.length == 15) {\n\
    \            return true\n        }\n        if (l.length == 16) {\n         \
    \   return true\n        }\n        if (l.length == 17) {\n            return\
    \ true\n        }\n        if (l.length == 18) {\n            return true\n  \
    \      }\n        if (l.length == 19) {\n            return true\n        }\n\
    \        if (l.length == 20) {\n            return true\n        }\n        if\
    \ (l.length == 21) {\n            return true\n        }\n        if (l.length\
    \ == 22) {\n            return true\n        }\n        if (l.length == 23) {\n\
    \            return true\n        }\n        if (l.length == 24) {\n         \
    \   return true\n        }\n        if (l.length == 25) {\n            return\
    \ true\n        }\n        if (l.length == 26) {\n            return true\n  \
    \      }\n        if (l.length == 27) {\n            return true\n        }\n\
    \        if (l.length == 28", "        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail) {\n  \
    \          if (last.compareTo(i) > 0) {\n                return false\n      \
    \      }\n            last = i\n        }\n        return true\n    }\n\n    //\
    \ Return true if list elements are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail) {\n  \
    \          if (last.compareTo(i) < 0) {\n                return false\n      \
    \      }\n            last = i\n        }\n        return true\n    }\n\n    //\
    \ Return true if list elements are monotonically decreasing.\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i", "        if (l.size\
    \ == 0) {\n            return true\n        }\n        var i = 0\n        var\
    \ last = l.head\n        while (i < l.size - 1) {\n            if (l.apply(i +\
    \ 1) < last) {\n                return false\n            }\n            last\
    \ = l.apply(i + 1)\n            i = i + 1\n        }\n        return true\n  \
    \  }\n\n    // Return true if list elements are strictly increasing.\n    // >>>\
    \ strictlyIncreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> strictlyIncreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> strictlyIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def strictlyIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.size == 0) {\n            return\
    \ true\n        }\n        var i = 0\n        var last = l.head\n        while\
    \ (i < l.size - 1) {\n            if (l.apply(i + 1) <= last) {\n            \
    \    return false\n            }\n            last = l.apply(i + 1)\n        \
    \    i = i + 1\n        }\n        return true\n    }\n\n    // Return true if\
    \ list elements are strictly decreasing.\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> strictlyDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def strictlyDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.size", "        if (l.length == 0)\
    \ {\n            return true\n        }\n        var last = l.head\n        for\
    \ (i <- l.tail.toList) {\n            if (i.head < last) {\n                return\
    \ false\n            }\n            last = i.head\n        }\n        return true\n\
    \    }\n\n    // Return true if list elements are monotonically increasing.\n\
    \    // >>> monotonicIncreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (i.head <= last) {\n                return false\n       \
    \     }\n            last = i.head\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i", "        if (l.length\
    \ == 0) {\n            return true\n        }\n        var last = l.head\n   \
    \     for (i <- l.tail.toList) {\n            if (i.toLong > last.toLong) {\n\
    \                return false\n            }\n            last = i\n        }\n\
    \        return true\n    }\n\n    // Return true if list elements are monotonically\
    \ increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (i.toLong < last.toLong) {\n                return false\n\
    \            }\n            last = i\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n", "        if (l.isEmpty()) return\
    \ true\n        if (l.size() == 1) return true\n        if (l.size() == 2) return\
    \ l.apply(0) <= l.apply(1)\n        if (l.size() == 3) return l.apply(0) <= l.apply(1)\
    \ && l.apply(1) <= l.apply(2)\n        if (l.size() == 4) return l.apply(0) <=\
    \ l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2) <= l.apply(3)\n       \
    \ if (l.size() == 5) return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2)\
    \ && l.apply(2) <= l.apply(3) && l.apply(3) <= l.apply(4)\n        if (l.size()\
    \ == 6) return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2)\
    \ <= l.apply(3) && l.apply(3) <= l.apply(4) && l.apply(4) <= l.apply(5)\n    \
    \    if (l.size() == 7) return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2)\
    \ && l.apply(2) <= l.apply(3) && l.apply(3) <= l.apply(4) && l.apply(4) <= l.apply(5)\
    \ && l.apply(5) <= l.apply(6)\n        if (l.size() == 8) return l.apply(0) <=\
    \ l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2) <= l.apply(3) && l.apply(3)\
    \ <= l.apply(4) && l.apply(4) <= l.apply(5) && l.apply(5) <= l.apply(6) && l.apply(6)\
    \ <= l.apply(7)\n        if (l.size() == 9) return l.apply(0) <= l", "       \
    \ if (l.size == 0) {\n            return true\n        }\n        if (l.size ==\
    \ 1) {\n            return true\n        }\n        if (l.size == 2) {\n     \
    \       return l.apply(0) <= l.apply(1)\n        }\n        if (l.size == 3) {\n\
    \            return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2)\n   \
    \     }\n        if (l.size == 4) {\n            return l.apply(0) <= l.apply(1)\
    \ && l.apply(1) <= l.apply(2) && l.apply(2) <= l.apply(3)\n        }\n       \
    \ if (l.size == 5) {\n            return l.apply(0) <= l.apply(1) && l.apply(1)\
    \ <= l.apply(2) && l.apply(2) <= l.apply(3) && l.apply(3) <= l.apply(4)\n    \
    \    }\n        if (l.size == 6) {\n            return l.apply(0) <= l.apply(1)\
    \ && l.apply(1) <= l.apply(2) && l.apply(2) <= l.apply(3) && l.apply(3) <= l.apply(4)\
    \ && l.apply(4) <= l.apply(5)\n        }\n        if (l.size == 7) {\n       \
    \     return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2)\
    \ <= l.apply(3) && l.apply(3) <= l.apply(4) && l.apply(4) <= l.apply(5) && l.apply(5)\
    \ <= l.apply(6)\n        }\n        if (l.size == 8) {\n            return l.apply(0)\
    \ <= l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2) <= l.apply(3) && l.apply(3)\
    \ <= l.apply(4) && l.apply(4) <= l.apply(5) && l.apply", "        if (l.size ==\
    \ 0) {\n            return true\n        }\n        if (l.size == 1) {\n     \
    \       return true\n        }\n        if (l.size == 2) {\n            return\
    \ true\n        }\n        if (l.size == 3) {\n            return true\n     \
    \   }\n        if (l.size == 4) {\n            return true\n        }\n      \
    \  if (l.size == 5) {\n            return true\n        }\n        if (l.size\
    \ == 6) {\n            return true\n        }\n        if (l.size == 7) {\n  \
    \          return true\n        }\n        if (l.size == 8) {\n            return\
    \ true\n        }\n        if (l.size == 9) {\n            return true\n     \
    \   }\n        if (l.size == 10) {\n            return true\n        }\n     \
    \   if (l.size == 11) {\n            return true\n        }\n        if (l.size\
    \ == 12) {\n            return true\n        }\n        if (l.size == 13) {\n\
    \            return true\n        }\n        if (l.size == 14) {\n           \
    \ return true\n        }\n        if (l.size == 15) {\n            return true\n\
    \        }\n        if (l.size == 16) {\n            return true\n        }\n\
    \        if (l.size == 17) {\n            return true\n        }\n        if (l.size\
    \ == 18) {\n            return true\n        }\n        if (l.size == 19) {\n\
    \            return true\n        }\n        if (l.size == 20) {\n           \
    \ return true\n        }\n        if (l.size == 21) {\n            return true\n\
    \        }\n        if (l.size == 22) {\n            return true\n        }\n\
    \        if (l.size == 23) {\n            return true\n        }\n        if (l.size\
    \ == 24) {\n            return true\n        }\n        if (l.size == 25) {\n\
    \            return true\n        }\n        if (l.size == 26) {\n           \
    \ return true\n        }\n        if (l.size == 27) {\n            return true\n\
    \        }\n        if (l.size == 28", "        if (l.length == 0) {\n       \
    \     return true\n        }\n        var i = 0\n        var last = l.head\n \
    \       while (i < l.length - 1) {\n            if (l.apply(i + 1) < last) {\n\
    \                return false\n            }\n            last = l.apply(i + 1)\n\
    \            i = i + 1\n        }\n        return true", "        if (l.size ==\
    \ 0) {\n            return true\n        }\n        var i = 0\n        var last\
    \ = l.head\n        while (i < l.size - 1) {\n            var next = l.apply(i\
    \ + 1)\n            if (next < last) {\n                return false\n       \
    \     }\n            last = next\n            i += 1\n        }\n        return\
    \ true", "        var i = 0\n        while (i < l.length - 1) {\n            var\
    \ j = i + 1\n            while (j < l.length) {\n                if (l[i] > l[j])\
    \ {\n                    return false\n                }\n                j =\
    \ j + 1\n            }\n            i = i + 1\n        }\n        return true\n\
    \    }\n\n    // Return true if list elements are in ascending order.\n    //\
    \ >>> ascending((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n \
    \   // (true)\n    // >>> ascending((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> ascending((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def ascending(l : List[Long])\
    \ : Boolean = {\n        var i = 0\n        while (i < l.length - 1) {\n     \
    \       var j = i + 1\n            while (j < l.length) {\n                if\
    \ (l[i] > l[j]) {\n                    return false\n                }\n     \
    \           j = j + 1\n            }\n            i = i + 1\n        }\n     \
    \   return true\n    }\n\n    // Return true if list elements are in descending\
    \ order.\n    // >>> descending((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> descending((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> descending((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def descending(l :\
    \ List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length -\
    \ 1) {\n            var j = i + 1\n            while (j < l.length) {\n      \
    \          if (l", "        if (l.length == 0) {\n            return true\n  \
    \      }\n        var last = l.head\n        for (i <- l.tail) {\n           \
    \ if (last > i) {\n                return false\n            }\n            last\
    \ = i\n        }\n        return true\n    }\n\n    // Return true if the list\
    \ elements are sorted.\n    // >>> sorted((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong)))\n    // (true)\n    // >>> sorted((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> sorted((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def sorted(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 0) {\n            return true\n     \
    \   }\n        var last = l.head\n        for (i <- l.tail) {\n            if\
    \ (last < i) {\n                return false\n            }\n            last\
    \ = i\n        }\n        return true\n    }\n\n    // Return true if the list\
    \ elements are sorted in ascending order.\n    // >>> ascending((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> ascending((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> ascending((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def ascending(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 0) {\n            return true\n     \
    \   }\n        var last = l.head\n        for (i <- l.tail) {\n            if\
    \ (last > i) {\n                return false\n            }\n            last\
    \ = i\n        }\n        return true\n    }\n\n    // Return true if the list\
    \ elements are", "        if (l.size == 0) {\n            return true\n      \
    \  }\n        var first = l.head\n        var last = l.last\n        var result\
    \ = true\n        for (i <- l.size - 1) {\n            if (first.compareTo(last)\
    \ > 0) {\n                result = false\n                break\n            }\n\
    \            first = l.apply(i + 1)\n            last = l.apply(i)\n        }\n\
    \        return result", "        if (l.size == 0) {\n            return true\n\
    \        }\n        var last = l.head\n        for (i <- l.tail.size - 1) {\n\
    \            if (l.tail.head < last) {\n                return false\n       \
    \     }\n            last = l.tail.head\n        }\n        return true", "  \
    \      if (l.size == 0) {\n            return true\n        }\n        if (l.size\
    \ == 1) {\n            return true\n        }\n        if (l.size == 2) {\n  \
    \          return true\n        }\n        if (l.size == 3) {\n            return\
    \ true\n        }\n        if (l.size == 4) {\n            return true\n     \
    \   }\n        if (l.size == 5) {\n            return true\n        }\n      \
    \  if (l.size == 6) {\n            return true\n        }\n        if (l.size\
    \ == 7) {\n            return true\n        }\n        if (l.size == 8) {\n  \
    \          return true\n        }\n        if (l.size == 9) {\n            return\
    \ true\n        }\n        if (l.size == 10) {\n            return true\n    \
    \    }\n        if (l.size == 11) {\n            return true\n        }\n    \
    \    if (l.size == 12) {\n            return true\n        }\n        if (l.size\
    \ == 13) {\n            return true\n        }\n        if (l.size == 14) {\n\
    \            return true\n        }\n        if (l.size == 15) {\n           \
    \ return true\n        }\n        if (l.size == 16) {\n            return true\n\
    \        }\n        if (l.size == 17) {\n            return true\n        }\n\
    \        if (l.size == 18) {\n            return true\n        }\n        if (l.size\
    \ == 19) {\n            return true\n        }\n        if (l.size == 20) {\n\
    \            return true\n        }\n        if (l.size == 21) {\n           \
    \ return true\n        }\n        if (l.size == 22) {\n            return true\n\
    \        }\n        if (l.size == 23) {\n            return true\n        }\n\
    \        if (l.size == 24) {\n            return true\n        }\n        if (l.size\
    \ == 25) {\n            return true\n        }\n        if (l.size == 26) {\n\
    \            return true\n        }\n        if (l.size == 27) {\n           \
    \ return true\n        }\n        if (l.size == 28", "        if (l.length ==\
    \ 0) {\n            return true\n        }\n        if (l.length == 1) {\n   \
    \         return true\n        }\n        if (l.length == 2) {\n            return\
    \ true\n        }\n        if (l.length == 3) {\n            return true\n   \
    \     }\n        if (l.length == 4) {\n            return true\n        }\n  \
    \      if (l.length == 5) {\n            return true\n        }\n        if (l.length\
    \ == 6) {\n            return true\n        }\n        if (l.length == 7) {\n\
    \            return true\n        }\n        if (l.length == 8) {\n          \
    \  return true\n        }\n        if (l.length == 9) {\n            return true\n\
    \        }\n        if (l.length == 10) {\n            return true\n        }\n\
    \        if (l.length == 11) {\n            return true\n        }\n        if\
    \ (l.length == 12) {\n            return true\n        }\n        if (l.length\
    \ == 13) {\n            return true\n        }\n        if (l.length == 14) {\n\
    \            return true\n        }\n        if (l.length == 15) {\n         \
    \   return true\n        }\n        if (l.length == 16) {\n            return\
    \ true\n        }\n        if (l.length == 17) {\n            return true\n  \
    \      }\n        if (l.length == 18) {\n            return true\n        }\n\
    \        if (l.length == 19) {\n            return true\n        }\n        if\
    \ (l.length == 20) {\n            return true\n        }\n        if (l.length\
    \ == 21) {\n            return true\n        }\n        if (l.length == 22) {\n\
    \            return true\n        }\n        if (l.length == 23) {\n         \
    \   return true\n        }\n        if (l.length == 24) {\n            return\
    \ true\n        }\n        if (l.length == 25) {\n            return true\n  \
    \      }\n        if (l.length == 26) {\n            return true\n        }\n\
    \        if (l.length == 27) {\n            return true\n        }\n        if\
    \ (l.length == 28", "        if (l.size == 0) {\n            return true\n   \
    \     }\n        var i = 0\n        var last = l.head\n        while (i < l.size\
    \ - 1) {\n            var next = l.apply(i + 1)\n            if (next <= last)\
    \ {\n                return false\n            }\n            last = next\n  \
    \          i = i + 1\n        }\n        return true", "        var i = 0\n  \
    \      var j = l.length - 1\n        while (i < j) {\n            if (l[i] > l[j])\
    \ {\n                return false\n            } else if (l[i] < l[j]) {\n   \
    \             return true\n            }\n            i += 1\n            j -=\
    \ 1\n        }\n        return true", "        if (l.length == 0) {\n        \
    \    return true\n        }\n        if (l.length == 1) {\n            return\
    \ true\n        }\n        if (l.length == 2) {\n            return true\n   \
    \     }\n        if (l.length == 3) {\n            return true\n        }\n  \
    \      if (l.length == 4) {\n            return true\n        }\n        if (l.length\
    \ == 5) {\n            return true\n        }\n        if (l.length == 6) {\n\
    \            return true\n        }\n        if (l.length == 7) {\n          \
    \  return true\n        }\n        if (l.length == 8) {\n            return true\n\
    \        }\n        if (l.length == 9) {\n            return true\n        }\n\
    \        if (l.length == 10) {\n            return true\n        }\n        if\
    \ (l.length == 11) {\n            return true\n        }\n        if (l.length\
    \ == 12) {\n            return true\n        }\n        if (l.length == 13) {\n\
    \            return true\n        }\n        if (l.length == 14) {\n         \
    \   return true\n        }\n        if (l.length == 15) {\n            return\
    \ true\n        }\n        if (l.length == 16) {\n            return true\n  \
    \      }\n        if (l.length == 17) {\n            return true\n        }\n\
    \        if (l.length == 18) {\n            return true\n        }\n        if\
    \ (l.length == 19) {\n            return true\n        }\n        if (l.length\
    \ == 20) {\n            return true\n        }\n        if (l.length == 21) {\n\
    \            return true\n        }\n        if (l.length == 22) {\n         \
    \   return true\n        }\n        if (l.length == 23) {\n            return\
    \ true\n        }\n        if (l.length == 24) {\n            return true\n  \
    \      }\n        if (l.length == 25) {\n            return true\n        }\n\
    \        if (l.length == 26) {\n            return true\n        }\n        if\
    \ (l.length == 27) {\n            return true\n        }\n        if (l.length\
    \ == 28", "        l.size > 1\n        && l.size == l.tail.size\n        && l.tail.size\
    \ == l.head.size\n        && l.tail.tail.size == l.head.head.size\n        &&\
    \ l.tail.tail.tail.size == l.head.head.head.size\n        && l.tail.tail.tail.tail.size\
    \ == l.head.head.head.head.size\n        && l.tail.tail.tail.tail.tail.size ==\
    \ l.head.head.head.head.head.size\n        && l.tail.tail.tail.tail.tail.tail.size\
    \ == l.head.head.head.head.head.head.size\n        && l.tail.tail.tail.tail.tail.tail.tail.size\
    \ == l.head.head.head.head.head.head.head.size\n        && l.tail.tail.tail.tail.tail.tail.tail.tail.size\
    \ == l.head.head.head.head.head.head.head.head.size\n        && l.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\
    \ == l.head.head.head.head.head.head.head.head.head.size\n        && l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\
    \ == l.head.head.head.head.head.head.head.head.head.head.size\n        && l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\
    \ == l.head.head.head.head.head.head.head.head.head.head.head.size\n        &&\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size == l.head.head.head.head.head.head.head.head.head.head.head.head.size\n\
    \        && l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size == l.head.head.head.head.head.head.head.head.head.head.head.head.head.size\n\
    \        && l.tail", "        var i = 0\n        while (i < l.length - 1) {\n\
    \            if (l[i] > l[i + 1]) {\n                return false\n          \
    \  }\n            i = i + 1\n        }\n        return true\n    }\n\n    // Return\
    \ true if list elements are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return", "        if (l.size == 0) {\n            return true\n      \
    \  }\n        if (l.size == 1) {\n            return true\n        }\n       \
    \ if (l.size == 2) {\n            return true\n        }\n        if (l.size ==\
    \ 3) {\n            return true\n        }\n        if (l.size == 4) {\n     \
    \       return true\n        }\n        if (l.size == 5) {\n            return\
    \ true\n        }\n        if (l.size == 6) {\n            return true\n     \
    \   }\n        if (l.size == 7) {\n            return true\n        }\n      \
    \  if (l.size == 8) {\n            return true\n        }\n        if (l.size\
    \ == 9) {\n            return true\n        }\n        if (l.size == 10) {\n \
    \           return true\n        }\n        if (l.size == 11) {\n            return\
    \ true\n        }\n        if (l.size == 12) {\n            return true\n    \
    \    }\n        if (l.size == 13) {\n            return true\n        }\n    \
    \    if (l.size == 14) {\n            return true\n        }\n        if (l.size\
    \ == 15) {\n            return true\n        }\n        if (l.size == 16) {\n\
    \            return true\n        }\n        if (l.size == 17) {\n           \
    \ return true\n        }\n        if (l.size == 18) {\n            return true\n\
    \        }\n        if (l.size == 19) {\n            return true\n        }\n\
    \        if (l.size == 20) {\n            return true\n        }\n        if (l.size\
    \ == 21) {\n            return true\n        }\n        if (l.size == 22) {\n\
    \            return true\n        }\n        if (l.size == 23) {\n           \
    \ return true\n        }\n        if (l.size == 24) {\n            return true\n\
    \        }\n        if (l.size == 25) {\n            return true\n        }\n\
    \        if (l.size == 26) {\n            return true\n        }\n        if (l.size\
    \ == 27) {\n            return true\n        }\n        if (l.size == 28", " \
    \       if (l.length == 0) {\n            return true\n        }\n        var\
    \ last = l.head\n        for (i <- l.tail) {\n            if (last > i) {\n  \
    \              return false\n            }\n            last = i\n        }\n\
    \        return true\n    }\n\n    // Return true if list elements are monotonically\
    \ increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail) {\n  \
    \          if (last < i) {\n                return false\n            }\n    \
    \        last = i\n        }\n        return true\n    }\n\n    // Return true\
    \ if list elements are monotonically decreasing.\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail) {\n  \
    \          if (last > i)", "        if (l.size == 0) {\n            return true\n\
    \        }\n        if (l.size == 1) {\n            return true\n        }\n \
    \       if (l.size == 2) {\n            return l.apply(0) <= l.apply(1)\n    \
    \    }\n        if (l.size == 3) {\n            return l.apply(0) <= l.apply(1)\
    \ && l.apply(1) <= l.apply(2)\n        }\n        if (l.size == 4) {\n       \
    \     return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2)\
    \ <= l.apply(3)\n        }\n        if (l.size == 5) {\n            return l.apply(0)\
    \ <= l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2) <= l.apply(3) && l.apply(3)\
    \ <= l.apply(4)\n        }\n        if (l.size == 6) {\n            return l.apply(0)\
    \ <= l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2) <= l.apply(3) && l.apply(3)\
    \ <= l.apply(4) && l.apply(4) <= l.apply(5)\n        }\n        if (l.size ==\
    \ 7) {\n            return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2)\
    \ && l.apply(2) <= l.apply(3) && l.apply(3) <= l.apply(4) && l.apply(4) <= l.apply(5)\
    \ && l.apply(5) <= l.apply(6)\n        }\n        if (l.size == 8) {\n       \
    \     return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2)\
    \ <= l.apply(3) && l.apply(3) <= l.apply(4) && l.apply(4) <= l.apply(5) && l.apply",
  "        var i = 0\n        while (i < l.length - 1) {\n            if (l[i] > l[i\
    \ + 1]) {\n                return false\n            }\n            i += 1\n \
    \       }\n        return true\n    }\n\n    // Return true if the list elements\
    \ are strictly increasing.\n    // >>> strictlyIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> strictlyIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> strictlyIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def strictlyIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                return false\n \
    \           }\n            i += 1\n        }\n        return true\n    }\n\n \
    \   // Return true if the list elements are strictly decreasing.\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> strictlyDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def strictlyDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i += 1\n        }\n        return true\n    }\n\n \
    \   // Return true if the list elements are monotonically increasing.\n    //\
    \ >>> monotonicallyIncreasing((List[Long", "        if (l.size == 0) {\n     \
    \       return true\n        }\n        if (l.size == 1) {\n            return\
    \ true\n        }\n        if (l.size == 2) {\n            return true\n     \
    \   }\n        if (l.size == 3) {\n            return true\n        }\n      \
    \  if (l.size == 4) {\n            return true\n        }\n        if (l.size\
    \ == 5) {\n            return true\n        }\n        if (l.size == 6) {\n  \
    \          return true\n        }\n        if (l.size == 7) {\n            return\
    \ true\n        }\n        if (l.size == 8) {\n            return true\n     \
    \   }\n        if (l.size == 9) {\n            return true\n        }\n      \
    \  if (l.size == 10) {\n            return true\n        }\n        if (l.size\
    \ == 11) {\n            return true\n        }\n        if (l.size == 12) {\n\
    \            return true\n        }\n        if (l.size == 13) {\n           \
    \ return true\n        }\n        if (l.size == 14) {\n            return true\n\
    \        }\n        if (l.size == 15) {\n            return true\n        }\n\
    \        if (l.size == 16) {\n            return true\n        }\n        if (l.size\
    \ == 17) {\n            return true\n        }\n        if (l.size == 18) {\n\
    \            return true\n        }\n        if (l.size == 19) {\n           \
    \ return true\n        }\n        if (l.size == 20) {\n            return true\n\
    \        }\n        if (l.size == 21) {\n            return true\n        }\n\
    \        if (l.size == 22) {\n            return true\n        }\n        if (l.size\
    \ == 23) {\n            return true\n        }\n        if (l.size == 24) {\n\
    \            return true\n        }\n        if (l.size == 25) {\n           \
    \ return true\n        }\n        if (l.size == 26) {\n            return true\n\
    \        }\n        if (l.size == 27) {\n            return true\n        }\n\
    \        if (l.size == 28", "        var i = 0\n        while (i < l.length -\
    \ 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n   \
    \         }\n            i += 1\n        }\n        return true", "        var\
    \ i = 0\n        while (i < l.length - 1) {\n            if (l[i] > l[i + 1])\
    \ {\n                return false\n            }\n            i = i + 1\n    \
    \    }\n        return true\n    }\n\n    // Return true if list elements are\
    \ monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return", "        if (l.length == 0) {\n            return true\n    \
    \    }\n        var i = 0\n        var last = l.head\n        while (i < l.length\
    \ - 1) {\n            if (l.apply(i + 1) < last) {\n                return false\n\
    \            }\n            last = l.apply(i + 1)\n            i = i + 1\n   \
    \     }\n        return true", "        if (l.length == 0) {\n            return\
    \ true\n        }\n        var i = 0\n        var last = l.head\n        while\
    \ (i < l.length - 1) {\n            var next = l.apply(i + 1)\n            if\
    \ (next < last) {\n                return false\n            }\n            last\
    \ = next\n            i += 1\n        }\n        return true", "        if (l.size\
    \ == 0) {\n            return true\n        }\n        var last = l.head\n   \
    \     for (i <- l.tail.size) {\n            if (l.tail.head < last) {\n      \
    \          return false\n            }\n            last = l.tail.head\n     \
    \   }\n        return true\n    }\n\n    // Return true if list elements are strictly\
    \ increasing.\n    // >>> increasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong)))\n    // (true)\n    // >>> increasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> increasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def increasing(l :\
    \ List[Long]) : Boolean = {\n        if (l.size == 0) {\n            return true\n\
    \        }\n        var last = l.head\n        for (i <- l.tail.size) {\n    \
    \        if (l.tail.head <= last) {\n                return false\n          \
    \  }\n            last = l.tail.head\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are strictly decreasing.\n    // >>> decreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> decreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> decreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def decreasing(l :\
    \ List[Long]) : Boolean = {\n        if (l.size == 0) {\n            return true\n\
    \        }\n        var last = l.head\n        for (i <- l.tail.size) {\n    \
    \        if (l.tail.head >= last) {\n                return false\n          \
    \  }\n            ", "        if (l.length == 0) {\n            return true\n\
    \        }\n        var last = l.head\n        for (i <- l.tail.toList) {\n  \
    \          if (i.head < last) {\n                return false\n            }\n\
    \            last = i.head\n        }\n        return true\n    }\n\n    // Return\
    \ true if list elements are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (i.head <= last) {\n                return false\n       \
    \     }\n            last = i.head\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i", "        if (l.length\
    \ == 0) {\n            return true\n        }\n        var last = l.head\n   \
    \     for (i <- l.tail.toList.map(_.toLong).toSeq.toList.map(_.toLong).toSeq)\
    \ {\n            if (last > i) {\n                return false\n            }\n\
    \            last = i\n        }\n        return true\n    }\n\n    // Return\
    \ true if the list elements are in sorted order.\n    // >>> sorted((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> sorted((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> sorted((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def sorted(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 0) {\n            return true\n     \
    \   }\n        var last = l.head\n        for (i <- l.tail.toList.map(_.toLong).toSeq.toList.map(_.toLong).toSeq)\
    \ {\n            if (last < i) {\n                return false\n            }\n\
    \            last = i\n        }\n        return true\n    }\n\n    // Return\
    \ true if the list elements are in sorted order.\n    // >>> sorted((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> sorted((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> sorted((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def sorted2(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 0) {\n            return true\n     \
    \   }\n        var last = l", "        if (l.size == 0) {\n            return\
    \ true\n        }\n        if (l.size == 1) {\n            return true\n     \
    \   }\n        if (l.size == 2) {\n            return l.apply(0) <= l.apply(1)\n\
    \        }\n        if (l.size == 3) {\n            return l.apply(0) <= l.apply(1)\
    \ && l.apply(1) <= l.apply(2)\n        }\n        if (l.size == 4) {\n       \
    \     return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2)\
    \ <= l.apply(3)\n        }\n        if (l.size == 5) {\n            return l.apply(0)\
    \ <= l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2) <= l.apply(3) && l.apply(3)\
    \ <= l.apply(4)\n        }\n        if (l.size == 6) {\n            return l.apply(0)\
    \ <= l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2) <= l.apply(3) && l.apply(3)\
    \ <= l.apply(4) && l.apply(4) <= l.apply(5)\n        }\n        if (l.size ==\
    \ 7) {\n            return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2)\
    \ && l.apply(2) <= l.apply(3) && l.apply(3) <= l.apply(4) && l.apply(4) <= l.apply(5)\
    \ && l.apply(5) <= l.apply(6)\n        }\n        if (l.size == 8) {\n       \
    \     return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2)\
    \ <= l.apply(3) && l.apply(3) <= l.apply(4) && l.apply(4) <= l.apply(5) && l.apply",
  "        if (l.isEmpty()) {\n            return true\n        }\n        var first\
    \ = l.head\n        var last = l.last\n        var diff = last - first\n     \
    \   if (diff < 0) {\n            return false\n        }\n        for (i <- l.size\
    \ - 2) {\n            var next = l.apply(i + 1)\n            var nextDiff = next\
    \ - last\n            if (nextDiff < 0) {\n                return false\n    \
    \        }\n            last = next\n        }\n        return true", "      \
    \  if (l.size == 0) {\n            return true\n        }\n        var last =\
    \ l.head\n        for (i <- l.tail.size - 1) {\n            if (l.tail.head <\
    \ last) {\n                return false\n            }\n            last = l.tail.head\n\
    \        }\n        return true", "        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically increasing.\n    // >>>\
    \ monotonicIncreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return", "        if (l.size == 0) {\n            return true\n      \
    \  }\n        if (l.size == 1) {\n            return true\n        }\n       \
    \ if (l.size == 2) {\n            return true\n        }\n        if (l.size ==\
    \ 3) {\n            return true\n        }\n        if (l.size == 4) {\n     \
    \       return true\n        }\n        if (l.size == 5) {\n            return\
    \ true\n        }\n        if (l.size == 6) {\n            return true\n     \
    \   }\n        if (l.size == 7) {\n            return true\n        }\n      \
    \  if (l.size == 8) {\n            return true\n        }\n        if (l.size\
    \ == 9) {\n            return true\n        }\n        if (l.size == 10) {\n \
    \           return true\n        }\n        if (l.size == 11) {\n            return\
    \ true\n        }\n        if (l.size == 12) {\n            return true\n    \
    \    }\n        if (l.size == 13) {\n            return true\n        }\n    \
    \    if (l.size == 14) {\n            return true\n        }\n        if (l.size\
    \ == 15) {\n            return true\n        }\n        if (l.size == 16) {\n\
    \            return true\n        }\n        if (l.size == 17) {\n           \
    \ return true\n        }\n        if (l.size == 18) {\n            return true\n\
    \        }\n        if (l.size == 19) {\n            return true\n        }\n\
    \        if (l.size == 20) {\n            return true\n        }\n        if (l.size\
    \ == 21) {\n            return true\n        }\n        if (l.size == 22) {\n\
    \            return true\n        }\n        if (l.size == 23) {\n           \
    \ return true\n        }\n        if (l.size == 24) {\n            return true\n\
    \        }\n        if (l.size == 25) {\n            return true\n        }\n\
    \        if (l.size == 26) {\n            return true\n        }\n        if (l.size\
    \ == 27) {\n            return true\n        }\n        if (l.size == 28", " \
    \       if (l.size == 0) {\n            return true\n        }\n        var last\
    \ = l.head\n        for (i <- l.tail.size - 1) {\n            if (l.tail.head\
    \ < last) {\n                return false\n            }\n            last = l.tail.head\n\
    \        }\n        return true\n    }\n\n    // Return true if list elements\
    \ are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.size == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.size -\
    \ 1) {\n            if (l.tail.head > last) {\n                return false\n\
    \            }\n            last = l.tail.head\n        }\n        return true\n\
    \    }\n\n    // Return true if list elements are monotonically decreasing.\n\
    \    // >>> monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n", "        if (l.size == 0) {\n     \
    \       return true\n        }\n        var last = l.head\n        for (i <- l.tail.size)\
    \ {\n            if (l.tail.head < last) {\n                return false\n   \
    \         }\n            last = l.tail.head\n        }\n        return true",
  "        var i = 0\n        while (i < l.length - 1) {\n            var j = i +\
    \ 1\n            while (j < l.length && l[j] - l[i] == 0) {\n                j\
    \ += 1\n            }\n            if (j == l.length) {\n                return\
    \ true\n            }\n            if (l[j] - l[i] < 0) {\n                return\
    \ false\n            }\n            i = j\n        }\n        return true", " \
    \       if (l.length == 0) {\n            return true\n        }\n        if (l.length\
    \ == 1) {\n            return true\n        }\n        if (l.length == 2) {\n\
    \            return l.head == l.tail.head && l.head <= l.tail.head\n        }\n\
    \        var head = l.head\n        var tail = l.tail.head\n        var prev =\
    \ l.head\n        for (i <- l.tail.tail.length) {\n            tail = l.tail.tail[i]\n\
    \            if (tail < prev) {\n                return false\n            }\n\
    \            prev = tail\n        }\n        return true", "        if (l.length\
    \ == 0) {\n            return true\n        }\n        var i = 0\n        var\
    \ last = l.head\n        while (i < l.length - 1) {\n            var next = l.apply(i\
    \ + 1)\n            if (next < last) {\n                return false\n       \
    \     }\n            last = next\n            i += 1\n        }\n        return\
    \ true", "        if (l.size == 0) {\n            return true\n        }\n   \
    \     var first = l.head\n        var last = l.last\n        var result = true\n\
    \        for (i <- l.size - 1) {\n            if (l.apply(i) < first) {\n    \
    \            result = false\n                break\n            }\n          \
    \  if (l.apply(i) > last) {\n                result = false\n                break\n\
    \            }\n        }\n        return result\n    }\n\n    // Return true\
    \ if list elements are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.size == 0) {\n            return\
    \ true\n        }\n        var first = l.head\n        var last = l.last\n   \
    \     var result = true\n        for (i <- l.size - 1) {\n            if (l.apply(i)\
    \ < first) {\n                result = false\n                break\n        \
    \    }\n            if (l.apply(i) > last) {\n                result = false\n\
    \                break\n            }\n        }\n        return result\n    }\n\
    \n    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong",
  "        if (l.size == 0) {\n            return true\n        }\n        if (l.size\
    \ == 1) {\n            return true\n        }\n        if (l.size == 2) {\n  \
    \          return (l.head == l.tail)\n        }\n        if (l.size == 3) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 4) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 5) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 6) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 7) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 8) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 9) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 10) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 11) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 12) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 13) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 14) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 15) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 16) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 17) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 18) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 19) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 20",
  "        var i = 0\n        while (i < l.length - 1) {\n            if (l[i] > l[i\
    \ + 1]) {\n                return false\n            }\n            i = i + 1\n\
    \        }\n        return true\n    }\n\n    // Return true if list elements\
    \ are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return", "        if (l.length == 0) {\n            return true\n    \
    \    }\n        var last = l.head\n        for (i <- l.tail.toList) {\n      \
    \      if (last > i) {\n                return false\n            }\n        \
    \    last = i\n        }\n        return true\n    }\n\n    // Return true if\
    \ list elements are strictly increasing.\n    // >>> strictlyIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> strictlyIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> strictlyIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def strictlyIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (last < i) {\n                return false\n            }\n\
    \            last = i\n        }\n        return true\n    }\n\n    // Return\
    \ true if list elements are strictly decreasing.\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> strictlyDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def strictlyDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (last > i) {\n                return false\n            }\n\
    \            last", "        if (l.size == 0) {\n            return true\n   \
    \     }\n        if (l.size == 1) {\n            return true\n        }\n    \
    \    if (l.size == 2) {\n            return true\n        }\n        if (l.size\
    \ == 3) {\n            return true\n        }\n        if (l.size == 4) {\n  \
    \          return true\n        }\n        if (l.size == 5) {\n            return\
    \ true\n        }\n        if (l.size == 6) {\n            return true\n     \
    \   }\n        if (l.size == 7) {\n            return true\n        }\n      \
    \  if (l.size == 8) {\n            return true\n        }\n        if (l.size\
    \ == 9) {\n            return true\n        }\n        if (l.size == 10) {\n \
    \           return true\n        }\n        if (l.size == 11) {\n            return\
    \ true\n        }\n        if (l.size == 12) {\n            return true\n    \
    \    }\n        if (l.size == 13) {\n            return true\n        }\n    \
    \    if (l.size == 14) {\n            return true\n        }\n        if (l.size\
    \ == 15) {\n            return true\n        }\n        if (l.size == 16) {\n\
    \            return true\n        }\n        if (l.size == 17) {\n           \
    \ return true\n        }\n        if (l.size == 18) {\n            return true\n\
    \        }\n        if (l.size == 19) {\n            return true\n        }\n\
    \        if (l.size == 20) {\n            return true\n        }\n        if (l.size\
    \ == 21) {\n            return true\n        }\n        if (l.size == 22) {\n\
    \            return true\n        }\n        if (l.size == 23) {\n           \
    \ return true\n        }\n        if (l.size == 24) {\n            return true\n\
    \        }\n        if (l.size == 25) {\n            return true\n        }\n\
    \        if (l.size == 26) {\n            return true\n        }\n        if (l.size\
    \ == 27) {\n            return true\n        }\n        if (l.size == 28", " \
    \       var i = 0\n        while (i < l.length - 1) {\n            if (l[i] >\
    \ l[i + 1]) {\n                return false\n            }\n            i = i\
    \ + 1\n        }\n        return true", "        if (l.length == 0) {\n      \
    \      return true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (i.head < last) {\n                return false\n        \
    \    }\n            last = i.head\n        }\n        return true", "        if\
    \ (l.size == 0) {\n            return true\n        }\n        if (l.size == 1)\
    \ {\n            return true\n        }\n        if (l.size == 2) {\n        \
    \    return true\n        }\n        if (l.size == 3) {\n            return true\n\
    \        }\n        if (l.size == 4) {\n            return true\n        }\n \
    \       if (l.size == 5) {\n            return true\n        }\n        if (l.size\
    \ == 6) {\n            return true\n        }\n        if (l.size == 7) {\n  \
    \          return true\n        }\n        if (l.size == 8) {\n            return\
    \ true\n        }\n        if (l.size == 9) {\n            return true\n     \
    \   }\n        if (l.size == 10) {\n            return true\n        }\n     \
    \   if (l.size == 11) {\n            return true\n        }\n        if (l.size\
    \ == 12) {\n            return true\n        }\n        if (l.size == 13) {\n\
    \            return true\n        }\n        if (l.size == 14) {\n           \
    \ return true\n        }\n        if (l.size == 15) {\n            return true\n\
    \        }\n        if (l.size == 16) {\n            return true\n        }\n\
    \        if (l.size == 17) {\n            return true\n        }\n        if (l.size\
    \ == 18) {\n            return true\n        }\n        if (l.size == 19) {\n\
    \            return true\n        }\n        if (l.size == 20) {\n           \
    \ return true\n        }\n        if (l.size == 21) {\n            return true\n\
    \        }\n        if (l.size == 22) {\n            return true\n        }\n\
    \        if (l.size == 23) {\n            return true\n        }\n        if (l.size\
    \ == 24) {\n            return true\n        }\n        if (l.size == 25) {\n\
    \            return true\n        }\n        if (l.size == 26) {\n           \
    \ return true\n        }\n        if (l.size == 27) {\n            return true\n\
    \        }\n        if (l.size == 28", "        if (l.length == 0) {\n       \
    \     return true\n        }\n        var i = 0\n        var last = l.head\n \
    \       while (i < l.length - 1) {\n            if (l.apply(i + 1) < last) {\n\
    \                return false\n            }\n            last = l.apply(i + 1)\n\
    \            i = i + 1\n        }\n        return true", "        if (l.length\
    \ == 0) {\n            return true\n        }\n        var last = l.head\n   \
    \     for (i <- 1 until l.length) {\n            if (l.apply(i).toLong > last.toLong)\
    \ {\n                last = l.apply(i)\n            } else if (l.apply(i).toLong\
    \ < last.toLong) {\n                return false\n            }\n        }\n \
    \       return true\n    }\n\n    // Return true if list elements are monotonically\
    \ increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- 1 until l.length)\
    \ {\n            if (l.apply(i).toLong < last.toLong) {\n                last\
    \ = l.apply(i)\n            } else if (l.apply(i).toLong > last.toLong) {\n  \
    \              return false\n            }\n        }\n        return true\n \
    \   }\n\n    // Return true if list elements are monotonically decreasing.\n \
    \   // >>> monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -", "        if (l.length == 0) {\n            return\
    \ true\n        }\n        if (l.length == 1) {\n            return true\n   \
    \     }\n        if (l.length == 2) {\n            return l.head == l.tail\n \
    \       }\n        if (l.length == 3) {\n            return l.head == l.tail\n\
    \        }\n        if (l.length == 4) {\n            return l.head == l.tail\n\
    \        }\n        if (l.length == 5) {\n            return l.head == l.tail\n\
    \        }\n        if (l.length == 6) {\n            return l.head == l.tail\n\
    \        }\n        if (l.length == 7) {\n            return l.head == l.tail\n\
    \        }\n        if (l.length == 8) {\n            return l.head == l.tail\n\
    \        }\n        if (l.length == 9) {\n            return l.head == l.tail\n\
    \        }\n        if (l.length == 10) {\n            return l.head == l.tail\n\
    \        }\n        if (l.length == 11) {\n            return l.head == l.tail\n\
    \        }\n        if (l.length == 12) {\n            return l.head == l.tail\n\
    \        }\n        if (l.length == 13) {\n            return l.head == l.tail\n\
    \        }\n        if (l.length == 14) {\n            return l.head == l.tail\n\
    \        }\n        if (l.length == 15) {\n            return l.head == l.tail\n\
    \        }\n        if (l.length == 16) {\n            return l.head == l.tail\n\
    \        }\n        if (l.length == 17) {\n            return l.head == l.tail\n\
    \        }\n        if (l.length == 18) {\n            return l.head == l.tail\n\
    \        }\n        if (l.length == 19) {\n            return l.head == l.tail\n\
    \        }\n        if (l.length == 20) {\n            return l.head == l.tail\n\
    \        }\n        if (l.length == 21) {\n            return l.head == l.tail",
  "        if (l.length == 0) {\n            return true\n        }\n        var i\
    \ = 0\n        while (i < l.length - 1) {\n            if (l[i] > l[i + 1]) {\n\
    \                return false\n            }\n            i = i + 1\n        }\n\
    \        return true", "        if (l.length == 0) {\n            return true\n\
    \        }\n        var last = l.head\n        for (i <- l.tail.toList) {\n  \
    \          if (i.toLong > last.toLong) {\n                return false\n     \
    \       }\n            last = i\n        }\n        return true", "        if\
    \ (l.size == 0) {\n            return true\n        }\n        if (l.size == 1)\
    \ {\n            return true\n        }\n        if (l.size == 2) {\n        \
    \    return true\n        }\n        if (l.size == 3) {\n            return true\n\
    \        }\n        if (l.size == 4) {\n            return true\n        }\n \
    \       if (l.size == 5) {\n            return true\n        }\n        if (l.size\
    \ == 6) {\n            return true\n        }\n        if (l.size == 7) {\n  \
    \          return true\n        }\n        if (l.size == 8) {\n            return\
    \ true\n        }\n        if (l.size == 9) {\n            return true\n     \
    \   }\n        if (l.size == 10) {\n            return true\n        }\n     \
    \   if (l.size == 11) {\n            return true\n        }\n        if (l.size\
    \ == 12) {\n            return true\n        }\n        if (l.size == 13) {\n\
    \            return true\n        }\n        if (l.size == 14) {\n           \
    \ return true\n        }\n        if (l.size == 15) {\n            return true\n\
    \        }\n        if (l.size == 16) {\n            return true\n        }\n\
    \        if (l.size == 17) {\n            return true\n        }\n        if (l.size\
    \ == 18) {\n            return true\n        }\n        if (l.size == 19) {\n\
    \            return true\n        }\n        if (l.size == 20) {\n           \
    \ return true\n        }\n        if (l.size == 21) {\n            return true\n\
    \        }\n        if (l.size == 22) {\n            return true\n        }\n\
    \        if (l.size == 23) {\n            return true\n        }\n        if (l.size\
    \ == 24) {\n            return true\n        }\n        if (l.size == 25) {\n\
    \            return true\n        }\n        if (l.size == 26) {\n           \
    \ return true\n        }\n        if (l.size == 27) {\n            return true\n\
    \        }\n        if (l.size == 28", "        l.size > 1\n        && l.size\
    \ <= 10\n        && l.size % 2 == 0\n        && l.size % 3 == 0\n        && l.size\
    \ % 5 == 0\n        && l.size % 7 == 0\n        && l.size % 11 == 0\n        &&\
    \ l.size % 13 == 0\n        && l.size % 17 == 0\n        && l.size % 19 == 0\n\
    \        && l.size % 23 == 0\n        && l.size % 29 == 0\n        && l.size %\
    \ 31 == 0\n        && l.size % 37 == 0\n        && l.size % 41 == 0\n        &&\
    \ l.size % 43 == 0\n        && l.size % 47 == 0\n        && l.size % 53 == 0\n\
    \        && l.size % 59 == 0\n        && l.size % 61 == 0\n        && l.size %\
    \ 67 == 0\n        && l.size % 71 == 0\n        && l.size % 73 == 0\n        &&\
    \ l.size % 79 == 0\n        && l.size % 83 == 0\n        && l.size % 89 == 0\n\
    \        && l.size % 97 == 0\n        && l.size % 101 == 0\n        && l.size\
    \ % 103 == 0\n        && l.size % 107 == 0\n        && l.size % 109 == 0\n   \
    \     && l.size % 113 == 0\n        && l.size % 127 == 0\n        && l.size %\
    \ 131 == 0\n        && l.size % 137 == 0\n        && l.size % 139 == 0\n     \
    \   && l.size % 149 == 0\n        && l.size % 151 == 0\n        && l.size % 157\
    \ == 0\n        && l.size % 163 == 0\n        && l.size % 167 == 0\n        &&\
    \ l.size % 169 == 0\n        && l.size % 173 == 0\n        && l.size % 179 ==\
    \ 0\n        && l.size % 181 == 0\n        && l.size % 191 == 0\n        && l.size\
    \ % 193 == 0\n        && l.size % 197 == 0\n        && l.size % 199 == 0\n   \
    \     && l.size % 211 == 0\n        && l.size % 223 == 0\n        && l.size %\
    \ 227", "        if (l.size == 0) {\n            return true\n        }\n    \
    \    var last = l.head\n        for (i <- l.tail.size - 1) {\n            if (l.tail.head\
    \ < l.tail.head) {\n                return false\n            }\n            last\
    \ = l.tail.head\n        }\n        return true", "        if (l.size == 0) {\n\
    \            return true\n        }\n        var last = l.head\n        for (i\
    \ <- l.tail.size) {\n            if (l.tail.head < last) {\n                return\
    \ false\n            }\n            last = l.tail.head\n        }\n        return\
    \ true", "        if (l.length == 0) {\n            return true\n        }\n \
    \       var last = l.head\n        for (i <- 1 until l.length) {\n           \
    \ if (l.apply(i).toLong > last.toLong) {\n                last = l.apply(i)\n\
    \            } else {\n                return false\n            }\n        }\n\
    \        return true", "        if (l.size == 0) {\n            return true\n\
    \        }\n        if (l.size == 1) {\n            return true\n        }\n \
    \       if (l.size == 2) {\n            return l.apply(0) <= l.apply(1)\n    \
    \    }\n        var i = 0\n        var j = l.size - 1\n        while (i < j) {\n\
    \            if (l.apply(i) > l.apply(j)) {\n                return false\n  \
    \          }\n            if (l.apply(i) < l.apply(j)) {\n                return\
    \ true\n            }\n            i = i + 1\n            j = j - 1\n        }\n\
    \        return true", "        var i = 0\n        while (i < l.length - 1) {\n\
    \            if (l[i] > l[i + 1]) {\n                return false\n          \
    \  }\n            i = i + 1\n        }\n        return true\n    }\n\n    // Return\
    \ true if list elements are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return", "        if (l.size == 0) {\n            return true\n      \
    \  }\n        var i = 0\n        var last = l.head\n        while (i < l.size\
    \ - 1) {\n            var next = l.apply(i + 1)\n            if (next < last)\
    \ {\n                return false\n            }\n            last = next\n  \
    \          i += 1\n        }\n        return true", "        if (l.length == 0)\
    \ {\n            return true\n        }\n        var last = l.head\n        for\
    \ (i <- l.tail.toList) {\n            if (i.head < last) {\n                return\
    \ false\n            }\n            last = i.head\n        }\n        return true\n\
    \    }\n\n    // Return true if list elements are monotonically increasing.\n\
    \    // >>> monotonicIncreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (i.head <= last) {\n                return false\n       \
    \     }\n            last = i.head\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i", "        if (l.size\
    \ == 0) {\n            return true\n        }\n        if (l.size == 1) {\n  \
    \          return true\n        }\n        if (l.size == 2) {\n            return\
    \ l.apply(0) <= l.apply(1)\n        }\n        if (l.size == 3) {\n          \
    \  return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2)\n        }\n  \
    \      if (l.size == 4) {\n            return l.apply(0) <= l.apply(1) && l.apply(1)\
    \ <= l.apply(2) && l.apply(2) <= l.apply(3)\n        }\n        if (l.size ==\
    \ 5) {\n            return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2)\
    \ && l.apply(2) <= l.apply(3) && l.apply(3) <= l.apply(4)\n        }\n       \
    \ if (l.size == 6) {\n            return l.apply(0) <= l.apply(1) && l.apply(1)\
    \ <= l.apply(2) && l.apply(2) <= l.apply(3) && l.apply(3) <= l.apply(4) && l.apply(4)\
    \ <= l.apply(5)\n        }\n        if (l.size == 7) {\n            return l.apply(0)\
    \ <= l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2) <= l.apply(3) && l.apply(3)\
    \ <= l.apply(4) && l.apply(4) <= l.apply(5) && l.apply(5) <= l.apply(6)\n    \
    \    }\n        if (l.size == 8) {\n            return l.apply(0) <= l.apply(1)\
    \ && l.apply(1) <= l.apply(2) && l.apply(2) <= l.apply(3) && l.apply(3) <= l.apply(4)\
    \ && l.apply(4) <= l.apply(5) && l.apply", "        if (l.length == 0) {\n   \
    \         return true\n        }\n        var i = 0\n        var last = l.head\n\
    \        while (i < l.length - 1) {\n            if (l.apply(i + 1) < last) {\n\
    \                return false\n            }\n            last = l.apply(i + 1)\n\
    \            i = i + 1\n        }\n        return true", "        if (l.length\
    \ == 0) {\n            return true\n        }\n        var last = l.head\n   \
    \     for (i <- l.tail.toList) {\n            if (i.head < last) {\n         \
    \       return false\n            }\n            last = i.head\n        }\n  \
    \      return true\n    }\n\n    // Return true if list elements are strictly\
    \ increasing.\n    // >>> strictlyIncreasing((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> strictlyIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> strictlyIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def strictlyIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (i.head <= last) {\n                return false\n       \
    \     }\n            last = i.head\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are strictly decreasing.\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> strictlyDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def strictlyDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (i.head >= last) {", "        if (l.size == 0) {\n       \
    \     return true\n        }\n        var i = 0\n        var last = l.head\n \
    \       while (i < l.size - 1) {\n            var next = l.apply(i + 1)\n    \
    \        if (next < last) {\n                return false\n            }\n   \
    \         last = next\n            i += 1\n        }\n        return true\n  \
    \  }\n\n    // Return true if list elements are strictly increasing.\n    // >>>\
    \ strictlyIncreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> strictlyIncreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> strictlyIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    // >>> strictlyIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong), List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong)))\n    // (true)\n    // >>> strictlyIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong), List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong), List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n   \
    \ // (false)\n    def strictlyIncreasing(l : List[Long]) : Boolean = {\n     \
    \   if (l.size == 0) {\n            return true\n        }\n        var i = 0\n\
    \        var last = l.head\n        while (i < l.size - 1) {\n            var\
    \ next = l.apply(i + 1)\n            if (next <= last) {\n                return\
    \ false\n            }\n            last = next\n            i += 1\n        }\n\
    \        return true\n    }\n\n", "        l.length > 1\n        && (l.head.toLong()\
    \ <= l.tail.head.toLong())\n        && (l.tail.tail.head.toLong() <= l.tail.head.toLong())",
  "        if (l.size == 0) {\n            return true\n        }\n        var last\
    \ = l.head\n        for (i <- l.tail) {\n            if (last > i) {\n       \
    \         return false\n            }\n            last = i\n        }\n     \
    \   return true\n    }\n\n    // Return true if the list elements are monotonically\
    \ increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.size == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail) {\n  \
    \          if (last < i) {\n                return false\n            }\n    \
    \        last = i\n        }\n        return true\n    }\n\n    // Return true\
    \ if the list elements are monotonically decreasing.\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.size == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail) {\n  \
    \          if (last >", "        var i = 0\n        while (i < l.length - 1) {\n\
    \            if (l[i] > l[i + 1]) {\n                return false\n          \
    \  }\n            i = i + 1\n        }\n        return true", "        if (l.isEmpty())\
    \ {\n            return true\n        }\n        var last = l.head\n        for\
    \ (i <- l.tail) {\n            if (last > i) {\n                return false\n\
    \            }\n            last = i\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically increasing.\n    // >>>\
    \ monotonicIncreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.isEmpty()) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail) {\n  \
    \          if (last < i) {\n                return false\n            }\n    \
    \        last = i\n        }\n        return true\n    }\n\n    // Return true\
    \ if list elements are monotonically decreasing.\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.isEmpty()) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail) {\n  \
    \          if (last > i) {\n                ", "        var i = 0\n        while\
    \ (i < l.length - 1) {\n            if (l[i] > l[i + 1]) {\n                return\
    \ false\n            }\n            i += 1\n        }\n        return true\n \
    \   }\n\n    // Return true if list elements are monotonically increasing.\n \
    \   // >>> monotonicIncreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                return false\n \
    \           }\n            i += 1\n        }\n        return true\n    }\n\n \
    \   // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i += 1\n        }\n        return true\n    }\n\n \
    \   // Return true if list elements are mon", "        if (l.length == 0) {\n\
    \            return true\n        }\n        var last = l.head\n        for (i\
    \ <- l.tail.toList) {\n            if (last < i) {\n                return false\n\
    \            }\n            last = i\n        }\n        return true", "     \
    \   if (l.length == 0) {\n            return true\n        }\n        var i =\
    \ 0\n        while (i < l.length - 1) {\n            if (l[i] > l[i + 1]) {\n\
    \                return false\n            }\n            i = i + 1\n        }\n\
    \        return true", "        if (l.size == 0) {\n            return true\n\
    \        }\n        var i = 0\n        var last = l.head\n        while (i < l.size\
    \ - 1) {\n            var next = l.apply(i + 1)\n            if (next < last)\
    \ {\n                return false\n            }\n            last = next\n  \
    \          i += 1\n        }\n        return true", "        if (l.length == 0)\
    \ {\n            return true\n        }\n        if (l.length == 1) {\n      \
    \      return true\n        }\n        if (l.length == 2) {\n            return\
    \ l.apply(0) <= l.apply(1)\n        }\n        if (l.length == 3) {\n        \
    \    return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2)\n        }\n\
    \        if (l.length == 4) {\n            return l.apply(0) <= l.apply(1) &&\
    \ l.apply(1) <= l.apply(2) && l.apply(2) <= l.apply(3)\n        }\n        if\
    \ (l.length == 5) {\n            return l.apply(0) <= l.apply(1) && l.apply(1)\
    \ <= l.apply(2) && l.apply(2) <= l.apply(3) && l.apply(3) <= l.apply(4)\n    \
    \    }\n        if (l.length == 6) {\n            return l.apply(0) <= l.apply(1)\
    \ && l.apply(1) <= l.apply(2) && l.apply(2) <= l.apply(3) && l.apply(3) <= l.apply(4)\
    \ && l.apply(4) <= l.apply(5)\n        }\n        if (l.length == 7) {\n     \
    \       return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2)\
    \ <= l.apply(3) && l.apply(3) <= l.apply(4) && l.apply(4) <= l.apply(5) && l.apply(5)\
    \ <= l.apply(6)\n        }\n        if (l.length == 8) {\n            return l.apply(0)\
    \ <= l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2) <= l.apply(3) && l.apply(3)\
    \ <= l.apply(4) && l.apply(4) <= l.apply(5) && l.apply", "        var i = 0\n\
    \        while (i < l.length - 1) {\n            if (l[i] > l[i + 1]) {\n    \
    \            return false\n            }\n            i = i + 1\n        }\n \
    \       return true\n    }\n\n    // Return true if the list is sorted.\n    //\
    \ >>> sorted((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n    //\
    \ (true)\n    // >>> sorted((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)))\n\
    \    // (false)\n    // >>> sorted((List[Long](4l.toLong, 1l.toLong, 0l.toLong,\
    \ -10l.toLong)))\n    // (true)\n    def sorted(l : List[Long]) : Boolean = {\n\
    \        var i = 0\n        while (i < l.length - 1) {\n            if (l[i] >\
    \ l[i + 1]) {\n                return false\n            }\n            i = i\
    \ + 1\n        }\n        return true\n    }\n\n    // Return true if the list\
    \ is sorted in ascending order.\n    // >>> ascending((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> ascending((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> ascending((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def ascending(l : List[Long])\
    \ : Boolean = {\n        var i = 0\n        while (i < l.length - 1) {\n     \
    \       if (l[i] < l[i + 1]) {\n                return false\n            }\n\
    \            i = i + 1\n        }\n        return true\n    }\n\n    // Return\
    \ true if the list is sorted in descending order.\n    // >>> descending((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.", "        if (l.size == 0) {\n            return true\n    \
    \    }\n        var first = l.head\n        var last = l.last\n        var result\
    \ = true\n        for (i <- l.size - 1) {\n            if (first < last) {\n \
    \               if (first > l.apply(i + 1)) {\n                    result = false\n\
    \                    break\n                }\n            } else {\n        \
    \        if (last < l.apply(i + 1)) {\n                    result = false\n  \
    \                  break\n                }\n            }\n        }\n      \
    \  return result", "        if (l.length == 0) {\n            return true\n  \
    \      }\n        if (l.length == 1) {\n            return true\n        }\n \
    \       if (l.length == 2) {\n            return l.apply(0) <= l.apply(1)\n  \
    \      }\n        var i = 0\n        var j = l.length - 1\n        while (i <\
    \ j) {\n            if (l.apply(i) > l.apply(j)) {\n                return false\n\
    \            }\n            if (l.apply(i) < l.apply(j)) {\n                return\
    \ true\n            }\n            i += 1\n            j -= 1\n        }\n   \
    \     return true", "        if (l.size == 0) {\n            return true\n   \
    \     }\n        if (l.size == 1) {\n            return true\n        }\n    \
    \    if (l.size == 2) {\n            return l.head == l.tail.head && l.head <=\
    \ l.tail.head\n        }\n        if (l.size == 3) {\n            return l.head\
    \ <= l.tail.head && l.head <= l.tail.tail.head\n        }\n        if (l.size\
    \ == 4) {\n            return l.head <= l.tail.head && l.head <= l.tail.tail.head\
    \ && l.tail.head <= l.tail.tail.tail.head\n        }\n        if (l.size == 5)\
    \ {\n            return l.head <= l.tail.head && l.head <= l.tail.tail.head &&\
    \ l.tail.head <= l.tail.tail.tail.head && l.tail.tail.head <= l.tail.tail.tail.tail.head\n\
    \        }\n        if (l.size == 6) {\n            return l.head <= l.tail.head\
    \ && l.head <= l.tail.tail.head && l.tail.head <= l.tail.tail.tail.head && l.tail.tail.head\
    \ <= l.tail.tail.tail.tail.head && l.tail.tail.head <= l.tail.tail.tail.tail.tail.head\n\
    \        }\n        if (l.size == 7) {\n            return l.head <= l.tail.head\
    \ && l.head <= l.tail.tail.head && l.tail.head <= l.tail.tail.tail.head && l.tail.tail.head\
    \ <= l.tail.tail.tail.tail.head && l.tail.tail.head <= l.tail.tail.tail.tail.tail.head\n\
    \        }\n        if (l.size == 8) {\n            return l.head <= l.tail.head\
    \ && l.head <= l.tail.tail.head && l.tail.head <= l.tail.tail.tail.head && l.tail.tail.head\
    \ <= l.tail.tail.tail.tail.head && l.tail.tail.head <= l.tail", "        var i\
    \ = 0\n        var j = 0\n        while (i < l.length && j < l.length) {\n   \
    \         if (l[i] > l[j]) {\n                j += 1\n            } else if (l[i]\
    \ < l[j]) {\n                i += 1\n            } else {\n                i +=\
    \ 1\n                j += 1\n            }\n        }\n        return (i == l.length)\
    \ || (j == l.length)\n    }\n\n    // Return true if list elements are monotonically\
    \ increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        var j = 0\n        while\
    \ (i < l.length && j < l.length) {\n            if (l[i] > l[j]) {\n         \
    \       j += 1\n            } else if (l[i] < l[j]) {\n                i += 1\n\
    \            } else {\n                i += 1\n                j += 1\n      \
    \      }\n        }\n        return (i == l.length)\n    }\n\n    // Return true\
    \ if list elements are monotonically decreasing.\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong", "        if (l.isEmpty()) {\n            return true\n\
    \        }\n        if (l.size() == 1) {\n            return true\n        }\n\
    \        if (l.size() == 2) {\n            return l.apply(0) <= l.apply(1)\n \
    \       }\n        var last = l.apply(0)\n        for (i <- 1 to l.size() - 1)\
    \ {\n            if (l.apply(i) < last) {\n                return false\n    \
    \        }\n            last = l.apply(i)\n        }\n        return true", " \
    \       if (l.isEmpty()) return true\n        if (l.size() == 1) return true\n\
    \        if (l.size() == 2) return l.apply(0) <= l.apply(1)\n        if (l.size()\
    \ == 3) return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2)\n        if\
    \ (l.size() == 4) return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2)\
    \ && l.apply(2) <= l.apply(3)\n        if (l.size() == 5) return l.apply(0) <=\
    \ l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2) <= l.apply(3) && l.apply(3)\
    \ <= l.apply(4)\n        if (l.size() == 6) return l.apply(0) <= l.apply(1) &&\
    \ l.apply(1) <= l.apply(2) && l.apply(2) <= l.apply(3) && l.apply(3) <= l.apply(4)\
    \ && l.apply(4) <= l.apply(5)\n        if (l.size() == 7) return l.apply(0) <=\
    \ l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2) <= l.apply(3) && l.apply(3)\
    \ <= l.apply(4) && l.apply(4) <= l.apply(5) && l.apply(5) <= l.apply(6)\n    \
    \    if (l.size() == 8) return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2)\
    \ && l.apply(2) <= l.apply(3) && l.apply(3) <= l.apply(4) && l.apply(4) <= l.apply(5)\
    \ && l.apply(5) <= l.apply(6) && l.apply(6) <= l.apply(7)\n        if (l.size()\
    \ == 9) return l.apply(0) <= l", "        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if the list elements are strictly increasing.\n    // >>>\
    \ strictlyIncreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> strictlyIncreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> strictlyIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def strictlyIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if the list elements are strictly decreasing.\n    // >>>\
    \ strictlyDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> strictlyDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> strictlyDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def strictlyDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if the list elements are monotonically increasing.\n    //\
    \ >>> monotonically", "        if (l.size == 0) {\n            return true\n \
    \       }\n        if (l.size == 1) {\n            return true\n        }\n  \
    \      if (l.size == 2) {\n            return (l.get(0) <= l.get(1))\n       \
    \ }\n        if (l.size == 3) {\n            return (l.get(0) <= l.get(1) && l.get(1)\
    \ <= l.get(2))\n        }\n        if (l.size == 4) {\n            return (l.get(0)\
    \ <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3))\n        }\n  \
    \      if (l.size == 5) {\n            return (l.get(0) <= l.get(1) && l.get(1)\
    \ <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4))\n        }\n  \
    \      if (l.size == 6) {\n            return (l.get(0) <= l.get(1) && l.get(1)\
    \ <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5))\n\
    \        }\n        if (l.size == 7) {\n            return (l.get(0) <= l.get(1)\
    \ && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4)\
    \ <= l.get(5) && l.get(5) <= l.get(6))\n        }\n        if (l.size == 8) {\n\
    \            return (l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2)\
    \ <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get", "        if (l.size\
    \ == 0) {\n            return true\n        }\n        var last = l.head\n   \
    \     for (i <- l.tail.size - 1) {\n            if (l.tail.head - last > 0) {\n\
    \                return false\n            }\n            last = l.tail.head\n\
    \        }\n        return true\n    }\n\n    // Return true if list elements\
    \ are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.size == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.size -\
    \ 1) {\n            if (l.tail.head - last < 0) {\n                return false\n\
    \            }\n            last = l.tail.head\n        }\n        return true\n\
    \    }\n\n    // Return true if list elements are monotonically decreasing.\n\
    \    // >>> monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.size == 0) {\n            return\
    \ true\n        ", "        var i = 0\n        while (i < l.length - 1) {\n  \
    \          if (l[i] > l[i + 1]) {\n                return false\n            }\n\
    \            i = i + 1\n        }\n        return true\n    }\n\n    // Return\
    \ true if list elements are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return", "        if (l.size == 0) {\n            return true\n      \
    \  }\n        var last = l.head\n        for (i <- l.tail.size - 1) {\n      \
    \      if (l.tail.head - last < 0) {\n                return false\n         \
    \   }\n            last = l.tail.head\n        }\n        return true", "    \
    \    var i = 0\n        while (i < l.length - 1) {\n            if (l[i] > l[i\
    \ + 1]) {\n                return false\n            }\n            i = i + 1\n\
    \        }\n        return true\n    }\n\n    // Return true if list elements\
    \ are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return", "        var i = 0\n        while (i < l.length - 1) {\n    \
    \        if (l[i] > l[i + 1]) {\n                return false\n            }\n\
    \            i = i + 1\n        }\n        return true\n    }\n\n    // Return\
    \ true if list elements are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return", "        l.length > 1\n        && (l.head == l.tail.head && l.tail.head\
    \ == l.tail.tail.head)\n        && (l.head <= l.tail.head && l.tail.head <= l.tail.tail.head)\n\
    \        && (l.head >= l.tail.head && l.tail.head >= l.tail.tail.head)\n     \
    \   && (l.head < l.tail.head && l.tail.head < l.tail.tail.head)\n        && (l.head\
    \ > l.tail.head && l.tail.head > l.tail.tail.head)", "        if (l.size == 0)\
    \ {\n            return true\n        }\n        var i = 0\n        var last =\
    \ l.head\n        while (i < l.size - 1) {\n            var next = l.apply(i +\
    \ 1)\n            if (next < last) {\n                return false\n         \
    \   }\n            last = next\n            i += 1\n        }\n        return\
    \ true", "        if (l.length == 0) {\n            return true\n        }\n \
    \       if (l.length == 1) {\n            return true\n        }\n        if (l.length\
    \ == 2) {\n            return true\n        }\n        if (l.length == 3) {\n\
    \            return true\n        }\n        if (l.length == 4) {\n          \
    \  return true\n        }\n        if (l.length == 5) {\n            return true\n\
    \        }\n        if (l.length == 6) {\n            return true\n        }\n\
    \        if (l.length == 7) {\n            return true\n        }\n        if\
    \ (l.length == 8) {\n            return true\n        }\n        if (l.length\
    \ == 9) {\n            return true\n        }\n        if (l.length == 10) {\n\
    \            return true\n        }\n        if (l.length == 11) {\n         \
    \   return true\n        }\n        if (l.length == 12) {\n            return\
    \ true\n        }\n        if (l.length == 13) {\n            return true\n  \
    \      }\n        if (l.length == 14) {\n            return true\n        }\n\
    \        if (l.length == 15) {\n            return true\n        }\n        if\
    \ (l.length == 16) {\n            return true\n        }\n        if (l.length\
    \ == 17) {\n            return true\n        }\n        if (l.length == 18) {\n\
    \            return true\n        }\n        if (l.length == 19) {\n         \
    \   return true\n        }\n        if (l.length == 20) {\n            return\
    \ true\n        }\n        if (l.length == 21) {\n            return true\n  \
    \      }\n        if (l.length == 22) {\n            return true\n        }\n\
    \        if (l.length == 23) {\n            return true\n        }\n        if\
    \ (l.length == 24) {\n            return true\n        }\n        if (l.length\
    \ == 25) {\n            return true\n        }\n        if (l.length == 26) {\n\
    \            return true\n        }\n        if (l.length == 27) {\n         \
    \   return true\n        }\n        if (l.length == 28", "        if (l.size ==\
    \ 0) {\n            return true\n        }\n        if (l.size == 1) {\n     \
    \       return true\n        }\n        if (l.size == 2) {\n            return\
    \ l.get(0) <= l.get(1)\n        }\n        if (l.size == 3) {\n            return\
    \ l.get(0) <= l.get(1) && l.get(1) <= l.get(2)\n        }\n        if (l.size\
    \ == 4) {\n            return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) &&\
    \ l.get(2) <= l.get(3)\n        }\n        if (l.size == 5) {\n            return\
    \ l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3)\
    \ <= l.get(4)\n        }\n        if (l.size == 6) {\n            return l.get(0)\
    \ <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4)\
    \ && l.get(4) <= l.get(5)\n        }\n        if (l.size == 7) {\n           \
    \ return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3)\
    \ && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6)\n  \
    \      }\n        if (l.size == 8) {\n            return l.get(0) <= l.get(1)\
    \ && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4)\
    \ <= l.get(5) && l.get", "        if (l.size == 0) {\n            return true\n\
    \        }\n        if (l.size == 1) {\n            return true\n        }\n \
    \       if (l.size == 2) {\n            return true\n        }\n        if (l.size\
    \ == 3) {\n            return true\n        }\n        if (l.size == 4) {\n  \
    \          return true\n        }\n        if (l.size == 5) {\n            return\
    \ true\n        }\n        if (l.size == 6) {\n            return true\n     \
    \   }\n        if (l.size == 7) {\n            return true\n        }\n      \
    \  if (l.size == 8) {\n            return true\n        }\n        if (l.size\
    \ == 9) {\n            return true\n        }\n        if (l.size == 10) {\n \
    \           return true\n        }\n        if (l.size == 11) {\n            return\
    \ true\n        }\n        if (l.size == 12) {\n            return true\n    \
    \    }\n        if (l.size == 13) {\n            return true\n        }\n    \
    \    if (l.size == 14) {\n            return true\n        }\n        if (l.size\
    \ == 15) {\n            return true\n        }\n        if (l.size == 16) {\n\
    \            return true\n        }\n        if (l.size == 17) {\n           \
    \ return true\n        }\n        if (l.size == 18) {\n            return true\n\
    \        }\n        if (l.size == 19) {\n            return true\n        }\n\
    \        if (l.size == 20) {\n            return true\n        }\n        if (l.size\
    \ == 21) {\n            return true\n        }\n        if (l.size == 22) {\n\
    \            return true\n        }\n        if (l.size == 23) {\n           \
    \ return true\n        }\n        if (l.size == 24) {\n            return true\n\
    \        }\n        if (l.size == 25) {\n            return true\n        }\n\
    \        if (l.size == 26) {\n            return true\n        }\n        if (l.size\
    \ == 27) {\n            return true\n        }\n        if (l.size == 28", " \
    \       var i = 0\n        while (i < l.length - 1) {\n            if (l[i] >\
    \ l[i + 1]) {\n                return false\n            }\n            i = i\
    \ + 1\n        }\n        return true\n    }\n\n    // Return true if list elements\
    \ are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return", "        if (l.isEmpty()) {\n            return true\n      \
    \  }\n        var last = l.head\n        for (i <- l.tail) {\n            if (last\
    \ > i) {\n                return false\n            }\n            last = i\n\
    \        }\n        return true\n    }\n\n    // Return true if list elements\
    \ are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.isEmpty()) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail) {\n  \
    \          if (last < i) {\n                return false\n            }\n    \
    \        last = i\n        }\n        return true\n    }\n\n    // Return true\
    \ if list elements are monotonically decreasing.\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.isEmpty()) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail) {\n  \
    \          if (last > i) {\n                ", "        if (l.size == 0) {\n \
    \           return true\n        }\n        var i = 0\n        var last = l.head\n\
    \        while (i < l.size - 1) {\n            var next = l.apply(i + 1)\n   \
    \         if (next < last) {\n                return false\n            }\n  \
    \          last = next\n            i += 1\n        }\n        return true", " \
    \       if (l.length == 0) {\n            return true\n        }\n        var\
    \ last = l.head\n        for (i <- l.tail.toList) {\n            if (i.head <\
    \ last) {\n                return false\n            }\n            last = i.head\n\
    \        }\n        return true\n    }\n\n    // Return true if list elements\
    \ are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (i.head > last) {\n                return false\n        \
    \    }\n            last = i.head\n        }\n        return true\n    }\n\n \
    \   // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i", "        var i\
    \ = 0\n        while (i < l.length - 1) {\n            if (l[i] > l[i + 1]) {\n\
    \                return false\n            }\n            i = i + 1\n        }\n\
    \        return true\n    }\n\n    // Return true if list elements are monotonically\
    \ increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return", "        if (l.size == 0) {\n            return true\n      \
    \  }\n        if (l.size == 1) {\n            return true\n        }\n       \
    \ if (l.size == 2) {\n            return l.apply(0) <= l.apply(1)\n        }\n\
    \        var i = 0\n        var j = l.size - 1\n        while (i < j) {\n    \
    \        if (l.apply(i) > l.apply(j)) {\n                return false\n      \
    \      }\n            if (l.apply(i) < l.apply(j)) {\n                return true\n\
    \            }\n            i += 1\n            j -= 1\n        }\n        return\
    \ true", "        if (l.length == 0) {\n            return true\n        }\n \
    \       var last = l.head\n        for (i <- l.tail.toList) {\n            if\
    \ (i.head < last) {\n                return false\n            }\n           \
    \ last = i.head\n        }\n        return true\n    }\n\n    // Return true if\
    \ list elements are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (i.head <= last) {\n                return false\n       \
    \     }\n            last = i.head\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i", "        if (l.length\
    \ == 0) {\n            return true\n        }\n        var last = l.head\n   \
    \     for (i <- l.tail) {\n            if (last > i) {\n                return\
    \ false\n            }\n            last = i\n        }\n        return true\n\
    \    }\n\n    // Return true if list elements are monotonically increasing.\n\
    \    // >>> monotonicIncreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail) {\n  \
    \          if (last < i) {\n                return false\n            }\n    \
    \        last = i\n        }\n        return true\n    }\n\n    // Return true\
    \ if list elements are monotonically decreasing.\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail) {\n  \
    \          if (last > i)", "        if (l.size == 0) {\n            return true\n\
    \        }\n        var last = l.head\n        for (i <- l.tail.size - 1) {\n\
    \            if (l.tail.head < last) {\n                return false\n       \
    \     }\n            last = l.tail.head\n        }\n        return true", "  \
    \      if (l.length == 0) {\n            return true\n        }\n        if (l.length\
    \ == 1) {\n            return true\n        }\n        if (l.length == 2) {\n\
    \            return true\n        }\n        if (l.length == 3) {\n          \
    \  return true\n        }\n        if (l.length == 4) {\n            return true\n\
    \        }\n        if (l.length == 5) {\n            return true\n        }\n\
    \        if (l.length == 6) {\n            return true\n        }\n        if\
    \ (l.length == 7) {\n            return true\n        }\n        if (l.length\
    \ == 8) {\n            return true\n        }\n        if (l.length == 9) {\n\
    \            return true\n        }\n        if (l.length == 10) {\n         \
    \   return true\n        }\n        if (l.length == 11) {\n            return\
    \ true\n        }\n        if (l.length == 12) {\n            return true\n  \
    \      }\n        if (l.length == 13) {\n            return true\n        }\n\
    \        if (l.length == 14) {\n            return true\n        }\n        if\
    \ (l.length == 15) {\n            return true\n        }\n        if (l.length\
    \ == 16) {\n            return true\n        }\n        if (l.length == 17) {\n\
    \            return true\n        }\n        if (l.length == 18) {\n         \
    \   return true\n        }\n        if (l.length == 19) {\n            return\
    \ true\n        }\n        if (l.length == 20) {\n            return true\n  \
    \      }\n        if (l.length == 21) {\n            return true\n        }\n\
    \        if (l.length == 22) {\n            return true\n        }\n        if\
    \ (l.length == 23) {\n            return true\n        }\n        if (l.length\
    \ == 24) {\n            return true\n        }\n        if (l.length == 25) {\n\
    \            return true\n        }\n        if (l.length == 26) {\n         \
    \   return true\n        }\n        if (l.length == 27) {\n            return\
    \ true\n        }\n        if (l.length == 28", "        var i = 0\n        while\
    \ (i < l.length - 1) {\n            if (l[i] > l[i + 1]) {\n                return\
    \ false\n            }\n            i = i + 1\n        }\n        return true",
  "        if (l.size == 0) {\n            return true\n        }\n        var first\
    \ = l.head\n        var last = l.last\n        var result = true\n        for\
    \ (i <- l.size - 1) {\n            if (l.apply(i).compareTo(first) < 0) {\n  \
    \              result = false\n                break\n            }\n        \
    \    if (l.apply(i).compareTo(last) > 0) {\n                result = false\n \
    \               break\n            }\n        }\n        return result", "   \
    \     if (l.size == 0) {\n            return true\n        }\n        var last\
    \ = l.head\n        for (i <- l.tail.size) {\n            if (l.tail.head < last)\
    \ {\n                return false\n            }\n            last = l.tail.head\n\
    \        }\n        return true\n    }\n\n    // Return true if list elements\
    \ are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.size == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.size) {\n\
    \            if (l.tail.head > last) {\n                return false\n       \
    \     }\n            last = l.tail.head\n        }\n        return true\n    }\n\
    \n    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.size == 0) {\n            return\
    \ true\n        }\n        var last = l.", "        l.size > 1\n        && l.size\
    \ == l.tail.size\n        && l.tail.size == l.tail.tail.size\n        && l.tail.tail.size\
    \ == l.tail.tail.tail.size\n        && l.tail.tail.tail.size == l.tail.tail.tail.tail.size\n\
    \        && l.tail.tail.tail.tail.size == l.tail.tail.tail.tail.tail.size\n  \
    \      && l.tail.tail.tail.tail.tail.size == l.tail.tail.tail.tail.tail.tail.size\n\
    \        && l.tail.tail.tail.tail.tail.tail.size == l.tail.tail.tail.tail.tail.tail.tail.size\n\
    \        && l.tail.tail.tail.tail.tail.tail.tail.size == l.tail.tail.tail.tail.tail.tail.tail.tail.size\n\
    \        && l.tail.tail.tail.tail.tail.tail.tail.tail.size == l.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n\
    \        && l.tail.tail.tail.tail.tail.tail.tail.tail.tail.size == l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n\
    \        && l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size == l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n\
    \        && l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size == l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n\
    \        && l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\
    \ == l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n\
    \        && l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\
    \ == l.tail.tail", "        if (l.length == 0) {\n            return true\n  \
    \      }\n        var i = 0\n        var last = l.head\n        while (i < l.length\
    \ - 1) {\n            var next = l.apply(i + 1)\n            if (next < last)\
    \ {\n                return false\n            }\n            last = next\n  \
    \          i += 1\n        }\n        return true\n    }\n\n    // Return true\
    \ if list elements are in ascending order.\n    // >>> ascending((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> ascending((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> ascending((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def ascending(l :\
    \ List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var i = 0\n        var last = l.head\n        while\
    \ (i < l.length - 1) {\n            var next = l.apply(i + 1)\n            if\
    \ (next > last) {\n                return false\n            }\n            last\
    \ = next\n            i += 1\n        }\n        return true\n    }\n\n    //\
    \ Return true if list elements are in descending order.\n    // >>> descending((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> descending((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> descending((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def descending(l :\
    \ List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var i = 0\n        var", "        if (l.size == 0)\
    \ {\n            return true\n        }\n        if (l.size == 1) {\n        \
    \    return true\n        }\n        if (l.size == 2) {\n            return l.get(0)\
    \ <= l.get(1)\n        }\n        if (l.size == 3) {\n            return l.get(0)\
    \ <= l.get(1) && l.get(1) <= l.get(2)\n        }\n        if (l.size == 4) {\n\
    \            return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <=\
    \ l.get(3)\n        }\n        if (l.size == 5) {\n            return l.get(0)\
    \ <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4)\n\
    \        }\n        if (l.size == 6) {\n            return l.get(0) <= l.get(1)\
    \ && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4)\
    \ <= l.get(5)\n        }\n        if (l.size == 7) {\n            return l.get(0)\
    \ <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4)\
    \ && l.get(4) <= l.get(5) && l.get(5) <= l.get(6)\n        }\n        if (l.size\
    \ == 8) {\n            return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) &&\
    \ l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get",
  "        if (l.size == 0) {\n            return true\n        }\n        if (l.size\
    \ == 1) {\n            return true\n        }\n        if (l.size == 2) {\n  \
    \          return true\n        }\n        if (l.size == 3) {\n            return\
    \ true\n        }\n        if (l.size == 4) {\n            return true\n     \
    \   }\n        if (l.size == 5) {\n            return true\n        }\n      \
    \  if (l.size == 6) {\n            return true\n        }\n        if (l.size\
    \ == 7) {\n            return true\n        }\n        if (l.size == 8) {\n  \
    \          return true\n        }\n        if (l.size == 9) {\n            return\
    \ true\n        }\n        if (l.size == 10) {\n            return true\n    \
    \    }\n        if (l.size == 11) {\n            return true\n        }\n    \
    \    if (l.size == 12) {\n            return true\n        }\n        if (l.size\
    \ == 13) {\n            return true\n        }\n        if (l.size == 14) {\n\
    \            return true\n        }\n        if (l.size == 15) {\n           \
    \ return true\n        }\n        if (l.size == 16) {\n            return true\n\
    \        }\n        if (l.size == 17) {\n            return true\n        }\n\
    \        if (l.size == 18) {\n            return true\n        }\n        if (l.size\
    \ == 19) {\n            return true\n        }\n        if (l.size == 20) {\n\
    \            return true\n        }\n        if (l.size == 21) {\n           \
    \ return true\n        }\n        if (l.size == 22) {\n            return true\n\
    \        }\n        if (l.size == 23) {\n            return true\n        }\n\
    \        if (l.size == 24) {\n            return true\n        }\n        if (l.size\
    \ == 25) {\n            return true\n        }\n        if (l.size == 26) {\n\
    \            return true\n        }\n        if (l.size == 27) {\n           \
    \ return true\n        }\n        if (l.size == 28", "        if (l.size == 0)\
    \ {\n            return true\n        }\n        if (l.size == 1) {\n        \
    \    return true\n        }\n        if (l.size == 2) {\n            return l.get(0)\
    \ <= l.get(1)\n        }\n        if (l.size == 3) {\n            return l.get(0)\
    \ <= l.get(1) && l.get(1) <= l.get(2)\n        }\n        if (l.size == 4) {\n\
    \            return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <=\
    \ l.get(3)\n        }\n        if (l.size == 5) {\n            return l.get(0)\
    \ <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4)\n\
    \        }\n        if (l.size == 6) {\n            return l.get(0) <= l.get(1)\
    \ && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4)\
    \ <= l.get(5)\n        }\n        if (l.size == 7) {\n            return l.get(0)\
    \ <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4)\
    \ && l.get(4) <= l.get(5) && l.get(5) <= l.get(6)\n        }\n        if (l.size\
    \ == 8) {\n            return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) &&\
    \ l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get",
  "        var result = true\n        for (i <- 0 until l.length - 1) {\n        \
    \    if (l[i] > l[i + 1]) {\n                result = false\n                break\n\
    \            }\n        }\n        return result", "        var result = true\n\
    \        for (i <- 0 until l.length - 1) {\n            if (l[i] > l[i + 1]) {\n\
    \                result = false\n                break\n            }\n      \
    \  }\n        return result\n    }\n\n    // Return true if list elements are\
    \ sorted.\n    // >>> sorted((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> sorted((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> sorted((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def sorted(l : List[Long]) : Boolean\
    \ = {\n        var result = true\n        for (i <- 0 until l.length - 1) {\n\
    \            if (l[i] > l[i + 1]) {\n                result = false\n        \
    \        break\n            }\n        }\n        return result\n    }\n\n   \
    \ // Return true if list elements are sorted in ascending order.\n    // >>> ascending((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> ascending((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> ascending((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def ascending(l : List[Long])\
    \ : Boolean = {\n        var result = true\n        for (i <- 0 until l.length\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                result = false\n\
    \                break\n            }\n        }\n        return result\n    }\n\
    \n    // Return true if list elements are sorted in descending order.\n    //\
    \ >>> descending((List[Long](1l.toLong, 2l.toLong, 4l.toLong,", "        var i\
    \ = 0\n        while (i < l.length - 1) {\n            if (l(i) > l(i + 1)) {\n\
    \                return false\n            }\n            i = i + 1\n        }\n\
    \        return true\n    }\n\n    // Return true if list elements are strictly\
    \ increasing.\n    // >>> strictlyIncreasing((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> strictlyIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> strictlyIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def strictlyIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l(i) >= l(i + 1)) {\n                return false\n\
    \            }\n            i = i + 1\n        }\n        return true\n    }\n\
    \n    // Return true if list elements are strictly decreasing.\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> strictlyDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def strictlyDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l(i) <= l(i + 1)) {\n                return false\n\
    \            }\n            i = i + 1\n        }\n        return true\n    }\n\
    \n    // Return true if list elements are monotonically increasing.\n    // >>>\
    \ monotonicallyIncreasing((", "        if (l.size == 0) {\n            return\
    \ true\n        }\n        if (l.size == 1) {\n            return true\n     \
    \   }\n        if (l.size == 2) {\n            return true\n        }\n      \
    \  if (l.size == 3) {\n            return true\n        }\n        if (l.size\
    \ == 4) {\n            return true\n        }\n        if (l.size == 5) {\n  \
    \          return true\n        }\n        if (l.size == 6) {\n            return\
    \ true\n        }\n        if (l.size == 7) {\n            return true\n     \
    \   }\n        if (l.size == 8) {\n            return true\n        }\n      \
    \  if (l.size == 9) {\n            return true\n        }\n        if (l.size\
    \ == 10) {\n            return true\n        }\n        if (l.size == 11) {\n\
    \            return true\n        }\n        if (l.size == 12) {\n           \
    \ return true\n        }\n        if (l.size == 13) {\n            return true\n\
    \        }\n        if (l.size == 14) {\n            return true\n        }\n\
    \        if (l.size == 15) {\n            return true\n        }\n        if (l.size\
    \ == 16) {\n            return true\n        }\n        if (l.size == 17) {\n\
    \            return true\n        }\n        if (l.size == 18) {\n           \
    \ return true\n        }\n        if (l.size == 19) {\n            return true\n\
    \        }\n        if (l.size == 20) {\n            return true\n        }\n\
    \        if (l.size == 21) {\n            return true\n        }\n        if (l.size\
    \ == 22) {\n            return true\n        }\n        if (l.size == 23) {\n\
    \            return true\n        }\n        if (l.size == 24) {\n           \
    \ return true\n        }\n        if (l.size == 25) {\n            return true\n\
    \        }\n        if (l.size == 26) {\n            return true\n        }\n\
    \        if (l.size == 27) {\n            return true\n        }\n        if (l.size\
    \ == 28", "        var i = 0\n        while (i < l.length - 1) {\n           \
    \ if (l[i] > l[i + 1]) {\n                return false\n            }\n      \
    \      i += 1\n        }\n        return true", "        var i = 0\n        while\
    \ (i < l.length - 1) {\n            if (l[i] > l[i + 1]) {\n                return\
    \ false\n            }\n            i += 1\n        }\n        return true", " \
    \       if (l.size == 0) {\n            return true\n        }\n        if (l.size\
    \ == 1) {\n            return true\n        }\n        if (l.size == 2) {\n  \
    \          return (l.head == l.tail)\n        }\n        if (l.size == 3) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 4) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 5) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 6) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 7) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 8) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 9) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 10) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 11) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 12) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 13) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 14) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 15) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 16) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 17) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 18) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 19) {\n\
    \            return (l.head <= l.tail)\n        }\n        if (l.size == 20",
  "        if (l.length == 0) {\n            return true\n        }\n        var last\
    \ = l.head\n        for (i <- l.tail.toList) {\n            if (i.head < last)\
    \ {\n                return false\n            }\n            last = i.head\n\
    \        }\n        return true\n    }\n\n    // Return true if list elements\
    \ are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (i.head > last) {\n                return false\n        \
    \    }\n            last = i.head\n        }\n        return true\n    }\n\n \
    \   // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i", "        var i\
    \ = 0\n        while (i < l.length - 1) {\n            if (l[i] > l[i + 1]) {\n\
    \                return false\n            }\n            i = i + 1\n        }\n\
    \        return true\n    }\n\n    // Return true if list elements are monotonically\
    \ increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return", "        if (l.size == 0) {\n            return true\n      \
    \  }\n        if (l.size == 1) {\n            return true\n        }\n       \
    \ if (l.size == 2) {\n            return l.get(0) <= l.get(1)\n        }\n   \
    \     if (l.size == 3) {\n            return l.get(0) <= l.get(1) && l.get(1)\
    \ <= l.get(2)\n        }\n        if (l.size == 4) {\n            return l.get(0)\
    \ <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3)\n        }\n   \
    \     if (l.size == 5) {\n            return l.get(0) <= l.get(1) && l.get(1)\
    \ <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4)\n        }\n   \
    \     if (l.size == 6) {\n            return l.get(0) <= l.get(1) && l.get(1)\
    \ <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5)\n\
    \        }\n        if (l.size == 7) {\n            return l.get(0) <= l.get(1)\
    \ && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4)\
    \ <= l.get(5) && l.get(5) <= l.get(6)\n        }\n        if (l.size == 8) {\n\
    \            return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <=\
    \ l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get", "      \
    \  var i = 0\n        while (i < l.length - 1) {\n            if (l[i] > l[i +\
    \ 1]) {\n                return false\n            }\n            i = i + 1\n\
    \        }\n        return true\n    }\n\n    // Return true if list elements\
    \ are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return", "        if (l.size == 0) {\n            return true\n      \
    \  }\n        if (l.size == 1) {\n            return true\n        }\n       \
    \ if (l.size == 2) {\n            return true\n        }\n        if (l.size ==\
    \ 3) {\n            return true\n        }\n        if (l.size == 4) {\n     \
    \       return true\n        }\n        if (l.size == 5) {\n            return\
    \ true\n        }\n        if (l.size == 6) {\n            return true\n     \
    \   }\n        if (l.size == 7) {\n            return true\n        }\n      \
    \  if (l.size == 8) {\n            return true\n        }\n        if (l.size\
    \ == 9) {\n            return true\n        }\n        if (l.size == 10) {\n \
    \           return true\n        }\n        if (l.size == 11) {\n            return\
    \ true\n        }\n        if (l.size == 12) {\n            return true\n    \
    \    }\n        if (l.size == 13) {\n            return true\n        }\n    \
    \    if (l.size == 14) {\n            return true\n        }\n        if (l.size\
    \ == 15) {\n            return true\n        }\n        if (l.size == 16) {\n\
    \            return true\n        }\n        if (l.size == 17) {\n           \
    \ return true\n        }\n        if (l.size == 18) {\n            return true\n\
    \        }\n        if (l.size == 19) {\n            return true\n        }\n\
    \        if (l.size == 20) {\n            return true\n        }\n        if (l.size\
    \ == 21) {\n            return true\n        }\n        if (l.size == 22) {\n\
    \            return true\n        }\n        if (l.size == 23) {\n           \
    \ return true\n        }\n        if (l.size == 24) {\n            return true\n\
    \        }\n        if (l.size == 25) {\n            return true\n        }\n\
    \        if (l.size == 26) {\n            return true\n        }\n        if (l.size\
    \ == 27) {\n            return true\n        }\n        if (l.size == 28", " \
    \       if (l.size == 0) {\n            return true\n        }\n        var last\
    \ = l.head\n        for (i <- l.tail.size) {\n            if (l.tail.head - last\
    \ > 0) {\n                return false\n            }\n            last = l.tail.head\n\
    \        }\n        return true", "        var i = 0\n        while (i < l.length\
    \ - 1) {\n            var j = i + 1\n            while (j < l.length) {\n    \
    \            if (l[i] > l[j]) {\n                    return false\n          \
    \      }\n                j += 1\n            }\n            i += 1\n        }\n\
    \        return true\n    }\n\n    // Return true if list elements are sorted.\n\
    \    // >>> sorted((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> sorted((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> sorted((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def sorted(l : List[Long]) : Boolean\
    \ = {\n        var i = 0\n        while (i < l.length - 1) {\n            var\
    \ j = i + 1\n            while (j < l.length) {\n                if (l[i] > l[j])\
    \ {\n                    return false\n                }\n                j +=\
    \ 1\n            }\n            i += 1\n        }\n        return true\n    }\n\
    \n    // Return true if list elements are sorted in ascending order.\n    // >>>\
    \ ascending((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n    //\
    \ (true)\n    // >>> ascending((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)))\n\
    \    // (false)\n    // >>> ascending((List[Long](4l.toLong, 1l.toLong, 0l.toLong,\
    \ -10l.toLong)))\n    // (true)\n    def ascending(l : List[Long]) : Boolean =\
    \ {\n        var i = 0\n        while (i < l.length - 1) {\n            var j\
    \ = i + 1\n            while (j < l.length) {\n                if (l[i] < l[j])\
    \ {", "        var i = 0\n        while (i < l.length - 1) {\n            if (l[i]\
    \ > l[i + 1]) {\n                return false\n            }\n            i =\
    \ i + 1\n        }\n        return true\n    }\n\n    // Return true if list elements\
    \ are strictly increasing.\n    // >>> strictlyIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> strictlyIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> strictlyIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def strictlyIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are strictly decreasing.\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> strictlyDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def strictlyDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically increasing.\n    // >>>\
    \ monotonicallyIncreasing((", "        l.size > 1\n        && l.size == l.tail.size\n\
    \        && l.tail.size == l.tail.tail.size\n        && l.tail.tail.size == l.tail.tail.tail.size\n\
    \        && l.tail.tail.tail.size == l.tail.tail.tail.tail.size\n        && l.tail.tail.tail.tail.size\
    \ == l.tail.tail.tail.tail.tail.size\n        && l.tail.tail.tail.tail.tail.size\
    \ == l.tail.tail.tail.tail.tail.tail.size\n        && l.tail.tail.tail.tail.tail.tail.size\
    \ == l.tail.tail.tail.tail.tail.tail.tail.size\n        && l.tail.tail.tail.tail.tail.tail.tail.size\
    \ == l.tail.tail.tail.tail.tail.tail.tail.tail.size\n        && l.tail.tail.tail.tail.tail.tail.tail.tail.size\
    \ == l.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n        && l.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\
    \ == l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n        && l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\
    \ == l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n        &&\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size == l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n\
    \        && l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\
    \ == l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n\
    \        && l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\
    \ == l.tail.tail", "        if (l.size == 0) {\n            return true\n    \
    \    }\n        if (l.size == 1) {\n            return true\n        }\n     \
    \   if (l.size == 2) {\n            return l.get(0) <= l.get(1)\n        }\n \
    \       var i = 0\n        var j = l.size - 1\n        while (i < j) {\n     \
    \       if (l.get(i) > l.get(j)) {\n                return false\n           \
    \ }\n            if (l.get(i) < l.get(j)) {\n                return true\n   \
    \         }\n            i += 1\n            j -= 1\n        }\n        return\
    \ true", "        if (l.length == 0) {\n            return true\n        }\n \
    \       var i = 0\n        var last = l.head\n        while (i < l.length - 1)\
    \ {\n            var next = l.apply(i + 1)\n            if (next < last) {\n \
    \               return false\n            }\n            last = next\n       \
    \     i += 1\n        }\n        return true", "        if (l.length == 0) {\n\
    \            return true\n        }\n        if (l.length == 1) {\n          \
    \  return true\n        }\n        if (l.length == 2) {\n            return true\n\
    \        }\n        if (l.length == 3) {\n            return true\n        }\n\
    \        if (l.length == 4) {\n            return true\n        }\n        if\
    \ (l.length == 5) {\n            return true\n        }\n        if (l.length\
    \ == 6) {\n            return true\n        }\n        if (l.length == 7) {\n\
    \            return true\n        }\n        if (l.length == 8) {\n          \
    \  return true\n        }\n        if (l.length == 9) {\n            return true\n\
    \        }\n        if (l.length == 10) {\n            return true\n        }\n\
    \        if (l.length == 11) {\n            return true\n        }\n        if\
    \ (l.length == 12) {\n            return true\n        }\n        if (l.length\
    \ == 13) {\n            return true\n        }\n        if (l.length == 14) {\n\
    \            return true\n        }\n        if (l.length == 15) {\n         \
    \   return true\n        }\n        if (l.length == 16) {\n            return\
    \ true\n        }\n        if (l.length == 17) {\n            return true\n  \
    \      }\n        if (l.length == 18) {\n            return true\n        }\n\
    \        if (l.length == 19) {\n            return true\n        }\n        if\
    \ (l.length == 20) {\n            return true\n        }\n        if (l.length\
    \ == 21) {\n            return true\n        }\n        if (l.length == 22) {\n\
    \            return true\n        }\n        if (l.length == 23) {\n         \
    \   return true\n        }\n        if (l.length == 24) {\n            return\
    \ true\n        }\n        if (l.length == 25) {\n            return true\n  \
    \      }\n        if (l.length == 26) {\n            return true\n        }\n\
    \        if (l.length == 27) {\n            return true\n        }\n        if\
    \ (l.length == 28", "        if (l.length == 0) {\n            return true\n \
    \       }\n        var last = l.head\n        for (i <- l.tail) {\n          \
    \  if (last > i) {\n                return false\n            }\n            last\
    \ = i\n        }\n        return true\n    }\n\n    // Return true if list elements\
    \ are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail) {\n  \
    \          if (last < i) {\n                return false\n            }\n    \
    \        last = i\n        }\n        return true\n    }\n\n    // Return true\
    \ if list elements are monotonically decreasing.\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail) {\n  \
    \          if (last > i)", "        l.size > 1\n        && l.size <= 10\n    \
    \    && l.forall(x => {\n            if (x > 0) {\n                return x <\
    \ l.tail.head\n            } else if (x < 0) {\n                return x > l.tail.head\n\
    \            } else {\n                return true\n            }\n        })",
  "        if (l.length == 0) {\n            return true\n        }\n        var last\
    \ = l.head\n        for (i <- l.tail.toList) {\n            if (i.head < last)\
    \ {\n                return false\n            }\n            last = i.head\n\
    \        }\n        return true\n    }\n\n    // Return true if list elements\
    \ are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (i.head <= last) {\n                return false\n       \
    \     }\n            last = i.head\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i", "        if (l.length\
    \ == 0) {\n            return true\n        }\n        var i = 0\n        var\
    \ last = l[0]\n        while (i < l.length - 1) {\n            if (l[i + 1] <\
    \ last) {\n                return false\n            }\n            last = l[i\
    \ + 1]\n            i += 1\n        }\n        return true", "        if (l.size\
    \ == 0) {\n            return true\n        }\n        var i = 0\n        var\
    \ last = l.head\n        while (i < l.size - 1) {\n            if (l.apply(i).toLong\
    \ > l.apply(i + 1).toLong) {\n                return false\n            }\n  \
    \          i = i + 1\n        }\n        return true", "        var i = 0\n  \
    \      while (i < l.length - 1) {\n            if (l[i] > l[i + 1]) {\n      \
    \          return false\n            }\n            i = i + 1\n        }\n   \
    \     return true\n    }\n\n    // Return true if list elements are monotonically\
    \ increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true\n    }\n\n\
    \    // Return", "        if (l.size == 0) {\n            return true\n      \
    \  }\n        if (l.size == 1) {\n            return true\n        }\n       \
    \ if (l.size == 2) {\n            return true\n        }\n        if (l.size ==\
    \ 3) {\n            return true\n        }\n        if (l.size == 4) {\n     \
    \       return true\n        }\n        if (l.size == 5) {\n            return\
    \ true\n        }\n        if (l.size == 6) {\n            return true\n     \
    \   }\n        if (l.size == 7) {\n            return true\n        }\n      \
    \  if (l.size == 8) {\n            return true\n        }\n        if (l.size\
    \ == 9) {\n            return true\n        }\n        if (l.size == 10) {\n \
    \           return true\n        }\n        if (l.size == 11) {\n            return\
    \ true\n        }\n        if (l.size == 12) {\n            return true\n    \
    \    }\n        if (l.size == 13) {\n            return true\n        }\n    \
    \    if (l.size == 14) {\n            return true\n        }\n        if (l.size\
    \ == 15) {\n            return true\n        }\n        if (l.size == 16) {\n\
    \            return true\n        }\n        if (l.size == 17) {\n           \
    \ return true\n        }\n        if (l.size == 18) {\n            return true\n\
    \        }\n        if (l.size == 19) {\n            return true\n        }\n\
    \        if (l.size == 20) {\n            return true\n        }\n        if (l.size\
    \ == 21) {\n            return true\n        }\n        if (l.size == 22) {\n\
    \            return true\n        }\n        if (l.size == 23) {\n           \
    \ return true\n        }\n        if (l.size == 24) {\n            return true\n\
    \        }\n        if (l.size == 25) {\n            return true\n        }\n\
    \        if (l.size == 26) {\n            return true\n        }\n        if (l.size\
    \ == 27) {\n            return true\n        }\n        if (l.size == 28", " \
    \       if (l.length == 0) {\n            return true\n        }\n        if (l.length\
    \ == 1) {\n            return true\n        }\n        if (l.length == 2) {\n\
    \            return l.apply(0) <= l.apply(1)\n        }\n        var i = 0\n \
    \       var j = 1\n        var k = 2\n        while (k < l.length) {\n       \
    \     if (l.apply(i) <= l.apply(j)) {\n                if (l.apply(j) <= l.apply(k))\
    \ {\n                    return true\n                }\n            } else {\n\
    \                if (l.apply(i) >= l.apply(k)) {\n                    return false\n\
    \                }\n            }\n            i = j\n            j = k\n    \
    \        k = k + 1\n        }\n        return true", "        if (l.size == 0)\
    \ {\n            return true\n        }\n        var last = l.head\n        for\
    \ (i <- l.tail.size) {\n            if (l.tail.head < last) {\n              \
    \  return false\n            }\n            last = l.tail.head\n        }\n  \
    \      return true\n    }\n\n    // Return true if list elements are monotonically\
    \ increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.size == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.size) {\n\
    \            if (l.tail.head > last) {\n                return false\n       \
    \     }\n            last = l.tail.head\n        }\n        return true\n    }\n\
    \n    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.size == 0) {\n            return\
    \ true\n        }\n        var last = l.", "        if (l.size == 0) {\n     \
    \       return true\n        }\n        if (l.size == 1) {\n            return\
    \ true\n        }\n        if (l.size == 2) {\n            return true\n     \
    \   }\n        if (l.size == 3) {\n            return true\n        }\n      \
    \  if (l.size == 4) {\n            return true\n        }\n        if (l.size\
    \ == 5) {\n            return true\n        }\n        if (l.size == 6) {\n  \
    \          return true\n        }\n        if (l.size == 7) {\n            return\
    \ true\n        }\n        if (l.size == 8) {\n            return true\n     \
    \   }\n        if (l.size == 9) {\n            return true\n        }\n      \
    \  if (l.size == 10) {\n            return true\n        }\n        if (l.size\
    \ == 11) {\n            return true\n        }\n        if (l.size == 12) {\n\
    \            return true\n        }\n        if (l.size == 13) {\n           \
    \ return true\n        }\n        if (l.size == 14) {\n            return true\n\
    \        }\n        if (l.size == 15) {\n            return true\n        }\n\
    \        if (l.size == 16) {\n            return true\n        }\n        if (l.size\
    \ == 17) {\n            return true\n        }\n        if (l.size == 18) {\n\
    \            return true\n        }\n        if (l.size == 19) {\n           \
    \ return true\n        }\n        if (l.size == 20) {\n            return true\n\
    \        }\n        if (l.size == 21) {\n            return true\n        }\n\
    \        if (l.size == 22) {\n            return true\n        }\n        if (l.size\
    \ == 23) {\n            return true\n        }\n        if (l.size == 24) {\n\
    \            return true\n        }\n        if (l.size == 25) {\n           \
    \ return true\n        }\n        if (l.size == 26) {\n            return true\n\
    \        }\n        if (l.size == 27) {\n            return true\n        }\n\
    \        if (l.size == 28", "        if (l.isEmpty()) {\n            return true\n\
    \        }\n        var first = l.head\n        var last = l.head\n        for\
    \ (i <- l.size - 1) {\n            last = l.apply(i)\n            if (first.compareTo(last)\
    \ > 0) {\n                return false\n            }\n            first = last\n\
    \        }\n        return true", "        l.isEmpty()\n        || (l.size() ==\
    \ 1 && l.head == l.tail)\n        || (l.size() == 2 && l.head == l.tail && l.head\
    \ <= l.tail)\n        || (l.size() > 2 && l.head <= l.tail && l.tail <= l.head)\n\
    \        }\n}\n", "        if (l.length == 0) {\n            return true\n   \
    \     }\n        if (l.length == 1) {\n            return true\n        }\n  \
    \      if (l.length == 2) {\n            return l.apply(0) <= l.apply(1)\n   \
    \     }\n        if (l.length == 3) {\n            return l.apply(0) <= l.apply(1)\
    \ && l.apply(1) <= l.apply(2)\n        }\n        if (l.length == 4) {\n     \
    \       return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2)\
    \ <= l.apply(3)\n        }\n        if (l.length == 5) {\n            return l.apply(0)\
    \ <= l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2) <= l.apply(3) && l.apply(3)\
    \ <= l.apply(4)\n        }\n        if (l.length == 6) {\n            return l.apply(0)\
    \ <= l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2) <= l.apply(3) && l.apply(3)\
    \ <= l.apply(4) && l.apply(4) <= l.apply(5)\n        }\n        if (l.length ==\
    \ 7) {\n            return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2)\
    \ && l.apply(2) <= l.apply(3) && l.apply(3) <= l.apply(4) && l.apply(4) <= l.apply(5)\
    \ && l.apply(5) <= l.apply(6)\n        }\n        if (l.length == 8) {\n     \
    \       return l.apply(0) <= l.apply(1) && l.apply(1) <= l.apply(2) && l.apply(2)\
    \ <= l.apply(3) && l.apply(3) <= l.apply(4) && l.apply(4) <= l.apply(5) && l.apply",
  "        if (l.length == 0) {\n            return true\n        }\n        var last\
    \ = l.head\n        for (i <- l.tail.toList) {\n            if (i.head < last)\
    \ {\n                return false\n            }\n            last = i.head\n\
    \        }\n        return true\n    }\n\n    // Return true if list elements\
    \ are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (i.head <= last) {\n                return false\n       \
    \     }\n            last = i.head\n        }\n        return true\n    }\n\n\
    \    // Return true if list elements are monotonically decreasing.\n    // >>>\
    \ monotonicDecreasing((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i", "        var i\
    \ = 0\n        while (i < l.length - 1) {\n            if (l[i] > l[i + 1]) {\n\
    \                return false\n            }\n            i = i + 1\n        }\n\
    \        return true", "        if (l.length == 0) {\n            return true\n\
    \        }\n        var last = l.head\n        for (i <- l.tail) {\n         \
    \   if (last > i) {\n                return false\n            }\n           \
    \ last = i\n        }\n        return true\n    }\n\n    // Return true if list\
    \ elements are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail) {\n  \
    \          if (last < i) {\n                return false\n            }\n    \
    \        last = i\n        }\n        return true\n    }\n\n    // Return true\
    \ if list elements are monotonically decreasing.\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail) {\n  \
    \          if (last > i)", "        if (l.size == 0) {\n            return true\n\
    \        }\n        if (l.size == 1) {\n            return true\n        }\n \
    \       if (l.size == 2) {\n            return true\n        }\n        if (l.size\
    \ == 3) {\n            return true\n        }\n        if (l.size == 4) {\n  \
    \          return true\n        }\n        if (l.size == 5) {\n            return\
    \ true\n        }\n        if (l.size == 6) {\n            return true\n     \
    \   }\n        if (l.size == 7) {\n            return true\n        }\n      \
    \  if (l.size == 8) {\n            return true\n        }\n        if (l.size\
    \ == 9) {\n            return true\n        }\n        if (l.size == 10) {\n \
    \           return true\n        }\n        if (l.size == 11) {\n            return\
    \ true\n        }\n        if (l.size == 12) {\n            return true\n    \
    \    }\n        if (l.size == 13) {\n            return true\n        }\n    \
    \    if (l.size == 14) {\n            return true\n        }\n        if (l.size\
    \ == 15) {\n            return true\n        }\n        if (l.size == 16) {\n\
    \            return true\n        }\n        if (l.size == 17) {\n           \
    \ return true\n        }\n        if (l.size == 18) {\n            return true\n\
    \        }\n        if (l.size == 19) {\n            return true\n        }\n\
    \        if (l.size == 20) {\n            return true\n        }\n        if (l.size\
    \ == 21) {\n            return true\n        }\n        if (l.size == 22) {\n\
    \            return true\n        }\n        if (l.size == 23) {\n           \
    \ return true\n        }\n        if (l.size == 24) {\n            return true\n\
    \        }\n        if (l.size == 25) {\n            return true\n        }\n\
    \        if (l.size == 26) {\n            return true\n        }\n        if (l.size\
    \ == 27) {\n            return true\n        }\n        if (l.size == 28", " \
    \       if (l.isEmpty()) {\n            return true\n        }\n        var last\
    \ = l.head\n        for (i <- l.tail) {\n            if (last > i) {\n       \
    \         return false\n            }\n            last = i\n        }\n     \
    \   return true\n    }\n\n    // Return true if list elements are monotonically\
    \ increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.isEmpty()) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail) {\n  \
    \          if (last < i) {\n                return false\n            }\n    \
    \        last = i\n        }\n        return true\n    }\n\n    // Return true\
    \ if list elements are monotonically decreasing.\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.isEmpty()) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail) {\n  \
    \          if (last > i) {\n                ", "        if (l.size == 0) {\n \
    \           return true\n        }\n        if (l.size == 1) {\n            return\
    \ true\n        }\n        if (l.size == 2) {\n            return true\n     \
    \   }\n        if (l.size == 3) {\n            return true\n        }\n      \
    \  if (l.size == 4) {\n            return true\n        }\n        if (l.size\
    \ == 5) {\n            return true\n        }\n        if (l.size == 6) {\n  \
    \          return true\n        }\n        if (l.size == 7) {\n            return\
    \ true\n        }\n        if (l.size == 8) {\n            return true\n     \
    \   }\n        if (l.size == 9) {\n            return true\n        }\n      \
    \  if (l.size == 10) {\n            return true\n        }\n        if (l.size\
    \ == 11) {\n            return true\n        }\n        if (l.size == 12) {\n\
    \            return true\n        }\n        if (l.size == 13) {\n           \
    \ return true\n        }\n        if (l.size == 14) {\n            return true\n\
    \        }\n        if (l.size == 15) {\n            return true\n        }\n\
    \        if (l.size == 16) {\n            return true\n        }\n        if (l.size\
    \ == 17) {\n            return true\n        }\n        if (l.size == 18) {\n\
    \            return true\n        }\n        if (l.size == 19) {\n           \
    \ return true\n        }\n        if (l.size == 20) {\n            return true\n\
    \        }\n        if (l.size == 21) {\n            return true\n        }\n\
    \        if (l.size == 22) {\n            return true\n        }\n        if (l.size\
    \ == 23) {\n            return true\n        }\n        if (l.size == 24) {\n\
    \            return true\n        }\n        if (l.size == 25) {\n           \
    \ return true\n        }\n        if (l.size == 26) {\n            return true\n\
    \        }\n        if (l.size == 27) {\n            return true\n        }\n\
    \        if (l.size == 28", "        if (l.size == 0) {\n            return true\n\
    \        }\n        var i = 0\n        var last = l.head\n        while (i < l.size\
    \ - 1) {\n            var next = l.apply(i + 1)\n            if (next < last)\
    \ {\n                return false\n            }\n            last = next\n  \
    \          i = i + 1\n        }\n        return true\n    }\n\n    // Return true\
    \ if list elements are monotonically increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.size == 0) {\n            return\
    \ true\n        }\n        var i = 0\n        var last = l.head\n        while\
    \ (i < l.size - 1) {\n            var next = l.apply(i + 1)\n            if (next\
    \ > last) {\n                return false\n            }\n            last = next\n\
    \            i = i + 1\n        }\n        return true\n    }\n\n    // Return\
    \ true if list elements are monotonically decreasing.\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing",
  "        if (l.size == 0) {\n            return true\n        }\n        var i =\
    \ 0\n        var last = l.head\n        while (i < l.size - 1) {\n           \
    \ var next = l.apply(i + 1)\n            if (next < last) {\n                return\
    \ false\n            }\n            last = next\n            i += 1\n        }\n\
    \        return true\n    }\n\n    // Return true if list elements are monotonically\
    \ increasing.\n    // >>> monotonicIncreasing((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonicIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonicIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def monotonicIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.size == 0) {\n            return\
    \ true\n        }\n        var i = 0\n        var last = l.head\n        while\
    \ (i < l.size - 1) {\n            var next = l.apply(i + 1)\n            if (next\
    \ > last) {\n                return false\n            }\n            last = next\n\
    \            i += 1\n        }\n        return true\n    }\n\n    // Return true\
    \ if list elements are monotonically decreasing.\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> monotonicDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> monotonicDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonicDecreasing(l\
    \ : List", "        if (l.length == 0) {\n            return true\n        }\n\
    \        if (l.length == 1) {\n            return true\n        }\n        if\
    \ (l.length == 2) {\n            return true\n        }\n        if (l.length\
    \ == 3) {\n            return true\n        }\n        if (l.length == 4) {\n\
    \            return true\n        }\n        if (l.length == 5) {\n          \
    \  return true\n        }\n        if (l.length == 6) {\n            return true\n\
    \        }\n        if (l.length == 7) {\n            return true\n        }\n\
    \        if (l.length == 8) {\n            return true\n        }\n        if\
    \ (l.length == 9) {\n            return true\n        }\n        if (l.length\
    \ == 10) {\n            return true\n        }\n        if (l.length == 11) {\n\
    \            return true\n        }\n        if (l.length == 12) {\n         \
    \   return true\n        }\n        if (l.length == 13) {\n            return\
    \ true\n        }\n        if (l.length == 14) {\n            return true\n  \
    \      }\n        if (l.length == 15) {\n            return true\n        }\n\
    \        if (l.length == 16) {\n            return true\n        }\n        if\
    \ (l.length == 17) {\n            return true\n        }\n        if (l.length\
    \ == 18) {\n            return true\n        }\n        if (l.length == 19) {\n\
    \            return true\n        }\n        if (l.length == 20) {\n         \
    \   return true\n        }\n        if (l.length == 21) {\n            return\
    \ true\n        }\n        if (l.length == 22) {\n            return true\n  \
    \      }\n        if (l.length == 23) {\n            return true\n        }\n\
    \        if (l.length == 24) {\n            return true\n        }\n        if\
    \ (l.length == 25) {\n            return true\n        }\n        if (l.length\
    \ == 26) {\n            return true\n        }\n        if (l.length == 27) {\n\
    \            return true\n        }\n        if (l.length == 28", "        l.size\
    \ == 0\n        || l.size == 1\n        || (l.size > 1 && l.size % 2 == 0 && l.size\
    \ % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size\
    \ % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size\
    \ % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size\
    \ % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size\
    \ % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size\
    \ % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size\
    \ % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size\
    \ % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size\
    \ % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size\
    \ % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size\
    \ % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size\
    \ % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size\
    \ % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size\
    \ % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size\
    \ % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 && l.size % 2 == 0 &&", "   \
    \     l.size > 1\n        && l.size <= 10\n        && l.size % 2 == 0\n      \
    \  && l.size % 3 == 0\n        && l.size % 5 == 0\n        && l.size % 7 == 0\n\
    \        && l.size % 11 == 0\n        && l.size % 13 == 0\n        && l.size %\
    \ 17 == 0\n        && l.size % 19 == 0\n        && l.size % 23 == 0\n        &&\
    \ l.size % 29 == 0\n        && l.size % 31 == 0\n        && l.size % 37 == 0\n\
    \        && l.size % 41 == 0\n        && l.size % 43 == 0\n        && l.size %\
    \ 47 == 0\n        && l.size % 53 == 0\n        && l.size % 59 == 0\n        &&\
    \ l.size % 61 == 0\n        && l.size % 67 == 0\n        && l.size % 71 == 0\n\
    \        && l.size % 73 == 0\n        && l.size % 79 == 0\n        && l.size %\
    \ 83 == 0\n        && l.size % 89 == 0\n        && l.size % 97 == 0\n        &&\
    \ l.size % 101 == 0\n        && l.size % 103 == 0\n        && l.size % 107 ==\
    \ 0\n        && l.size % 109 == 0\n        && l.size % 113 == 0\n        && l.size\
    \ % 127 == 0\n        && l.size % 131 == 0\n        && l.size % 137 == 0\n   \
    \     && l.size % 139 == 0\n        && l.size % 149 == 0\n        && l.size %\
    \ 151 == 0\n        && l.size % 157 == 0\n        && l.size % 163 == 0\n     \
    \   && l.size % 167 == 0\n        && l.size % 169 == 0\n        && l.size % 173\
    \ == 0\n        && l.size % 179 == 0\n        && l.size % 181 == 0\n        &&\
    \ l.size % 191 == 0\n        && l.size % 193 == 0\n        && l.size % 197 ==\
    \ 0\n        && l.size % 199 == 0\n        && l.size % 211 == 0\n        && l.size\
    \ % 223 == 0\n        && l.size % 227", "        l.size > 1\n        && l.size\
    \ == l.tail.size\n        && l.size == l.init.size\n        && l.init.size ==\
    \ l.tail.init.size\n        && l.init.size == l.tail.tail.size\n        && l.init.size\
    \ == l.tail.init.tail.size\n        && l.init.size == l.tail.tail.init.tail.size\n\
    \        && l.init.size == l.tail.init.tail.init.tail.size\n        && l.init.size\
    \ == l.tail.init.tail.init.tail.init.tail.size\n        && l.init.size == l.tail.init.tail.init.tail.init.tail.init.tail.size\n\
    \        && l.init.size == l.tail.init.tail.init.tail.init.tail.init.tail.init.tail.size\n\
    \        && l.init.size == l.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.size\n\
    \        && l.init.size == l.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.size\n\
    \        && l.init.size == l.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.size\n\
    \        && l.init.size == l.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.size\n\
    \        && l.init.size == l.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.size\n\
    \        && l.init.size == l.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.init.tail.size\n\
    \        && l.init.size == l.tail", "        var i = 0\n        while (i < l.length\
    \ - 1) {\n            if (l[i] > l[i + 1]) {\n                return false\n \
    \           }\n            i = i + 1\n        }\n        return true", "     \
    \   if (l.length == 0) {\n            return true\n        }\n        var last\
    \ = l.head\n        for (i <- l.tail.toList) {\n            if (last > i) {\n\
    \                return false\n            }\n            last = i\n        }\n\
    \        return true\n    }\n\n    // Return true if list elements are strictly\
    \ increasing.\n    // >>> strictlyIncreasing((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> strictlyIncreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> strictlyIncreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (false)\n    def strictlyIncreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (last < i) {\n                return false\n            }\n\
    \            last = i\n        }\n        return true\n    }\n\n    // Return\
    \ true if list elements are strictly decreasing.\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (false)\n    // >>> strictlyDecreasing((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (true)\n    // >>> strictlyDecreasing((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def strictlyDecreasing(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) {\n            return\
    \ true\n        }\n        var last = l.head\n        for (i <- l.tail.toList)\
    \ {\n            if (last > i) {\n                return false\n            }\n\
    \            last", "        if (l.length == 0) {\n            return true\n \
    \       }\n        if (l.length == 1) {\n            return true\n        }\n\
    \        if (l.length == 2) {\n            return true\n        }\n        if\
    \ (l.length == 3) {\n            return true\n        }\n        if (l.length\
    \ == 4) {\n            return true\n        }\n        if (l.length == 5) {\n\
    \            return true\n        }\n        if (l.length == 6) {\n          \
    \  return true\n        }\n        if (l.length == 7) {\n            return true\n\
    \        }\n        if (l.length == 8) {\n            return true\n        }\n\
    \        if (l.length == 9) {\n            return true\n        }\n        if\
    \ (l.length == 10) {\n            return true\n        }\n        if (l.length\
    \ == 11) {\n            return true\n        }\n        if (l.length == 12) {\n\
    \            return true\n        }\n        if (l.length == 13) {\n         \
    \   return true\n        }\n        if (l.length == 14) {\n            return\
    \ true\n        }\n        if (l.length == 15) {\n            return true\n  \
    \      }\n        if (l.length == 16) {\n            return true\n        }\n\
    \        if (l.length == 17) {\n            return true\n        }\n        if\
    \ (l.length == 18) {\n            return true\n        }\n        if (l.length\
    \ == 19) {\n            return true\n        }\n        if (l.length == 20) {\n\
    \            return true\n        }\n        if (l.length == 21) {\n         \
    \   return true\n        }\n        if (l.length == 22) {\n            return\
    \ true\n        }\n        if (l.length == 23) {\n            return true\n  \
    \      }\n        if (l.length == 24) {\n            return true\n        }\n\
    \        if (l.length == 25) {\n            return true\n        }\n        if\
    \ (l.length == 26) {\n            return true\n        }\n        if (l.length\
    \ == 27) {\n            return true\n        }\n        if (l.length == 28"]
stop_tokens:
- "\n    }\n"
