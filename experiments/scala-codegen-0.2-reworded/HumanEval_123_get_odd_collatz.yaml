name: HumanEval_123_get_odd_collatz
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return a sorted list that has the odd numbers\
  \ in collatz sequence.\n    // The Collatz conjecture is a conjecture in mathematics\
  \ that concerns a sequence defined\n    // as follows: start with any positive integer\
  \ n. Then each term is obtained from the \n    // previous term as follows: if the\
  \ previous term is even, the next term is one half of \n    // the previous term.\
  \ If the previous term is odd, the next term is 3 times the previous\n    // term\
  \ plus 1. The conjecture is that no matter what value of n, the sequence will always\
  \ reach 1.\n    // Note: \n    // 1. Collatz(1) is [1].\n    // 2. returned list\
  \ sorted in increasing order.\n    // For example:\n    // get_odd_collatz(5) returns\
  \ [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers\
  \ are only 1, and 5.\n    // >>> getOddCollatz((5l))\n    // (List[Long](1l.toLong,\
  \ 5l.toLong))\n    def getOddCollatz(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
  \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
  \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
  \    }\n\n}\n"
completions: []
stop_tokens:
- "\n    }\n"
