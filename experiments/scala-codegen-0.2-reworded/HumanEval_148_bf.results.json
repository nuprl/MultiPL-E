{
  "name": "HumanEval_148_bf",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcxc9927z.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_\u001b[0m = planet1\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcxc9927z.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_\u001b[0m = planet2\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet2_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet2_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcxc9927z.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_\u001b[0m = planet1\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcxc9927z.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_\u001b[0m = planet2\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet2_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet2_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcxc9927z.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_\u001b[0m = planet1\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_index = p1.indexOf(\" \")\n        val p2_index = p2.indexOf(\" \")\n        val p1_name = p1.substring(0, p1_index)\n        val p2_name = p2.substring(0, p2_index)\n        val p1_orbital_period = p1.substring(p1_index + 1)\n        val p2_orbital_period = p2.substring(p2_index + 1)\n        val p1_orbital_period_in_seconds = _.toDouble(p1_orbital_period)\n        val p2_orbital_period_in_seconds = _.toDouble(p2_orbital_period)\n        val p1_orbital_period_in_minutes = p1_orbital_period_in_seconds / 60\n        val p2_orbital_period_in_minutes = p2_orbital_period_in_seconds / 60\n        val p1_orbital_period_in_hours = p1_orbital_period_in_minutes / 60\n        val p2_orbital_period_in_hours = p2_orbital_period_in_minutes / 60\n        val p1_orbital_period_in_days = p1_orbital_period_in_hours / 24\n        val p2_orbital_period_in_days = p2_orbital_period_in_hours / 24\n        val p1_orbital_period_in_years = p1_orbital_period_in_days / 365\n        val p2_orbital_period_in_years = p2_orbital_period_in_days / 365\n        val p1_orbital_period_in_centuries = p1_orbital_period_in_years / 100\n        val p2_orbital_period_in_centuries = p2_orbital_period_in_years / 100\n        val p1_orbital_period_in_millennia = p1_orb\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp5u32qwup.scala:29:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_in_seconds\u001b[0m = _.toDouble(p1_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.toDouble(p1_orbital_period).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp5u32qwup.scala:30:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orbital_period_in_seconds\u001b[0m = _.toDouble(p2_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toDouble(p2_orbital_period).\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5u32qwup.scala:41:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_in_millennia\u001b[0m = p1_orb\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Not found: p1_orb\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5u32qwup.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val orbit1 = scala.math.min(p1_idx, p2_idx)\n        val orbit2 = scala.math.max(p1_idx, p2_idx)\n        val orbit_diff = orbit2 - orbit1\n        val orbit_diff_abs = scala.math.abs(orbit_diff)\n        val orbit_diff_sign = orbit_diff / orbit_diff_abs\n        val orbit_diff_abs_sign = orbit_diff_abs / orbit_diff_abs\n        val orbit_diff_sign_abs = orbit_diff_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign = orbit_diff_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs = orbit_diff_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs_sign = orbit_diff_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs_sign_abs = orbit_diff_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs_sign_abs_sign = orbit_diff_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs_sign_abs_sign_abs = orbit_diff_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcet064k0.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcet064k0.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcet064k0.scala:38:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var planet1_orbital_period = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpw3b41q_f.scala:23:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E119] Type Error: /tmp/tmpw3b41q_f.scala:22:958 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period\u001b[0m = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math\n\u001b[31m\u001b[31m   |\u001b[0m
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_index = scala.collection.JavaConversions.asJavaCollection(p1.indexOf(p2)).toList().indexOf(p2)\n        val p2_index = scala.collection.JavaConversions.asJavaCollection(p2.indexOf(p1)).toList().indexOf(p1)\n        val p1_orbit = scala.math.BigDecimal(p1_index).divide(scala.math.BigDecimal(p2_index))\n        val p2_orbit = scala.math.BigDecimal(p2_index).divide(scala.math.BigDecimal(p1_index))\n        val p1_orbit_int = p1_orbit.intValue()\n        val p2_orbit_int = p2_orbit.intValue()\n        val p1_orbit_float = p1_orbit.floatValue()\n        val p2_orbit_float = p2_orbit.floatValue()\n        val p1_orbit_double = p1_orbit.doubleValue()\n        val p2_orbit_double = p2_orbit.doubleValue()\n        val p1_orbit_bigDecimal = p1_orbit.bigDecimalValue()\n        val p2_orbit_bigDecimal = p2_orbit.bigDecimalValue()\n        val p1_orbit_bigInt = p1_orbit.bigIntegerValue()\n        val p2_orbit_bigInt = p2_orbit.bigIntegerValue()\n        val p1_orbit_bigDecimalInt = p1_orbit.bigDecimalIntValue()\n        val p2_orbit_bigDecimalInt = p2_orbit.bigDecimalIntValue()\n        val p1_orbit_bigDecimalLong = p1_orbit.bigDecimalLongValue()\n        val p2_orbit_bigDecimalLong = p2_orbit.bigDecimalLongValue()\n        val p1_orbit_bigDecimalFloat = p1_orbit.bigDecimalFloatValue()\n        val p2_orbit_bigDecimalFloat = p2_orbit.big\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293542,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppfc6fsim.scala:23:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_index\u001b[0m = scala.collection.JavaConversions.asJavaCollection(p1.indexOf(p2)).toList().indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppfc6fsim.scala:24:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_index\u001b[0m = scala.collection.JavaConversions.asJavaCollection(p2.indexOf(p1)).toList().indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppfc6fsim.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_index = planets.indexOf(p1)\n        var p2_index = planets.indexOf(p2)\n        var p1_orbit = scala.math.min(p1_index, p2_index)\n        var p2_orbit = scala.math.max(p1_index, p2_index)\n        var p1_orbit_index = planets.indexOf(p1_orbit)\n        var p2_orbit_index = planets.indexOf(p2_orbit)\n        var p1_orbit_index_plus_one = p1_orbit_index + 1\n        var p2_orbit_index_plus_one = p2_orbit_index + 1\n        var p1_orbit_index_minus_one = p1_orbit_index - 1\n        var p2_orbit_index_minus_one = p2_orbit_index - 1\n        var p1_orbit_index_plus_two = p1_orbit_index + 2\n        var p2_orbit_index_plus_two = p2_orbit_index + 2\n        var p1_orbit_index_minus_two = p1_orbit_index - 2\n        var p2_orbit_index_minus_two = p2_orbit_index - 2\n        var p1_orbit_index_plus_three = p1_orbit_index + 3\n        var p2_orbit_index_plus_three = p2_orbit_index + 3\n        var p1_orbit_index_minus_three = p1_orbit_index - 3\n        var p2_orbit_index_minus_three = p2_orbit_index - 3\n        var p1_orbit_index_plus_four = p1_orbit_index + 4\n        var p2_orbit_index_plus_four = p2_orbit_index + 4\n        var p1_orbit_index_minus_four = p1_orbit_index - 4\n        var p2_orbit_index_minus_four = p2_orbit_index - 4\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpuw7lohcl.scala:46:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuw7lohcl.scala:47:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = mutable.List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n        for (i <- p1_idx) {\n            for (j <- p2_idx) {\n                if (dist(planets[i], planets[j]) < dist(planets[p1_idx], planets[p2_idx])) {\n                    result.append(planets[i])\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd8uqfk9_.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd8uqfk9_.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd8uqfk9_.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new java.util.Vector[8]\n        sun[0] = new java.util.Vector[8]\n        sun[1] = new java.util.Vector[8]\n        sun[2] = new java.util.Vector[8]\n        sun[3] = new java.util.Vector[8]\n        sun[4] = new java.util.Vector[8]\n        sun[5] = new java.util.Vector[8]\n        sun[6] = new java.util.Vector[8]\n        sun[7] = new java.util.Vector[8]\n        var sun_index = 0\n        var planet_index = 0\n        var sun_planet_index = 0\n        var planet_planet_index = 0\n        var sun_planet_index_1 = 0\n        var sun_planet_index_2 = 0\n        var sun_planet_index_3 = 0\n        var sun_planet_index_4 = 0\n        var sun_planet_index_5 = 0\n        var sun_planet_index_6 = 0\n        var sun_planet_index_7 = 0\n        var sun_planet_index_8 = 0\n        var sun_planet_index_9 = 0\n        var sun_planet_index_10 = 0\n        var sun_planet_index_11 = 0\n        var sun_planet_index_12 = 0\n        var sun_planet_index_13 = 0\n        var sun_planet_index_14 = 0\n        var sun_planet_index_15 = 0\n        var sun_planet_index_16 = 0\n        var sun_planet_index_17 = 0\n        var sun_planet_index_18 = 0\n        var sun_planet_index_19 = 0\n        var sun_planet_index_20 = 0\n        var sun_planet_index_21 = 0\n        var sun_planet_index_22 = 0\n        var sun_planet_index_23 = 0\n        var sun_planet_index_24 = 0\n        var sun_planet_index_25 = 0\n        var sun_planet_index_26 = 0\n        var sun_planet_index_27 = 0\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpilg9ohgt.scala:23:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        sun[\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpilg9ohgt.scala:24:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        sun[\u001b[31m1\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpilg9ohgt.scala:25:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        sun[\u001b[31m2\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpilg9ohgt.scala:26:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        sun[\u001b[31m3\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpilg9ohgt.scala:27:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        sun[\u001b[31m4\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpilg9ohgt.scala:28:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        sun[\u001b[31m5\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpilg9ohgt.scala:29:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        sun[\u001b[31m6\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpilg9ohgt.sc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_index = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n        var p2_index = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n        var p1_orbit = scala.math.BigDecimal.valueOf(Math.PI).multiply(scala.math.BigDecimal.valueOf(p1_index))\n        var p2_orbit = scala.math.BigDecimal.valueOf(Math.PI).multiply(scala.math.BigDecimal.valueOf(p2_index))\n        var result = scala.collection.JavaConversions.asScalaBuffer(p1).toList().takeWhile(p1_orbit.plus(p2_orbit).toBigDecimal().toBigInteger().toBigDecimal().toBigInteger().toBigDecimal().toBigInteger().toBigDecimal())\n        return scala.collection.JavaConversions.asJavaList(result)\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293542,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj2e8p7rt.scala:23:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_index\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj2e8p7rt.scala:24:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_index\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj2e8p7rt.scala:25:62 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_orbit\u001b[0m = scala.math.BigDecimal.valueOf(Math.PI).multiply(scala.math.BigDecimal.valueOf(p1_index))\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value multiply is not a member of BigDecimal\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj2e8p7rt.scala:26:62 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_orbit\u001b[0m = scala.math.BigDecimal.valueOf(Math.PI).multiply(scala.math.BigDecimal.valueOf(p2_index))\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value multiply is not a member of BigDecimal\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj2e8p7rt.scala:27:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p1).toList().takeWhile(p1_orbit.plus(p2_orbit).toBigDecimal().toBigInteger().toBigDecimal().toBigInteger().toBigDecimal().toBigInteger().toBigDecimal())\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val result = scala.collection.mutable.ListBuffer[String]()\n        for (i <- 0 until planets.size) {\n            val planet = planets[i]\n            if (planet.equals(p1) || planet.equals(p2)) continue\n            if (orbits[i] < p1_orb && orbits[i] > p2_orb) result.append(planet)\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293538,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_269kf4p.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_269kf4p.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_269kf4p.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_269kf4p.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_269kf4p.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_269kf4p.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val orbit_distance = p1_idx - p2_idx\n        val orbit_distance_abs = Math.abs(orbit_distance)\n        val orbit_distance_abs_floor = Math.floor(orbit_distance_abs)\n        val orbit_distance_abs_ceil = Math.ceil(orbit_distance_abs)\n        val orbit_distance_abs_floor_idx = orbit_distance_abs_floor.toInt\n        val orbit_distance_abs_ceil_idx = orbit_distance_abs_ceil.toInt\n        val orbit_distance_abs_floor_idx_plus_1 = orbit_distance_abs_floor_idx + 1\n        val orbit_distance_abs_ceil_idx_minus_1 = orbit_distance_abs_ceil_idx - 1\n        val orbit_distance_abs_floor_idx_plus_1_minus_1 = orbit_distance_abs_floor_idx_plus_1 - 1\n        val orbit_distance_abs_ceil_idx_minus_1_plus_1 = orbit_distance_abs_ceil_idx_minus_1 + 1\n        val orbit_distance_abs_floor_idx_plus_1_minus_1_plus_1 = orbit_distance_abs_floor_idx_plus_1_minus_1 + 1\n        val orbit_distance_abs_ceil_idx_minus_1_plus_1_minus_1 = orbit_distance_abs_ceil_idx_minus_1_plus_1 - 1\n        val orbit_distance_abs_floor_idx_plus_1_minus_1_plus_1_minus_1 = orbit_distance_abs_floor_idx_plus_1_minus_1_plus_1 - 1\n        val orbit_distance_abs_ceil_idx_minus_1_plus_1_minus_1_plus_1 = orbit_distance_abs\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp2ivm5ec.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp2ivm5ec.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp2ivm5ec.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var planet1_orbital_period = scala.math.durations.Seconds(\n            scala.math.durations.Seconds(\n                scala.math.durations.Seconds(\n                    scala.math.durations.Seconds(\n                        scala.math.durations.Seconds(\n                            scala.math.durations.Seconds(\n                                scala.math.durations.Seconds(\n                                    scala.math.durations.Seconds(\n                                        scala.math.durations.Seconds(\n                                            scala.math.durations.Seconds(\n                                                scala.math.durations.Seconds(\n                                                    scala.math.durations.Seconds(\n                                                        scala.math.durations.Seconds(\n                                                            scala.math.durations.Seconds(\n                                                                scala.math.durations.Seconds(\n                                                                    scala.math.durations.Seconds(\n                                                                        scala.math.durations.Seconds(\n                                                                            scala.math.durations.Seconds(\n                                                                                scala.math.durations.Seconds(\n                                                                                    scala.math.durations.Seconds(\n                                                                                        scala.math.durations.Seconds(\n                                                                                            scala.math.durations.Seconds(\n                                                                                                scala.math.durations.Seconds(\n                                                                                                    scala.math.durations.Seconds(\n                                                                                                        scala.math.durations.Seconds(\n                                                                                                            scala.math.durations.Seconds(\n                                                                                                                scala.math.durations.Seconds(\n                                                                                                                    scala.math.durations.Seconds(\n                                                                                                                        scala.math.durations.Seconds(\n                                                                                                                                scala.math.durations.Seconds(\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp4bbiucr_.scala:51:157 --------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m                                                                                                                                scala.math.durations.Seconds(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4bbiucr_.scala:22:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period\u001b[0m = scala.math.durations.Seconds(\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value durations is not a member of math\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4bbiucr_.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new java.util.Vector[8]\n        sun[0] = new java.util.Vector[8]\n        sun[1] = new java.util.Vector[8]\n        sun[2] = new java.util.Vector[8]\n        sun[3] = new java.util.Vector[8]\n        sun[4] = new java.util.Vector[8]\n        sun[5] = new java.util.Vector[8]\n        sun[6] = new java.util.Vector[8]\n        sun[7] = new java.util.Vector[8]\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp_zr8fwsh.scala:23:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        sun[\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_zr8fwsh.scala:24:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        sun[\u001b[31m1\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_zr8fwsh.scala:25:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        sun[\u001b[31m2\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_zr8fwsh.scala:26:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        sun[\u001b[31m3\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_zr8fwsh.scala:27:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        sun[\u001b[31m4\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_zr8fwsh.scala:28:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        sun[\u001b[31m5\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_zr8fwsh.scala:29:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        sun[\u001b[31m6\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_zr8fwsh.sc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new java.util.Vector[8]\n        sun[0] = new java.util.Vector[8]\n        sun[1] = new java.util.Vector[8]\n        sun[2] = new java.util.Vector[8]\n        sun[3] = new java.util.Vector[8]\n        sun[4] = new java.util.Vector[8]\n        sun[5] = new java.util.Vector[8]\n        sun[6] = new java.util.Vector[8]\n        sun[7] = new java.util.Vector[8]\n        var sun_index = 0\n        var planet_index = 0\n        var planet_name = planet1\n        var sun_name = planet2\n        var sun_distance = scala.math.pow(scala.math.abs(scala.math.cos(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(sc\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpvbjkodfa.scala:23:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        sun[\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvbjkodfa.scala:24:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        sun[\u001b[31m1\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvbjkodfa.scala:25:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        sun[\u001b[31m2\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvbjkodfa.scala:26:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        sun[\u001b[31m3\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvbjkodfa.scala:27:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        sun[\u001b[31m4\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvbjkodfa.scala:28:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        sun[\u001b[31m5\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvbjkodfa.scala:29:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        sun[\u001b[31m6\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvbjkodfa.sc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_idx = p1_orb_idx + 1\n        val p2_orb_idx_idx = p2_orb_idx + 1\n        val p1_orb_idx_idx_idx = p1_orb_idx_idx + 1\n        val p2_orb_idx_idx_idx = p2_orb_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx = p1_orb_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx = p2_orb_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx_id\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpelum70ny.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val orbit_interval = scala.math.min(p1_idx, p2_idx)\n        val orbit_diff = p1_idx - p2_idx\n        val orbit_diff_abs = scala.math.abs(orbit_diff)\n        val orbit_diff_sign = orbit_diff / orbit_diff_abs\n        val orbit_diff_abs_sign = orbit_diff_abs / orbit_diff_abs\n        val orbit_diff_sign_abs = orbit_diff_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign = orbit_diff_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs = orbit_diff_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs_sign = orbit_diff_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs_sign_abs = orbit_diff_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs_sign_abs_sign = orbit_diff_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs_sign_abs_sign_abs = orbit_diff_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs_sign_abs\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmim9oy_i.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmim9oy_i.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmim9oy_i.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmim9oy_i.scala:38:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val result = List[String]()\n        for (i <- p1_orb_idx + 1 to p2_orb_idx) {\n            result = result + planets[p1_orb[i]]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp13fstkza.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp13fstkza.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp13fstkza.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp13fstkza.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp13fstkza.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp13fstkza.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new java.util.Date()\n        var sun_x = sun.getTime()\n        var sun_y = sun.getYear()\n        var sun_m = sun.getMonth()\n        var sun_d = sun.getDate()\n        var sun_h = sun.getHours()\n        var sun_min = sun.getMinutes()\n        var sun_sec = sun.getSeconds()\n        var sun_ms = sun.getTime()\n        var sun_dif = sun_x - sun_y * 365 * 24 * 60 * 60 * 1000 - sun_m * 24 * 60 * 60 * 1000 - sun_d * 24 * 60 * 60 * 1000 - sun_h * 60 * 60 * 1000 - sun_min * 60 * 1000 - sun_sec * 1000 - sun_ms\n        var planet1_x = scala.math.BigDecimal.valueOf(sun_x).subtract(scala.math.BigDecimal.valueOf(sun_y).multiply(scala.math.BigDecimal.valueOf(365)).add(scala.math.BigDecimal.valueOf(sun_m).multiply(scala.math.BigDecimal.valueOf(24)).add(scala.math.BigDecimal.valueOf(sun_d).multiply(scala.math.BigDecimal.valueOf(24)).add(scala.math.BigDecimal.valueOf(sun_h).multiply(scala.math.BigDecimal.valueOf(60)).add(scala.math.BigDecimal.valueOf(sun_min).multiply(scala.math.BigDecimal.valueOf(60)).add(scala.math.BigDecimal.valueOf(sun_sec).multiply(scala.math.BigDecimal.valueOf(60)).add(scala.math.BigDecimal.valueOf(sun_ms))))))))\n        var planet1_y = scala.math.BigDecimal.valueOf(sun_y).add(scala.math.BigDecimal.valueOf(sun_m).multiply(scala.math.BigDecimal.\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293542,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqxrp7g50.scala:34:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqxrp7g50.scala:32:61 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_x\u001b[0m = scala.math.BigDecimal.valueOf(sun_x).subtract(scala.math.BigDecimal.valueOf(sun_y).multiply(scala.math.BigDecimal.valueOf(\u001b[31m365\u001b[0m)).add(scala.math.BigDecimal.valueOf(sun_m).multiply(scala.math.BigDecimal.valueOf(\u001b[31m24\u001b[0m)).add(scala.math.BigDecimal.valueOf(sun_d).multiply(scala.math.BigDecimal.valueOf(\u001b[31m24\u001b[0m)).add(scala.math.BigDecimal.valueOf(sun_h).multiply(scala.math.BigDecimal.valueOf(\u001b[31m60\u001b[0m)).add(scala.math.BigDecimal.valueOf(sun_min).multiply(scala.math.BigDecimal.valueOf(\u001b[31m60\u001b[0m)).add(scala.math.BigDecimal.valueOf(sun_sec).multiply(scala.math.BigDecimal.valueOf(\u001b[31m60\u001b[0m)).add(scala.math.BigDecimal.valueOf(sun_ms))))))))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value subtract is not a member of BigDecimal\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqxrp7g50.scala:32:107 -----------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_x\u001b[0m = scala.math.BigDecimal.valueOf(sun_x).subtract(scala.math.BigDecimal.valueOf(sun_y).multiply(scala.math.BigDecimal.valueOf(\u001b[31m365\u001b[0m)).add(scala.math.BigDecimal.valueOf(sun_m).multiply(scala.math.BigDecimal.valueOf(\u001b[31m24\u001b[0m)).add(scala.math.BigDecimal.valueOf(sun_d).multiply(scala.math.BigDecimal.valueOf(\u001b[31m24\u001b[0m)).add(scala.math.BigDecimal.valueOf(sun_h).multiply(scala.math.BigDecimal.valueOf(\u001b[31m60\u001b[0m)).add(scala.math.BigDecimal.valueOf(sun_min).multiply(scala.math.BigDecimal.valueOf(\u001b[31m60\u001b[0m)).add(scala.math.BigDecimal.valueOf(sun_sec).multiply(scala.math.BigDecimal.valueOf(\u001b[31m60\u001b[0m)).add(scala.math.BigDecimal.valueOf(sun_ms))))))))\n\u001b[31m\u001b[31m   |\u001b[0m                           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_min = p1_orb_idx\n        val p2_orb_idx_min = p2_orb_idx\n        if (p1_orb_idx < p2_orb_idx) {\n            p1_orb_idx_min = p2_orb_idx\n            p2_orb_idx_min = p1_orb_idx\n        }\n        val p1_orb_idx_max = p1_orb_idx\n        val p2_orb_idx_max = p2_orb_idx\n        if (p1_orb_idx > p2_orb_idx) {\n            p1_orb_idx_max = p2_orb_idx\n            p2_orb_idx_max = p1_orb_idx\n        }\n        val result = List[String]()\n        for (i <- p1_orb_idx_min : p1_orb_idx_max) {\n            for (j <- p2_orb_idx_min : p2_orb_idx_max) {\n                if (i < j) {\n                    result = append(result, planets[i])\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjss3b3yi.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjss3b3yi.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjss3b3yi.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjss3b3yi.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjss3b3yi.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjss3b3yi.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n        var i = p1_idx\n        var j = p2_idx\n        while (i < j) {\n            result = append(result, planets[i])\n            i = i + 1\n        }\n        while (i < planets.size()) {\n            result = append(result, planets[i])\n            i = i + 1\n        }\n        while (j < planets.size()) {\n            result = append(result, planets[j])\n            j = j + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7u98559m.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7u98559m.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7u98559m.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            result = append(result, planets[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7u98559m.scala:29:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            result = append(result, planets[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7u98559m.scala:29:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            result = append(result, planets[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7u98559m.scala:33:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            result = append(result, planets[\u001b[35mi\u001b[0m])\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val result = List[String]()\n        for (i <- 1 to p1_orb) {\n            for (j <- 1 to p2_orb) {\n                if (j < i) {\n                    result = result + List(planets[i])\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293542,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp23d39yxi.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp23d39yxi.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp23d39yxi.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp23d39yxi.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp23d39yxi.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp23d39yxi.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_next = p1_orb.get(p1_orb_idx + 1)\n        val p2_orb_prev = p2_orb.get(p2_orb_idx - 1)\n        val p1_orb_next_idx = p1_orb.indexOf(p1_orb_next)\n        val p2_orb_prev_idx = p2_orb.indexOf(p2_orb_prev)\n        val p1_orb_next_orb = orbits[p1_orb_next_idx]\n        val p2_orb_prev_orb = orbits[p2_orb_prev_idx]\n        val p1_orb_next_orb_idx = p1_orb_next_orb.indexOf(p1_orb_next)\n        val p2_orb_prev_orb_idx = p2_orb_prev_orb.indexOf(p2_orb_prev)\n        val p1_orb_next_orb_next = p1_orb_next_orb.get(p1_orb_next_orb_idx + 1)\n        val p2_orb_prev_orb_prev = p2_orb_prev_orb.get(p2_orb_prev_orb_idx - 1)\n        val p1_orb_next_orb_next_idx = p1_orb_next_orb.indexOf(p1_orb_next_orb_next)\n        val p2_orb_prev_orb_prev_idx = p2_orb_prev_orb.indexOf(p2_orb\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi2k762rb.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi2k762rb.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi2k762rb.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi2k762rb.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi2k762rb.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi2k762rb.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name = planet1\n        var planet2_name = planet2\n        var planet1_index = 0\n        var planet2_index = 0\n        var planet1_orbit_index = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit_value = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit_value = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_index = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit_value = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit_value = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_index = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit_value = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit_value = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_index = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit_value = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit_value = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_index = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit_value = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit_value = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_index = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit_value = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit_value = scala.math.BigDecimal.valueOf(0)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpeu643gca.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbit_index\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_orbit_index is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_orbit_index\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpeu643gca.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbit_index\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet2_orbit_index is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet2_orbit_index\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpeu643gca.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbit_value\u001b[0m = scala.math.BigDecimal.valueOf(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_orbit_value is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_orbit_value\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpeu643gca.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbit_value\u001b[0m = scala.math.BigDecimal.valueOf(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet2_orbit_value is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet2_orbit_value\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpeu643gca.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = mutable.List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        if (p1_orb > p2_orb) {\n            return result\n        }\n        for (i <- 1 to p1_orb) {\n            for (j <- 1 to p2_orb) {\n                if (i + j > p1_orb + p2_orb) {\n                    break\n                }\n                result.append(planets[i + j])\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo__0g78_.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo__0g78_.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo__0g78_.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo__0g78_.scala:29:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo__0g78_.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo__0g78_.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n        var i = 0\n        var j = 0\n        while (i < p1_idx && j < p2_idx) {\n            if (planets[i] < planets[j]) {\n                result = append(result, planets[i])\n                i += 1\n            } else {\n                result = append(result, planets[j])\n                j += 1\n            }\n        }\n        while (i < p1_idx) {\n            result = append(result, planets[i])\n            i += 1\n        }\n        while (j < p2_idx) {\n            result = append(result, planets[j])\n            j += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp23ttsfr9.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp23ttsfr9.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp23ttsfr9.scala:29:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (planets[\u001b[35mi\u001b[0m] < planets[\u001b[35mj\u001b[0m]) {\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp23ttsfr9.scala:29:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (planets[\u001b[35mi\u001b[0m] < planets[\u001b[35mj\u001b[0m]) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp23ttsfr9.scala:30:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                result = append(result, planets[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp23ttsfr9.scala:30:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                result = append(result, planets[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        for (i <- p1_orb) {\n            for (j <- p2_orb) {\n                if (j < i) {\n                    result = result + planets[i]\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293545,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwoeqnqeq.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwoeqnqeq.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwoeqnqeq.scala:29:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwoeqnqeq.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwoeqnqeq.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwoeqnqeq.scala:30:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var sun = \"sun\"\n        var sun_orb = scala.math.BigDecimal.valueOf(0)\n        var sun_dist = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p1 = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p2 = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p1_p2 = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p2_p1 = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p1_p2_p1 = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p1_p2_p2 = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p2_p1_p1 = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p2_p1_p2 = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p2_p2_p1 = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p2_p2_p2 = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p1_p1_p1 = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p1_p1_p2 = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p1_p2_p1 = scala.math.BigDecimal.valueOf(0)\n        var sun_orb\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293549,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxn0h1oy8.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxn0h1oy8.scala:40:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msun_orb_dist_p1_p2_p1\u001b[0m = scala.math.BigDecimal.valueOf(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0msun_orb_dist_p1_p2_p1 is already defined as \u001b[33mvariable\u001b[0m \u001b[35msun_orb_dist_p1_p2_p1\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxn0h1oy8.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val orbit1 = orbits[p1_idx]\n        val orbit2 = orbits[p2_idx]\n        val orbit_intersect = orbit1.intersect(orbit2)\n        val result = planets.filter(p -> orbit_intersect.contains(p))\n        result.sort(Comparator.comparing(p -> orbit_intersect.distance(p)))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdv3_8w_k.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdv3_8w_k.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdv3_8w_k.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit1\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdv3_8w_k.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit1\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdv3_8w_k.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit2\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdv3_8w_k.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit2\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planet1_ = planet1.toLowerCase()\n        var planet2_ = planet2.toLowerCase()\n        var planet1_ = planet1_.trim()\n        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.replaceAll(\" \", \"\")\n        var planet2_ = planet2_.replaceAll(\" \", \"\")\n        var planet1_ = planet1_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet2_ = planet2_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet1_ = planet1_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet2_ = planet2_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet1_ = planet1_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet2_ = planet2_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet1_ = planet1_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet2_ = planet2_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet1_ = planet1_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet2_ = planet2_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet1_ = planet1_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet2_ = planet2_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet1_ = planet1_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet2_ = planet2_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet1_ = planet1_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet2_ = planet2_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet1_ = planet1_.replaceAll(\"[^a-zA-Z]\", \"\")\n        \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293551,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1o6yx177.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_\u001b[0m = planet1_.trim()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1o6yx177.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_\u001b[0m = planet2_.trim()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet2_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet2_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1o6yx177.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_\u001b[0m = planet1_.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1o6yx177.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_\u001b[0m = planet2_.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet2_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet2_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1o6yx177.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_\u001b[0m = planet1_.replaceAll(\u001b[31m\"[^a-zA-Z]\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = scala.collection.JavaConversions.asScalaBuffer(p1).toIndexedSeq().toList\n        val p2_idx = scala.collection.JavaConversions.asScalaBuffer(p2).toIndexedSeq().toList\n        val p1_orb = scala.math.BigDecimal.valueOf(p1_idx.get(0).toDouble)\n        val p2_orb = scala.math.BigDecimal.valueOf(p2_idx.get(0).toDouble)\n        val p1_orb_diff = p1_orb.subtract(p2_orb)\n        val p1_orb_diff_abs = p1_orb_diff.abs()\n        val p1_orb_diff_abs_div = p1_orb_diff_abs.divide(scala.math.BigDecimal.valueOf(2))\n        val p1_orb_diff_abs_div_half = p1_orb_diff_abs_div.divide(scala.math.BigDecimal.valueOf(2))\n        val p1_orb_diff_abs_div_half_minus = p1_orb_diff_abs_div_half.subtract(scala.math.BigDecimal.valueOf(1))\n        val p1_orb_diff_abs_div_half_minus_half = p1_orb_diff_abs_div_half_minus.divide(scala.math.BigDecimal.valueOf(2))\n        val p1_orb_diff_abs_div_half_minus_half_minus = p1_orb_diff_abs_div_half_minus_half.subtract(scala.math.BigDecimal.valueOf(1))\n        val p1_orb_diff_abs_div_half_minus_half_minus_half = p1_orb_diff_abs_div_half_minus_half_minus.divide(scala.math.BigDecimal.valueOf(2))\n        val p1_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293553,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp71i_j8p9.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp71i_j8p9.scala:23:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p1).toIndexedSeq().toList\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp71i_j8p9.scala:24:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p2).toIndexedSeq().toList\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp71i_j8p9.scala:36:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new java.util.Date()\n        var sun_x = sun.getTime()\n        var sun_y = sun.getYear()\n        var sun_z = sun.getTimezoneOffset()\n        var sun_d = sun.getDay()\n        var sun_m = sun.getMonth()\n        var sun_y = sun.getYear()\n        var sun_h = sun.getHours()\n        var sun_min = sun.getMinutes()\n        var sun_s = sun.getSeconds()\n        var sun_ms = sun.getTime()\n        var sun_tz = sun.getTimezoneOffset()\n        var sun_tz_h = sun.getTimezoneOffset() / 60\n        var sun_tz_m = sun.getTimezoneOffset() % 60\n        var sun_tz_s = sun.getTimezoneOffset() % 60\n        var sun_tz_d = sun.getTimezoneOffset() / 60\n        var sun_tz_ms = sun.getTimezoneOffset() % 60\n        var sun_tz_hms = sun.getTimezoneOffset() / 60\n        var sun_tz_hms_ms = sun.getTimezoneOffset() % 60\n        var sun_tz_hms_s = sun.getTimezoneOffset() % 60\n        var sun_tz_hms_ms_s = sun.getTimezoneOffset() % 60\n        var sun_tz_hms_ms_s_ms = sun.getTimezoneOffset() % 60\n        var sun_tz_hms_ms_s_ms_s = sun.getTimezoneOffset() % 60\n        var sun_tz_hms_ms_s_ms_s_ms = sun.getTimezoneOffset() % 60\n        var sun_tz_hms_ms_s_ms_s_ms_s = sun.getTimezoneOffset() % 60\n        var sun_tz_hms_ms_s_ms_s_ms_s_ms = sun.getTimezoneOffset() % 60\n        var sun_tz_hms_ms_s_ms_s_ms_s_ms_s = sun.getTimezoneOffset() %\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpfddb56en.scala:48:70 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msun_tz_hms_ms_s_ms_s_ms_s_ms_s\u001b[0m = sun.getTimezoneOffset() %\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfddb56en.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msun_y\u001b[0m = sun.getYear()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0msun_y is already defined as \u001b[33mvariable\u001b[0m \u001b[35msun_y\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfddb56en.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name = planet1\n        var planet2_name = planet2\n        var planet1_orbit_name = planet1_name + \"_orbit\"\n        var planet2_orbit_name = planet2_name + \"_orbit\"\n        var planet1_orbit = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n        var planet2_orbit = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n        var planet1_orbit_name_value = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n        var planet2_orbit_name_value = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n        var planet1_orbit_name_value_index = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n        var planet2_orbit_name_value_index = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n        var planet1_orbit_name_value_index_index = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n        var planet2_orbit_name_value_index_index = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n        var planet1_orbit_name_value_index_index_index = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n        var planet2_orbit_name_value_index_index_index = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n        var planet1_orbit_name_value_index_index_index_index = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n        var planet2_orbit_name_value_index_index_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppf3kmpcn.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppf3kmpcn.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbit\u001b[0m = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_orbit is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_orbit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppf3kmpcn.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbit\u001b[0m = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet2_orbit is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet2_orbit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppf3kmpcn.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = scala.collection.JavaConversions.asJavaMap(p1).get(p1)\n        val p2_idx = scala.collection.JavaConversions.asJavaMap(p2).get(p2)\n        val p1_orb = scala.math.BigDecimal.valueOf(p1_idx)\n        val p2_orb = scala.math.BigDecimal.valueOf(p2_idx)\n        val p1_orb_diff = p1_orb.subtract(p2_orb)\n        val p1_orb_diff_abs = p1_orb_diff.abs()\n        val p1_orb_diff_abs_int = p1_orb_diff_abs.intValue()\n        val p1_orb_diff_abs_frac = p1_orb_diff_abs.subtract(p1_orb_diff_abs.intValue())\n        val p1_orb_diff_abs_frac_int = p1_orb_diff_abs_frac.intValue()\n        val p1_orb_diff_abs_frac_int_div_2 = p1_orb_diff_abs_frac_int / 2\n        val p1_orb_diff_abs_frac_int_div_2_int = p1_orb_diff_abs_frac_int_div_2.intValue()\n        val p1_orb_diff_abs_frac_int_div_2_int_div_2 = p1_orb_diff_abs_frac_int_div_2_int / 2\n        val p1_orb_diff_abs_frac_int_div_2_int_div_2_int = p1_orb_diff_abs_frac_int_div_2_int_div_2.intValue()\n        val p1_orb_diff_abs_frac_int_div_2_int_div_2_int_div_2 = p1_orb_diff_abs_frac_int_div_2_int_div_2_int /\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmphej0fy96.scala:36:111 --------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb_diff_abs_frac_int_div_2_int_div_2_int_div_2\u001b[0m = p1_orb_diff_abs_frac_int_div_2_int_div_2_int /\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphej0fy96.scala:23:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = scala.collection.JavaConversions.asJavaMap(p1).get(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphej0fy96.scala:24:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = scala.collection.JavaConversions.asJavaMap(p2).get(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphej0fy96.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List[String](\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planet1Index = planets.indexOf(planet1)\n        val planet2Index = planets.indexOf(planet2)\n        val result = List[String]()\n        for (i <- 0 until planet1Index) {\n            for (j <- 0 until planet2Index) {\n                if (planets[i] < planets[j]) {\n                    result = result.append(planets[i])\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnmxclcjb.scala:27:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                \u001b[33mif\u001b[0m (planets[\u001b[35mi\u001b[0m] < planets[\u001b[35mj\u001b[0m]) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnmxclcjb.scala:28:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                    result = result.append(planets[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean result.appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnmxclcjb.scala:28:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                    result = result.append(planets[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n        var i = p1_idx\n        var j = p2_idx\n        while (i < j) {\n            var k = (i + j) / 2\n            if (planets[k].compareTo(p1) < 0) {\n                j = k\n            } else {\n                i = k + 1\n            }\n        }\n        while (i <= j) {\n            result = result.append(planets[i])\n            i = i + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw_g984fs.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw_g984fs.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw_g984fs.scala:30:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mif\u001b[0m (planets[\u001b[35mk\u001b[0m].compareTo(p1) < \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: type k\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw_g984fs.scala:30:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mif\u001b[0m (planets[\u001b[35mk\u001b[0m].compareTo(p1) < \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw_g984fs.scala:37:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            result = result.append(planets[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw_g984fs.scala:37:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            result = result.append(planets[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = p1.indexOf(\" \")\n        val p2_idx = p2.indexOf(\" \")\n        val p1_name = p1.substring(0, p1_idx)\n        val p2_name = p2.substring(0, p2_idx)\n        val p1_orb = p1.substring(p1_idx + 1)\n        val p2_orb = p2.substring(p2_idx + 1)\n        val p1_orb_num = _.toInt(p1_orb)\n        val p2_orb_num = _.toInt(p2_orb)\n        val p1_orb_num_abs = Math.abs(p1_orb_num)\n        val p2_orb_num_abs = Math.abs(p2_orb_num)\n        val p1_orb_num_abs_diff = p1_orb_num_abs - p2_orb_num_abs\n        val p1_orb_num_abs_diff_abs = Math.abs(p1_orb_num_abs_diff)\n        val p1_orb_num_abs_diff_abs_diff = p1_orb_num_abs_diff_abs - p2_orb_num_abs\n        val p1_orb_num_abs_diff_abs_diff_abs = Math.abs(p1_orb_num_abs_diff_abs_diff)\n        val p1_orb_num_abs_diff_abs_diff_abs_diff = p1_orb_num_abs_diff_abs_diff_abs - p2_orb_num_abs\n        val p1_orb_num_abs_diff_abs_diff_abs_diff_abs = Math.abs(p1_orb_num_abs_diff_abs_diff_abs_diff)\n        val p1_orb_num_abs_diff_abs_diff_abs_diff_abs_diff = p1_orb_num_abs_diff_abs_diff_abs_diff_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpdmzfttry.scala:29:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb_num\u001b[0m = _.toInt(p1_orb)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.toInt(p1_orb).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpdmzfttry.scala:30:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb_num\u001b[0m = _.toInt(p2_orb)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toInt(p2_orb).\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdmzfttry.scala:39:61 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb_num_abs_diff_abs_diff_abs_diff_abs_diff\u001b[0m = p1_orb_num_abs_diff_abs_diff_abs_diff_\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: p1_orb_num_abs_diff_abs_diff_abs_diff_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmzfttry.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_idx = p1_orb_idx + 1\n        val p2_orb_idx_idx = p2_orb_idx + 1\n        val p1_orb_idx_orb = p1_orb[p1_orb_idx_idx]\n        val p2_orb_idx_orb = p2_orb[p2_orb_idx_idx]\n        val p1_orb_idx_orb_idx = p1_orb_idx_orb.indexOf(p1)\n        val p2_orb_idx_orb_idx = p2_orb_idx_orb.indexOf(p2)\n        val p1_orb_idx_orb_idx_idx = p1_orb_idx_orb_idx + 1\n        val p2_orb_idx_orb_idx_idx = p2_orb_idx_orb_idx + 1\n        val p1_orb_idx_orb_idx_orb = p1_orb_idx_orb_idx_orb[p1_orb_idx_orb_idx_idx]\n        val p2_orb_idx_orb_idx_orb = p2_orb_idx_orb_idx_orb[p2_orb_idx_orb_idx_idx]\n        val p1_orb_idx_orb_idx_orb_idx = p1_orb_idx_orb_idx_orb[p1_orb_idx\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293551,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1t27jhl_.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ']' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1t27jhl_.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1t27jhl_.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1t27jhl_.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1t27jhl_.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1t27jhl_.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val res = List[String]()\n        for (i <- 0 until p1_orb.size) {\n            for (j <- 0 until p2_orb.size) {\n                if (p1_orb.get(i) < p2_orb.get(j)) {\n                    res = res.append(planets.get(i))\n                }\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79l8_xlz.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79l8_xlz.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79l8_xlz.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79l8_xlz.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79l8_xlz.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79l8_xlz.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var planets = List[String]()\n        var p1_orbital_period = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe9x58qg5.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E119] Type Error: /tmp/tmpe9x58qg5.scala:24:902 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_orbital_period\u001b[0m = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala\n\u001b[31m\u001b[31m   |\u001b[0m
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_index = p1.indexOf(\" \")\n        val p2_index = p2.indexOf(\" \")\n        val p1_name = p1.substring(0, p1_index)\n        val p2_name = p2.substring(0, p2_index)\n        val p1_orbital_period = p1.substring(p1_index + 1)\n        val p2_orbital_period = p2.substring(p2_index + 1)\n        val p1_orbital_period_int = _.toInt(p1_orbital_period)\n        val p2_orbital_period_int = _.toInt(p2_orbital_period)\n        val p1_orbital_period_float = _.toFloat(p1_orbital_period)\n        val p2_orbital_period_float = _.toFloat(p2_orbital_period)\n        val p1_orbital_period_float_int = _.toInt(p1_orbital_period_float)\n        val p2_orbital_period_float_int = _.toInt(p2_orbital_period_float)\n        val p1_orbital_period_float_float = _.toFloat(p1_orbital_period_float)\n        val p2_orbital_period_float_float = _.toFloat(p2_orbital_period_float)\n        val p1_orbital_period_float_float_int = _.toInt(p1_orbital_period_float_float)\n        val p2_orbital_period_float_float_int = _.toInt(p2_orbital_period_float_float)\n        val p1_orbital_period_float_float_float = _.toFloat(p1_orbital_period_float_float)\n        val p2_orbital_period_float_float_float = _.toFloat(p2_orbital_period_float_float)\n        val p1\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7klb2yyo.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp7klb2yyo.scala:29:36 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_int\u001b[0m = _.toInt(p1_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.toInt(p1_orbital_period).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp7klb2yyo.scala:30:36 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orbital_period_int\u001b[0m = _.toInt(p2_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toInt(p2_orbital_period).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp7klb2yyo.scala:31:38 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_float\u001b[0m = _.toFloat(p1_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   _$3 => _$3.toFloat(p1_orbital_period).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp7klb2yyo.scala:32:38 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orbital_period_float\u001b[0m = _.toFloat(p2_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$4 of expanded function:\n\u001b[31m   |\u001b[0m   _$4 => _$4.toFloat(p2_orbital_period).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp7klb2yyo.scala:33:42 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = p1.indexOf(\" \")\n        val p2_idx = p2.indexOf(\" \")\n        val p1_name = p1.substring(0, p1_idx)\n        val p2_name = p2.substring(0, p2_idx)\n        val p1_orbital_period = p1.substring(p1_idx + 1)\n        val p2_orbital_period = p2.substring(p2_idx + 1)\n        val p1_orbital_period_in_seconds = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period)\n        val p2_orbital_period_in_seconds = _.toDouble(p2_orbital_period) * _.toDouble(p2_orbital_period) * _.toDouble(p2_orbital_period) * _.toDouble(p2_orbital_period)\n        val p1_orbital_period_in_days = p1_orbital_period_in_seconds / _.toDouble(86400)\n        val p2_orbital_period_in_days = p2_orbital_period_in_seconds / _.toDouble(86400)\n        val p1_orbital_period_in_years = p1_orbital_period_in_days / _.toDouble(365.25)\n        val p2_orbital_period_in_years = p2_orbital_period_in_days / _.toDouble(365.25)\n        val p1_orbital_period_in_years_rounded = _.round(p1_orbital_period_in_years)\n        val p2_orbital_period_in_years_rounded = _.round(p2_orbital_period_in_years)\n        val p1_orbital_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_w6c6k3r.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp_w6c6k3r.scala:29:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_in_seconds\u001b[0m = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m  Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m  (_$1, _$2, _$3, _$4) => \n\u001b[31m   |\u001b[0m    _$1.toDouble(p1_orbital_period) * _$2.toDouble(p1_orbital_period) * \n\u001b[31m   |\u001b[0m      _$3.toDouble(p1_orbital_period)\n\u001b[31m   |\u001b[0m     * _$4.toDouble(p1_orbital_period).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp_w6c6k3r.scala:29:75 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_in_seconds\u001b[0m = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m  Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m  (_$1, _$2, _$3, _$4) => \n\u001b[31m   |\u001b[0m    _$1.toDouble(p1_orbital_period) * _$2.toDouble(p1_orbital_period) * \n\u001b[31m   |\u001b[0m      _$3.toDouble(p1_orbital_period)\n\u001b[31m   |\u001b[0m     * _$4.toDouble(p1_orbital_period).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp_w6c6k3r.scala:29:107 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_in_seconds\u001b[0m = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toUpperCase()\n        var p2 = planet2.toUpperCase()\n        var p1_index = scala.collection.JavaConversions.asJavaCollection(p1.toUpperCase().indexOf(p2.toUpperCase())).toList().toArray(new Integer[0])\n        var p2_index = scala.collection.JavaConversions.asJavaCollection(p2.toUpperCase().indexOf(p1.toUpperCase())).toList().toArray(new Integer[0])\n        var p1_index_len = p1_index.length\n        var p2_index_len = p2_index.length\n        var result = List[String]()\n        for (var i = 0; i < p1_index_len; i++) {\n            for (var j = 0; j < p2_index_len; j++) {\n                if (p1_index[i] > p2_index[j]) {\n                    result = result.append(p1.substring(p1_index[i] - 1, p1_index[i]))\n                } else if (p1_index[i] < p2_index[j]) {\n                    result = result.append(p2.substring(p2_index[j] - 1, p2_index[j]))\n                } else {\n                    result = result.append(p1.substring(p1_index[i] - 1, p1_index[i]))\n                    result = result.append(p2.substring(p2_index[j] - 1, p2_index[j]))\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293554,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp1qn38c24.scala:28:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < p1_index_len; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1qn38c24.scala:28:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < p1_index_len; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp1qn38c24.scala:28:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < p1_index_len; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1qn38c24.scala:23:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_index\u001b[0m = scala.collection.JavaConversions.asJavaCollection(p1.toUpperCase().indexOf(p2.toUpperCase())).toList().toArray(\u001b[33mnew\u001b[0m \u001b[35mInteger\u001b[0m[\u001b[31m0\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1qn38c24.scala:24:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_index\u001b[0m = scala.collection.JavaConversions.asJavaCollection(p2.toUpperCase().indexOf(p1.toUpperCase())).toList().toArray(\u001b[33mnew\u001b[0m \u001b[35mInteger\u001b[0m[\u001b[31m0\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of colle",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val result = List[String]()\n        for (i <- 0 until p1_orb.size) {\n            for (j <- 0 until p2_orb.size) {\n                if (p1_orb.get(i) < p2_orb.get(j)) {\n                    result = result.append(planets.get(i))\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpchh0ix6r.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpchh0ix6r.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpchh0ix6r.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpchh0ix6r.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpchh0ix6r.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpchh0ix6r.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            \"Mercury\",\n            \"Venus\",\n            \"Earth\",\n            \"Mars\",\n            \"Jupiter\",\n            \"Saturn\",\n            \"Uranus\",\n            \"Neptune\"\n        )\n        val p1 = planets.find(p -> p.equals(planet1))\n        val p2 = planets.find(p -> p.equals(planet2))\n        val orbit1 = p1.getOrElse(0)\n        val orbit2 = p2.getOrElse(0)\n        val result = planets.filter(p -> orbit1 < orbit2 && orbit2 < orbit1).sortBy(p -> p.equals(planet1) ? -1 : 1).toList\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293551,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_4s15kkd.scala:31:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1\u001b[0m = planets.find(p -> p.equals(planet1))\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: p\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_4s15kkd.scala:32:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2\u001b[0m = planets.find(p -> p.equals(planet2))\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: p\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_4s15kkd.scala:35:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = planets.filter(p -> orbit1 < orbit2 && orbit2 < orbit1).sortBy(p -> p.equals(planet1) ? -\u001b[31m1\u001b[0m : \u001b[31m1\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: p\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_4s15kkd.scala:35:84 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = planets.filter(p -> orbit1 < orbit2 && orbit2 < orbit1).sortBy(p -> p.equals(planet1) ? -\u001b[31m1\u001b[0m : \u001b[31m1\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                            Not found: p\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_4s15kkd.scala:35:116 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = planets.filter(p -> orbit1 < orbit2 && orbit2 < orbit1).sortBy(p -> p.equals(planet1) ? -\u001b[31m1\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = _.indexOf(Planet, p1)\n        var p2_idx = _.indexOf(Planet, p2)\n        var result = List[String]()\n        var i = 0\n        var j = 0\n        while (i < p1_idx && j < p2_idx) {\n            if (Planet[i] < Planet[j]) {\n                result = result.append(Planet[i])\n                i = i + 1\n            } else {\n                result = result.append(Planet[j])\n                j = j + 1\n            }\n        }\n        while (i < p1_idx) {\n            result = result.append(Planet[i])\n            i = i + 1\n        }\n        while (j < p2_idx) {\n            result = result.append(Planet[j])\n            j = j + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293555,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpran2t6o3.scala:23:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = _.indexOf(Planet, p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.indexOf(Planet, p1).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpran2t6o3.scala:24:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = _.indexOf(Planet, p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.indexOf(Planet, p2).\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpran2t6o3.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (Planet[\u001b[35mi\u001b[0m] < Planet[\u001b[35mj\u001b[0m]) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpran2t6o3.scala:29:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (Planet[\u001b[35mi\u001b[0m] < Planet[\u001b[35mj\u001b[0m]) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpran2t6o3.scala:30:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                result = result.append(Planet[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpran2t6o3.scala:30:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                result = result.append(Planet[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.mutable.ListBuffer[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result.toList()\n        }\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        if (p1_orb_idx < 0 || p2_orb_idx < 0) {\n            return result.toList()\n        }\n        val p1_orb_idx_next = p1_orb_idx + 1\n        val p2_orb_idx_next = p2_orb_idx + 1\n        val p1_orb_idx_prev = p1_orb_idx - 1\n        val p2_orb_idx_prev = p2_orb_idx - 1\n        if (p1_orb_idx_next < 0 || p2_orb_idx_next < 0 || p1_orb_idx_prev < 0 || p2_orb_idx_prev < 0) {\n            return result.toList()\n        }\n        val p1_orb_idx_next_next = p1_orb_idx_next + 1\n        val p2_orb_idx_next_next = p2_orb_idx_next + 1\n        val p1_orb_idx_prev_prev = p1_orb_idx_prev - 1\n        val p2_orb_idx_prev_prev = p2_orb_idx_prev - 1\n        if (p1_orb_idx_next_next < 0 || p2_orb_idx_next_next < 0 ||\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpl86qxclv.scala:47:67 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mif\u001b[0m (p1_orb_idx_next_next < \u001b[31m0\u001b[0m || p2_orb_idx_next_next < \u001b[31m0\u001b[0m ||\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl86qxclv.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl86qxclv.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpl86qxclv.scala:27:32 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mreturn\u001b[0m result.toList()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): String\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl86qxclv.scala:29:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl86qxclv.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_index = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n        val p2_index = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n        val p1_orbital_period = scala.math.durations.Seconds(p1_index * scala.math.durations.Seconds(1))\n        val p2_orbital_period = scala.math.durations.Seconds(p2_index * scala.math.durations.Seconds(1))\n        val p1_orbital_period_diff = p1_orbital_period - p2_orbital_period\n        val p1_orbital_period_diff_in_seconds = p1_orbital_period_diff.toSeconds()\n        val p2_orbital_period_diff_in_seconds = p2_orbital_period_diff.toSeconds()\n        val p1_orbital_period_diff_in_minutes = p1_orbital_period_diff_in_seconds / scala.math.durations.Minutes(1)\n        val p2_orbital_period_diff_in_minutes = p2_orbital_period_diff_in_seconds / scala.math.durations.Minutes(1)\n        val p1_orbital_period_diff_in_hours = p1_orbital_period_diff_in_minutes / scala.math.durations.Hours(1)\n        val p2_orbital_period_diff_in_hours = p2_orbital_period_diff_in_minutes / scala.math.durations.Hours(1)\n        val p1_orbital_period_diff_in_days = p1_orbital_period_diff_in_hours / scala.math.durations.Days(1)\n        val p2_orbital_period_diff_in_days = p2_orbital_period_diff\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsbau5iym.scala:23:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_index\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsbau5iym.scala:24:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_index\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsbau5iym.scala:25:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period\u001b[0m = scala.math.durations.Seconds(p1_index * scala.math.durations.Seconds(\u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                value durations is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsbau5iym.scala:26:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orbital_period\u001b[0m = scala.math.durations.Seconds(p2_index * scala.math.durations.Seconds(\u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                value durations is not a member of math\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsbau5iym.scala:29:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orbital_period_diff_in_seconds\u001b[0m = p2_orbital_period_diff.toSeconds()\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Not found: p2_orbital_period_diff\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n        var p1_orb = orbits[p1_idx]\n        var p2_orb = orbits[p2_idx]\n        var p1_orb_idx = p1_orb.indexOf(p1)\n        var p2_orb_idx = p2_orb.indexOf(p2)\n        var p1_orb_idx_next = p1_orb_idx + 1\n        var p2_orb_idx_next = p2_orb_idx + 1\n        var p1_orb_idx_prev = p1_orb_idx - 1\n        var p2_orb_idx_prev = p2_orb_idx - 1\n        var p1_orb_idx_next_next = p1_orb_idx_next + 1\n        var p2_orb_idx_next_next = p2_orb_idx_next + 1\n        var p1_orb_idx_prev_prev = p1_orb_idx_prev - 1\n        var p2_orb_idx_prev_prev = p2_orb_idx_prev - 1\n        var p1_orb_idx_next_next_next = p1_orb_idx_next_next + 1\n        var p2_orb_idx_next_next_next = p2_orb_idx_next_next + 1\n        var p1_orb_idx_prev_prev_prev = p1_orb_idx_prev_prev - 1\n        var p2_orb_idx_prev_prev_prev = p2_orb_idx_prev_prev - 1\n        var p1_orb_idx_next_next_next_next = p1_orb_idx_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293557,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:29:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:30:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_idx = p1_orb_idx + 1\n        val p2_orb_idx_idx = p2_orb_idx + 1\n        val p1_orb_idx_idx_idx = p1_orb_idx_idx + 1\n        val p2_orb_idx_idx_idx = p2_orb_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx = p1_orb_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx = p2_orb_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx_id\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpelum70ny.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new java.util.Vector[8]\n        sun[0] = new java.util.Vector[8]\n        sun[1] = new java.util.Vector[8]\n        sun[2] = new java.util.Vector[8]\n        sun[3] = new java.util.Vector[8]\n        sun[4] = new java.util.Vector[8]\n        sun[5] = new java.util.Vector[8]\n        sun[6] = new java.util.Vector[8]\n        sun[7] = new java.util.Vector[8]\n        var sun_index = 0\n        var sun_index_1 = 0\n        var sun_index_2 = 0\n        var sun_index_3 = 0\n        var sun_index_4 = 0\n        var sun_index_5 = 0\n        var sun_index_6 = 0\n        var sun_index_7 = 0\n        var sun_index_8 = 0\n        var sun_index_9 = 0\n        var sun_index_10 = 0\n        var sun_index_11 = 0\n        var sun_index_12 = 0\n        var sun_index_13 = 0\n        var sun_index_14 = 0\n        var sun_index_15 = 0\n        var sun_index_16 = 0\n        var sun_index_17 = 0\n        var sun_index_18 = 0\n        var sun_index_19 = 0\n        var sun_index_20 = 0\n        var sun_index_21 = 0\n        var sun_index_22 = 0\n        var sun_index_23 = 0\n        var sun_index_24 = 0\n        var sun_index_25 = 0\n        var sun_index_26 = 0\n        var sun_index_27 = 0\n        var sun_index_28 = 0\n        var sun_index_29 = 0\n        var sun_index_30 = 0\n        var sun_index_31 = 0\n        var sun_index_32 = 0\n        var sun_index_33 = 0\n        var sun_index_34 = 0\n        var sun_index_35 = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293557,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpaj7rd51w.scala:23:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        sun[\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpaj7rd51w.scala:24:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        sun[\u001b[31m1\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpaj7rd51w.scala:25:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        sun[\u001b[31m2\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpaj7rd51w.scala:26:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        sun[\u001b[31m3\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpaj7rd51w.scala:27:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        sun[\u001b[31m4\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpaj7rd51w.scala:28:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        sun[\u001b[31m5\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpaj7rd51w.scala:29:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        sun[\u001b[31m6\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpaj7rd51w.sc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = scala.collection.JavaConversions.asJavaList(\n            scala.collection.JavaConversions.asScalaBuffer(\n                scala.collection.mutable.Buffer.empty()\n            ).toList()\n        )\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293559,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgzcy2y94.scala:52:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mi\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mi is already defined as \u001b[33mvariable\u001b[0m \u001b[35mi\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgzcy2y94.scala:53:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mj\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mj is already defined as \u001b[33mvariable\u001b[0m \u001b[35mj\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgzcy2y94.scala:54:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mk\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mk is already defined as \u001b[33mvariable\u001b[0m \u001b[35mk\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgzcy2y94.scala:55:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ml is already defined as \u001b[33mvariable\u001b[0m \u001b[35ml\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgzcy2y94.scala:56:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mm\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mm is already defined as \u001b[33mvariable\u001b[0m \u001b[35mm\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgzcy2y94.scala:57:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mn\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.mutable.ListBuffer[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result.toList()\n        }\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        if (p1_orb < p2_orb) {\n            return result.toList()\n        }\n        for (i <- p1_orb) {\n            if (i < p2_orb) {\n                result.append(planets[i])\n            }\n        }\n        return result.toList()\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293558,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr5id53z1.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr5id53z1.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpr5id53z1.scala:27:32 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mreturn\u001b[0m result.toList()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): String\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr5id53z1.scala:29:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr5id53z1.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr5id53z1.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var planet1_orbital_period = scala.math.durations.Seconds(\n            scala.math.durations.Seconds(\n                scala.math.durations.Seconds(\n                    scala.math.durations.Seconds(\n                        scala.math.durations.Seconds(\n                            scala.math.durations.Seconds(\n                                scala.math.durations.Seconds(\n                                    scala.math.durations.Seconds(\n                                        scala.math.durations.Seconds(\n                                            scala.math.durations.Seconds(\n                                                scala.math.durations.Seconds(\n                                                    scala.math.durations.Seconds(\n                                                        scala.math.durations.Seconds(\n                                                            scala.math.durations.Seconds(\n                                                                scala.math.durations.Seconds(\n                                                                    scala.math.durations.Seconds(\n                                                                        scala.math.durations.Seconds(\n                                                                            scala.math.durations.Seconds(\n                                                                                scala.math.durations.Seconds(\n                                                                                    scala.math.durations.Seconds(\n                                                                                        scala.math.durations.Seconds(\n                                                                                            scala.math.durations.Seconds(\n                                                                                                scala.math.durations.Seconds(\n                                                                                                    scala.math.durations.Seconds(\n                                                                                                        scala.math.durations.Seconds(\n                                                                                                            scala.math.durations.Seconds(\n                                                                                                                scala.math.durations.Seconds(\n                                                                                                                    scala.math.durations.Seconds(\n                                                                                                                        scala.math.durations.Seconds(\n                                                                                                                                scala.math.durations.Seconds(\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp4bbiucr_.scala:51:157 --------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m                                                                                                                                scala.math.durations.Seconds(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4bbiucr_.scala:22:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period\u001b[0m = scala.math.durations.Seconds(\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value durations is not a member of math\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4bbiucr_.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new java.util.Vector[8]\n        sun[0] = new java.util.Vector[8]\n        sun[1] = new java.util.Vector[8]\n        sun[2] = new java.util.Vector[8]\n        sun[3] = new java.util.Vector[8]\n        sun[4] = new java.util.Vector[8]\n        sun[5] = new java.util.Vector[8]\n        sun[6] = new java.util.Vector[8]\n        sun[7] = new java.util.Vector[8]\n        var sun_index = 0\n        var planet_index = 0\n        var sun_planet_index = 0\n        var sun_planet_index_2 = 0\n        var sun_planet_index_3 = 0\n        var sun_planet_index_4 = 0\n        var sun_planet_index_5 = 0\n        var sun_planet_index_6 = 0\n        var sun_planet_index_7 = 0\n        var sun_planet_index_8 = 0\n        var sun_planet_index_9 = 0\n        var sun_planet_index_10 = 0\n        var sun_planet_index_11 = 0\n        var sun_planet_index_12 = 0\n        var sun_planet_index_13 = 0\n        var sun_planet_index_14 = 0\n        var sun_planet_index_15 = 0\n        var sun_planet_index_16 = 0\n        var sun_planet_index_17 = 0\n        var sun_planet_index_18 = 0\n        var sun_planet_index_19 = 0\n        var sun_planet_index_20 = 0\n        var sun_planet_index_21 = 0\n        var sun_planet_index_22 = 0\n        var sun_planet_index_23 = 0\n        var sun_planet_index_24 = 0\n        var sun_planet_index_25 = 0\n        var sun_planet_index_26 = 0\n        var sun_planet_index_27 = 0\n        var sun_planet_index_28 = 0\n        var sun_planet_index_29 =\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpperwmjwh.scala:23:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        sun[\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpperwmjwh.scala:24:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        sun[\u001b[31m1\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpperwmjwh.scala:25:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        sun[\u001b[31m2\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpperwmjwh.scala:26:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        sun[\u001b[31m3\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpperwmjwh.scala:27:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        sun[\u001b[31m4\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpperwmjwh.scala:28:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        sun[\u001b[31m5\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpperwmjwh.scala:29:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        sun[\u001b[31m6\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpperwmjwh.sc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name = planet1\n        var planet2_name = planet2\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name = planet1\n        var planet2_name = planet2\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name = planet1\n        var planet2_name = planet2\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name = planet1\n        var planet2_name = planet2\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name = planet1\n        var planet2_name = planet2\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name = planet1\n        var planet2_name = planet2\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name = planet1\n        var planet2_name = planet2\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name = planet1\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_i793ivy.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbit\u001b[0m = scala.math.BigDecimal.valueOf(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_orbit is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_orbit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_i793ivy.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbit\u001b[0m = scala.math.BigDecimal.valueOf(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet2_orbit is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet2_orbit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_i793ivy.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_name\u001b[0m = planet1\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_name is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_name\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_i793ivy.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_name\u001b[0m = planet2\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet2_name is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet2_name\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_i793ivy.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbit\u001b[0m = scala.math.BigDecimal.valueOf(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new java.util.Date()\n        var sun_distance = scala.math.pow(scala.math.pow(sun.getTime(), 2), 1.5)\n        var planet1_distance = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(sc\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293562,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpk29n_x86.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk29n_x86.scala:24:871 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_distance\u001b[0m = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(sc\n\u001b[31m\u001b[31m   |\u001b[0m
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var planets = List[String]()\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpl6eeow90.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1orb\u001b[0m = scala.math.BigDecimal.valueOf(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mp1orb is already defined as \u001b[33mvariable\u001b[0m \u001b[35mp1orb\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpl6eeow90.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2orb\u001b[0m = scala.math.BigDecimal.valueOf(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mp2orb is already defined as \u001b[33mvariable\u001b[0m \u001b[35mp2orb\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpl6eeow90.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1orb\u001b[0m = scala.math.BigDecimal.valueOf(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mp1orb is already defined as \u001b[33mvariable\u001b[0m \u001b[35mp1orb\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpl6eeow90.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2orb\u001b[0m = scala.math.BigDecimal.valueOf(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mp2orb is already defined as \u001b[33mvariable\u001b[0m \u001b[35mp2orb\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpl6eeow90.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1orb\u001b[0m = scala.math.BigDecimal.valueOf(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0.0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0.0)\n        var planet1_name = planet1\n        var planet2_name = planet2\n        var planets = List[String]()\n        var planets_between_orbit = List[String]()\n        var planets_between_name = List[String]()\n        var planets_between_orbit_and_name = List[String]()\n        var planets_between_name_and_orbit = List[String]()\n        var planets_between_name_and_name = List[String]()\n        var planets_between_orbit_and_name_and_name = List[String]()\n        var planets_between_name_and_orbit_and_name = List[String]()\n        var planets_between_orbit_and_name_and_name_and_name = List[String]()\n        var planets_between_name_and_orbit_and_name_and_name_and_name = List[String]()\n        var planets_between_orbit_and_name_and_name_and_name_and_name_and_name = List[String]()\n        var planets_between_name_and_orbit_and_name_and_name_and_name_and_name_and_name = List[String]()\n        var planets_between_orbit_and_name_and_name_and_name_and_name_and_name_and_name_and_name = List[String]()\n        var planets_between_name_and_orbit_and_name_and_name_and_name_and_name_and_name_and_name_and_name = List[String]()\n        var planets_between_orbit_and_name_and_name_and_name_and_name_and_name_and_name_and_name_and_name_and_name = List[String]()\n        var planets_between_name_and_orbit_and_name_and_name_and_name_and_name_and_name_and_name_and_name_and_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpurffog6k.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpurffog6k.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val orbit_distance = scala.math.abs(p1_idx - p2_idx)\n        val orbit_distance_int = orbit_distance.toInt\n        val orbit_distance_float = orbit_distance.toFloat\n        val orbit_distance_double = orbit_distance.toDouble\n        val orbit_distance_big_int = orbit_distance.toBigInt\n        val orbit_distance_big_float = orbit_distance.toBigFloat\n        val orbit_distance_big_double = orbit_distance.toBigDouble\n        val orbit_distance_big_big_int = orbit_distance.toBigBigInt\n        val orbit_distance_big_big_float = orbit_distance.toBigBigFloat\n        val orbit_distance_big_big_double = orbit_distance.toBigBigDouble\n        val orbit_distance_big_big_big_int = orbit_distance.toBigBigBigInt\n        val orbit_distance_big_big_big_float = orbit_distance.toBigBigBigFloat\n        val orbit_distance_big_big_big_double = orbit_distance.toBigBigBigDouble\n        val orbit_distance_big_big_big_big_int = orbit_distance.toBigBigBigBigInt\n        val orbit_distance_big_big_big_big_float = orbit_distance.toBigBigBigBigFloat\n        val orbit_distance_big_big_big_big_double = orbit_distance.toBigBigBigBigDouble\n        val orbit_distance_big_big_big_big_big_int = orbit_distance.toBigBigBigBigBigInt\n        val orbit_distance_big_big_big_big_big_float = orbit_distance.toBigBigBigBigBigFloat\n        val orbit_distance_big_big_big_big_big_double = orbit_distance.toBigBigBigBigBigDouble\n        val orbit_distance_big_big_big_big_big_big_int = orbit\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2b9xzjfu.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2b9xzjfu.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2b9xzjfu.scala:44:57 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit_distance_big_big_big_big_big_big_int\u001b[0m = orbit\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2b9xzjfu.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planet1_orbital_period = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.p\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293564,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjqw4e6wn.scala:22:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjqw4e6wn.scala:21:978 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period\u001b[0m = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.p\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = scala.collection.mutable.ListBuffer[String]()\n        var planet1_orbital_period = scala.math.BigDecimal.valueOf(0.2408467)\n        var planet2_orbital_period = scala.math.BigDecimal.valueOf(0.615198)\n        var planet1_orbital_radius = scala.math.BigDecimal.valueOf(0.387098)\n        var planet2_orbital_radius = scala.math.BigDecimal.valueOf(0.723335)\n        var planet1_orbital_period_in_days = planet1_orbital_period.div(scala.math.BigDecimal.valueOf(86400))\n        var planet2_orbital_period_in_days = planet2_orbital_period.div(scala.math.BigDecimal.valueOf(86400))\n        var planet1_orbital_radius_in_km = planet1_orbital_radius.div(scala.math.BigDecimal.valueOf(1000))\n        var planet2_orbital_radius_in_km = planet2_orbital_radius.div(scala.math.BigDecimal.valueOf(1000))\n        var planet1_orbital_period_in_years = planet1_orbital_period_in_days.div(scala.math.BigDecimal.valueOf(365.25))\n        var planet2_orbital_period_in_years = planet2_orbital_period_in_days.div(scala.math.BigDecimal.valueOf(365.25))\n        var planet1_orbital_radius_in_m = planet1_orbital_radius_in_km.div(scala.math.BigDecimal.valueOf(1000))\n        var planet2_orbital_radius_in_m = planet2_orbital_radius_in_km.div(scala.math.BigDecimal.valueOf(1000))\n        var planet1_orbital_period_in_years_squared = planet1_orbital_period_in_years.multiply(planet1_orbital_period_in_years\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293564,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptcqba9bp.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptcqba9bp.scala:26:68 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period_in_days\u001b[0m = planet1_orbital_period.div(scala.math.BigDecimal.valueOf(\u001b[31m86400\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  value div is not a member of BigDecimal - did you mean BigDecimal.min?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptcqba9bp.scala:27:68 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbital_period_in_days\u001b[0m = planet2_orbital_period.div(scala.math.BigDecimal.valueOf(\u001b[31m86400\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  value div is not a member of BigDecimal - did you mean BigDecimal.min?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptcqba9bp.scala:28:66 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_radius_in_km\u001b[0m = planet1_orbital_radius.div(scala.math.BigDecimal.valueOf(\u001b[31m1000\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  value div is not a member of BigDecimal - did you mean BigDecimal.min?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptcqba9bp.scala:29:66 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbital_radius_in_km\u001b[0m = planet2_orbital_radius.div(scala.math.BigDecimal.valueOf(\u001b[31m1000\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  value div is not a member of BigDecimal - did you mean BigDecimal.min?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptcqba9bp.scala:35:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = p1.indexOf(\" \")\n        val p2_idx = p2.indexOf(\" \")\n        val p1_name = p1.substring(0, p1_idx)\n        val p2_name = p2.substring(0, p2_idx)\n        val p1_orbital_period = p1.substring(p1_idx + 1)\n        val p2_orbital_period = p2.substring(p2_idx + 1)\n        val p1_orbital_period_in_days = _.toDouble(p1_orbital_period) / _.toDouble(\".0\")\n        val p2_orbital_period_in_days = _.toDouble(p2_orbital_period) / _.toDouble(\".0\")\n        val p1_orbital_period_in_years = p1_orbital_period_in_days / 365.25\n        val p2_orbital_period_in_years = p2_orbital_period_in_days / 365.25\n        val p1_orbital_period_in_years_rounded = _.round(p1_orbital_period_in_years)\n        val p2_orbital_period_in_years_rounded = _.round(p2_orbital_period_in_years)\n        val p1_orbital_period_in_years_rounded_str = _.mkString(p1_orbital_period_in_years_rounded)\n        val p2_orbital_period_in_years_rounded_str = _.mkString(p2_orbital_period_in_years_rounded)\n        val p1_orbital_period_in_years_rounded_str_len = _.length(p1_orbital_period_in_years_rounded_str)\n        val p2_orbital_period_in_years_rounded_str_len = _.length(p2_orbital_period_in_years_rounded_str)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293564,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpl55a_wzz.scala:29:40 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_in_days\u001b[0m = _.toDouble(p1_orbital_period) / _.toDouble(\u001b[31m\".0\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   (_$1, _$2) => _$1.toDouble(p1_orbital_period) / _$2.toDouble(\u001b[32m\".0\"\u001b[0m).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpl55a_wzz.scala:29:72 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_in_days\u001b[0m = _.toDouble(p1_orbital_period) / _.toDouble(\u001b[31m\".0\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   (_$1, _$2) => _$1.toDouble(p1_orbital_period) / _$2.toDouble(\u001b[32m\".0\"\u001b[0m).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpl55a_wzz.scala:30:40 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orbital_period_in_days\u001b[0m = _.toDouble(p2_orbital_period) / _.toDouble(\u001b[31m\".0\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   (_$3, _$4) => _$3.toDouble(p2_orbital_period) / _$4.toDouble(\u001b[32m\".0\"\u001b[0m).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpl55a_wzz.scala:30:72 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orbital_period_in_days\u001b[0m = _.toDouble(p2_orbital_period) / _.toDouble(\u001b[31m\".0\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$4 of ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val result = List[String]()\n        for (i <- 0 until p1_orb_idx) {\n            for (j <- 0 until p2_orb_idx) {\n                if (p1_orb[i] == p2_orb[j]) {\n                    result = result.append(p1_orb[i])\n                    break\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293564,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu9zvuj9k.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu9zvuj9k.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu9zvuj9k.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu9zvuj9k.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu9zvuj9k.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu9zvuj9k.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = mutable.List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        if (p1_orb > p2_orb) {\n            return result\n        }\n        for (i <- 1 to p1_orb) {\n            val planet = planets[p1_idx + i]\n            result.append(planet)\n        }\n        for (i <- 1 to p2_orb - p1_orb) {\n            val planet = planets[p2_idx + i]\n            result.append(planet)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293561,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpriy_vtrr.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpriy_vtrr.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpriy_vtrr.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpriy_vtrr.scala:29:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpriy_vtrr.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpriy_vtrr.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase().trim()\n        val p2 = planet2.toLowerCase().trim()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.JavaConversions.seqAsJavaList(\n            scala.collection.JavaConversions.asScalaBuffer(\n                scala.collection.mutable.Buffer(\n                    (p1_idx < p2_idx) ? planets.subList(p1_idx, p2_idx) : planets.subList(p2_idx, p1_idx)\n                )\n            )\n        )\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf68zjivr.scala:28:89 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                    (p1_idx < p2_idx) ? planets.subList(p1_idx, p2_idx) : planets.subList(p2_idx, p1_idx)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             ')' expected, but '(' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf68zjivr.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf68zjivr.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf68zjivr.scala:25:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = scala.collection.JavaConversions.seqAsJavaList(\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var planet1Orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2Orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1Distance = scala.math.BigDecimal.valueOf(0)\n        var planet2Distance = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSun = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSun = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunSquared = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSunSquared = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunCubed = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSunCubed = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunQuartered = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSunQuartered = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunQuintered = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSunQuintered = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunSextered = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSunSextered = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunSeptered = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSunSeptered = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunOctered = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSunOctered = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunEnnested = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1uxopbmj.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uxopbmj.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planet1_ = planet1.toLowerCase()\n        var planet2_ = planet2.toLowerCase()\n        var planet1_ = planet1_.trim()\n        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.toLowerCase()\n        var planet2_ = planet2_.toLowerCase()\n        var planet1_ = planet1_.trim()\n        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.toLowerCase()\n        var planet2_ = planet2_.toLowerCase()\n        var planet1_ = planet1_.trim()\n        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.toLowerCase()\n        var planet2_ = planet2_.toLowerCase()\n        var planet1_ = planet1_.trim()\n        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.toLowerCase()\n        var planet2_ = planet2_.toLowerCase()\n        var planet1_ = planet1_.trim()\n        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.toLowerCase()\n        var planet2_ = planet2_.toLowerCase()\n        var planet1_ = planet1_.trim()\n        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.toLowerCase()\n        var planet2_ = planet2_.toLowerCase()\n        var planet1_ = planet1_.trim()\n        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.toLowerCase()\n        var planet2_ = planet2_.toLowerCase()\n        var planet1_ = planet1_.trim()\n        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.toLowerCase()\n        var planet2_ = planet2_.toLowerCase()\n        var planet1_ = planet1_.trim()\n        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.toLowerCase()\n        var planet2_ = planet2_.toLowerCase\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpac0xuxi1.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_\u001b[0m = planet1_.trim()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpac0xuxi1.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_\u001b[0m = planet2_.trim()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet2_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet2_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpac0xuxi1.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_\u001b[0m = planet1_.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpac0xuxi1.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_\u001b[0m = planet2_.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet2_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet2_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpac0xuxi1.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_\u001b[0m = planet1_.trim()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val result = List[String]()\n        if (p1_orb_idx < p2_orb_idx) {\n            for (i <- p1_orb_idx + 1 to p2_orb_idx) {\n                result = append(result, planets[p1_orb[i]])\n            }\n        } else {\n            for (i <- p2_orb_idx + 1 to p1_orb_idx) {\n                result = append(result, planets[p2_orb[i]])\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293560,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmt2hvp38.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmt2hvp38.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmt2hvp38.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmt2hvp38.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmt2hvp38.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmt2hvp38.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.JavaConversions.seqAsJavaList(\n            scala.collection.JavaConversions.asScalaBuffer(\n                scala.collection.mutable.Buffer(\n                    scala.math.min(p1_idx, p2_idx),\n                    scala.math.max(p1_idx, p2_idx)\n                )\n            )\n        )\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293564,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgp3ug68f.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgp3ug68f.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgp3ug68f.scala:25:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = scala.collection.JavaConversions.seqAsJavaList(\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n        var p1_orb = orbits[p1_idx]\n        var p2_orb = orbits[p2_idx]\n        var p1_orb_idx = p1_orb.indexOf(p1)\n        var p2_orb_idx = p2_orb.indexOf(p2)\n        var p1_orb_idx_next = p1_orb_idx + 1\n        var p2_orb_idx_next = p2_orb_idx + 1\n        var p1_orb_idx_prev = p1_orb_idx - 1\n        var p2_orb_idx_prev = p2_orb_idx - 1\n        var p1_orb_idx_next_next = p1_orb_idx_next + 1\n        var p2_orb_idx_next_next = p2_orb_idx_next + 1\n        var p1_orb_idx_prev_prev = p1_orb_idx_prev - 1\n        var p2_orb_idx_prev_prev = p2_orb_idx_prev - 1\n        var p1_orb_idx_next_next_next = p1_orb_idx_next_next + 1\n        var p2_orb_idx_next_next_next = p2_orb_idx_next_next + 1\n        var p1_orb_idx_prev_prev_prev = p1_orb_idx_prev_prev - 1\n        var p2_orb_idx_prev_prev_prev = p2_orb_idx_prev_prev - 1\n        var p1_orb_idx_next_next_next_next = p1_orb_idx_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293557,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:29:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:30:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new java.util.Date()\n        var sun_x = sun.getTime()\n        var sun_y = sun.getYear()\n        var sun_m = sun.getMonth()\n        var sun_d = sun.getDate()\n        var sun_h = sun.getHours()\n        var sun_min = sun.getMinutes()\n        var sun_sec = sun.getSeconds()\n        var sun_ms = sun.getTime()\n        var sun_dif = sun_x - sun_y * 365 * 24 * 60 * 60 * 1000\n        var sun_dif_h = sun_dif / (60 * 60 * 1000)\n        var sun_dif_m = sun_dif / (60 * 1000)\n        var sun_dif_s = sun_dif / 1000\n        var sun_dif_ms = sun_dif / 1\n        var sun_dif_hms = sun_dif_h + sun_dif_m + sun_dif_s + sun_dif_ms\n        var sun_dif_hms_d = sun_dif_hms / 24\n        var sun_dif_hms_h = sun_dif_hms / 60\n        var sun_dif_hms_m = sun_dif_hms / 60\n        var sun_dif_hms_s = sun_dif_hms / 60\n        var sun_dif_hms_ms = sun_dif_hms / 1000\n        var sun_dif_hms_ms_d = sun_dif_hms_ms / 24\n        var sun_dif_hms_ms_h = sun_dif_hms_ms / 60\n        var sun_dif_hms_ms_m = sun_dif_hms_ms / 60\n        var sun_dif_hms_ms_s = sun_dif_hms_ms / 60\n        var sun_dif_hms_ms_ms = sun_dif_hms_ms / 1000\n        var sun_dif_hms_ms_ms_d\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293566,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz2ne9m0_.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz2ne9m0_.scala:48:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new java.util.Vector[8]\n        sun[0] = new java.util.Vector[8]\n        sun[1] = new java.util.Vector[8]\n        sun[2] = new java.util.Vector[8]\n        sun[3] = new java.util.Vector[8]\n        sun[4] = new java.util.Vector[8]\n        sun[5] = new java.util.Vector[8]\n        sun[6] = new java.util.Vector[8]\n        sun[7] = new java.util.Vector[8]\n        var sun_index = 0\n        var planet_index = 0\n        var sun_planet_index = 0\n        var sun_planet_index_temp = 0\n        var sun_planet_index_temp_temp = 0\n        var sun_planet_index_temp_temp_temp = 0\n        var sun_planet_index_temp_temp_temp_temp = 0\n        var sun_planet_index_temp_temp_temp_temp_temp = 0\n        var sun_planet_index_temp_temp_temp_temp_temp_temp = 0\n        var sun_planet_index_temp_temp_temp_temp_temp_temp_temp = 0\n        var sun_planet_index_temp_temp_temp_temp_temp_temp_temp_temp = 0\n        var sun_planet_index_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0\n        var sun_planet_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0\n        var sun_planet_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0\n        var sun_planet_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0\n        var sun_planet_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0\n        var sun_planet_index_temp_temp_temp_temp_temp_temp_temp_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293566,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp7wbyx0xt.scala:23:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        sun[\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7wbyx0xt.scala:24:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        sun[\u001b[31m1\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7wbyx0xt.scala:25:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        sun[\u001b[31m2\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7wbyx0xt.scala:26:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        sun[\u001b[31m3\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7wbyx0xt.scala:27:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        sun[\u001b[31m4\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7wbyx0xt.scala:28:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        sun[\u001b[31m5\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7wbyx0xt.scala:29:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        sun[\u001b[31m6\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7wbyx0xt.sc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List[String](\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planet1Index = planets.indexOf(planet1)\n        val planet2Index = planets.indexOf(planet2)\n        val result = List[String]()\n        if (planet1Index < 0 || planet2Index < 0) {\n            return result\n        }\n        val planet1Orbit = scala.math.BigDecimal.valueOf(planets.get(planet1Index).toString())\n        val planet2Orbit = scala.math.BigDecimal.valueOf(planets.get(planet2Index).toString())\n        val planet1OrbitDegree = planet1Orbit.divide(scala.math.BigDecimal.valueOf(scala.math.Math.PI), scala.math.BigDecimal.valueOf(10))\n        val planet2OrbitDegree = planet2Orbit.divide(scala.math.BigDecimal.valueOf(scala.math.Math.PI), scala.math.BigDecimal.valueOf(10))\n        val planet1OrbitDegreeDiff = planet1OrbitDegree.subtract(planet2OrbitDegree)\n        val planet1OrbitDegreeDiffAbs = planet1OrbitDegreeDiff.abs()\n        val planet1OrbitDegreeDiffAbsHalf = planet1OrbitDegreeDiffAbs.divide(scala.math.BigDecimal.valueOf(2))\n        val planet1OrbitDegreeDiffAbsHalfInt = planet1OrbitDegreeDiffAbsHalf.intValue()\n        val planet1OrbitDegreeDiffAbsHalfIntHalf = planet1OrbitDegreeDiffAbsHalfInt.divide(scala.math.BigDecimal.valueOf(2))\n        val planet1OrbitDegreeDiffAbsHalfIntHalfInt = planet1OrbitDegreeDiffAbsHalfIntHalf.intValue()\n        val planet1OrbitDegreeDiffAbsHalfIntHalfIntHalf = planet1OrbitDegreeDiffAbsHalfIntHalfInt.\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293570,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjnlwvwlg.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjnlwvwlg.scala:28:65 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanet1Orbit\u001b[0m = scala.math.BigDecimal.valueOf(planets.get(planet1Index).toString())\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   value get is not a member of List[String] - did you mean planets.seq?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjnlwvwlg.scala:29:65 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanet2Orbit\u001b[0m = scala.math.BigDecimal.valueOf(planets.get(planet2Index).toString())\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjnlwvwlg.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val orbit1 = orbits[p1_idx]\n        val orbit2 = orbits[p2_idx]\n        val orbit_intersect = orbit1.intersect(orbit2)\n        val result = planets.filter(p -> orbit_intersect.contains(p))\n        result.sort(Comparator.comparing(p -> orbit_intersect.distance(p)))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdv3_8w_k.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdv3_8w_k.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdv3_8w_k.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit1\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdv3_8w_k.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit1\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdv3_8w_k.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit2\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdv3_8w_k.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit2\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new java.util.Vector[8]\n        sun[0] = new java.util.Vector[8]\n        sun[1] = new java.util.Vector[8]\n        sun[2] = new java.util.Vector[8]\n        sun[3] = new java.util.Vector[8]\n        sun[4] = new java.util.Vector[8]\n        sun[5] = new java.util.Vector[8]\n        sun[6] = new java.util.Vector[8]\n        sun[7] = new java.util.Vector[8]\n        var sun_index = 0\n        var planet_index = 0\n        var sun_planet_index = 0\n        var sun_planet_index_2 = 0\n        var sun_planet_index_3 = 0\n        var sun_planet_index_4 = 0\n        var sun_planet_index_5 = 0\n        var sun_planet_index_6 = 0\n        var sun_planet_index_7 = 0\n        var sun_planet_index_8 = 0\n        var sun_planet_index_9 = 0\n        var sun_planet_index_10 = 0\n        var sun_planet_index_11 = 0\n        var sun_planet_index_12 = 0\n        var sun_planet_index_13 = 0\n        var sun_planet_index_14 = 0\n        var sun_planet_index_15 = 0\n        var sun_planet_index_16 = 0\n        var sun_planet_index_17 = 0\n        var sun_planet_index_18 = 0\n        var sun_planet_index_19 = 0\n        var sun_planet_index_20 = 0\n        var sun_planet_index_21 = 0\n        var sun_planet_index_22 = 0\n        var sun_planet_index_23 = 0\n        var sun_planet_index_24 = 0\n        var sun_planet_index_25 = 0\n        var sun_planet_index_26 = 0\n        var sun_planet_index_27 = 0\n        var sun_planet_index_28 = 0\n        var sun_planet_index_29 =\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpperwmjwh.scala:23:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        sun[\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpperwmjwh.scala:24:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        sun[\u001b[31m1\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpperwmjwh.scala:25:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        sun[\u001b[31m2\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpperwmjwh.scala:26:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        sun[\u001b[31m3\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpperwmjwh.scala:27:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        sun[\u001b[31m4\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpperwmjwh.scala:28:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        sun[\u001b[31m5\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpperwmjwh.scala:29:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        sun[\u001b[31m6\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpperwmjwh.sc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_index = scala.collection.JavaConversions.asScalaBuffer(p1).toIndexedSeq().toList()\n        val p2_index = scala.collection.JavaConversions.asScalaBuffer(p2).toIndexedSeq().toList()\n        val p1_orbit = p1_index.map(i => p1_index.get(i).toString()).toList()\n        val p2_orbit = p2_index.map(i => p2_index.get(i).toString()).toList()\n        val p1_orbit_index = scala.collection.JavaConversions.asScalaBuffer(p1_orbit).toIndexedSeq().toList()\n        val p2_orbit_index = scala.collection.JavaConversions.asScalaBuffer(p2_orbit).toIndexedSeq().toList()\n        val p1_orbit_index_sorted = p1_orbit_index.sort(java.util.Comparator.comparing(i -> p1_orbit.get(i)))\n        val p2_orbit_index_sorted = p2_orbit_index.sort(java.util.Comparator.comparing(i -> p2_orbit.get(i)))\n        val p1_orbit_index_sorted_list = p1_orbit_index_sorted.toList()\n        val p2_orbit_index_sorted_list = p2_orbit_index_sorted.toList()\n        val p1_orbit_index_sorted_list_diff = p1_orbit_index_sorted_list.diff(p2_orbit_index_sorted_list)\n        val p2_orbit_index_sorted_list_diff = p2_orbit_index_sorted_list.diff(p1_orbit_index_sorted_list)\n        val p1_orbit_index_sorted_list_diff_sorted = p1_orbit_index_sorted_list_diff.sort(java.util.Comparator.comparing(i -> p\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293570,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp35wnb1n9.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp35wnb1n9.scala:23:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_index\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p1).toIndexedSeq().toList()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp35wnb1n9.scala:24:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_index\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p2).toIndexedSeq().toList()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp35wnb1n9.scala:27:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbit_index\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p1_orbit).toIndexedSeq().toList()\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp35wnb1n9.scala:28:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orbit_index\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p2_orbit).toIndexedSeq().toList()\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp35wnb1n9.scala:36:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m long",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var planet1_orbital_period = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpw3b41q_f.scala:23:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E119] Type Error: /tmp/tmpw3b41q_f.scala:22:958 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period\u001b[0m = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math\n\u001b[31m\u001b[31m   |\u001b[0m
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.mutable.ListBuffer[String]()\n        for (i <- 0 until planets.size - 1) {\n            val planet = planets[i]\n            val planet_idx = planets.indexOf(planet)\n            if (planet_idx < p1_idx && planet_idx < p2_idx) {\n                result.append(planet)\n            }\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293566,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj5ei1cfb.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj5ei1cfb.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj5ei1cfb.scala:26:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until planets.size - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj5ei1cfb.scala:27:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mplanet\u001b[0m = planets[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj5ei1cfb.scala:27:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mplanet\u001b[0m = planets[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj5ei1cfb.scala:28:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mplanet_idx\u001b[0m = planets.indexOf(p",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_idx = p1_orb_idx + 1\n        val p2_orb_idx_idx = p2_orb_idx + 1\n        val result = List[String]()\n        for (i <- p1_orb_idx_idx to p2_orb_idx_idx) {\n            result = result.append(planets[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293566,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgdk3rx2h.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgdk3rx2h.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgdk3rx2h.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgdk3rx2h.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgdk3rx2h.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgdk3rx2h.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = p1.indexOf(\" \")\n        val p2_idx = p2.indexOf(\" \")\n        val p1_name = p1.substring(0, p1_idx)\n        val p2_name = p2.substring(0, p2_idx)\n        val p1_orb = scala.math.BigDecimal.valueOf(Double.parseDouble(p1.substring(p1_idx + 1)))\n        val p2_orb = scala.math.BigDecimal.valueOf(Double.parseDouble(p2.substring(p2_idx + 1)))\n        val p1_orb_idx = p1_orb.toBigDecimal().divide(scala.math.BigDecimal.valueOf(Math.PI), scala.math.BigDecimal.ROUND_HALF_UP).intValue()\n        val p2_orb_idx = p2_orb.toBigDecimal().divide(scala.math.BigDecimal.valueOf(Math.PI), scala.math.BigDecimal.ROUND_HALF_UP).intValue()\n        val p1_orb_idx_diff = p1_orb_idx - p2_orb_idx\n        val p2_orb_idx_diff = p2_orb_idx - p1_orb_idx\n        val p1_orb_idx_diff_abs = p1_orb_idx_diff.abs()\n        val p2_orb_idx_diff_abs = p2_orb_idx_diff.abs()\n        val p1_orb_idx_diff_abs_abs = p1_orb_idx_diff_abs.abs()\n        val p2_orb_idx_diff_abs_abs = p2_orb_idx_diff_abs.abs()\n        val p1_orb_idx_diff_abs_abs_abs = p1_orb_idx_diff_abs_abs.abs()\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293571,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9wwbe513.scala:27:58 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = scala.math.BigDecimal.valueOf(Double.parseDouble(p1.substring(p1_idx + \u001b[31m1\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value parseDouble is not a member of object Double\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9wwbe513.scala:28:58 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = scala.math.BigDecimal.valueOf(Double.parseDouble(p2.substring(p2_idx + \u001b[31m1\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value parseDouble is not a member of object Double\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9wwbe513.scala:38:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var planets = List[String]()\n        if (p1 == \"mercury\" && p2 == \"venus\") {\n            planets = List(\"venus\")\n        } else if (p1 == \"mercury\" && p2 == \"earth\") {\n            planets = List(\"earth\")\n        } else if (p1 == \"mercury\" && p2 == \"mars\") {\n            planets = List(\"mars\")\n        } else if (p1 == \"mercury\" && p2 == \"jupiter\") {\n            planets = List(\"jupiter\")\n        } else if (p1 == \"mercury\" && p2 == \"saturn\") {\n            planets = List(\"saturn\")\n        } else if (p1 == \"mercury\" && p2 == \"uranus\") {\n            planets = List(\"uranus\")\n        } else if (p1 == \"mercury\" && p2 == \"neptune\") {\n            planets = List(\"neptune\")\n        } else if (p1 == \"venus\" && p2 == \"earth\") {\n            planets = List(\"earth\")\n        } else if (p1 == \"venus\" && p2 == \"mars\") {\n            planets = List(\"mars\")\n        } else if (p1 == \"venus\" && p2 == \"jupiter\") {\n            planets = List(\"jupiter\")\n        } else if (p1 == \"venus\" && p2 == \"saturn\") {\n            planets = List(\"saturn\")\n        } else if (p1 == \"venus\" && p2 == \"uranus\") {\n            planets = List(\"uranus\")\n        } else if (p1 == \"venus\" && p2 == \"neptune\") {\n            planets = List(\"neptune\")\n        } else if (p1 == \"earth\" && p2 == \"mars\") {\n            planets = List(\"mars\")\n        } else if (p1 == \"earth\" && p2 == \"jupiter\") {\n            planets\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293573,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5rwki5nw.scala:66:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5rwki5nw.scala:65:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp5rwki5nw.scala:55:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m55 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var planets = List[String]()\n        var p1_orb = scala.math.BigDecimal.valueOf(0)\n        var p2_orb = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_m = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_m = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_m_m = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_m_m = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_m_m_m = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_m_m_m = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_m_m_m_m = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_m_m_m_m = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_m_m_m_m_m = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_m_m_m_m_m = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_m_m_m_m_m_m = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_m_m_m_m_m_m = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_m_m_m_m_m_m_m = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_m_m_m_m_m_m_m = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_m_m_m\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293572,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1vctzh87.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1vctzh87.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val orbit_interval = scala.math.min(p1_idx, p2_idx)\n        val orbit_diff = p1_idx - p2_idx\n        val orbit_diff_abs = orbit_diff.abs()\n        val orbit_diff_sign = orbit_diff.signum()\n        val orbit_diff_abs_sign = orbit_diff_abs.signum()\n        val orbit_diff_abs_sign_pow = orbit_diff_abs_sign.pow(2)\n        val orbit_diff_abs_sign_pow_abs = orbit_diff_abs_sign_pow.abs()\n        val orbit_diff_abs_sign_pow_abs_sign = orbit_diff_abs_sign_pow_abs.signum()\n        val orbit_diff_abs_sign_pow_abs_sign_pow = orbit_diff_abs_sign_pow_abs_sign.pow(2)\n        val orbit_diff_abs_sign_pow_abs_sign_pow_abs = orbit_diff_abs_sign_pow_abs_sign_pow.abs()\n        val orbit_diff_abs_sign_pow_abs_sign_pow_abs_sign = orbit_diff_abs_sign_pow_abs_sign_pow_abs.signum()\n        val orbit_diff_abs_sign_pow_abs_sign_pow_abs_sign_pow = orbit_diff_abs_sign_pow_abs_sign_pow_abs_sign.pow(2)\n        val orbit_diff_abs_sign_pow_abs_sign_pow_abs_sign_pow_abs = orbit_diff_abs_sign_pow_abs_sign_pow_abs_sign_pow_abs.abs()\n        val orbit_diff_abs_sign_pow_abs_sign_pow_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293573,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo8xb0qim.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo8xb0qim.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo8xb0qim.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpo8xb0qim.scala:37:68 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit_diff_abs_sign_pow_abs_sign_pow_abs_sign_pow_abs\u001b[0m = orbit_diff_abs_sign_pow_abs_sign_pow_abs_sign_pow_abs.abs()\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35morbit_diff_abs_sign_pow_abs_sign_pow_abs_sign_pow_abs\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo8xb0qim.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toUpperCase()\n        var p2 = planet2.toUpperCase()\n        var p1_index = p1.indexOf(\" \")\n        var p2_index = p2.indexOf(\" \")\n        var p1_name = p1.substring(0, p1_index)\n        var p2_name = p2.substring(0, p2_index)\n        var p1_orbital_period = p1.substring(p1_index + 1)\n        var p2_orbital_period = p2.substring(p2_index + 1)\n        var p1_orbital_period_in_seconds = _.toDouble(p1_orbital_period)\n        var p2_orbital_period_in_seconds = _.toDouble(p2_orbital_period)\n        var p1_orbital_period_in_minutes = _.toDouble(p1_orbital_period) / 60\n        var p2_orbital_period_in_minutes = _.toDouble(p2_orbital_period) / 60\n        var p1_orbital_period_in_hours = _.toDouble(p1_orbital_period) / 3600\n        var p2_orbital_period_in_hours = _.toDouble(p2_orbital_period) / 3600\n        var p1_orbital_period_in_days = _.toDouble(p1_orbital_period) / 86400\n        var p2_orbital_period_in_days = _.toDouble(p2_orbital_period) / 86400\n        var p1_orbital_period_in_years = _.toDouble(p1_orbital_period) / 31536000\n        var p2_orbital_period_in_years = _.toDouble(p2_orbital_period) / 31536000\n        var p1_orbital_period_in_seconds_per_year = p1_orbital_period_in_seconds / p1_orbital_period_in_years\n        var p2_orbital_period_in_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293574,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5dqoh5nj.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp5dqoh5nj.scala:29:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_orbital_period_in_seconds\u001b[0m = _.toDouble(p1_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.toDouble(p1_orbital_period).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp5dqoh5nj.scala:30:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_orbital_period_in_seconds\u001b[0m = _.toDouble(p2_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toDouble(p2_orbital_period).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp5dqoh5nj.scala:31:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_orbital_period_in_minutes\u001b[0m = _.toDouble(p1_orbital_period) / \u001b[31m60\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   _$3 => _$3.toDouble(p1_orbital_period) / 60.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp5dqoh5nj.scala:32:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_orbital_period_in_minutes\u001b[0m = _.toDouble(p2_orbital_period) / \u001b[31m60\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$4 of expanded function:\n\u001b[31m   |\u001b[0m   _$4 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planet1_orbital_period = scala.math.durations.Seconds(2.4e9)\n        var planet2_orbital_period = scala.math.durations.Seconds(4.8e9)\n        var planet1_orbital_period_in_seconds = planet1_orbital_period.toSeconds\n        var planet2_orbital_period_in_seconds = planet2_orbital_period.toSeconds\n        var planet1_orbital_period_in_days = planet1_orbital_period_in_seconds / scala.math.durations.Days(1).toSeconds\n        var planet2_orbital_period_in_days = planet2_orbital_period_in_seconds / scala.math.durations.Days(1).toSeconds\n        var planet1_orbital_period_in_years = planet1_orbital_period_in_days / scala.math.durations.Years(1).toDays\n        var planet2_orbital_period_in_years = planet2_orbital_period_in_days / scala.math.durations.Years(1).toDays\n        var planet1_orbital_period_in_centuries = planet1_orbital_period_in_days / scala.math.durations.Centuries(1).toDays\n        var planet2_orbital_period_in_centuries = planet2_orbital_period_in_days / scala.math.durations.Centuries(1).toDays\n        var planet1_orbital_period_in_millennia = planet1_orbital_period_in_days / scala.math.durations.Millennia(1).toDays\n        var planet2_orbital_period_in_millennia = planet2_orbital_period_in_days / scala.math.durations.Millennia(1).toDays\n        var planet1_orbital_period_in_seconds_to_millennia = planet1_orbital_period_in_millennia / scala.math.durations.Seconds(1).toMilliseconds\n        var planet2_orbital_period_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293574,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprwyx4ilz.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprwyx4ilz.scala:21:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period\u001b[0m = scala.math.durations.Seconds(\u001b[31m2.4e9\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value durations is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprwyx4ilz.scala:22:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbital_period\u001b[0m = scala.math.durations.Seconds(\u001b[31m4.8e9\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value durations is not a member of math\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprwyx4ilz.scala:35:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_index = p1.indexOf(\" \")\n        val p2_index = p2.indexOf(\" \")\n        val p1_name = p1.substring(0, p1_index)\n        val p2_name = p2.substring(0, p2_index)\n        val p1_orbital_period = p1.substring(p1_index + 1)\n        val p2_orbital_period = p2.substring(p2_index + 1)\n        val p1_orbital_period_in_seconds = p1_orbital_period.toDouble / 365.25\n        val p2_orbital_period_in_seconds = p2_orbital_period.toDouble / 365.25\n        val p1_orbital_period_in_days = p1_orbital_period_in_seconds / 86400\n        val p2_orbital_period_in_days = p2_orbital_period_in_seconds / 86400\n        val p1_orbital_period_in_years = p1_orbital_period_in_days / 365\n        val p2_orbital_period_in_years = p2_orbital_period_in_days / 365\n        val p1_orbital_period_in_years_rounded = p1_orbital_period_in_years.round(2)\n        val p2_orbital_period_in_years_rounded = p2_orbital_period_in_years.round(2)\n        val p1_orbital_period_in_years_rounded_rounded = p1_orbital_period_in_years_rounded.round(3)\n        val p2_orbital_period_in_years_rounded_rounded = p2_orbital_period_in_years_rounded.round(3)\n        val p1_orbital_period_in_years_rounded_rounded_rounded = p1_orbital_period_in_years_rounded_rounded.round(4)\n        val p2_orbital\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293573,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt5tsv9sb.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpt5tsv9sb.scala:35:76 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_in_years_rounded\u001b[0m = p1_orbital_period_in_years.round(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mround\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichDouble\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpt5tsv9sb.scala:36:76 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orbital_period_in_years_rounded\u001b[0m = p2_orbital_period_in_years.round(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mround\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichDouble\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt5tsv9sb.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = p1.indexOf(\" \")\n        val p2_idx = p2.indexOf(\" \")\n        val p1_name = p1.substring(0, p1_idx)\n        val p2_name = p2.substring(0, p2_idx)\n        val p1_orb = p1.substring(p1_idx + 1)\n        val p2_orb = p2.substring(p2_idx + 1)\n        val p1_orb_idx = p1_orb.indexOf(\" \")\n        val p2_orb_idx = p2_orb.indexOf(\" \")\n        val p1_orb_orb = p1_orb.substring(0, p1_orb_idx)\n        val p2_orb_orb = p2_orb.substring(0, p2_orb_idx)\n        val p1_orb_orb_idx = p1_orb_orb.indexOf(\" \")\n        val p2_orb_orb_idx = p2_orb_orb.indexOf(\" \")\n        val p1_orb_orb_orb = p1_orb_orb.substring(0, p1_orb_orb_idx)\n        val p2_orb_orb_orb = p2_orb_orb.substring(0, p2_orb_orb_idx)\n        val p1_orb_orb_orb_idx = p1_orb_orb_orb.indexOf(\" \")\n        val p2_orb_orb_orb_idx = p2_orb_orb_orb.indexOf(\" \")\n        val p1_orb_orb_orb_orb = p1_orb_orb_orb.substring(0, p1_orb_orb_orb_idx)\n        val p2_orb_orb_orb_orb = p2_orb_orb_orb.substring(0, p2_orb_orb_orb_idx)\n        val p1_orb_orb\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293574,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkei6wux1.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkei6wux1.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val orbit1 = orbits[p1_idx]\n        val orbit2 = orbits[p2_idx]\n        val orbit_intersect = orbit1.intersect(orbit2)\n        val result = planets.filter(p -> orbit_intersect.contains(p))\n        result.sort((p1, p2) -> orbit1.distance(p1) - orbit2.distance(p2))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293571,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkkkw7fwo.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkkkw7fwo.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkkkw7fwo.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit1\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkkkw7fwo.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit1\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkkkw7fwo.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit2\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkkkw7fwo.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit2\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var planets = List[String]()\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293574,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpzzvc3om7.scala:103:11 --------------------------\u001b[0m\u001b[0m\n\u001b[31m103 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m           ^\u001b[0m\n\u001b[31m    |\u001b[0m           pattern expected\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzzvc3om7.scala:50:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mi\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mi is already defined as \u001b[33mvariable\u001b[0m \u001b[35mi\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzzvc3om7.scala:51:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mj\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mj is already defined as \u001b[33mvariable\u001b[0m \u001b[35mj\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzzvc3om7.scala:52:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mk\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mk is already defined as \u001b[33mvariable\u001b[0m \u001b[35mk\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzzvc3om7.scala:53:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ml is already defined as \u001b[33mvariable\u001b[0m \u001b[35ml\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzzvc3om7.scala:54:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mm\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mm is already",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = List.empty[String]\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n        if (p1_idx > p2_idx) {\n            return result\n        }\n        for (i <- p1_idx) {\n            for (j <- p2_idx) {\n                if (j < i) {\n                    result = result.append(planets[i])\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293571,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzotci5a6.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzotci5a6.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n        val p2_idx = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n        val p1_orb = scala.math.BigDecimal.valueOf(p1_idx).div(scala.math.BigDecimal.valueOf(8))\n        val p2_orb = scala.math.BigDecimal.valueOf(p2_idx).div(scala.math.BigDecimal.valueOf(8))\n        val p1_orb_next = scala.math.BigDecimal.valueOf(p1_idx + 1).div(scala.math.BigDecimal.valueOf(8))\n        val p2_orb_next = scala.math.BigDecimal.valueOf(p2_idx + 1).div(scala.math.BigDecimal.valueOf(8))\n        val p1_orb_next_next = scala.math.BigDecimal.valueOf(p1_idx + 2).div(scala.math.BigDecimal.valueOf(8))\n        val p2_orb_next_next = scala.math.BigDecimal.valueOf(p2_idx + 2).div(scala.math.BigDecimal.valueOf(8))\n        val p1_orb_next_next_next = scala.math.BigDecimal.valueOf(p1_idx + 3).div(scala.math.BigDecimal.valueOf(8))\n        val p2_orb_next_next_next = scala.math.BigDecimal.valueOf(p2_idx + 3).div(scala.math.BigDecimal.valueOf(8))\n        val p1_orb_next_next_next_next = scala.math.BigDecimal.valueOf(p1_idx + 4).div(scala.math.\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293575,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8q720jcl.scala:34:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8q720jcl.scala:23:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8q720jcl.scala:24:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8q720jcl.scala:34:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.mutable.ListBuffer[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result.toList()\n        }\n        if (p1_idx > p2_idx) {\n            val tmp = p1_idx\n            p1_idx = p2_idx\n            p2_idx = tmp\n        }\n        for (i <- p1_idx) {\n            for (j <- p2_idx) {\n                if (j > i) {\n                    result.append(planets[i])\n                    break\n                }\n            }\n        }\n        return result.toList()\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293573,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp27qtgq7_.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp27qtgq7_.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp27qtgq7_.scala:27:32 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mreturn\u001b[0m result.toList()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): String\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp27qtgq7_.scala:31:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            p1_idx = p2_idx\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp27qtgq7_.scala:32:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            p2_idx = tmp\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp27qtgq7_.scala:42:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mreturn\u001b[0m result.toList()\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeq",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_next = p1_orb_idx + 1\n        val p2_orb_idx_next = p2_orb_idx + 1\n        val p1_orb_idx_prev = p1_orb_idx - 1\n        val p2_orb_idx_prev = p2_orb_idx - 1\n        val p1_orb_idx_next_next = p1_orb_idx_next + 1\n        val p2_orb_idx_next_next = p2_orb_idx_next + 1\n        val p1_orb_idx_prev_prev = p1_orb_idx_prev - 1\n        val p2_orb_idx_prev_prev = p2_orb_idx_prev - 1\n        val p1_orb_idx_next_next_next = p1_orb_idx_next_next + 1\n        val p2_orb_idx_next_next_next = p2_orb_idx_next_next + 1\n        val p1_orb_idx_prev_prev_prev = p1_orb_idx_prev_prev - 1\n        val p2_orb_idx_prev_prev_prev = p2_orb_idx_prev_prev - 1\n        val p1_orb_idx_next_next_next_next = p1_orb_idx_next_next_next + 1\n        val p2_orb_idx_next_next_next_next = p2_orb_idx_next_next_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293574,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp76yvl_9e.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp76yvl_9e.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp76yvl_9e.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp76yvl_9e.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp76yvl_9e.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp76yvl_9e.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_next = p1_orb_idx + 1\n        val p2_orb_idx_next = p2_orb_idx + 1\n        val p1_orb_idx_prev = p1_orb_idx - 1\n        val p2_orb_idx_prev = p2_orb_idx - 1\n        val p1_orb_idx_next_next = p1_orb_idx_next + 1\n        val p2_orb_idx_next_next = p2_orb_idx_next + 1\n        val p1_orb_idx_prev_prev = p1_orb_idx_prev - 1\n        val p2_orb_idx_prev_prev = p2_orb_idx_prev - 1\n        val p1_orb_idx_next_next_next = p1_orb_idx_next_next + 1\n        val p2_orb_idx_next_next_next = p2_orb_idx_next_next + 1\n        val p1_orb_idx_prev_prev_prev = p1_orb_idx_prev_prev - 1\n        val p2_orb_idx_prev_prev_prev = p2_orb_idx_prev_prev - 1\n        val p1_orb_idx_next_next_next_next = p1_orb_idx_next_next_next + 1\n        val p2_orb_idx_next_next_next_next = p2_orb_idx_next_next_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293574,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp76yvl_9e.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp76yvl_9e.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp76yvl_9e.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp76yvl_9e.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp76yvl_9e.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp76yvl_9e.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List[String](\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planet1Index = planets.indexOf(planet1)\n        val planet2Index = planets.indexOf(planet2)\n        val result = List[String]()\n        for (i <- 0 until planets.size - 1) {\n            val planet = planets[i]\n            val orbit = planet.toLowerCase()\n            val planet1Orbit = planet1.toLowerCase()\n            val planet2Orbit = planet2.toLowerCase()\n            if (orbit.startsWith(planet1Orbit) && orbit.endsWith(planet2Orbit)) {\n                result = append(result, planet)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293572,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjgkcya3i.scala:26:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mplanet\u001b[0m = planets[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjgkcya3i.scala:31:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                result = append(result, planet)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val res = if (p1_orb < p2_orb) {\n            List[String]()\n        } else if (p1_orb > p2_orb) {\n            List[String](planets.toSeq().filter(p -> p < p1).toSeq().toList())\n        } else {\n            List[String](planets.toSeq().filter(p -> p < p1).toSeq().toList() +\n                         planets.toSeq().filter(p -> p < p2).toSeq().toList())\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293571,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu1oym8j5.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu1oym8j5.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu1oym8j5.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu1oym8j5.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu1oym8j5.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu1oym8j5.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.mutable.ListBuffer[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result.toList()\n        }\n        if (p1_idx > p2_idx) {\n            val tmp = p1_idx\n            p1_idx = p2_idx\n            p2_idx = tmp\n        }\n        for (i <- p1_idx) {\n            for (j <- p2_idx) {\n                if (i < j) {\n                    result.append(planets[i])\n                }\n            }\n        }\n        return result.toList()\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293572,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjwnt032h.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjwnt032h.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjwnt032h.scala:27:32 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mreturn\u001b[0m result.toList()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): String\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpjwnt032h.scala:31:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            p1_idx = p2_idx\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpjwnt032h.scala:32:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            p2_idx = tmp\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjwnt032h.scala:41:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mreturn\u001b[0m result.toList()\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeq",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var planet1_orbital_period = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpw3b41q_f.scala:23:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E119] Type Error: /tmp/tmpw3b41q_f.scala:22:958 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period\u001b[0m = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math\n\u001b[31m\u001b[31m   |\u001b[0m
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.mutable.ListBuffer[String]()\n        for (i <- 0 until planets.size - 1) {\n            val planet = planets[i]\n            val planet_idx = planets.indexOf(planet)\n            if (planet_idx < p1_idx && planet_idx > p2_idx) {\n                result.append(planet)\n            }\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293575,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bk2qdn4.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bk2qdn4.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bk2qdn4.scala:26:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until planets.size - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bk2qdn4.scala:27:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mplanet\u001b[0m = planets[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bk2qdn4.scala:27:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mplanet\u001b[0m = planets[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bk2qdn4.scala:28:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mplanet_idx\u001b[0m = planets.indexOf(p",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.mutable.ListBuffer[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result.toList()\n        }\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        if (p1_orb > p2_orb) {\n            return result.toList()\n        }\n        for (i <- p1_orb) {\n            for (j <- p2_orb) {\n                if (i < j) {\n                    result.append(planets[i])\n                }\n            }\n        }\n        return result.toList()\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293575,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprn5urbyr.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprn5urbyr.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmprn5urbyr.scala:27:32 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mreturn\u001b[0m result.toList()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): String\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprn5urbyr.scala:29:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprn5urbyr.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprn5urbyr.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = scala.collection.JavaConversions.seqAsJavaList(\n            scala.collection.JavaConversions.asScalaBuffer(\n                scala.collection.mutable.Buffer.empty()\n            ).toList()\n        )\n        val planet1_idx = planets.indexOf(planet1)\n        val planet2_idx = planets.indexOf(planet2)\n        val planet1_orbit = scala.math.BigDecimal(planets.get(planet1_idx).toString())\n        val planet2_orbit = scala.math.BigDecimal(planets.get(planet2_idx).toString())\n        val planet1_orbit_diff = planet1_orbit.subtract(planet2_orbit)\n        val planet1_orbit_diff_abs = planet1_orbit_diff.abs()\n        val planet1_orbit_diff_abs_div = planet1_orbit_diff_abs.divide(scala.math.BigDecimal(2))\n        val planet1_orbit_diff_abs_div_floor = planet1_orbit_diff_abs_div.floor()\n        val planet1_orbit_diff_abs_div_floor_int = planet1_orbit_diff_abs_div_floor.intValue()\n        val planet1_orbit_diff_abs_div_floor_int_div = planet1_orbit_diff_abs_div_floor_int.divide(scala.math.BigDecimal(2))\n        val planet1_orbit_diff_abs_div_floor_int_div_floor = planet1_orbit_diff_abs_div_floor_int_div.floor()\n        val planet1_orbit_diff_abs_div_floor_int_div_floor_int = planet1_orbit_diff_abs_div_floor_int_div_floor.intValue()\n        val planet1_orbit_diff_abs_div_floor_int_div_floor_int_div = planet1_orbit_diff_abs_div_floor_int_div_floor_int.divide(scala.math.BigDecimal(2))\n        val planet1_orbit_diff_abs_div_floor_int\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293578,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpg3imw224.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpg3imw224.scala:21:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanets\u001b[0m = scala.collection.JavaConversions.seqAsJavaList(\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3imw224.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_index = p1.indexOf(\" \")\n        val p2_index = p2.indexOf(\" \")\n        val p1_name = p1.substring(0, p1_index)\n        val p2_name = p2.substring(0, p2_index)\n        val p1_orbital_period = p1.substring(p1_index + 1)\n        val p2_orbital_period = p2.substring(p2_index + 1)\n        val p1_orbital_period_in_seconds = _.toDouble(p1_orbital_period)\n        val p2_orbital_period_in_seconds = _.toDouble(p2_orbital_period)\n        val p1_orbital_period_in_minutes = p1_orbital_period_in_seconds / 60\n        val p2_orbital_period_in_minutes = p2_orbital_period_in_seconds / 60\n        val p1_orbital_period_in_hours = p1_orbital_period_in_minutes / 60\n        val p2_orbital_period_in_hours = p2_orbital_period_in_minutes / 60\n        val p1_orbital_period_in_days = p1_orbital_period_in_hours / 24\n        val p2_orbital_period_in_days = p2_orbital_period_in_hours / 24\n        val p1_orbital_period_in_years = p1_orbital_period_in_days / 365\n        val p2_orbital_period_in_years = p2_orbital_period_in_days / 365\n        val p1_orbital_period_in_centuries = p1_orbital_period_in_years / 100\n        val p2_orbital_period_in_centuries = p2_orbital_period_in_years / 100\n        val p1_orbital_period_in_millennia = p1_orbital_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293578,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpejd0cjk3.scala:29:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_in_seconds\u001b[0m = _.toDouble(p1_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.toDouble(p1_orbital_period).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpejd0cjk3.scala:30:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orbital_period_in_seconds\u001b[0m = _.toDouble(p2_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toDouble(p2_orbital_period).\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpejd0cjk3.scala:41:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_in_millennia\u001b[0m = p1_orbital_\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Not found: p1_orbital_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpejd0cjk3.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var planets = List[String]()\n        var p1_orb = scala.math.BigDecimal.valueOf(0)\n        var p2_orb = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_d = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_d = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_d_d = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_d_d = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_d_d_d = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_d_d_d = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_d_d_d_d = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_d_d_d_d = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_d_d_d_d_d = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_d_d_d_d_d = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_d_d_d_d_d_d = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_d_d_d_d_d_d = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_d_d_d_d_d_d_d = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_d_d_d_d_d_d_d = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_d_d_d\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293581,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6qjrj_p7.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6qjrj_p7.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = p1.indexOf(\" \")\n        val p2_idx = p2.indexOf(\" \")\n        val p1_name = p1.substring(0, p1_idx)\n        val p2_name = p2.substring(0, p2_idx)\n        val p1_orb = p1.substring(p1_idx + 1)\n        val p2_orb = p2.substring(p2_idx + 1)\n        val p1_orb_num = _.toInt(p1_orb)\n        val p2_orb_num = _.toInt(p2_orb)\n        val p1_orb_diff = p1_orb_num - p2_orb_num\n        val p2_orb_diff = p2_orb_num - p1_orb_num\n        val p1_orb_diff_abs = Math.abs(p1_orb_diff)\n        val p2_orb_diff_abs = Math.abs(p2_orb_diff)\n        val p1_orb_diff_abs_abs = Math.abs(p1_orb_diff_abs)\n        val p2_orb_diff_abs_abs = Math.abs(p2_orb_diff_abs)\n        val p1_orb_diff_abs_abs_abs = Math.abs(p1_orb_diff_abs_abs)\n        val p2_orb_diff_abs_abs_abs = Math.abs(p2_orb_diff_abs_abs)\n        val p1_orb_diff_abs_abs_abs_abs = Math.abs(p1_orb_diff_abs_abs_abs)\n        val p2_orb_diff_abs_abs_abs_abs = Math.abs(p2_orb_diff_abs_abs_abs)\n        val p1_orb_diff_abs_abs_abs_abs_abs = Math.abs(p1_orb_diff_abs_abs_abs_abs)\n        val p2_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293581,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1rmsxuni.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp1rmsxuni.scala:29:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb_num\u001b[0m = _.toInt(p1_orb)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.toInt(p1_orb).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp1rmsxuni.scala:30:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb_num\u001b[0m = _.toInt(p2_orb)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toInt(p2_orb).\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1rmsxuni.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_index = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n        val p2_index = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n        val p1_orbital_period = scala.math.BigDecimal.valueOf(p1_index).divide(scala.math.BigDecimal.valueOf(2), scala.math.BigDecimal.valueOf(10))\n        val p2_orbital_period = scala.math.BigDecimal.valueOf(p2_index).divide(scala.math.BigDecimal.valueOf(2), scala.math.BigDecimal.valueOf(10))\n        val p1_orbital_period_in_days = p1_orbital_period.divide(scala.math.BigDecimal.valueOf(365.25), scala.math.BigDecimal.valueOf(10))\n        val p2_orbital_period_in_days = p2_orbital_period.divide(scala.math.BigDecimal.valueOf(365.25), scala.math.BigDecimal.valueOf(10))\n        val p1_orbital_period_in_years = p1_orbital_period.divide(scala.math.BigDecimal.valueOf(365.25), scala.math.BigDecimal.valueOf(10))\n        val p2_orbital_period_in_years = p2_orbital_period.divide(scala.math.BigDecimal.valueOf(365.25), scala.math.BigDecimal.valueOf(10))\n        val p1_orbital_period_in_seconds = p1_orbital_period_in_days.multiply(scala.math.BigDecimal.valueOf(86400))\n        val p2_orbital_period_in_seconds = p2_orbital_period_in_days.multip\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293583,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt3_cegnn.scala:23:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_index\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt3_cegnn.scala:24:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_index\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt3_cegnn.scala:33:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.mutable.ListBuffer[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result.toList()\n        }\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        if (p1_orb < p2_orb) {\n            return result.toList()\n        }\n        for (i <- p1_orb) {\n            if (i < p2_orb) {\n                result.append(planets[i])\n            }\n        }\n        return result.toList()\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293558,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr5id53z1.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr5id53z1.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpr5id53z1.scala:27:32 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mreturn\u001b[0m result.toList()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): String\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr5id53z1.scala:29:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr5id53z1.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr5id53z1.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.mutable.ListBuffer[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result.toList()\n        }\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_next = p1_orb_idx + 1\n        val p2_orb_idx_next = p2_orb_idx + 1\n        if (p1_orb_idx_next >= p1_orb.size()) {\n            return result.toList()\n        }\n        if (p2_orb_idx_next >= p2_orb.size()) {\n            return result.toList()\n        }\n        val p1_orb_next = p1_orb.get(p1_orb_idx_next)\n        val p2_orb_next = p2_orb.get(p2_orb_idx_next)\n        if (p1_orb_next.equals(p2_orb_next)) {\n            result.append(p1_orb_next)\n            result.append(p2_orb_next)\n            return result.toList()\n        }\n        val p1_orb_next_idx = p1_orb_next.indexOf(p1)\n        val p2_orb_next_idx = p2_orb_next.indexOf(p2)\n        val p1_orb_next_idx_next = p1_orb_next_idx + 1\n        val p2_orb_next_idx_next = p2_orb_next_id\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293582,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq9bt4bt4.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq9bt4bt4.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpq9bt4bt4.scala:27:32 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mreturn\u001b[0m result.toList()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): String\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq9bt4bt4.scala:29:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq9bt4bt4.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq9bt4bt4.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_idx = p1_orb_idx + 1\n        val p2_orb_idx_idx = p2_orb_idx + 1\n        val p1_orb_idx_idx_idx = p1_orb_idx_idx + 1\n        val p2_orb_idx_idx_idx = p2_orb_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx = p1_orb_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx = p2_orb_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx_id\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpelum70ny.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var planet1_orbital_period = scala.math.durations.Seconds(2.4e9)\n        var planet2_orbital_period = scala.math.durations.Seconds(4.8e9)\n        var planet1_orbital_period_in_seconds = planet1_orbital_period.toSeconds()\n        var planet2_orbital_period_in_seconds = planet2_orbital_period.toSeconds()\n        var planet1_orbital_period_in_minutes = planet1_orbital_period_in_seconds / 60\n        var planet2_orbital_period_in_minutes = planet2_orbital_period_in_seconds / 60\n        var planet1_orbital_period_in_hours = planet1_orbital_period_in_minutes / 60\n        var planet2_orbital_period_in_hours = planet2_orbital_period_in_minutes / 60\n        var planet1_orbital_period_in_days = planet1_orbital_period_in_hours / 24\n        var planet2_orbital_period_in_days = planet2_orbital_period_in_hours / 24\n        var planet1_orbital_period_in_years = planet1_orbital_period_in_days / 365\n        var planet2_orbital_period_in_years = planet2_orbital_period_in_days / 365\n        var planet1_orbital_period_in_centuries = planet1_orbital_period_in_years / 100\n        var planet2_orbital_period_in_centuries = planet2_orbital_period_in_years / 100\n        var planet1_orbital_period_in_millennia = planet1_orbital_period_in_centuries / 1000\n        var planet2_orbital_period_in_millennia = planet2_orbital_period_in_centuries / 1000\n        var planet1_orbital_period_in_seconds_diff = planet1_orbital_period_in_seconds - planet2_orbital_period_in_seconds\n        var planet2\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293584,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjpnqkkcb.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjpnqkkcb.scala:22:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period\u001b[0m = scala.math.durations.Seconds(\u001b[31m2.4e9\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value durations is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjpnqkkcb.scala:23:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbital_period\u001b[0m = scala.math.durations.Seconds(\u001b[31m4.8e9\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value durations is not a member of math\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjpnqkkcb.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.JavaConversions.seqAsJavaList(\n            scala.collection.JavaConversions.asScalaBuffer(\n                scala.collection.mutable.Buffer.range(p1_idx, p2_idx + 1)\n            ).toList()\n        )\n        result.sort(Comparator.comparing(String::toLowerCase))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293583,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmponbuafxq.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmponbuafxq.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmponbuafxq.scala:25:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = scala.collection.JavaConversions.seqAsJavaList(\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val result = List[String]()\n        for (i <- 0 until p1_orb.size) {\n            for (j <- 0 until p2_orb.size) {\n                if (p1_orb.get(i) < p2_orb.get(j)) {\n                    result = result.append(planets[i])\n                    break\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293583,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuhukbvzh.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuhukbvzh.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuhukbvzh.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuhukbvzh.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuhukbvzh.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuhukbvzh.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var planet1_orbital_period = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpw3b41q_f.scala:23:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E119] Type Error: /tmp/tmpw3b41q_f.scala:22:958 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period\u001b[0m = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math\n\u001b[31m\u001b[31m   |\u001b[0m
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_next = p1_orb_idx + 1\n        val p2_orb_idx_next = p2_orb_idx + 1\n        val p1_orb_idx_prev = p1_orb_idx - 1\n        val p2_orb_idx_prev = p2_orb_idx - 1\n        val p1_orb_idx_next_next = p1_orb_idx_next + 1\n        val p2_orb_idx_next_next = p2_orb_idx_next + 1\n        val p1_orb_idx_prev_prev = p1_orb_idx_prev - 1\n        val p2_orb_idx_prev_prev = p2_orb_idx_prev - 1\n        val p1_orb_idx_next_prev = p1_orb_idx_next - 1\n        val p2_orb_idx_next_prev = p2_orb_idx_next - 1\n        val p1_orb_idx_prev_next = p1_orb_idx_prev + 1\n        val p2_orb_idx_prev_next = p2_orb_idx_prev + 1\n        val p1_orb_idx_next_next_next = p1_orb_idx_next_next + 1\n        val p2_orb_idx_next_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293583,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbh3z47nz.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbh3z47nz.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbh3z47nz.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbh3z47nz.scala:29:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbh3z47nz.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbh3z47nz.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = scala.collection.JavaConversions.asJavaList(\n            scala.collection.JavaConversions.asScalaBuffer(\n                scala.collection.mutable.Buffer.empty()\n            ).toList()\n        )\n        var planet1_idx = planets.indexOf(planet1)\n        var planet2_idx = planets.indexOf(planet2)\n        if (planet1_idx < 0 || planet2_idx < 0) {\n            return scala.collection.JavaConversions.asJavaList(\n                scala.collection.JavaConversions.asScalaBuffer(\n                    scala.collection.mutable.Buffer.empty()\n                ).toList()\n            )\n        }\n        var planet1_orbital_period = scala.math.durations.Duration(\n            scala.math.durations.Years(1)\n        ).toSeconds()\n        var planet2_orbital_period = scala.math.durations.Duration(\n            scala.math.durations.Years(1)\n        ).toSeconds()\n        var planet1_orbital_period_diff = planet1_orbital_period - planet2_orbital_period\n        var planet2_orbital_period_diff = planet2_orbital_period - planet1_orbital_period\n        var planet1_orbital_period_diff_abs = Math.abs(planet1_orbital_period_diff)\n        var planet2_orbital_period_diff_abs = Math.abs(planet2_orbital_period_diff)\n        var planet1_orbital_period_diff_abs_div_planet2_orbital_period_diff_abs = planet1_orbital_period_diff_abs / planet2_orbital_period_diff_abs\n        var planet1_orbital_period_diff_abs_div_planet2_orbital_period_diff_abs_floor = Math.floor(planet1_orbital_period_diff_abs_div_planet2_orbital_period_diff_abs)\n        var planet1_orbital_period_diff_abs_div_planet2_orbital_period_diff_abs_ceil =\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293585,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpbvluhany.scala:47:86 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period_diff_abs_div_planet2_orbital_period_diff_abs_ceil\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbvluhany.scala:21:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanets\u001b[0m = scala.collection.JavaConversions.asJavaList(\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbvluhany.scala:29:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mreturn\u001b[0m scala.collection.JavaConversions.asJavaList(\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbvluhany.scala:35:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period\u001b[0m = scala.math.durations.Duration(\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value durations is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbvluhany.scala:38:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbital_period\u001b[0m = scala.math.durations.Duration(\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value durations is not a member of math\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbvluhany.scala:48:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m48 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val result = List[String]()\n        for (i <- 1 to p1_orb) {\n            for (j <- 1 to p2_orb) {\n                if (p1_orb < p2_orb) {\n                    if (p1_orb <= i && i <= p2_orb) {\n                        result = result + planets[i]\n                    }\n                } else {\n                    if (p2_orb <= i && i <= p1_orb) {\n                        result = result + planets[i]\n                    }\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293585,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9859fo6_.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9859fo6_.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9859fo6_.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9859fo6_.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9859fo6_.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9859fo6_.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new java.util.Vector[1]\n        sun[0] = new java.util.Vector[1]\n        sun[0][0] = new java.util.Vector[1]\n        sun[0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0] = new java\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293582,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzyrwrjo3.scala:23:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        sun[\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzyrwrjo3.scala:24:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        sun[\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzyrwrjo3.scala:25:21 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        sun[\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzyrwrjo3.scala:26:24 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        sun[\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzyrwrjo3.scala:27:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        sun[\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzyrwrjo3.scala:28:30 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        sun[\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzyrwrjo3.scala:29:33 -------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n        for (i <- 1 to planets.size - 1) {\n            var p = planets[i]\n            var p_idx = planets.indexOf(p)\n            if (p_idx < p1_idx && p_idx > p2_idx) {\n                result = append(result, p)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293581,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnbbbfive.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnbbbfive.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnbbbfive.scala:26:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to planets.size - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnbbbfive.scala:27:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mp\u001b[0m = planets[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnbbbfive.scala:27:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mp\u001b[0m = planets[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnbbbfive.scala:28:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mp_idx\u001b[0m = planets.indexOf(p)\n\u001b[31m\u001b[31m   |\u001b[0m                        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val result = scala.collection.mutable.ListBuffer[String]()\n        for (i <- 0 until planets.size - 1) {\n            val p = planets[i]\n            if (p.equals(p1) || p.equals(p2)) continue\n            if (p.compareTo(p1) < 0 && p.compareTo(p2) > 0) {\n                result.append(p)\n            }\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293582,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1m8r0zth.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1m8r0zth.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1m8r0zth.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1m8r0zth.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1m8r0zth.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1m8r0zth.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List[String](\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planet1Index = planets.indexOf(planet1)\n        val planet2Index = planets.indexOf(planet2)\n        val result = List[String]()\n        for (i <- 0 until planet1Index) {\n            for (j <- 0 until planet2Index) {\n                if (planets[i] < planets[j]) {\n                    result = result.append(planets[i])\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnmxclcjb.scala:27:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                \u001b[33mif\u001b[0m (planets[\u001b[35mi\u001b[0m] < planets[\u001b[35mj\u001b[0m]) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnmxclcjb.scala:28:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                    result = result.append(planets[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean result.appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnmxclcjb.scala:28:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                    result = result.append(planets[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_index = p1.indexOf(\" \")\n        val p2_index = p2.indexOf(\" \")\n        val p1_name = p1.substring(0, p1_index)\n        val p2_name = p2.substring(0, p2_index)\n        val p1_orbital_period = p1.substring(p1_index + 1)\n        val p2_orbital_period = p2.substring(p2_index + 1)\n        val p1_orbital_period_in_seconds = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period_in_seconds)\n        val p2_orbital_period_in_seconds = _.toDouble(p2_orbital_period) * _.toDouble(p2_orbital_period_in_seconds)\n        val p1_orbital_period_in_minutes = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period_in_minutes)\n        val p2_orbital_period_in_minutes = _.toDouble(p2_orbital_period) * _.toDouble(p2_orbital_period_in_minutes)\n        val p1_orbital_period_in_hours = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period_in_hours)\n        val p2_orbital_period_in_hours = _.toDouble(p2_orbital_period) * _.toDouble(p2_orbital_period_in_hours)\n        val p1_orbital_period_in_days = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period_in_days)\n        val p2_orbital_period_in_days = _.toDouble(p2_orbital_period) * _.toDouble(p2_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293585,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnt4lf6jx.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpnt4lf6jx.scala:29:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_in_seconds\u001b[0m = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period_in_seconds)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m(_$1, _$2) => \n\u001b[31m   |\u001b[0m  _$1.toDouble(p1_orbital_period) * _$2.toDouble(p1_orbital_period_in_seconds).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpnt4lf6jx.scala:29:75 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_in_seconds\u001b[0m = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period_in_seconds)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m(_$1, _$2) => \n\u001b[31m   |\u001b[0m  _$1.toDouble(p1_orbital_period) * _$2.toDouble(p1_orbital_period_in_seconds).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpnt4lf6jx.scala:30:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orbital_period_in_seconds\u001b[0m = _.toDouble(p2_orbital_period) * _.toDouble(p2_orbital_period_in_seconds)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m(_$3, _$4) => \n\u001b[31m   |\u001b[0m  _$3.toDouble(p2_orbital_period) * _$4.toDouble(p2_orbital_period_in_seconds).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpnt4lf6jx.scala:30:75 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = _.indexOf(Planet.values(), p1)\n        val p2_idx = _.indexOf(Planet.values(), p2)\n        val result = _.zip(Planet.values(), _.range(p1_idx, p2_idx + 1)).map(e => e._1.toString()).toList\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293585,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpjssporhq.scala:23:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = _.indexOf(Planet.values(), p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.indexOf(Planet.values(), p1).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpjssporhq.scala:24:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = _.indexOf(Planet.values(), p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.indexOf(Planet.values(), p2).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpjssporhq.scala:25:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = _.zip(Planet.values(), _.range(p1_idx, p2_idx + \u001b[31m1\u001b[0m)).map(\u001b[36me\u001b[0m => e._1.toString()).toList\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   _$3 => \n\u001b[31m   |\u001b[0m     _$3.zip(Planet.values(), _$4 => _$4.range(p1_idx, p2_idx + 1)).map(\n\u001b[31m   |\u001b[0m       e => e._1.toString()\n\u001b[31m   |\u001b[0m     ).toList.\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.mutable.ListBuffer[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result.toList()\n        }\n        for (i <- 0 until planets.size - 1) {\n            val planet = planets[i]\n            if (planet == p1 || planet == p2) {\n                continue\n            }\n            if (planet < p1 && planet < p2) {\n                result.append(planet)\n            } else if (planet > p1 && planet > p2) {\n                break\n            } else {\n                result.append(planet)\n            }\n        }\n        return result.toList()\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293583,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3b1n8mb4.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3b1n8mb4.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3b1n8mb4.scala:27:32 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mreturn\u001b[0m result.toList()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): String\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3b1n8mb4.scala:29:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until planets.size - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3b1n8mb4.scala:30:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mplanet\u001b[0m = planets[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3b1n8mb4.scala:30:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mplanet\u001b[0m = planets[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n        for (i <- 1 to planets.size - 1) {\n            var planet = planets[i]\n            var planet_idx = planets.indexOf(planet)\n            if (planet_idx < p1_idx && planet_idx > p2_idx) {\n                result = result.append(planet)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293586,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp5119fia.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp5119fia.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp5119fia.scala:26:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to planets.size - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp5119fia.scala:27:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mplanet\u001b[0m = planets[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp5119fia.scala:27:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mplanet\u001b[0m = planets[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp5119fia.scala:28:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mplanet_idx\u001b[0m = planets.indexOf(planet)\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_index = p1.indexOf(\" \")\n        val p2_index = p2.indexOf(\" \")\n        val p1_name = p1.substring(0, p1_index)\n        val p2_name = p2.substring(0, p2_index)\n        val p1_orbital_period = p1.substring(p1_index + 1)\n        val p2_orbital_period = p2.substring(p2_index + 1)\n        val p1_orbital_period_in_seconds = _.toDouble(p1_orbital_period)\n        val p2_orbital_period_in_seconds = _.toDouble(p2_orbital_period)\n        val p1_orbital_period_in_minutes = p1_orbital_period_in_seconds / 60\n        val p2_orbital_period_in_minutes = p2_orbital_period_in_seconds / 60\n        val p1_orbital_period_in_hours = p1_orbital_period_in_minutes / 60\n        val p2_orbital_period_in_hours = p2_orbital_period_in_minutes / 60\n        val p1_orbital_period_in_days = p1_orbital_period_in_hours / 24\n        val p2_orbital_period_in_days = p2_orbital_period_in_hours / 24\n        val p1_orbital_period_in_years = p1_orbital_period_in_days / 365\n        val p2_orbital_period_in_years = p2_orbital_period_in_days / 365\n        val p1_orbital_period_in_seconds_per_year = p1_orbital_period_in_seconds / p1_orbital_period_in_years\n        val p2_orbital_period_in_seconds_per_year = p2_orbital_period_in_seconds / p2_orbital_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293586,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmprjm0oqf0.scala:29:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_in_seconds\u001b[0m = _.toDouble(p1_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.toDouble(p1_orbital_period).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmprjm0oqf0.scala:30:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orbital_period_in_seconds\u001b[0m = _.toDouble(p2_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toDouble(p2_orbital_period).\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprjm0oqf0.scala:40:83 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orbital_period_in_seconds_per_year\u001b[0m = p2_orbital_period_in_seconds / p2_orbital_\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Not found: p2_orbital_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprjm0oqf0.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new java.util.Vector[8]\n        sun[0] = new java.util.Vector[8]\n        sun[1] = new java.util.Vector[8]\n        sun[2] = new java.util.Vector[8]\n        sun[3] = new java.util.Vector[8]\n        sun[4] = new java.util.Vector[8]\n        sun[5] = new java.util.Vector[8]\n        sun[6] = new java.util.Vector[8]\n        sun[7] = new java.util.Vector[8]\n        sun[0][0] = new java.util.Vector[8]\n        sun[0][1] = new java.util.Vector[8]\n        sun[0][2] = new java.util.Vector[8]\n        sun[0][3] = new java.util.Vector[8]\n        sun[0][4] = new java.util.Vector[8]\n        sun[0][5] = new java.util.Vector[8]\n        sun[0][6] = new java.util.Vector[8]\n        sun[0][7] = new java.util.Vector[8]\n        sun[1][0] = new java.util.Vector[8]\n        sun[1][1] = new java.util.Vector[8]\n        sun[1][2] = new java.util.Vector[8]\n        sun[1][3] = new java.util.Vector[8]\n        sun[1][4] = new java.util.Vector[8]\n        sun[1][5] = new java.util.Vector[8]\n        sun[1][6] = new java.util.Vector[8]\n        sun[1][7] = new java.util.Vector[8]\n        sun[2][0] = new java.util.Vector[8]\n        sun[2][1] = new java.util.Vector[8]\n        sun[2][2] = new java.util.Vector[8]\n        sun[2][3] = new java.util.Vector[8]\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293585,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpr_ek_0yo.scala:23:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        sun[\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpr_ek_0yo.scala:24:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        sun[\u001b[31m1\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpr_ek_0yo.scala:25:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        sun[\u001b[31m2\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpr_ek_0yo.scala:26:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        sun[\u001b[31m3\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpr_ek_0yo.scala:27:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        sun[\u001b[31m4\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpr_ek_0yo.scala:28:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        sun[\u001b[31m5\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpr_ek_0yo.scala:29:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        sun[\u001b[31m6\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpr_ek_0yo.sc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcxc9927z.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_\u001b[0m = planet1\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcxc9927z.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_\u001b[0m = planet2\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet2_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet2_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcxc9927z.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_\u001b[0m = planet1\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcxc9927z.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_\u001b[0m = planet2\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet2_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet2_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcxc9927z.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_\u001b[0m = planet1\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_index = p1.indexOf(\" \")\n        val p2_index = p2.indexOf(\" \")\n        val p1_name = p1.substring(0, p1_index)\n        val p2_name = p2.substring(0, p2_index)\n        val p1_orbital_period = p1.substring(p1_index + 1)\n        val p2_orbital_period = p2.substring(p2_index + 1)\n        val p1_orbital_period_in_seconds = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period)\n        val p2_orbital_period_in_seconds = _.toDouble(p2_orbital_period) * _.toDouble(p2_orbital_period) * _.toDouble(p2_orbital_period) * _.toDouble(p2_orbital_period)\n        val p1_orbital_period_in_seconds_diff = p1_orbital_period_in_seconds - p2_orbital_period_in_seconds\n        val p1_orbital_period_in_seconds_diff_abs = Math.abs(p1_orbital_period_in_seconds_diff)\n        val p1_orbital_period_in_seconds_diff_abs_rounded = _.round(p1_orbital_period_in_seconds_diff_abs)\n        val p1_orbital_period_in_seconds_diff_abs_rounded_rounded = _.round(p1_orbital_period_in_seconds_diff_abs_rounded)\n        val p1_orbital_period_in_seconds_diff_abs_rounded_rounded_rounded = _.round(p1_orbital_period_in_seconds_diff_abs_rounded_rounded)\n        val p1_orbital_period_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293586,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbibstsby.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpbibstsby.scala:29:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_in_seconds\u001b[0m = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m  Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m  (_$1, _$2, _$3, _$4) => \n\u001b[31m   |\u001b[0m    _$1.toDouble(p1_orbital_period) * _$2.toDouble(p1_orbital_period) * \n\u001b[31m   |\u001b[0m      _$3.toDouble(p1_orbital_period)\n\u001b[31m   |\u001b[0m     * _$4.toDouble(p1_orbital_period).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpbibstsby.scala:29:75 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_in_seconds\u001b[0m = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m  Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m  (_$1, _$2, _$3, _$4) => \n\u001b[31m   |\u001b[0m    _$1.toDouble(p1_orbital_period) * _$2.toDouble(p1_orbital_period) * \n\u001b[31m   |\u001b[0m      _$3.toDouble(p1_orbital_period)\n\u001b[31m   |\u001b[0m     * _$4.toDouble(p1_orbital_period).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpbibstsby.scala:29:107 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_in_seconds\u001b[0m = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val orbit_p1 = orbit(p1_idx)\n        val orbit_p2 = orbit(p2_idx)\n        val orbit_between = orbit_p1.until(orbit_p2)\n        val orbit_between_sorted = orbit_between.sorted()\n        val result = orbit_between_sorted.map(p -> planets[p])\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293584,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsms7epti.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsms7epti.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsms7epti.scala:25:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit_p1\u001b[0m = orbit(p1_idx)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsms7epti.scala:26:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit_p2\u001b[0m = orbit(p2_idx)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_index = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n        val p2_index = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n        val p1_orbital_period = scala.math.BigDecimal.valueOf(scala.math.BigDecimal.valueOf(2.4e8).multiply(scala.math.BigDecimal.valueOf(365.25)))\n        val p2_orbital_period = scala.math.BigDecimal.valueOf(scala.math.BigDecimal.valueOf(4.8e8).multiply(scala.math.BigDecimal.valueOf(365.25)))\n        val p1_orbital_period_in_days = p1_orbital_period.div(scala.math.BigDecimal.valueOf(scala.math.BigDecimal.valueOf(86400)))\n        val p2_orbital_period_in_days = p2_orbital_period.div(scala.math.BigDecimal.valueOf(scala.math.BigDecimal.valueOf(86400)))\n        val p1_orbital_period_in_years = p1_orbital_period.div(scala.math.BigDecimal.valueOf(scala.math.BigDecimal.valueOf(365.25)))\n        val p2_orbital_period_in_years = p2_orbital_period.div(scala.math.BigDecimal.valueOf(scala.math.BigDecimal.valueOf(365.25)))\n        val p1_orbital_period_in_years_in_days = p1_orbital_period_in_years.multiply(scala.math.BigDecimal.valueOf(scala.math.BigDecimal.valueOf(86400)))\n        val p2_orbital_period_in_years_in_days = p2_orb\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293591,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpri3m1mcm.scala:23:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_index\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpri3m1mcm.scala:24:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_index\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpri3m1mcm.scala:25:99 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period\u001b[0m = scala.math.BigDecimal.valueOf(scala.math.BigDecimal.valueOf(\u001b[31m2.4e8\u001b[0m).multiply(scala.math.BigDecimal.valueOf(\u001b[31m365.25\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value multiply is not a member of BigDecimal\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpri3m1mcm.scala:26:99 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orbital_period\u001b[0m = scala.math.BigDecimal.valueOf(scala.math.BigDecimal.valueOf(\u001b[31m4.8e8\u001b[0m).multiply(scala.math.BigDecimal.valueOf(\u001b[31m365.25\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value multiply is not a member of BigDecimal\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpri3m1mcm.scala:32:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orbital_period_in_years_in_days\u001b[0m = p2_orb\n\u001b[31m\u001b[31m   |\u001b[0m                                          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val orbit_between = (p1_idx - p2_idx) * (p1_idx - p2_idx)\n        val orbit_between_sqrt = math.sqrt(orbit_between)\n        val orbit_between_cubed = orbit_between_sqrt * orbit_between_sqrt * orbit_between_sqrt\n        val orbit_between_cubed_half = orbit_between_cubed / 2\n        val orbit_between_cubed_half_sqrt = math.sqrt(orbit_between_cubed_half)\n        val orbit_between_cubed_half_sqrt_half = orbit_between_cubed_half_sqrt / 2\n        val orbit_between_cubed_half_sqrt_half_sqrt = math.sqrt(orbit_between_cubed_half_sqrt_half)\n        val orbit_between_cubed_half_sqrt_half_sqrt_half = orbit_between_cubed_half_sqrt_half_sqrt / 2\n        val orbit_between_cubed_half_sqrt_half_sqrt_half_sqrt = math.sqrt(orbit_between_cubed_half_sqrt_half_sqrt_half)\n        val orbit_between_cubed_half_sqrt_half_sqrt_half_sqrt_half = orbit_between_cubed_half_sqrt_half_sqrt_half_sqrt / 2\n        val orbit_between_cubed_half_sqrt_half_sqrt_half_sqrt_half_sqrt = math.sqrt(orbit_between_cubed_half_sqrt_half_sqrt_half_sqrt_half)\n        val orbit_between_cubed_half_sqrt_half_sqrt_half_sqrt_half_sqrt_half = orbit_between_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293589,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbon3rg5t.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbon3rg5t.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbon3rg5t.scala:36:79 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit_between_cubed_half_sqrt_half_sqrt_half_sqrt_half_sqrt_half\u001b[0m = orbit_between_\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: orbit_between_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbon3rg5t.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_idx = p1_orb_idx + 1\n        val p2_orb_idx_idx = p2_orb_idx + 1\n        val p1_orb_idx_idx_idx = p1_orb_idx_idx + 1\n        val p2_orb_idx_idx_idx = p2_orb_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx = p1_orb_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx = p2_orb_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx_id\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpelum70ny.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_index = p1.indexOf(\" \")\n        val p2_index = p2.indexOf(\" \")\n        val p1_name = p1.substring(0, p1_index)\n        val p2_name = p2.substring(0, p2_index)\n        val p1_orbital_period = p1.substring(p1_index + 1)\n        val p2_orbital_period = p2.substring(p2_index + 1)\n        val p1_orbital_period_in_seconds = _.toDouble(p1_orbital_period)\n        val p2_orbital_period_in_seconds = _.toDouble(p2_orbital_period)\n        val p1_orbital_period_in_minutes = p1_orbital_period_in_seconds / 60\n        val p2_orbital_period_in_minutes = p2_orbital_period_in_seconds / 60\n        val p1_orbital_period_in_hours = p1_orbital_period_in_minutes / 60\n        val p2_orbital_period_in_hours = p2_orbital_period_in_minutes / 60\n        val p1_orbital_period_in_days = p1_orbital_period_in_hours / 24\n        val p2_orbital_period_in_days = p2_orbital_period_in_hours / 24\n        val p1_orbital_period_in_years = p1_orbital_period_in_days / 365\n        val p2_orbital_period_in_years = p2_orbital_period_in_days / 365\n        val p1_orbital_period_in_seconds_in_years = p1_orbital_period_in_years * 31556926\n        val p2_orbital_period_in_seconds_in_years = p2_orbital_period_in_years * 31556926\n        val p1_orbital_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293592,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf4_10xw1.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpf4_10xw1.scala:29:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_in_seconds\u001b[0m = _.toDouble(p1_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.toDouble(p1_orbital_period).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpf4_10xw1.scala:30:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orbital_period_in_seconds\u001b[0m = _.toDouble(p2_orbital_period)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toDouble(p2_orbital_period).\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf4_10xw1.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var planet1_orbital_period = scala.math.durations.Seconds(1.0)\n        var planet2_orbital_period = scala.math.durations.Seconds(1.0)\n        var planet1_orbital_period_in_seconds = planet1_orbital_period.toSeconds\n        var planet2_orbital_period_in_seconds = planet2_orbital_period.toSeconds\n        var planet1_orbital_period_in_minutes = planet1_orbital_period_in_seconds / 60\n        var planet2_orbital_period_in_minutes = planet2_orbital_period_in_seconds / 60\n        var planet1_orbital_period_in_hours = planet1_orbital_period_in_minutes / 60\n        var planet2_orbital_period_in_hours = planet2_orbital_period_in_minutes / 60\n        var planet1_orbital_period_in_days = planet1_orbital_period_in_hours / 24\n        var planet2_orbital_period_in_days = planet2_orbital_period_in_hours / 24\n        var planet1_orbital_period_in_years = planet1_orbital_period_in_days / 365\n        var planet2_orbital_period_in_years = planet2_orbital_period_in_days / 365\n        var planet1_orbital_period_in_centuries = planet1_orbital_period_in_years / 100\n        var planet2_orbital_period_in_centuries = planet2_orbital_period_in_years / 100\n        var planet1_orbital_period_in_millennia = planet1_orbital_period_in_centuries / 1000\n        var planet2_orbital_period_in_millennia = planet2_orbital_period_in_centuries / 1000\n        var planet1_orbital_period_in_seconds_to_millennia = planet1_orbital_period_in_millennia / 1000\n        var planet2_orbital_period_in_seconds_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293593,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmd71oqqr.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmd71oqqr.scala:22:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period\u001b[0m = scala.math.durations.Seconds(\u001b[31m1.0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value durations is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmd71oqqr.scala:23:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbital_period\u001b[0m = scala.math.durations.Seconds(\u001b[31m1.0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value durations is not a member of math\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmd71oqqr.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_next = p1_orb_idx + 1\n        val p2_orb_idx_next = p2_orb_idx + 1\n        val p1_orb_idx_prev = p1_orb_idx - 1\n        val p2_orb_idx_prev = p2_orb_idx - 1\n        val p1_orb_idx_next_next = p1_orb_idx_next + 1\n        val p2_orb_idx_next_next = p2_orb_idx_next + 1\n        val p1_orb_idx_prev_prev = p1_orb_idx_prev - 1\n        val p2_orb_idx_prev_prev = p2_orb_idx_prev - 1\n        val p1_orb_idx_next_next_next = p1_orb_idx_next_next + 1\n        val p2_orb_idx_next_next_next = p2_orb_idx_next_next + 1\n        val p1_orb_idx_prev_prev_prev = p1_orb_idx_prev_prev - 1\n        val p2_orb_idx_prev_prev_prev = p2_orb_idx_prev_prev - 1\n        val p1_orb_idx_next_next_next_next = p1_orb_idx_next_next_next + 1\n        val p2_orb_idx_next_next_next_next = p2_orb_idx_next_next_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293574,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp76yvl_9e.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp76yvl_9e.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp76yvl_9e.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp76yvl_9e.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp76yvl_9e.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp76yvl_9e.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var planet1_orbital_period = scala.math.durations.Duration(\n            scala.math.durations.Years(1),\n            scala.math.durations.Days(365),\n            scala.math.durations.Hours(24),\n            scala.math.durations.Minutes(60),\n            scala.math.durations.Seconds(60),\n            scala.math.durations.Milliseconds(1000),\n            scala.math.durations.Microseconds(1000),\n            scala.math.durations.Nanoseconds(1000),\n            scala.math.durations.Picoseconds(1000),\n            scala.math.durations.Femtoseconds(1000),\n            scala.math.durations.Attoseconds(1000),\n            scala.math.durations.Zeptoseconds(1000),\n            scala.math.durations.Yoctoseconds(1000),\n            scala.math.durations.Exaseconds(1000),\n            scala.math.durations.PetaSeconds(1000),\n            scala.math.durations.Teraseconds(1000),\n            scala.math.durations.Gigaseconds(1000),\n            scala.math.durations.Megaseconds(1000),\n            scala.math.durations.Megaseconds(1000),\n            scala.math.durations.Megaseconds(1000),\n            scala.math.durations.Megaseconds(1000),\n            scala.math.durations.Megaseconds(1000),\n            scala.math.durations.Megaseconds(1000),\n            scala.math.durations.Megaseconds(1000),\n            scala.math.durations.Megaseconds(1000),\n            scala.math.durations.Megaseconds(1000),\n            scala.math.durations.Megaseconds(1000),\n            scala.math.durations.Megaseconds(1000),\n            scala.math.durations.Megaseconds(1000\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293594,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9mawl31c.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9mawl31c.scala:22:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period\u001b[0m = scala.math.durations.Duration(\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value durations is not a member of math\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mawl31c.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n        var i = p1_idx\n        var j = p2_idx\n        while (i < j) {\n            var k = (i + j) / 2\n            if (planets[k].compareTo(p1) < 0) {\n                j = k\n            } else {\n                i = k + 1\n            }\n        }\n        while (i <= j) {\n            result = append(result, planets[i])\n            i = i + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293590,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdijqny2u.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdijqny2u.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdijqny2u.scala:30:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mif\u001b[0m (planets[\u001b[35mk\u001b[0m].compareTo(p1) < \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: type k\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdijqny2u.scala:30:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mif\u001b[0m (planets[\u001b[35mk\u001b[0m].compareTo(p1) < \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdijqny2u.scala:37:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            result = append(result, planets[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdijqny2u.scala:37:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            result = append(result, planets[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val result = List[String]()\n        for (i <- 0 until p1_orb) {\n            for (j <- 0 until p2_orb) {\n                if (p1_orb[i] < p2_orb[j]) {\n                    result = append(result, planets[i + j])\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293591,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp5hxryia.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp5hxryia.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp5hxryia.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp5hxryia.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp5hxryia.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp5hxryia.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new Sun()\n        var sunPos = sun.pos(planet1)\n        var planetPos = sun.pos(planet2)\n        var sunOrbit = sun.orbit(planet1)\n        var planetOrbit = sun.orbit(planet2)\n        var sunDistance = sunPos.distance(planetPos)\n        var planetDistance = sunPos.distance(planetPos)\n        var sunOrbitDistance = sunOrbit.distance(planetPos)\n        var planetOrbitDistance = planetOrbit.distance(planetPos)\n        var sunOrbitAngle = sunPos.angle(planetPos)\n        var planetOrbitAngle = sunPos.angle(planetPos)\n        var sunOrbitAngleDiff = sunOrbitAngle - sunDistance\n        var planetOrbitAngleDiff = planetOrbitAngle - planetDistance\n        var sunOrbitAngleDiffAbs = sunOrbitAngleDiff.abs()\n        var planetOrbitAngleDiffAbs = planetOrbitAngleDiff.abs()\n        var sunOrbitAngleDiffAbsMin = sunOrbitAngleDiffAbs.min()\n        var planetOrbitAngleDiffAbsMin = planetOrbitAngleDiffAbs.min()\n        var sunOrbitAngleDiffAbsMax = sunOrbitAngleDiffAbs.max()\n        var planetOrbitAngleDiffAbsMax = planetOrbitAngleDiffAbs.max()\n        var sunOrbitAngleDiffAbsMinMax = sunOrbitAngleDiffAbs.minMax()\n        var planetOrbitAngleDiffAbsMinMax = planetOrbitAngleDiffAbs.minMax()\n        var sunOrbitAngleDiffAbsMinMaxDiff = sunOrbitAngleDiffAbs.minMaxDiff()\n        var planetOrbitAngleDiffAbsMinMaxDiff = planetOrbitAngleDiffAbs.minMaxDiff()\n        var sunOrbitAngleDiffAbsMinMaxDiffAbs = sunOrbitAngleDiffAbs.minMaxDiffAbs()\n        var planetOrbitAngleDiffAbsMinMaxDiffAbs = planetOrbitAngleDiffAbs.minMaxDiffAbs()\n        var sunOrbitAngleDiffAbsMinMaxDiffAbsDiff = sunOrbitAngleDiffAbs.min\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293594,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp59qrp1nb.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msun\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mSun\u001b[0m()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: type Sun\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp59qrp1nb.scala:48:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name = planet1\n        var planet2_name = planet2\n        var planet1_orbit_name = planet1_name + \"_orbit\"\n        var planet2_orbit_name = planet2_name + \"_orbit\"\n        var planet1_orbit = scala.collection.immutable.Map.empty()\n        var planet2_orbit = scala.collection.immutable.Map.empty()\n        var planet1_orbit_name_index = 0\n        var planet2_orbit_name_index = 0\n        var planet1_orbit_name_index_index = 0\n        var planet2_orbit_name_index_index = 0\n        var planet1_orbit_name_index_value = 0\n        var planet2_orbit_name_index_value = 0\n        var planet1_orbit_name_index_value_index = 0\n        var planet2_orbit_name_index_value_index = 0\n        var planet1_orbit_name_index_value_value = 0\n        var planet2_orbit_name_index_value_value = 0\n        var planet1_orbit_name_index_value_value_index = 0\n        var planet2_orbit_name_index_value_value_index = 0\n        var planet1_orbit_name_index_value_value_value = 0\n        var planet2_orbit_name_index_value_value_value = 0\n        var planet1_orbit_name_index_value_value_value_index = 0\n        var planet2_orbit_name_index_value_value_value_index = 0\n        var planet1_orbit_name_index_value_value_value_value = 0\n        var planet2_orbit_name_index_value_value_value_value = 0\n        var planet1_orbit_name_index_value_value_value_value_index = 0\n        var planet2_orbit_name_index_value_value_value_value_index = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293595,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp3i93t_ln.scala:50:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3i93t_ln.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbit\u001b[0m = scala.collection.immutable.Map.empty()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_orbit is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_orbit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3i93t_ln.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbit\u001b[0m = scala.collection.immutable.Map.empty()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet2_orbit is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet2_orbit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3i93t_ln.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val result = scala.collection.JavaConversions.seqAsJavaList(\n            scala.collection.JavaConversions.asScalaBuffer(\n                scala.collection.mutable.Buffer.range(p1_orb, p2_orb)\n            ).toList()\n        )\n        result.sort(Comparator.comparing(String::toLowerCase))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293594,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkq5sl4b2.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkq5sl4b2.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkq5sl4b2.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkq5sl4b2.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkq5sl4b2.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkq5sl4b2.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planet1_orbital_period = scala.math.durations.Seconds(1.0 / scala.math.durations.Hours(2.4).toSeconds())\n        var planet2_orbital_period = scala.math.durations.Seconds(1.0 / scala.math.durations.Hours(0.7).toSeconds())\n        var planet1_orbital_period_in_seconds = planet1_orbital_period.toSeconds()\n        var planet2_orbital_period_in_seconds = planet2_orbital_period.toSeconds()\n        var planet1_orbital_period_in_minutes = planet1_orbital_period_in_seconds / 60\n        var planet2_orbital_period_in_minutes = planet2_orbital_period_in_seconds / 60\n        var planet1_orbital_period_in_hours = planet1_orbital_period_in_minutes / 60\n        var planet2_orbital_period_in_hours = planet2_orbital_period_in_minutes / 60\n        var planet1_orbital_period_in_days = planet1_orbital_period_in_hours / 24\n        var planet2_orbital_period_in_days = planet2_orbital_period_in_hours / 24\n        var planet1_orbital_period_in_years = planet1_orbital_period_in_days / 365\n        var planet2_orbital_period_in_years = planet2_orbital_period_in_days / 365\n        var planet1_orbital_period_in_centuries = planet1_orbital_period_in_years / 100\n        var planet2_orbital_period_in_centuries = planet2_orbital_period_in_years / 100\n        var planet1_orbital_period_in_millennia = planet1_orbital_period_in_centuries / 1000\n        var planet2_orbital_period_in_millennia = planet2_orbital_period_in_centuries / 1000\n        var planet1_orbital_period_in_seconds = planet1_orbital_period_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293595,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_1bkqm5z.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period_in_seconds\u001b[0m = planet1_orbital_period_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_orbital_period_in_seconds is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_orbital_period_in_seconds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_1bkqm5z.scala:21:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period\u001b[0m = scala.math.durations.Seconds(\u001b[31m1.0\u001b[0m / scala.math.durations.Hours(\u001b[31m2.4\u001b[0m).toSeconds())\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value durations is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_1bkqm5z.scala:22:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbital_period\u001b[0m = scala.math.durations.Seconds(\u001b[31m1.0\u001b[0m / scala.math.durations.Hours(\u001b[31m0.7\u001b[0m).toSeconds())\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value durations is not a member of math\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_1bkqm5z.scala:38:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n        var p1_orb = orbits[p1_idx]\n        var p2_orb = orbits[p2_idx]\n        var p1_orb_idx = p1_orb.indexOf(p1)\n        var p2_orb_idx = p2_orb.indexOf(p2)\n        var p1_orb_idx_next = p1_orb_idx + 1\n        var p2_orb_idx_next = p2_orb_idx + 1\n        var p1_orb_idx_prev = p1_orb_idx - 1\n        var p2_orb_idx_prev = p2_orb_idx - 1\n        var p1_orb_idx_next_next = p1_orb_idx_next + 1\n        var p2_orb_idx_next_next = p2_orb_idx_next + 1\n        var p1_orb_idx_prev_prev = p1_orb_idx_prev - 1\n        var p2_orb_idx_prev_prev = p2_orb_idx_prev - 1\n        var p1_orb_idx_next_next_next = p1_orb_idx_next_next + 1\n        var p2_orb_idx_next_next_next = p2_orb_idx_next_next + 1\n        var p1_orb_idx_prev_prev_prev = p1_orb_idx_prev_prev - 1\n        var p2_orb_idx_prev_prev_prev = p2_orb_idx_prev_prev - 1\n        var p1_orb_idx_next_next_next_next = p1_orb_idx_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293557,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:29:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:30:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = scala.math.BigDecimal.valueOf(0)\n        var sunOrbit = scala.math.BigDecimal.valueOf(0)\n        var planet1Orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2Orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1Distance = scala.math.BigDecimal.valueOf(0)\n        var planet2Distance = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSun = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSun = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunSquared = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSunSquared = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunCubed = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSunCubed = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunQuart = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSunQuart = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunQuint = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSunQuint = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunSext = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSunSext = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunSept = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSunSept = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunOct = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSunOct\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293594,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpasr5tvw9.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpasr5tvw9.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0.38709927)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0.72333566)\n        var planet1_name = planet1.toUpperCase()\n        var planet2_name = planet2.toUpperCase()\n        var planet1_index = planet1_name.indexOf(\" \")\n        var planet2_index = planet2_name.indexOf(\" \")\n        var planet1_name_without_space = planet1_name.substring(0, planet1_index)\n        var planet2_name_without_space = planet2_name.substring(0, planet2_index)\n        var planet1_name_without_space_upper = planet1_name_without_space.toUpperCase()\n        var planet2_name_without_space_upper = planet2_name_without_space.toUpperCase()\n        var planet1_orbit_index = planet1_name_without_space_upper.indexOf(\" \")\n        var planet2_orbit_index = planet2_name_without_space_upper.indexOf(\" \")\n        var planet1_orbit_without_space = planet1_name_without_space.substring(0, planet1_orbit_index)\n        var planet2_orbit_without_space = planet2_name_without_space.substring(0, planet2_orbit_index)\n        var planet1_orbit = scala.math.BigDecimal.valueOf(Double.parseDouble(planet1_orbit_without_space))\n        var planet2_orbit = scala.math.BigDecimal.valueOf(Double.parseDouble(planet2_orbit_without_space))\n        var planet1_name_without_space_upper_index = planet1_name_without_space_upper.indexOf(\" \")\n        var planet2_name_without_space_upper_index = planet2_name_without_space_upper.indexOf(\" \")\n        var planet1_name_without_space_upper_without_space = planet1_name_without_space_upper.substring\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293594,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp7qszimbe.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbit\u001b[0m = scala.math.BigDecimal.valueOf(Double.parseDouble(planet1_orbit_without_space))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_orbit is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_orbit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp7qszimbe.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbit\u001b[0m = scala.math.BigDecimal.valueOf(Double.parseDouble(planet2_orbit_without_space))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet2_orbit is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet2_orbit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmp7qszimbe.scala:39:94 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_name_without_space_upper_without_space\u001b[0m = planet1_name_without_space_upper.substring\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35msubstring\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Int, x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Int): String\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7qszimbe.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = List[String]()\n        for (i <- 0 until planets.size - 1) {\n            val planet = planets[i]\n            val planet_idx = planets.indexOf(planet)\n            if (planet_idx < p1_idx && planet_idx > p2_idx) {\n                result = append(result, planet)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293592,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu6_kwgre.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu6_kwgre.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu6_kwgre.scala:26:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until planets.size - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu6_kwgre.scala:27:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mplanet\u001b[0m = planets[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu6_kwgre.scala:27:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mplanet\u001b[0m = planets[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu6_kwgre.scala:28:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mplanet_idx\u001b[0m = planets.indexOf(p",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val result = List[String]()\n        for (i <- 1 until p1_orb) {\n            for (j <- 1 until p2_orb) {\n                if (p1_orb[i] < p2_orb[j]) {\n                    result = append(result, planets[p1_idx + i])\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293593,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp17de9uxf.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp17de9uxf.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp17de9uxf.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp17de9uxf.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp17de9uxf.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp17de9uxf.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        if (p1_orb > p2_orb) {\n            return result\n        }\n        val p1_orb_idx = orbits.indexOf(p1_orb)\n        val p2_orb_idx = orbits.indexOf(p2_orb)\n        val p1_orb_idx_idx = p1_orb_idx - 1\n        val p2_orb_idx_idx = p2_orb_idx - 1\n        val p1_orb_idx_idx_idx = p1_orb_idx_idx - 1\n        val p2_orb_idx_idx_idx = p2_orb_idx_idx - 1\n        val p1_orb_idx_idx_idx_idx = p1_orb_idx_idx_idx - 1\n        val p2_orb_idx_idx_idx_idx = p2_orb_idx_idx_idx - 1\n        val p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx - 1\n        val p2_orb_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx - 1\n        val p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx - 1\n        val p2_orb_idx_idx_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293596,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_g255tuv.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_g255tuv.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_g255tuv.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_g255tuv.scala:29:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_g255tuv.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_g255tuv.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val result = List[String]()\n        for (i <- p1_orb_idx + 1) {\n            for (j <- p2_orb_idx + 1) {\n                if (p1_orb[i] == p2_orb[j]) {\n                    result = result.append(p1_orb[i])\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293592,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo_2l8of.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo_2l8of.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo_2l8of.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo_2l8of.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo_2l8of.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo_2l8of.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = List.empty[String]\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        if (p1_orb < p2_orb) {\n            return result\n        }\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_idx = p1_orb_idx + 1\n        val p2_orb_idx_idx = p2_orb_idx + 1\n        val p1_orb_idx_idx_idx = p1_orb_idx_idx + 1\n        val p2_orb_idx_idx_idx = p2_orb_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx = p1_orb_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx = p2_orb_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293596,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1xfnnzo1.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1xfnnzo1.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1xfnnzo1.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1xfnnzo1.scala:29:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1xfnnzo1.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1xfnnzo1.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val orbit_distance = scala.math.abs(p1_idx - p2_idx)\n        val orbit_distance_int = orbit_distance.toInt\n        val orbit_distance_float = orbit_distance.toFloat\n        val orbit_distance_double = orbit_distance.toDouble\n        val orbit_distance_big_int = orbit_distance.toBigInt\n        val orbit_distance_big_float = orbit_distance.toBigFloat\n        val orbit_distance_big_double = orbit_distance.toBigDouble\n        val orbit_distance_big_big_int = orbit_distance.toBigBigInt\n        val orbit_distance_big_big_float = orbit_distance.toBigBigFloat\n        val orbit_distance_big_big_double = orbit_distance.toBigBigDouble\n        val orbit_distance_big_big_big_int = orbit_distance.toBigBigBigInt\n        val orbit_distance_big_big_big_float = orbit_distance.toBigBigBigFloat\n        val orbit_distance_big_big_big_double = orbit_distance.toBigBigBigDouble\n        val orbit_distance_big_big_big_big_int = orbit_distance.toBigBigBigBigInt\n        val orbit_distance_big_big_big_big_float = orbit_distance.toBigBigBigBigFloat\n        val orbit_distance_big_big_big_big_double = orbit_distance.toBigBigBigBigDouble\n        val orbit_distance_big_big_big_big_big_int = orbit_distance.toBigBigBigBigBigInt\n        val orbit_distance_big_big_big_big_big_float = orbit_distance.toBigBigBigBigBigFloat\n        val orbit_distance_big_big_big_big_big_double = orbit_distance.toBigBigBigBigBigDouble\n        val orbit_distance_big_big_big_big_big_big_int\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293596,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp382xiwyt.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp382xiwyt.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp382xiwyt.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp382xiwyt.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name = planet1\n        var planet2_name = planet2\n        var planet1_name_index = 0\n        var planet2_name_index = 0\n        var planet1_orbit_index = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_index = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_index = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_index = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_index = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_index = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_index = 0\n        var planet2_orbit_index =\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293596,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpa5g4iru8.scala:53:33 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbit_index\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa5g4iru8.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbit\u001b[0m = scala.math.BigDecimal.valueOf(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_orbit is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_orbit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa5g4iru8.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbit\u001b[0m = scala.math.BigDecimal.valueOf(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet2_orbit is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet2_orbit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa5g4iru8.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbit_index\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_orbit_index is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_orbit_index\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa5g4iru8.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbit_index\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = mutable.List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        for (i <- p1_orb.until(p2_orb)) {\n            result.append(planets[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293593,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3f5p5pz2.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3f5p5pz2.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3f5p5pz2.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3f5p5pz2.scala:29:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3f5p5pz2.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3f5p5pz2.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_idx = p1_orb_idx + 1\n        val p2_orb_idx_idx = p2_orb_idx + 1\n        val p1_orb_idx_idx_idx = p1_orb_idx_idx + 1\n        val p2_orb_idx_idx_idx = p2_orb_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx = p1_orb_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx = p2_orb_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx_id\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpelum70ny.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val orbit1 = orbits[p1_idx]\n        val orbit2 = orbits[p2_idx]\n        val orbit_intersection = orbit1.intersection(orbit2)\n        val result = []\n        for (i <- orbit_intersection) {\n            result.append(planets[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293593,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkn29l4z1.scala:28:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = []\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      an identifier expected, but ']' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkn29l4z1.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- orbit_intersection) {\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m'=>' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkn29l4z1.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkn29l4z1.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkn29l4z1.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit1\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkn29l4z1.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit1\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkn29l4z1.sc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_index = _.indexOf(Planet, p1)\n        var p2_index = _.indexOf(Planet, p2)\n        var result = []\n        for (i <- 0 until _.size(Planet)) {\n            var planet = Planet[i]\n            var planet_index = _.indexOf(Planet, planet)\n            if (planet_index < p1_index && p1_index < p2_index) {\n                result = append(result, planet)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293594,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxyr52izb.scala:25:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = []\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      an identifier expected, but ']' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxyr52izb.scala:26:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until _.size(Planet)) {\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m'=>' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpxyr52izb.scala:23:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_index\u001b[0m = _.indexOf(Planet, p1)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.indexOf(Planet, p1).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpxyr52izb.scala:24:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_index\u001b[0m = _.indexOf(Planet, p2)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.indexOf(Planet, p2).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpxyr52izb.scala:26:26 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until _.size(Planet)) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   _$3 => 0 until _$3.size(Planet).\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = scala.collection.JavaConversions.seqAsJavaList(\n            scala.collection.JavaConversions.asScalaBuffer(\n                scala.collection.mutable.ListBuffer.empty()\n            ).toList()\n        )\n        var planet1_index = planets.indexOf(planet1)\n        var planet2_index = planets.indexOf(planet2)\n        var result = scala.collection.JavaConversions.seqAsJavaList(\n            scala.collection.JavaConversions.asScalaBuffer(\n                scala.collection.mutable.ListBuffer.empty()\n            ).toList()\n        )\n        if (planet1_index < 0 || planet2_index < 0) {\n            return result\n        }\n        var planet1_orbit = scala.math.BigDecimal.valueOf(\n            scala.collection.JavaConversions.asScalaBuffer(\n                scala.collection.mutable.ListBuffer.empty()\n            ).toList()\n        )\n        var planet2_orbit = scala.math.BigDecimal.valueOf(\n            scala.collection.JavaConversions.asScalaBuffer(\n                scala.collection.mutable.ListBuffer.empty()\n            ).toList()\n        )\n        var planet1_orbit_index = planets.indexOf(planet1)\n        var planet2_orbit_index = planets.indexOf(planet2)\n        if (planet1_orbit_index > planet2_orbit_index) {\n            return result\n        }\n        for (var i = planet1_orbit_index; i <= planet2_orbit_index; i++) {\n            planets = planets.append(planets.get(i))\n        }\n        return planets\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293603,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpb7gayluh.scala:51:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = planet1_orbit_index; i <= planet2_orbit_index; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb7gayluh.scala:51:66 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = planet1_orbit_index; i <= planet2_orbit_index; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpb7gayluh.scala:51:71 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = planet1_orbit_index; i <= planet2_orbit_index; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb7gayluh.scala:21:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanets\u001b[0m = scala.collection.JavaConversions.seqAsJavaList(\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb7gayluh.scala:28:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = scala.collection.JavaConversions.seqAsJavaList(\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb7gayluh.scala:37:29 ------------------------\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new java.util.Date()\n        var sun_distance = sun.getTime()\n        var sun_distance_in_seconds = sun_distance / 1000\n        var sun_distance_in_minutes = sun_distance_in_seconds / 60\n        var sun_distance_in_hours = sun_distance_in_minutes / 60\n        var sun_distance_in_days = sun_distance_in_hours / 24\n        var sun_distance_in_years = sun_distance_in_days / 365\n        var sun_distance_in_centuries = sun_distance_in_years / 100\n        var sun_distance_in_millenniums = sun_distance_in_centuries / 10\n        var sun_distance_in_millennium = sun_distance_in_millenniums / 10\n        var sun_distance_in_millennium_decimal = sun_distance_in_millennium / 10\n        var sun_distance_in_millennium_decimal_string = sun_distance_in_millennium_decimal.toString()\n        var sun_distance_in_millennium_decimal_string_length = sun_distance_in_millennium_decimal.toString().length\n        var sun_distance_in_millennium_decimal_string_length_minus_one = sun_distance_in_millennium_decimal.toString().length - 1\n        var sun_distance_in_millennium_decimal_string_length_minus_two = sun_distance_in_millennium_decimal.toString().length - 2\n        var sun_distance_in_millennium_decimal_string_length_minus_three = sun_distance_in_millennium_decimal.toString().length - 3\n        var sun_distance_in_millennium_decimal_string_length_minus_four = sun_distance_in_millennium_decimal.toString().length - 4\n        var sun_distance_in_millennium_decimal_string_length_minus_five = sun_distance_in_millennium_decimal.toString().length\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293601,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsvyhudmo.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val orbit_interval = scala.math.min(p1_idx, p2_idx)\n        val orbit_diff = scala.math.max(p1_idx, p2_idx) - orbit_interval\n        val orbit_diff_abs = scala.math.abs(orbit_diff)\n        val orbit_diff_sign = orbit_diff / orbit_diff_abs\n        val orbit_diff_abs_sign = orbit_diff_abs / orbit_diff_abs\n        val orbit_diff_sign_abs = orbit_diff_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign = orbit_diff_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs = orbit_diff_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs_sign = orbit_diff_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs_sign_abs = orbit_diff_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs_sign_abs_sign = orbit_diff_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs_sign_abs_sign_abs = orbit_diff_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293603,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpvu_zqdb0.scala:37:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvu_zqdb0.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvu_zqdb0.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvu_zqdb0.scala:38:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n        if (p1_idx == -1 || p2_idx == -1) {\n            return result\n        }\n        var p1_orb = orbits[p1_idx]\n        var p2_orb = orbits[p2_idx]\n        var p1_orb_idx = p1_orb.indexOf(p1)\n        var p2_orb_idx = p2_orb.indexOf(p2)\n        var p1_orb_next = p1_orb_idx + 1\n        var p2_orb_next = p2_orb_idx + 1\n        var p1_orb_prev = p1_orb_idx - 1\n        var p2_orb_prev = p2_orb_idx - 1\n        var p1_orb_next_idx = p1_orb_next < p1_orb.length ? p1_orb_next : -1\n        var p2_orb_next_idx = p2_orb_next < p2_orb.length ? p2_orb_next : -1\n        var p1_orb_prev_idx = p1_orb_prev > 0 ? p1_orb_prev : -1\n        var p2_orb_prev_idx = p2_orb_prev > 0 ? p2_orb_prev : -1\n        var p1_orb_next_idx_next = p1_orb_next_idx < p1_orb.length ? p1_orb_next_idx + 1 : -1\n        var p2_orb_next_idx_next = p2_orb_next_idx < p2_orb.length ? p2_orb_next_idx + 1 : -1\n        var p1_orb_prev_idx_prev = p1_orb_prev_idx > 0 ? p1_orb_prev_id\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293602,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpscsbi66z.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpscsbi66z.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpscsbi66z.scala:29:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpscsbi66z.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpscsbi66z.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpscsbi66z.scala:30:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n        var p1_orb = orbits[p1_idx]\n        var p2_orb = orbits[p2_idx]\n        var res = List[String]()\n        for (var i = p1_idx; i < p2_idx; i++) {\n            var planet = planets[i]\n            if (p1_orb.contains(planet) && p2_orb.contains(planet)) {\n                res = res.append(planet)\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293605,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpwzct694k.scala:28:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = p1_idx; i < p2_idx; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwzct694k.scala:28:39 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = p1_idx; i < p2_idx; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpwzct694k.scala:28:44 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = p1_idx; i < p2_idx; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwzct694k.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwzct694k.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwzct694k.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n        var i = p1_idx\n        var j = p2_idx\n        while (i < j) {\n            if (p1_idx < p2_idx) {\n                result = result.append(planets[i])\n                i = i + 1\n            } else {\n                result = result.append(planets[j])\n                j = j - 1\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293604,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvwpfse0b.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvwpfse0b.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvwpfse0b.scala:30:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                result = result.append(planets[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvwpfse0b.scala:30:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                result = result.append(planets[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvwpfse0b.scala:30:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                result = result.append(planets[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvwpfse0b.scala:33:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                result = result.append(planets[\u001b[35mj\u001b[0m])\n\u001b[31m\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new java.util.Vector[1]\n        sun[0] = new java.util.Vector[1]\n        sun[0][0] = new java.util.Vector[1]\n        sun[0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0] = new java\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293582,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzyrwrjo3.scala:23:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        sun[\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzyrwrjo3.scala:24:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        sun[\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzyrwrjo3.scala:25:21 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        sun[\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzyrwrjo3.scala:26:24 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        sun[\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzyrwrjo3.scala:27:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        sun[\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzyrwrjo3.scala:28:30 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        sun[\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m][\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzyrwrjo3.scala:29:33 -------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = _.indexOf(Planet, p1)\n        var p2_idx = _.indexOf(Planet, p2)\n        var result = List[String]()\n        for (var i = p1_idx; i < p2_idx; i++) {\n            result = append(result, Planet[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293606,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp_kbwqdh8.scala:26:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = p1_idx; i < p2_idx; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_kbwqdh8.scala:26:39 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = p1_idx; i < p2_idx; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp_kbwqdh8.scala:26:44 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = p1_idx; i < p2_idx; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp_kbwqdh8.scala:23:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = _.indexOf(Planet, p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.indexOf(Planet, p1).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp_kbwqdh8.scala:24:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = _.indexOf(Planet, p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.indexOf(Planet, p2).\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_kbwqdh8.scala:26:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = p1_idx; i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var planet1_orbital_period = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpw3b41q_f.scala:23:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E119] Type Error: /tmp/tmpw3b41q_f.scala:22:958 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period\u001b[0m = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math\n\u001b[31m\u001b[31m   |\u001b[0m
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planet1_orbital_period = scala.math.durations.Seconds(1.0 / scala.math.durations.NanoSeconds(1.0).toSeconds())\n        var planet2_orbital_period = scala.math.durations.Seconds(1.0 / scala.math.durations.NanoSeconds(1.0).toSeconds())\n        var planet1_orbital_period_in_seconds = planet1_orbital_period.toSeconds()\n        var planet2_orbital_period_in_seconds = planet2_orbital_period.toSeconds()\n        var planet1_orbital_period_in_minutes = planet1_orbital_period_in_seconds / 60.0\n        var planet2_orbital_period_in_minutes = planet2_orbital_period_in_seconds / 60.0\n        var planet1_orbital_period_in_hours = planet1_orbital_period_in_minutes / 60.0\n        var planet2_orbital_period_in_hours = planet2_orbital_period_in_minutes / 60.0\n        var planet1_orbital_period_in_days = planet1_orbital_period_in_hours / 24.0\n        var planet2_orbital_period_in_days = planet2_orbital_period_in_hours / 24.0\n        var planet1_orbital_period_in_years = planet1_orbital_period_in_days / 365.0\n        var planet2_orbital_period_in_years = planet2_orbital_period_in_days / 365.0\n        var planet1_orbital_period_in_centuries = planet1_orbital_period_in_years / 100.0\n        var planet2_orbital_period_in_centuries = planet2_orbital_period_in_years / 100.0\n        var planet1_orbital_period_in_millennia = planet1_orbital_period_in_centuries / 1000.0\n        var planet2_orbital_period_in_millennia = planet2_orbital_period_in\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293605,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpies_aqml.scala:21:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period\u001b[0m = scala.math.durations.Seconds(\u001b[31m1.0\u001b[0m / scala.math.durations.NanoSeconds(\u001b[31m1.0\u001b[0m).toSeconds())\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value durations is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpies_aqml.scala:22:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbital_period\u001b[0m = scala.math.durations.Seconds(\u001b[31m1.0\u001b[0m / scala.math.durations.NanoSeconds(\u001b[31m1.0\u001b[0m).toSeconds())\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value durations is not a member of math\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpies_aqml.scala:36:50 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbital_period_in_millennia\u001b[0m = planet2_orbital_period_in\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: planet2_orbital_period_in\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpies_aqml.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new java.util.Vector[8]()\n        sun[0] = new java.util.Vector[8]()\n        sun[1] = new java.util.Vector[8]()\n        sun[2] = new java.util.Vector[8]()\n        sun[3] = new java.util.Vector[8]()\n        sun[4] = new java.util.Vector[8]()\n        sun[5] = new java.util.Vector[8]()\n        sun[6] = new java.util.Vector[8]()\n        sun[7] = new java.util.Vector[8]()\n        sun[0][0] = new java.util.Vector[8]()\n        sun[0][1] = new java.util.Vector[8]()\n        sun[0][2] = new java.util.Vector[8]()\n        sun[0][3] = new java.util.Vector[8]()\n        sun[0][4] = new java.util.Vector[8]()\n        sun[0][5] = new java.util.Vector[8]()\n        sun[0][6] = new java.util.Vector[8]()\n        sun[0][7] = new java.util.Vector[8]()\n        sun[1][0] = new java.util.Vector[8]()\n        sun[1][1] = new java.util.Vector[8]()\n        sun[1][2] = new java.util.Vector[8]()\n        sun[1][3] = new java.util.Vector[8]()\n        sun[1][4] = new java.util.Vector[8]()\n        sun[1][5] = new java.util.Vector[8]()\n        sun[1][6] = new java.util.Vector[8]()\n        sun[1][7] = new java.util.Vector[8]()\n        sun[2][0] = new java.util.Vector[8]()\n        sun[2][1] = new java.util.Vector[8]()\n        sun[2][2] = new\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293601,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp9pgilv4n.scala:23:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        sun[\u001b[31m0\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9pgilv4n.scala:24:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        sun[\u001b[31m1\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9pgilv4n.scala:25:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        sun[\u001b[31m2\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9pgilv4n.scala:26:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        sun[\u001b[31m3\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9pgilv4n.scala:27:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        sun[\u001b[31m4\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9pgilv4n.scala:28:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        sun[\u001b[31m5\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9pgilv4n.scala:29:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        sun[\u001b[31m6\u001b[0m] = \u001b[33mnew\u001b[0m java.util.Vector[\u001b[31m8\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = scala.collection.JavaConversions.asJavaList(\n            scala.collection.JavaConversions.asScalaBuffer(\n                scala.collection.mutable.Buffer.empty()\n            ).toList()\n        )\n        val planet1_idx = planets.indexOf(planet1)\n        val planet2_idx = planets.indexOf(planet2)\n        if (planet1_idx < 0 || planet2_idx < 0) {\n            return scala.collection.JavaConversions.asJavaList(\n                scala.collection.JavaConversions.asScalaBuffer(\n                    scala.collection.mutable.Buffer.empty()\n                ).toList()\n            )\n        }\n        val planet1_orbital_period = scala.math.durations.Seconds(\n            scala.math.durations.Seconds(\n                scala.math.durations.Seconds(\n                    scala.math.durations.Seconds(\n                        scala.math.durations.Seconds(\n                            scala.math.durations.Seconds(\n                                scala.math.durations.Seconds(\n                                    scala.math.durations.Seconds(\n                                        scala.math.durations.Seconds(\n                                            scala.math.durations.Seconds(\n                                                scala.math.durations.Seconds(\n                                                    scala.math.durations.Seconds(\n                                                        scala.math.durations.Seconds(\n                                                            scala.math.durations.Seconds(\n                                                                scala.math.durations.Seconds(\n                                                                    scala.math.durations.Seconds(\n                                                                        scala.math.durations.Seconds(\n                                                                            scala.math.durations.Seconds(\n                                                                                scala.math.durations.Seconds(\n                                                                                    scala.math.durations.Seconds(\n                                                                                        scala.math.durations.Seconds(\n                                                                                            sc\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293606,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfikx9nfo.scala:57:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfikx9nfo.scala:21:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanets\u001b[0m = scala.collection.JavaConversions.asJavaList(\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfikx9nfo.scala:29:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mreturn\u001b[0m scala.collection.JavaConversions.asJavaList(\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfikx9nfo.scala:35:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanet1_orbital_period\u001b[0m = scala.math.durations.Seconds(\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value durations is not a member of math\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfikx9nfo.scala:57:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = scala.collection.JavaConversions.seqAsJavaList(\n            scala.collection.JavaConversions.asScalaBuffer(\n                scala.collection.mutable.ListBuffer.new()\n            ).toList()\n        )\n        var planet1_idx = planets.indexOf(planet1)\n        var planet2_idx = planets.indexOf(planet2)\n        if (planet1_idx == -1 || planet2_idx == -1) {\n            return scala.collection.JavaConversions.asScalaBuffer(\n                scala.collection.mutable.ListBuffer.empty()\n            ).toList()\n        }\n        var planet1_orbital_period = scala.math.BigDecimal.valueOf(\n            scala.collection.JavaConversions.asScalaBuffer(\n                scala.collection.mutable.ListBuffer.new()\n            ).toList().get(planet1_idx).orbital_period()\n        )\n        var planet2_orbital_period = scala.math.BigDecimal.valueOf(\n            scala.collection.JavaConversions.asScalaBuffer(\n                scala.collection.mutable.ListBuffer.new()\n            ).toList().get(planet2_idx).orbital_period()\n        )\n        var planet1_orbital_period_in_seconds = planet1_orbital_period.div(\n            scala.math.BigDecimal.valueOf(scala.math.BigInteger.valueOf(60))\n        )\n        var planet2_orbital_period_in_seconds = planet2_orbital_period.div(\n            scala.math.BigDecimal.valueOf(scala.math.BigInteger.valueOf(60))\n        )\n        var planet1_orbital_period_in_minutes = planet1_orbital_period_in_seconds.div(\n            scala.math.BigDecimal.valueOf(scala.math.BigInteger.valueOf(60))\n        )\n        var planet2_orbital_period_in_minutes = planet2_orbital_period_in_seconds.div(\n            scala\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293607,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3aq1vrfo.scala:23:52 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                scala.collection.mutable.ListBuffer.\u001b[33mnew\u001b[0m()\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 an identifier expected, but 'new' found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3aq1vrfo.scala:35:52 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                scala.collection.mutable.ListBuffer.\u001b[33mnew\u001b[0m()\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 an identifier expected, but 'new' found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3aq1vrfo.scala:40:52 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                scala.collection.mutable.ListBuffer.\u001b[33mnew\u001b[0m()\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 an identifier expected, but 'new' found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3aq1vrfo.scala:54:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3aq1vrfo.scala:21:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanets\u001b[0m = scala.collection.JavaConversions.seqAsJavaList(\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3aq1vrfo.scala:29:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mreturn\u001b[0m scala.collection.JavaConversions.asScalaBuffer(\n\u001b[31m\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var planets = List[String]()\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293574,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpzzvc3om7.scala:103:11 --------------------------\u001b[0m\u001b[0m\n\u001b[31m103 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m           ^\u001b[0m\n\u001b[31m    |\u001b[0m           pattern expected\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzzvc3om7.scala:50:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mi\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mi is already defined as \u001b[33mvariable\u001b[0m \u001b[35mi\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzzvc3om7.scala:51:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mj\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mj is already defined as \u001b[33mvariable\u001b[0m \u001b[35mj\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzzvc3om7.scala:52:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mk\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mk is already defined as \u001b[33mvariable\u001b[0m \u001b[35mk\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzzvc3om7.scala:53:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ml is already defined as \u001b[33mvariable\u001b[0m \u001b[35ml\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzzvc3om7.scala:54:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mm\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mm is already",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n        var p1_orb = orbits[p1_idx]\n        var p2_orb = orbits[p2_idx]\n        var p1_orb_idx = p1_orb.indexOf(p1)\n        var p2_orb_idx = p2_orb.indexOf(p2)\n        var p1_orb_idx_next = p1_orb_idx + 1\n        var p2_orb_idx_next = p2_orb_idx + 1\n        var p1_orb_idx_prev = p1_orb_idx - 1\n        var p2_orb_idx_prev = p2_orb_idx - 1\n        var p1_orb_idx_next_next = p1_orb_idx_next + 1\n        var p2_orb_idx_next_next = p2_orb_idx_next + 1\n        var p1_orb_idx_prev_prev = p1_orb_idx_prev - 1\n        var p2_orb_idx_prev_prev = p2_orb_idx_prev - 1\n        var p1_orb_idx_next_next_next = p1_orb_idx_next_next + 1\n        var p2_orb_idx_next_next_next = p2_orb_idx_next_next + 1\n        var p1_orb_idx_prev_prev_prev = p1_orb_idx_prev_prev - 1\n        var p2_orb_idx_prev_prev_prev = p2_orb_idx_prev_prev - 1\n        var p1_orb_idx_next_next_next_next = p1_orb_idx_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293557,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:29:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdwzjrin7.scala:30:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var p1 = planet1.toUpperCase()\n        var p2 = planet2.toUpperCase()\n        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n        var p1_orb = scala.math.BigDecimal.valueOf(Math.PI)\n        var p2_orb = scala.math.BigDecimal.valueOf(Math.PI)\n        var p1_orb_idx = planets.indexOf(p1_orb.toString())\n        var p2_orb_idx = planets.indexOf(p2_orb.toString())\n        var p1_orb_idx_idx = p1_orb_idx - p1_idx\n        var p2_orb_idx_idx = p2_orb_idx - p2_idx\n        var p1_orb_idx_idx_idx = p1_orb_idx_idx - p1_idx\n        var p2_orb_idx_idx_idx = p2_orb_idx_idx - p2_idx\n        var p1_orb_idx_idx_idx_idx = p1_orb_idx_idx_idx - p1_idx\n        var p2_orb_idx_idx_idx_idx = p2_orb_idx_idx_idx - p2_idx\n        var p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx - p1_idx\n        var p2_orb_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx - p2_idx\n        var p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx - p1_idx\n        var p2_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293605,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi4rt6qnk.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi4rt6qnk.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_2 = p1_orb_idx + 1\n        val p2_orb_idx_2 = p2_orb_idx + 1\n        val result = List[String]()\n        for (i <- p1_orb_idx_2 to p2_orb_idx_2) {\n            result = append(result, planets[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293601,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpph5r4hat.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpph5r4hat.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpph5r4hat.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpph5r4hat.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpph5r4hat.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpph5r4hat.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new java.util.Vector()\n        var sun_orbit = new java.util.Vector()\n        var planet1_orbit = new java.util.Vector()\n        var planet2_orbit = new java.util.Vector()\n        var planet1_name = planet1.toUpperCase()\n        var planet2_name = planet2.toUpperCase()\n        var planet1_index = 0\n        var planet2_index = 0\n        var planet1_distance = 0.0\n        var planet2_distance = 0.0\n        var planet1_orbital_period = 0.0\n        var planet2_orbital_period = 0.0\n        var planet1_orbital_period_in_seconds = 0.0\n        var planet2_orbital_period_in_seconds = 0.0\n        var planet1_orbital_period_in_minutes = 0.0\n        var planet2_orbital_period_in_minutes = 0.0\n        var planet1_orbital_period_in_hours = 0.0\n        var planet2_orbital_period_in_hours = 0.0\n        var planet1_orbital_period_in_days = 0.0\n        var planet2_orbital_period_in_days = 0.0\n        var planet1_orbital_period_in_years = 0.0\n        var planet2_orbital_period_in_years = 0.0\n        var planet1_orbital_period_in_seconds = 0.0\n        var planet2_orbital_period_in_seconds = 0.0\n        var planet1_orbital_period_in_minutes = 0.0\n        var planet2_orbital_period_in_minutes = 0.0\n        var planet1_orbital_period_in_hours = 0.0\n        var planet2_orbital_period_in_hours = 0.0\n        var planet1_orbital_period_in_days = 0.0\n        var planet2_orbital_period_in_days = 0.0\n        var planet1_orbital_period_in_years = 0.0\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293606,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6qm39vnk.scala:44:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period_in_seconds\u001b[0m = \u001b[31m0.0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_orbital_period_in_seconds is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_orbital_period_in_seconds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6qm39vnk.scala:45:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbital_period_in_seconds\u001b[0m = \u001b[31m0.0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet2_orbital_period_in_seconds is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet2_orbital_period_in_seconds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6qm39vnk.scala:46:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period_in_minutes\u001b[0m = \u001b[31m0.0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_orbital_period_in_minutes is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_orbital_period_in_minutes\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6qm39vnk.scala:47:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbital_period_in_minutes\u001b[0m = \u001b[31m0.0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet2_orbital_period_in_minutes is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet2_orbital_period_in_minutes\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definiti",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n        var p1_orb = orbits[p1_idx]\n        var p2_orb = orbits[p2_idx]\n        var p1_orb_idx = p1_orb.indexOf(p1)\n        var p2_orb_idx = p2_orb.indexOf(p2)\n        var p1_orb_idx_next = p1_orb_idx + 1\n        var p2_orb_idx_next = p2_orb_idx + 1\n        var p1_orb_idx_prev = p1_orb_idx - 1\n        var p2_orb_idx_prev = p2_orb_idx - 1\n        var p1_orb_idx_next_next = p1_orb_idx_next + 1\n        var p2_orb_idx_next_next = p2_orb_idx_next + 1\n        var p1_orb_idx_prev_prev = p1_orb_idx_prev - 1\n        var p2_orb_idx_prev_prev = p2_orb_idx_prev - 1\n        var p1_orb_idx_next_prev = p1_orb_idx_next - 1\n        var p2_orb_idx_next_prev = p2_orb_idx_next - 1\n        var p1_orb_idx_prev_next = p1_orb_idx_prev + 1\n        var p2_orb_idx_prev_next = p2_orb_idx_prev + 1\n        var p1_orb_idx_next_next_next = p1_orb_idx_next_next + 1\n        var p2_orb_idx_next_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293606,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyefpnkfp.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyefpnkfp.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyefpnkfp.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyefpnkfp.scala:29:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyefpnkfp.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyefpnkfp.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = _.indexOf(Planet, p1)\n        var p2_idx = _.indexOf(Planet, p2)\n        var p1_orb = _.range(0, p1_idx)\n        var p2_orb = _.range(p1_idx, p2_idx)\n        var result = _.concat(p1_orb, p2_orb)\n        result.sort(comparePlanet)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293606,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp1qxsko2k.scala:23:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = _.indexOf(Planet, p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.indexOf(Planet, p1).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp1qxsko2k.scala:24:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = _.indexOf(Planet, p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.indexOf(Planet, p2).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp1qxsko2k.scala:25:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_orb\u001b[0m = _.range(\u001b[31m0\u001b[0m, p1_idx)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   _$3 => _$3.range(0, p1_idx).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp1qxsko2k.scala:26:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_orb\u001b[0m = _.range(p1_idx, p2_idx)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$4 of expanded function:\n\u001b[31m   |\u001b[0m   _$4 => _$4.range(p1_idx, p2_idx).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp1qxsko2k.scala:27:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = _.concat(p1_orb, p2_orb)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$5 of expanded function:\n\u001b[31m   |\u001b[0m   _$5 => _$5.concat(p1_orb, p2_orb).\n\u001b[31m\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n        for (i <- 0 until planets.size - 1) {\n            var p = planets[i]\n            var p_idx = planets.indexOf(p)\n            if (p_idx < p1_idx && p_idx > p2_idx) {\n                result = result.append(p)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293606,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ykrdwca.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ykrdwca.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ykrdwca.scala:26:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until planets.size - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ykrdwca.scala:27:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mp\u001b[0m = planets[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ykrdwca.scala:27:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mp\u001b[0m = planets[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ykrdwca.scala:28:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mp_idx\u001b[0m = planets.indexOf(p)\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new java.util.Date()\n        var sun_x = sun.getTime()\n        var sun_y = sun.getYear()\n        var sun_m = sun.getMonth()\n        var sun_d = sun.getDate()\n        var sun_h = sun.getHours()\n        var sun_min = sun.getMinutes()\n        var sun_sec = sun.getSeconds()\n        var sun_ms = sun.getTime()\n        var sun_diff = sun_x - sun_y * 365 * 24 * 60 * 60 * 1000\n        var sun_diff_m = sun_diff / (60 * 60 * 1000)\n        var sun_diff_d = sun_diff / (24 * 60 * 60 * 1000)\n        var sun_diff_h = sun_diff / (60 * 60 * 1000)\n        var sun_diff_min = sun_diff / (60 * 1000)\n        var sun_diff_sec = sun_diff / 1000\n        var sun_diff_ms = sun_diff\n        var sun_diff_diff = sun_diff_m - sun_diff_d * 24 - sun_diff_h * 24 * 60 - sun_diff_min * 24 * 60 * 60 - sun_diff_sec * 24 * 60 * 60 * 1000 - sun_diff_ms * 24 * 60 * 60 * 1000\n        var sun_diff_diff_m = sun_diff_diff / (60 * 60 * 1000)\n        var sun_diff_diff_d = sun_diff_diff / (24 * 60 * 60 * 1000)\n        var sun_diff_diff_h = sun_diff_diff / (60 * 60 * 1000)\n        var sun_diff_diff_min = sun_diff_diff / (60 * 1000)\n        var sun_diff_diff_sec = sun_diff_diff / 1000\n        var sun_diff_diff_ms = sun_diff_diff\n        var sun_diff_diff_diff = sun_diff_diff_m - sun_diff_diff_d * 24 - sun_diff_diff_h * 24 * 60 - sun_diff_diff_min * 24 * 60 * 60 - sun_diff_diff_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293607,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbid8krlr.scala:45:137 -----------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msun_diff_diff_diff\u001b[0m = sun_diff_diff_m - sun_diff_diff_d * \u001b[31m24\u001b[0m - sun_diff_diff_h * \u001b[31m24\u001b[0m * \u001b[31m60\u001b[0m - sun_diff_diff_min * \u001b[31m24\u001b[0m * \u001b[31m60\u001b[0m * \u001b[31m60\u001b[0m - sun_diff_diff_\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                         ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: sun_diff_diff_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbid8krlr.scala:46:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_idx = p1_orb_idx + 1\n        val p2_orb_idx_idx = p2_orb_idx + 1\n        val p1_orb_idx_idx_idx = p1_orb_idx_idx + 1\n        val p2_orb_idx_idx_idx = p2_orb_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx = p1_orb_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx = p2_orb_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx_id\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpelum70ny.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = scala.math.BigDecimal.valueOf(0)\n        var sunOrbit = scala.math.BigDecimal.valueOf(0)\n        var planet1Orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2Orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1Distance = scala.math.BigDecimal.valueOf(0)\n        var planet2Distance = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSun = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSun = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToPlanet2 = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToPlanet1 = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunSquared = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSunSquared = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToPlanet2Squared = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToPlanet1Squared = scala.math.BigDecimal.valueOf(0)\n        var planet1OrbitToPlanet2 = scala.math.BigDecimal.valueOf(0)\n        var planet2OrbitToPlanet1 = scala.math.BigDecimal.valueOf(0)\n        var planet1OrbitToSun = scala.math.BigDecimal.valueOf(0)\n        var planet2OrbitToSun = scala.math.BigDecimal.valueOf(0)\n        var planet1OrbitToPlanet2Squared = scala.math.BigDecimal.valueOf(0)\n        var planet2OrbitToPlanet1Squared = scala.math.BigDecimal.valueOf(0)\n        var planet1OrbitToSunSquared = scala.math.BigDecimal.valueOf(0)\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293607,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpm7d_9dx0.scala:43:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm7d_9dx0.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = scala.collection.JavaConversions.seqAsJavaList(\n            scala.collection.JavaConversions.asScalaBuffer(\n                new java.util.ArrayList<String>()\n            )\n        )\n        var planet1_idx = planets.indexOf(planet1)\n        var planet2_idx = planets.indexOf(planet2)\n        var planet1_orbital_period = scala.math.BigDecimal.valueOf(\n            scala.collection.JavaConversions.asScalaBuffer(\n                new java.util.ArrayList<Double>()\n            ).get(planet1_idx).doubleValue()\n        )\n        var planet2_orbital_period = scala.math.BigDecimal.valueOf(\n            scala.collection.JavaConversions.asScalaBuffer(\n                new java.util.ArrayList<Double>()\n            ).get(planet2_idx).doubleValue()\n        )\n        var planet1_orbital_period_in_days = planet1_orbital_period.divide(\n            scala.math.BigDecimal.valueOf(scala.math.BigInteger.valueOf(86400))\n        )\n        var planet2_orbital_period_in_days = planet2_orbital_period.divide(\n            scala.math.BigDecimal.valueOf(scala.math.BigInteger.valueOf(86400))\n        )\n        var planet1_orbital_period_in_years = planet1_orbital_period_in_days.divide(\n            scala.math.BigDecimal.valueOf(365.25)\n        )\n        var planet2_orbital_period_in_years = planet2_orbital_period_in_days.divide(\n            scala.math.BigDecimal.valueOf(365.25)\n        )\n        var planet1_orbital_period_in_years_in_days = planet1_orbital_period_in_years.multiply(\n            scala.math.BigDecimal.valueOf(365.25)\n        )\n        var planet2_orbital_period_in_years_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293608,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjp9qv8f2.scala:54:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjp9qv8f2.scala:21:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanets\u001b[0m = scala.collection.JavaConversions.seqAsJavaList(\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjp9qv8f2.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            scala.collection.JavaConversions.asScalaBuffer(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjp9qv8f2.scala:34:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m            scala.collection.JavaConversions.asScalaBuffer(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjp9qv8f2.scala:54:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var sun = new Sun()\n        var planet1_orbital_period = sun.orbital_period(planet1)\n        var planet2_orbital_period = sun.orbital_period(planet2)\n        var planet1_orbital_period_diff = planet1_orbital_period - planet2_orbital_period\n        var planet2_orbital_period_diff = planet2_orbital_period - planet1_orbital_period\n        var planet1_orbital_period_diff_abs = Math.abs(planet1_orbital_period_diff)\n        var planet2_orbital_period_diff_abs = Math.abs(planet2_orbital_period_diff)\n        var planet1_orbital_period_diff_abs_floor = Math.floor(planet1_orbital_period_diff_abs)\n        var planet2_orbital_period_diff_abs_floor = Math.floor(planet2_orbital_period_diff_abs)\n        var planet1_orbital_period_diff_abs_ceil = Math.ceil(planet1_orbital_period_diff_abs)\n        var planet2_orbital_period_diff_abs_ceil = Math.ceil(planet2_orbital_period_diff_abs)\n        var planet1_orbital_period_diff_abs_ceil_floor = Math.min(planet1_orbital_period_diff_abs_ceil, planet2_orbital_period_diff_abs_floor)\n        var planet2_orbital_period_diff_abs_ceil_floor = Math.min(planet2_orbital_period_diff_abs_ceil, planet1_orbital_period_diff_abs_floor)\n        var planet1_orbital_period_diff_abs_ceil_floor_ceil = Math.max(planet1_orbital_period_diff_abs_ceil, planet2_orbital_period_diff_abs_floor)\n        var planet2_orbital_period_diff_abs_ceil_floor_ceil = Math.max(planet2_orbital_period_diff_abs_ceil\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293608,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy4uaxghl.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4uaxghl.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msun\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mSun\u001b[0m()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: type Sun\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpy4uaxghl.scala:36:67 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbital_period_diff_abs_ceil_floor_ceil\u001b[0m = Math.max(planet2_orbital_period_diff_abs_ceil\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmax\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mMath\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Double, x$1: Double): Double\n\u001b[31m   |\u001b[0m (x$0: Float, x$1: Float): Float\n\u001b[31m   |\u001b[0m (x$0: Long, x$1: Long): Long\n\u001b[31m   |\u001b[0m (x$0: Int, x$1: Int): Int\n\u001b[31m   |\u001b[0mmatch arguments ((planet2_orbital_period_diff_abs_ceil : Double))\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy4uaxghl.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var planet1_orbital_period = scala.math.durations.Seconds(\n            scala.math.durations.Seconds(\n                scala.math.durations.Seconds(\n                    scala.math.durations.Seconds(\n                        scala.math.durations.Seconds(\n                            scala.math.durations.Seconds(\n                                scala.math.durations.Seconds(\n                                    scala.math.durations.Seconds(\n                                        scala.math.durations.Seconds(\n                                            scala.math.durations.Seconds(\n                                                scala.math.durations.Seconds(\n                                                    scala.math.durations.Seconds(\n                                                        scala.math.durations.Seconds(\n                                                            scala.math.durations.Seconds(\n                                                                scala.math.durations.Seconds(\n                                                                    scala.math.durations.Seconds(\n                                                                        scala.math.durations.Seconds(\n                                                                            scala.math.durations.Seconds(\n                                                                                scala.math.durations.Seconds(\n                                                                                    scala.math.durations.Seconds(\n                                                                                        scala.math.durations.Seconds(\n                                                                                            scala.math.durations.Seconds(\n                                                                                                scala.math.durations.Seconds(\n                                                                                                    scala.math.durations.Seconds(\n                                                                                                        scala.math.durations.Seconds(\n                                                                                                            scala.math.durations.Seconds(\n                                                                                                                scala.math.durations.Seconds(\n                                                                                                                    scala.math.durations.Seconds(\n                                                                                                                        scala.math.durations.Seconds(\n                                                                                                                                scala.math.durations.Seconds(\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp4bbiucr_.scala:51:157 --------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m                                                                                                                                scala.math.durations.Seconds(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4bbiucr_.scala:22:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period\u001b[0m = scala.math.durations.Seconds(\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value durations is not a member of math\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4bbiucr_.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        if (p1_orb > p2_orb) {\n            return result\n        }\n        for (i <- p1_orb) {\n            for (j <- p2_orb) {\n                if (i < j) {\n                    result += planets[i]\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293606,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpus7112qi.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpus7112qi.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpus7112qi.scala:29:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpus7112qi.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpus7112qi.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpus7112qi.scala:30:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val result = List[String]()\n        for (i <- 1 to p1_orb) {\n            for (j <- 1 to p2_orb) {\n                if (p1_orb < p2_orb) {\n                    if (p1_orb <= i && i <= p2_orb) {\n                        result = append(result, planets[i])\n                    }\n                } else {\n                    if (p2_orb <= i && i <= p1_orb) {\n                        result = append(result, planets[i])\n                    }\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293607,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm3h4a_ca.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm3h4a_ca.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm3h4a_ca.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm3h4a_ca.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm3h4a_ca.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm3h4a_ca.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = p1.indexOf(\" \")\n        val p2_idx = p2.indexOf(\" \")\n        val p1_name = p1.substring(0, p1_idx)\n        val p2_name = p2.substring(0, p2_idx)\n        val p1_orb = p1.substring(p1_idx + 1)\n        val p2_orb = p2.substring(p2_idx + 1)\n        val p1_orb_num = _.toInt(p1_orb)\n        val p2_orb_num = _.toInt(p2_orb)\n        val p1_orb_num_abs = Math.abs(p1_orb_num)\n        val p2_orb_num_abs = Math.abs(p2_orb_num)\n        val p1_orb_num_abs_diff = p1_orb_num_abs - p2_orb_num_abs\n        val p1_orb_num_abs_diff_abs = Math.abs(p1_orb_num_abs_diff)\n        val p1_orb_num_abs_diff_abs_diff = p1_orb_num_abs_diff_abs - p2_orb_num_abs\n        val p1_orb_num_abs_diff_abs_diff_abs = Math.abs(p1_orb_num_abs_diff_abs_diff)\n        val p1_orb_num_abs_diff_abs_diff_abs_diff = p1_orb_num_abs_diff_abs_diff_abs - p2_orb_num_abs\n        val p1_orb_num_abs_diff_abs_diff_abs_diff_abs = Math.abs(p1_orb_num_abs_diff_abs_diff_abs_diff)\n        val p1_orb_num_abs_diff_abs_diff_abs_diff_abs_diff = p1_orb_num_abs_diff_abs_diff_abs_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp1ubt3w_b.scala:29:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb_num\u001b[0m = _.toInt(p1_orb)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.toInt(p1_orb).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp1ubt3w_b.scala:30:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb_num\u001b[0m = _.toInt(p2_orb)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toInt(p2_orb).\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1ubt3w_b.scala:39:61 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb_num_abs_diff_abs_diff_abs_diff_abs_diff\u001b[0m = p1_orb_num_abs_diff_abs_diff_abs_\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: p1_orb_num_abs_diff_abs_diff_abs_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1ubt3w_b.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_index = p1.indexOf(\" \")\n        val p2_index = p2.indexOf(\" \")\n        val p1_name = p1.substring(0, p1_index)\n        val p2_name = p2.substring(0, p2_index)\n        val p1_orbital_period = p1.substring(p1_index + 1)\n        val p2_orbital_period = p2.substring(p2_index + 1)\n        val p1_orbital_period_in_seconds = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbfcc2__0.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpbfcc2__0.scala:29:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_in_seconds\u001b[0m = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m(_$1, _$2, _$3, _$4, _$5, _$6, _$7, _$8, _$9, _$10, _$11, _$12, _$13, _$14, _$15\n\u001b[31m   |\u001b[0m  , \n\u001b[31m   |\u001b[0m_$16, _$17, _$18, _$19, _$20, _$21, _$22, _$23, _$24, _$25) => \n\u001b[31m   |\u001b[0m  _$1.toDouble(p1_orbital_period) * _$2.toDouble(p1_orbital_period) * \n\u001b[31m   |\u001b[0m    _$3.toDouble(p1_orbital_period)\n\u001b[31m   |\u001b[0m   * _$4.toDouble(p1_orbital_period) * _$5.toDouble(p1_orbital_period) * \n\u001b[31m   |\u001b[0m    _$6.toDouble(p1_orbital_period)\n\u001b[31m   |\u001b[0m   * _$7.toDouble(p1_orbital_period) * _$8.toDouble(p1_orbital_period) * \n\u001b[31m   |\u001b[0m    _$9.toDouble(p1_orbital_period)\n\u001b[31m   |\u001b[0m   * _$10.toDouble(p1_orbital_period) * _$11.toDouble(p1_orbital_period) * \n\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n        val p2_idx = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n        val p1_orb = scala.math.BigDecimal(p1_idx).div(scala.math.BigDecimal(8))\n        val p2_orb = scala.math.BigDecimal(p2_idx).div(scala.math.BigDecimal(8))\n        val p1_orb_diff = p1_orb.subtract(p2_orb)\n        val p1_orb_diff_abs = p1_orb_diff.abs()\n        val p1_orb_diff_abs_int = p1_orb_diff_abs.intValue()\n        val p1_orb_diff_abs_frac = p1_orb_diff_abs.subtract(scala.math.BigDecimal(p1_orb_diff_abs_int))\n        val p1_orb_diff_abs_frac_int = p1_orb_diff_abs_frac.intValue()\n        val p1_orb_diff_abs_frac_frac = p1_orb_diff_abs_frac.subtract(scala.math.BigDecimal(p1_orb_diff_abs_frac_int))\n        val p1_orb_diff_abs_frac_frac_int = p1_orb_diff_abs_frac_frac.intValue()\n        val p1_orb_diff_abs_frac_frac_frac = p1_orb_diff_abs_frac_frac_int.subtract(scala.math.BigDecimal(p1_orb_diff_abs_frac_frac_int))\n        val p1_orb_diff_abs_frac_frac_frac_int = p1_orb_diff_abs_frac_frac_frac.intValue()\n        val p1_orb_diff\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptqvv6ngh.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptqvv6ngh.scala:23:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptqvv6ngh.scala:24:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptqvv6ngh.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_idx = p1_orb_idx + 1\n        val p2_orb_idx_idx = p2_orb_idx + 1\n        val p1_orb_idx_idx_idx = p1_orb_idx_idx + 1\n        val p2_orb_idx_idx_idx = p2_orb_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx = p1_orb_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx = p2_orb_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx_id\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpelum70ny.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelum70ny.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val result = List[String]()\n        for (i <- p1_orb_idx + 1 to p2_orb_idx) {\n            result = append(result, planets[p1_orb[i]])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293609,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt36dl69e.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt36dl69e.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt36dl69e.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt36dl69e.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt36dl69e.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt36dl69e.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.JavaConversions.seqAsJavaList(\n            scala.collection.JavaConversions.asScalaBuffer(\n                scala.collection.mutable.Buffer(\n                    (p1_idx < p2_idx) ? planets.subList(p1_idx, p2_idx) : planets.subList(p2_idx, p1_idx)\n                )\n            )\n        )\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2pgzrhhi.scala:28:89 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                    (p1_idx < p2_idx) ? planets.subList(p1_idx, p2_idx) : planets.subList(p2_idx, p1_idx)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             ')' expected, but '(' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2pgzrhhi.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2pgzrhhi.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2pgzrhhi.scala:25:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = scala.collection.JavaConversions.seqAsJavaList(\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0.38709927)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0.72333566)\n        var planet1_name = planet1.toUpperCase()\n        var planet2_name = planet2.toUpperCase()\n        var planet1_orbit_str = planet1_orbit.toString()\n        var planet2_orbit_str = planet2_orbit.toString()\n        var planet1_orbit_int = Integer.parseInt(planet1_orbit_str)\n        var planet2_orbit_int = Integer.parseInt(planet2_orbit_str)\n        var planet1_name_int = Integer.parseInt(planet1_name)\n        var planet2_name_int = Integer.parseInt(planet2_name)\n        var result = List[String]()\n        if (planet1_name_int > planet2_name_int) {\n            result = List[String](\n                \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        } else if (planet1_name_int < planet2_name_int) {\n            result = List[String](\n                \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        } else if (planet1_name_int == planet2_name_int) {\n            result = List[String](\n                \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293613,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"0.38709927\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\tat Problem$.bf(tmpqle45xp0.scala:27)\n\tat Problem$.main(tmpqle45xp0.scala:45)\n\tat Problem.main(tmpqle45xp0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n        for (i <- 1 to planets.size - 1) {\n            var planet = planets[i]\n            var planet_idx = planets.indexOf(planet)\n            if (planet_idx < p1_idx && planet_idx > p2_idx) {\n                result = append(result, planet)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuzuu3tvq.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuzuu3tvq.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuzuu3tvq.scala:26:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to planets.size - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuzuu3tvq.scala:27:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mplanet\u001b[0m = planets[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuzuu3tvq.scala:27:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mplanet\u001b[0m = planets[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuzuu3tvq.scala:28:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mplanet_idx\u001b[0m = planets.indexOf(planet)\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_next = p1_orb_idx + 1\n        val p2_orb_idx_next = p2_orb_idx + 1\n        val result = List[String]()\n        if (p1_orb_idx_next < p2_orb_idx_next) {\n            for (i <- p1_orb_idx_next to p2_orb_idx_next) {\n                result = result.append(planets[i])\n            }\n        } else if (p1_orb_idx_next > p2_orb_idx_next) {\n            for (i <- p2_orb_idx_next to p1_orb_idx_next) {\n                result = result.append(planets[i])\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt2t71v4c.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt2t71v4c.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt2t71v4c.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt2t71v4c.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt2t71v4c.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt2t71v4c.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List[String](\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planet1Index = planets.indexOf(planet1)\n        val planet2Index = planets.indexOf(planet2)\n        val orbit1 = scala.math.BigDecimal.valueOf(Math.PI).multiply(scala.math.BigDecimal.valueOf(planet1Index))\n        val orbit2 = scala.math.BigDecimal.valueOf(Math.PI).multiply(scala.math.BigDecimal.valueOf(planet2Index))\n        val orbitDiff = orbit2.subtract(orbit1)\n        val orbitDiffInRad = orbitDiff.divide(scala.math.BigDecimal.valueOf(Math.PI))\n        val orbitDiffInDeg = orbitDiffInRad.multiply(scala.math.BigDecimal.valueOf(180))\n        val orbitDiffInDeg2 = orbitDiffInDeg.divide(scala.math.BigDecimal.valueOf(180))\n        val orbitDiffInDeg3 = orbitDiffInDeg2.divide(scala.math.BigDecimal.valueOf(180))\n        val orbitDiffInDeg4 = orbitDiffInDeg3.divide(scala.math.BigDecimal.valueOf(180))\n        val orbitDiffInDeg5 = orbitDiffInDeg4.divide(scala.math.BigDecimal.valueOf(180))\n        val orbitDiffInDeg6 = orbitDiffInDeg5.divide(scala.math.BigDecimal.valueOf(180))\n        val orbitDiffInDeg7 = orbitDiffInDeg6.divide(scala.math.BigDecimal.valueOf(180))\n        val orbitDiffInDeg8 = orbitDiffInDeg7.divide(scala.math.BigDecimal.valueOf(180))\n        val orbitDiffInDeg9 = orbitDiffInDeg8.divide(scala.math.BigDecimal.valueOf(180))\n        val orbitDiffInDeg10\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm3grvl44.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm3grvl44.scala:24:60 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit1\u001b[0m = scala.math.BigDecimal.valueOf(Math.PI).multiply(scala.math.BigDecimal.valueOf(planet1Index))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value multiply is not a member of BigDecimal\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm3grvl44.scala:25:60 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit2\u001b[0m = scala.math.BigDecimal.valueOf(Math.PI).multiply(scala.math.BigDecimal.valueOf(planet2Index))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value multiply is not a member of BigDecimal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm3grvl44.scala:38:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val result = List[String]()\n        for (i <- 0 until p1_orb) {\n            for (j <- 0 until p2_orb) {\n                if (p1_orb[i] < p2_orb[j]) {\n                    result = append(result, planets[i])\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2ljdpt1e.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2ljdpt1e.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2ljdpt1e.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2ljdpt1e.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2ljdpt1e.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2ljdpt1e.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name = planet1\n        var planet2_name = planet2\n        var planet1_orbit_name = planet1_name + \"_orbit\"\n        var planet2_orbit_name = planet2_name + \"_orbit\"\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name_index = planets.indexOf(planet1_name)\n        var planet2_name_index = planets.indexOf(planet2_name)\n        var planet1_orbit_index = planets.indexOf(planet1_orbit_name)\n        var planet2_orbit_index = planets.indexOf(planet2_orbit_name)\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_name_index = planets.indexOf(planet1_orbit_name)\n        var planet2_orbit_name_index = planets.indexOf(planet2_orbit_name)\n        var planet1_orbit_index = planets.indexOf(planet1_orbit_name)\n        var planet2_orbit_index = planets.indexOf(planet2_orbit_name)\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_name_index = planets.indexOf(planet1_orbit_name)\n        var planet2_orbit_name_index = planets.indexOf(planet2_orbit_name)\n        var planet1_orbit_index = planets.indexOf(planet1_orbit_name)\n        var planet2_orbit_index = planets.indexOf(planet2_orbit_name)\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp6o_p_jsj.scala:46:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6o_p_jsj.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbit\u001b[0m = scala.math.BigDecimal.valueOf(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_orbit is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_orbit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6o_p_jsj.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbit\u001b[0m = scala.math.BigDecimal.valueOf(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet2_orbit is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet2_orbit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6o_p_jsj.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbit\u001b[0m = scala.math.BigDecimal.valueOf(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanet1_orbit is already defined as \u001b[33mvariable\u001b[0m \u001b[35mplanet1_orbit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6o_p_jsj.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbit\u001b[0m = scala.math.BigDecimal.valueOf(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val result = scala.collection.mutable.ListBuffer[String]()\n        for (i <- 0 until planets.size - 1) {\n            val p = planets[i]\n            val p_orb = orbits[i]\n            if (p_orb > p1_orb && p_orb < p2_orb) {\n                result.append(p)\n            }\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk6_yt12f.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk6_yt12f.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk6_yt12f.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p1_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk6_yt12f.scala:25:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orb\u001b[0m = orbits[\u001b[35mp1_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: orbits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk6_yt12f.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type p2_idx\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk6_yt12f.scala:26:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orb\u001b[0m = orbits[\u001b[35mp2_idx\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_index = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n        val p2_index = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n        val p1_orbital_period = scala.math.BigDecimal.valueOf(Math.PI * Math.sqrt(p1_index))\n        val p2_orbital_period = scala.math.BigDecimal.valueOf(Math.PI * Math.sqrt(p2_index))\n        val p1_orbital_period_in_days = p1_orbital_period.div(scala.math.BigDecimal.valueOf(86400))\n        val p2_orbital_period_in_days = p2_orbital_period.div(scala.math.BigDecimal.valueOf(86400))\n        val p1_orbital_period_in_years = p1_orbital_period_in_days.div(scala.math.BigDecimal.valueOf(365.25))\n        val p2_orbital_period_in_years = p2_orbital_period_in_days.div(scala.math.BigDecimal.valueOf(365.25))\n        val p1_orbital_period_in_years_in_days = p1_orbital_period_in_years.multiply(scala.math.BigDecimal.valueOf(365.25))\n        val p2_orbital_period_in_years_in_days = p2_orbital_period_in_years.multiply(scala.math.BigDecimal.valueOf(365.25))\n        val p1_orbital_period_in_years_in_days_in_days = p1_orbital_period_in_years_in_days.multiply(scala.math.BigDecimal.valueOf(86400))\n        val p2_orbital_period_in_\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplw1zv39g.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw1zv39g.scala:23:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_index\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw1zv39g.scala:24:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_index\u001b[0m = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value JavaConversions is not a member of collection\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw1zv39g.scala:27:58 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp1_orbital_period_in_days\u001b[0m = p1_orbital_period.div(scala.math.BigDecimal.valueOf(\u001b[31m86400\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue div is not a member of BigDecimal - did you mean p1_orbital_period.min?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplw1zv39g.scala:28:58 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp2_orbital_period_in_days\u001b[0m = p2_orbital_period.div(scala.math.BigDecimal.valueOf(\u001b[31m86400\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue div is not a member of BigDecimal - did you mean p2_orbital_period.min?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplw1zv39g.scala:35:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var planets = List[String]()\n        var planet1_orbital_period = scala.math.durations.Seconds(1.0 / (2.0 * scala.math.durations.NanoSeconds.one.toSeconds))\n        var planet2_orbital_period = scala.math.durations.Seconds(1.0 / (2.0 * scala.math.durations.NanoSeconds.one.toSeconds))\n        var planet1_orbital_period_in_seconds = planet1_orbital_period.toSeconds\n        var planet2_orbital_period_in_seconds = planet2_orbital_period.toSeconds\n        var planet1_orbital_period_in_nano_seconds = planet1_orbital_period.toNanoSeconds\n        var planet2_orbital_period_in_nano_seconds = planet2_orbital_period.toNanoSeconds\n        var planet1_orbital_period_in_minutes = planet1_orbital_period_in_seconds / 60.0\n        var planet2_orbital_period_in_minutes = planet2_orbital_period_in_seconds / 60.0\n        var planet1_orbital_period_in_hours = planet1_orbital_period_in_minutes / 60.0\n        var planet2_orbital_period_in_hours = planet2_orbital_period_in_minutes / 60.0\n        var planet1_orbital_period_in_days = planet1_orbital_period_in_hours / 24.0\n        var planet2_orbital_period_in_days = planet2_orbital_period_in_hours / 24.0\n        var planet1_orbital_period_in_years = planet1_orbital_period_in_days / 365.0\n        var planet2_orbital_period_in_years = planet2_orbital_period_in_days / 365.0\n        var planet1_orbital_period_in_centuries = planet1_orbital_period_in_years / 100.0\n        var planet2_orbital_period_in_cent\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp0r1tn7z.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp0r1tn7z.scala:22:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet1_orbital_period\u001b[0m = scala.math.durations.Seconds(\u001b[31m1.0\u001b[0m / (\u001b[31m2.0\u001b[0m * scala.math.durations.NanoSeconds.one.toSeconds))\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value durations is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp0r1tn7z.scala:23:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mplanet2_orbital_period\u001b[0m = scala.math.durations.Seconds(\u001b[31m1.0\u001b[0m / (\u001b[31m2.0\u001b[0m * scala.math.durations.NanoSeconds.one.toSeconds))\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value durations is not a member of math\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp0r1tn7z.scala:38:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n        var i = p1_idx\n        var j = p2_idx\n        while (i < j) {\n            var k = (i + j) / 2\n            var planet = planets[k]\n            if (planet.contains(p1)) {\n                i = k + 1\n            } else {\n                j = k\n            }\n        }\n        for (i = p1_idx; i <= j; i++) {\n            result = result.append(planets[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "timestamp": 1664293614,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjbmbkpq7.scala:37:15 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mfor\u001b[0m (i = p1_idx; i <= j; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               ')' expected, but '=' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjbmbkpq7.scala:37:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mfor\u001b[0m (i = p1_idx; i <= j; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpjbmbkpq7.scala:37:36 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mfor\u001b[0m (i = p1_idx; i <= j; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjbmbkpq7.scala:23:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp1_idx\u001b[0m = planets.indexOf(p1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjbmbkpq7.scala:24:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mp2_idx\u001b[0m = planets.indexOf(p2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: planets\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjbmbkpq7.scala:30:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mplanet\u001b[0m = planets[\u001b[35mk\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: type k\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}