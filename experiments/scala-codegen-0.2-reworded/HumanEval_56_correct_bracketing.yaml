name: HumanEval_56_correct_bracketing
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // brackets is a string of \"<\" and \">\".\n    // return true if every opening\
  \ bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
  <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n \
  \   // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
  ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
  <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n   \
  \ assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
  <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
  )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
  <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
  >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n    assert(correctBracketing((\"\
  <><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        if (brackets.length == 0) {\n            return true\n    \
    \    }\n        var openBracket = 0\n        var closeBracket = 0\n        var\
    \ openBracketIndex = 0\n        var closeBracketIndex = 0\n        var result\
    \ = true\n        for (i <- 0 until brackets.length) {\n            if (brackets[i]\
    \ == \"<\") {\n                openBracket += 1\n                openBracketIndex\
    \ = i\n            } else if (brackets[i] == \">\") {\n                closeBracket\
    \ += 1\n                closeBracketIndex = i\n            }\n        }\n    \
    \    if (openBracket != closeBracket) {\n            result = false\n        }\
    \ else {\n            for (i <- openBracketIndex + 1 until brackets.length) {\n\
    \                if (brackets[i] == \">\") {\n                    closeBracket\
    \ += 1\n                }\n            }\n            if (closeBracket != openBracket)\
    \ {\n                result = false\n            }\n        }\n        return\
    \ result", "        if (brackets.length == 0) {\n            return true\n   \
    \     }\n        var openBrackets = 0\n        var closeBrackets = 0\n       \
    \ var i = 0\n        while (i < brackets.length) {\n            if (brackets[i]\
    \ == \"<\") {\n                openBrackets += 1\n            } else if (brackets[i]\
    \ == \">\") {\n                closeBrackets += 1\n            }\n           \
    \ i += 1\n        }\n        return openBrackets == closeBrackets", "        var\
    \ openingBrackets = 0\n        var closingBrackets = 0\n        for (i <- 0 until\
    \ brackets.length) {\n            if (brackets.charAt(i) == \"<\") {\n       \
    \         openingBrackets += 1\n            } else {\n                closingBrackets\
    \ += 1\n            }\n            if (openingBrackets == 0) {\n             \
    \   return false\n            }\n            if (closingBrackets == 0) {\n   \
    \             return false\n            }\n        }\n        return true", " \
    \       var openingBrackets = 0\n        var closingBrackets = 0\n        for\
    \ (i <- 0 until brackets.length) {\n            if (brackets[i] == \"<\") {\n\
    \                openingBrackets += 1\n            } else {\n                openingBrackets\
    \ -= 1\n            }\n            if (brackets[i] == \">\") {\n             \
    \   closingBrackets += 1\n            } else {\n                closingBrackets\
    \ -= 1\n            }\n            if (openingBrackets < 0 || closingBrackets\
    \ < 0) {\n                return false\n            }\n        }\n        return\
    \ true", "        if (brackets.length == 0) {\n            return true\n     \
    \   }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var\
    \ i = 0\n        while (i < brackets.length) {\n            if (brackets[i] ==\
    \ \"<\") {\n                openBrackets += 1\n            } else if (brackets[i]\
    \ == \">\") {\n                closeBrackets += 1\n            }\n           \
    \ i += 1\n        }\n        if (openBrackets == closeBrackets) {\n          \
    \  return true\n        } else {\n            return false\n        }", "    \
    \    if (brackets.length == 0) {\n            return true\n        }\n       \
    \ if (brackets.length == 1) {\n            return false\n        }\n        if\
    \ (brackets.charAt(0) == \"<\") {\n            return correctBracketing(brackets.substring(1))\n\
    \        }\n        if (brackets.charAt(brackets.length - 1) == \">\") {\n   \
    \         return correctBracketing(brackets.substring(0, brackets.length - 1))\n\
    \        }\n        return false", "        var stack = mutable.Stack[String]()\n\
    \        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ == \">\") {\n                stack.push(brackets.substring(0, i))\n        \
    \    } else if (brackets.charAt(i) == \"<\") {\n                if (stack.isEmpty())\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop()\n                }\n            }\n        }\n        return\
    \ stack.isEmpty()", "        var openingBrackets = 0\n        var closingBrackets\
    \ = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i]\
    \ == \"<\") {\n                openingBrackets += 1\n            } else {\n  \
    \              openingBrackets -= 1\n            }\n            if (brackets[i]\
    \ == \">\") {\n                closingBrackets += 1\n            } else {\n  \
    \              closingBrackets -= 1\n            }\n            if (openingBrackets\
    \ < 0 || closingBrackets < 0) {\n                return false\n            }\n\
    \        }\n        return true", "        var stack = mutable.Stack[String]()\n\
    \        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ == \"<\") {\n                stack.push(brackets.substring(i, i + 1))\n    \
    \        } else {\n                if (stack.isEmpty()) {\n                  \
    \  return false\n                } else {\n                    stack.pop()\n \
    \               }\n            }\n        }\n        return stack.isEmpty()",
  "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n            if (i\
    \ + 1 < brackets.length && brackets.charAt(i + 1) != \">\") {\n              \
    \  return false\n            }\n        }\n        return true", "        var\
    \ openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets[i] == \"<\") {\n                openBrackets +=\
    \ 1\n            } else {\n                closeBrackets += 1\n            }\n\
    \            if (openBrackets == closeBrackets) {\n                return true\n\
    \            }\n        }\n        return false", "        if (brackets.length\
    \ == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n\
    \        var closingBracket = brackets.charAt(brackets.length - 1)\n        var\
    \ openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex\
    \ = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1\
    \ || closingBracketIndex == -1) {\n            return false\n        }\n     \
    \   if (openingBracketIndex > closingBracketIndex) {\n            return false\n\
    \        }\n        if (openingBracketIndex == 0 && closingBracketIndex == brackets.length\
    \ - 1) {\n            return true\n        }\n        return correctBracketing(brackets.substring(openingBracketIndex\
    \ + 1, closingBracketIndex))", "        var stack = mutable.Stack[String]()\n\
    \        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ == \"<\") {\n                stack.push(brackets.substring(i, i + 1))\n    \
    \        } else {\n                if (stack.isEmpty()) {\n                  \
    \  return false\n                } else {\n                    stack.pop()\n \
    \               }\n            }\n        }\n        return stack.isEmpty()",
  "        if (brackets.length == 0) {\n            return true\n        }\n     \
    \   if (brackets.length == 1) {\n            return false\n        }\n       \
    \ if (brackets.charAt(0) == \"<\") {\n            return correctBracketing(brackets.substring(1))\n\
    \        }\n        if (brackets.charAt(brackets.length - 1) == \">\") {\n   \
    \         return correctBracketing(brackets.substring(0, brackets.length - 1))\n\
    \        }\n        return false", "        if (brackets.length == 0) {\n    \
    \        return true\n        }\n        var openBracket = 0\n        var closeBracket\
    \ = 0\n        var i = 0\n        while (i < brackets.length) {\n            if\
    \ (brackets[i] == \"<\") {\n                openBracket += 1\n            } else\
    \ if (brackets[i] == \">\") {\n                closeBracket += 1\n           \
    \ }\n            i += 1\n        }\n        return openBracket == closeBracket",
  "        if (brackets.length == 0) {\n            return true\n        }\n     \
    \   var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n \
    \       while (i < brackets.length) {\n            if (brackets.charAt(i) == \"\
    <\") {\n                openBrackets += 1\n            } else if (brackets.charAt(i)\
    \ == \">\") {\n                closeBrackets += 1\n            }\n           \
    \ i += 1\n        }\n        if (openBrackets == closeBrackets) {\n          \
    \  return true\n        } else {\n            return false\n        }", "    \
    \    var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(\"\
    <\")\n            } else {\n                if (stack.isEmpty()) {\n         \
    \           return false\n                } else {\n                    if (brackets.charAt(i)\
    \ != stack.peek()) {\n                        return false\n                 \
    \   } else {\n                        stack.pop()\n                    }\n   \
    \             }\n            }\n        }\n        return stack.isEmpty()", " \
    \       if (brackets.length == 0) {\n            return true\n        }\n    \
    \    var openingBracket = brackets[0]\n        var closingBracket = brackets[1]\n\
    \        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var\
    \ closingBracketIndex = brackets.indexOf(closingBracket)\n        var openingBracketCount\
    \ = 1\n        var closingBracketCount = 1\n        for (i <- brackets.length\
    \ - 1) {\n            if (brackets[i] == openingBracket) {\n                openingBracketCount\
    \ += 1\n            }\n            if (brackets[i] == closingBracket) {\n    \
    \            closingBracketCount += 1\n            }\n            if (openingBracketCount\
    \ == closingBracketCount) {\n                openingBracketIndex = i\n       \
    \         closingBracketIndex = i\n                openingBracketCount = 1\n \
    \               closingBracketCount = 1\n            }\n        }\n        return\
    \ openingBracketIndex == closingBracketIndex", "        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) != \"<\") {\n                return false\n\
    \            }\n            if (i + 1 < brackets.length && brackets.charAt(i +\
    \ 1) != \">\") {\n                return false\n            }\n        }\n   \
    \     return true", "        if (brackets.length == 0) {\n            return true\n\
    \        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket\
    \ = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n\
    \        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n    \
    \    if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n         \
    \   return false\n        }\n        if (openingBracketIndex > closingBracketIndex)\
    \ {\n            return false\n        }\n        return correctBracketing(brackets.substring(openingBracketIndex\
    \ + 1, closingBracketIndex))", "        if (brackets.length == 0) {\n        \
    \    return true\n        }\n        var openBracket = 0\n        var closeBracket\
    \ = 0\n        var i = 0\n        while (i < brackets.length) {\n            if\
    \ (brackets.charAt(i) == \"<\") {\n                openBracket += 1\n        \
    \    } else if (brackets.charAt(i) == \">\") {\n                closeBracket +=\
    \ 1\n            }\n            i += 1\n        }\n        return (openBracket\
    \ == closeBracket)", "        if (brackets.length == 0) {\n            return\
    \ true\n        }\n        var openBracket = 0\n        var closeBracket = 0\n\
    \        var openBrackets = 0\n        var closeBrackets = 0\n        var i =\
    \ 0\n        while (i < brackets.length) {\n            if (brackets.charAt(i)\
    \ == \"<\") {\n                openBracket += 1\n            } else if (brackets.charAt(i)\
    \ == \">\") {\n                closeBracket += 1\n            }\n            i\
    \ += 1\n        }\n        if (openBracket == closeBracket) {\n            return\
    \ true\n        }\n        i = 0\n        while (i < brackets.length) {\n    \
    \        if (brackets.charAt(i) == \"<\") {\n                openBrackets += 1\n\
    \            } else if (brackets.charAt(i) == \">\") {\n                closeBrackets\
    \ += 1\n            }\n            i += 1\n        }\n        if (openBrackets\
    \ == closeBrackets) {\n            return true\n        }\n        return false",
  "        if (brackets.length == 0) {\n            return true\n        }\n     \
    \   if (brackets.length == 1) {\n            return false\n        }\n       \
    \ var stack = mutable.Stack[String]()\n        for (var i = 0; i < brackets.length;\
    \ i++) {\n            stack.push(brackets[i])\n        }\n        var openBrackets\
    \ = mutable.Stack[String]()\n        var openBracketsCount = 0\n        var stackCount\
    \ = 0\n        while (!stack.isEmpty()) {\n            var top = stack.pop()\n\
    \            if (top == \"<\") {\n                openBrackets.push(\"<\")\n \
    \               openBracketsCount += 1\n            } else if (top == \">\") {\n\
    \                if (openBracketsCount == 0) {\n                    return false\n\
    \                }\n                openBracketsCount -= 1\n                openBrackets.pop()\n\
    \            }\n            stackCount += 1\n            if (stackCount == openBracketsCount)\
    \ {\n                if (openBrackets.isEmpty()) {\n                    return\
    \ true\n                }\n                openBrackets.pop()\n            }\n\
    \        }\n        return false", "        var openBrackets = 0\n        var\
    \ closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n          \
    \  if (brackets[i] == '<') {\n                openBrackets += 1\n            }\
    \ else if (brackets[i] == '>') {\n                closeBrackets += 1\n       \
    \     }\n        }\n        return openBrackets == closeBrackets", "        for\
    \ (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) != \"<\"\
    ) {\n                return false\n            }\n            if (i + 1 < brackets.length\
    \ && brackets.charAt(i + 1) != \">\") {\n                return false\n      \
    \      }\n        }\n        return true", "        var stack = mutable.Stack[String]()\n\
    \        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ == \"<\") {\n                stack.push(brackets.substring(i, i + 1))\n    \
    \        } else {\n                if (stack.isEmpty()) {\n                  \
    \  return false\n                } else {\n                    stack.pop()\n \
    \               }\n            }\n        }\n        return stack.isEmpty()",
  "        var stack = mutable.Stack[String]()\n        var i = 0\n        while (i\
    \ < brackets.length) {\n            var c = brackets.charAt(i)\n            if\
    \ (c == \"<\") {\n                stack.push(\"<\")\n            } else if (c\
    \ == \">\") {\n                if (stack.isEmpty()) {\n                    return\
    \ false\n                } else {\n                    stack.pop()\n         \
    \       }\n            }\n            i += 1\n        }\n        return stack.isEmpty()",
  "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n            if (i\
    \ + 1 < brackets.length && brackets.charAt(i + 1) != \">\") {\n              \
    \  return false\n            }\n        }\n        return true", "        if (brackets.length\
    \ == 0) {\n            return true\n        }\n        var openBrackets = 0\n\
    \        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length)\
    \ {\n            if (brackets[i] == \"<\") {\n                openBrackets +=\
    \ 1\n            } else if (brackets[i] == \">\") {\n                closeBrackets\
    \ += 1\n            }\n            i += 1\n        }\n        return openBrackets\
    \ == closeBrackets", "        if (brackets.length == 0) {\n            return\
    \ true\n        }\n        var openingBracket = brackets.charAt(0)\n        var\
    \ closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex\
    \ = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n\
    \        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n     \
    \       return false\n        }\n        var openingBracketIndex2 = brackets.indexOf(openingBracket,\
    \ openingBracketIndex + 1)\n        var closingBracketIndex2 = brackets.lastIndexOf(closingBracket,\
    \ closingBracketIndex - 1)\n        if (openingBracketIndex2 == -1 || closingBracketIndex2\
    \ == -1) {\n            return false\n        }\n        if (openingBracketIndex2\
    \ < openingBracketIndex) {\n            return false\n        }\n        if (closingBracketIndex2\
    \ > closingBracketIndex) {\n            return false\n        }\n        return\
    \ true", "        if (brackets.length == 0) {\n            return true\n     \
    \   }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var\
    \ i = 0\n        while (i < brackets.length) {\n            if (brackets.charAt(i)\
    \ == \"<\") {\n                openBrackets += 1\n            } else if (brackets.charAt(i)\
    \ == \">\") {\n                closeBrackets += 1\n            }\n           \
    \ i += 1\n        }\n        return openBrackets == closeBrackets", "        var\
    \ stack = mutable.Stack[String]()\n        var i = 0\n        while (i < brackets.length)\
    \ {\n            var c = brackets.charAt(i)\n            if (c == \"<\") {\n \
    \               stack.push(\"<\")\n            } else if (c == \">\") {\n    \
    \            if (stack.isEmpty()) {\n                    return false\n      \
    \          } else {\n                    stack.pop()\n                }\n    \
    \        }\n            i = i + 1\n        }\n        return stack.isEmpty()",
  "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else if (brackets.charAt(i) == \">\") {\n           \
    \     if (stack.isEmpty()) {\n                    return false\n             \
    \   } else {\n                    stack.pop()\n                }\n           \
    \ }\n        }\n        return stack.isEmpty()", "        if (brackets.length\
    \ == 0) {\n            return true\n        }\n        var stack = mutable.Stack[String]()\n\
    \        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ == \"<\") {\n                stack.push(\"<\")\n            } else {\n     \
    \           if (stack.isEmpty()) {\n                    return false\n       \
    \         }\n                if (brackets.charAt(i) != stack.peek()) {\n     \
    \               return false\n                }\n                stack.pop()\n\
    \            }\n        }\n        return stack.isEmpty()", "        if (brackets.length\
    \ == 0) {\n            return true\n        }\n        var openBracket = 0\n \
    \       var closeBracket = 0\n        var openBrackets = mutable.List[Boolean]()\n\
    \        var closeBrackets = mutable.List[Boolean]()\n        for (i <- 0 until\
    \ brackets.length) {\n            if (brackets[i] == \"<\") {\n              \
    \  openBracket += 1\n            } else {\n                closeBracket += 1\n\
    \            }\n            openBrackets.append(openBracket == closeBracket)\n\
    \            closeBrackets.append(openBracket == closeBracket)\n        }\n  \
    \      return openBrackets.zip(closeBrackets).foreach(x => x._1() && x._2())",
  "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else {\n                if (stack.isEmpty()) {\n    \
    \                return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n            if (i\
    \ + 1 < brackets.length && brackets.charAt(i + 1) != \">\") {\n              \
    \  return false\n            }\n        }\n        return true", "        for\
    \ (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) != \"<\"\
    ) {\n                return false\n            }\n            if (i + 1 < brackets.length\
    \ && brackets.charAt(i + 1) != \">\") {\n                return false\n      \
    \      }\n        }\n        return true", "        var stack = mutable.Stack[String]()\n\
    \        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ == \"<\") {\n                stack.push(brackets.substring(i, i + 1))\n    \
    \        } else {\n                if (stack.isEmpty()) {\n                  \
    \  return false\n                } else {\n                    stack.pop()\n \
    \               }\n            }\n        }\n        return stack.isEmpty()",
  "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n            if (i\
    \ + 1 < brackets.length && brackets.charAt(i + 1) != \">\") {\n              \
    \  return false\n            }\n        }\n        return true", "        var\
    \ stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            var c = brackets.charAt(i)\n            if (c == \"<\") {\n \
    \               stack.push(\"<\")\n            } else if (c == \">\") {\n    \
    \            if (stack.isEmpty()) {\n                    return false\n      \
    \          } else {\n                    stack.pop()\n                }\n    \
    \        }\n        }\n        return stack.isEmpty()", "        for (i <- 0 until\
    \ brackets.length) {\n            if (brackets.charAt(i) != \"<\") {\n       \
    \         return false\n            }\n        }\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) != \">\") {\n                return false\n\
    \            }\n        }\n        return true", "        if (brackets.length\
    \ == 0) {\n            return true\n        }\n        if (brackets.length ==\
    \ 1) {\n            return false\n        }\n        var openingBrackets = 0\n\
    \        var closingBrackets = 0\n        var i = 0\n        while (i < brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                openingBrackets\
    \ += 1\n            } else if (brackets.charAt(i) == \">\") {\n              \
    \  closingBrackets += 1\n            }\n            i += 1\n        }\n      \
    \  if (openingBrackets == closingBrackets) {\n            return true\n      \
    \  } else {\n            return false\n        }", "        for (i <- 0 until\
    \ brackets.length) {\n            if (brackets.charAt(i) != \"<\") {\n       \
    \         return false\n            }\n            if (i + 1 < brackets.length\
    \ && brackets.charAt(i + 1) != \">\") {\n                return false\n      \
    \      }\n        }\n        return true", "        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) != \"<\") {\n                return false\n\
    \            }\n            if (i + 1 < brackets.length && brackets.charAt(i +\
    \ 1) != \">\") {\n                return false\n            }\n        }\n   \
    \     return true", "        var stack = mutable.Stack[String]()\n        for\
    \ (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == \"<\"\
    ) {\n                stack.push(\"<\")\n            } else if (brackets.charAt(i)\
    \ == \">\") {\n                if (stack.isEmpty()) {\n                    return\
    \ false\n                } else if (stack.peek() == \"<\") {\n               \
    \     stack.pop()\n                } else {\n                    return false\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else if (brackets.charAt(i) == \">\") {\n           \
    \     if (stack.isEmpty()) {\n                    return false\n             \
    \   } else {\n                    stack.pop()\n                }\n           \
    \ }\n        }\n        return stack.isEmpty()", "        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) != \"<\") {\n                return false\n\
    \            }\n        }\n        for (i <- 0 until brackets.length - 1) {\n\
    \            if (brackets.charAt(i) != \">\" and brackets.charAt(i + 1) != \"\
    >\") {\n                return false\n            }\n        }\n        return\
    \ true", "        if (brackets.length == 0) {\n            return true\n     \
    \   }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var\
    \ i = 0\n        while (i < brackets.length) {\n            if (brackets[i] ==\
    \ \"<\") {\n                openBrackets += 1\n            } else if (brackets[i]\
    \ == \">\") {\n                closeBrackets += 1\n            }\n           \
    \ i += 1\n        }\n        return (openBrackets == closeBrackets)", "      \
    \  if (brackets.length == 0) {\n            return true\n        }\n        var\
    \ stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(\"\
    <\")\n            } else {\n                if (stack.isEmpty()) {\n         \
    \           return false\n                } else {\n                    if (brackets.charAt(i)\
    \ != stack.peek()) {\n                        return false\n                 \
    \   } else {\n                        stack.pop()\n                    }\n   \
    \             }\n            }\n        }\n        return stack.isEmpty()", " \
    \       var openBrackets = 0\n        var closeBrackets = 0\n        for (i <-\
    \ 0 until brackets.length) {\n            if (brackets[i] == \"<\") {\n      \
    \          openBrackets += 1\n            } else if (brackets[i] == \">\") {\n\
    \                closeBrackets += 1\n            }\n        }\n        return\
    \ openBrackets == closeBrackets", "        var stack = mutable.Stack[String]()\n\
    \        for (i <- 0 until brackets.length) {\n            var c = brackets[i]\n\
    \            if (c == \"<\") {\n                stack.push(\"<\")\n          \
    \  } else if (c == \">\") {\n                if (stack.isEmpty()) {\n        \
    \            return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets[i] == \">\" && stack.isEmpty()) {\n            \
    \    return false\n            } else if (brackets[i] == \"<\" && !stack.isEmpty()\
    \ && stack.peek() == \">\") {\n                stack.pop()\n            } else\
    \ {\n                stack.push(brackets[i])\n            }\n        }\n     \
    \   return stack.isEmpty()", "        var stack = mutable.Stack[String]()\n  \
    \      var i = 0\n        while (i < brackets.length) {\n            var c = brackets.charAt(i)\n\
    \            if (c == \"<\") {\n                stack.push(\"<\")\n          \
    \  } else if (c == \">\") {\n                if (stack.isEmpty()) {\n        \
    \            return false\n                } else if (stack.peek() == \"<\") {\n\
    \                    stack.pop()\n                } else {\n                 \
    \   return false\n                }\n            }\n            i += 1\n     \
    \   }\n        return stack.isEmpty()", "        var openingBrackets = 0\n   \
    \     var closingBrackets = 0\n        for (i <- 0 until brackets.length) {\n\
    \            if (brackets[i] == \"<\") {\n                openingBrackets += 1\n\
    \            } else {\n                openingBrackets -= 1\n            }\n \
    \           if (brackets[i] == \">\") {\n                closingBrackets += 1\n\
    \            } else {\n                closingBrackets -= 1\n            }\n \
    \           if (openingBrackets < 0 || closingBrackets < 0) {\n              \
    \  return false\n            }\n        }\n        return true", "        for\
    \ (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) != \"<\"\
    ) {\n                return false\n            }\n        }\n        for (i <-\
    \ 0 until brackets.length) {\n            if (brackets.charAt(i) != \">\") {\n\
    \                return false\n            }\n        }\n        return true",
  "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n            if (i\
    \ + 1 < brackets.length && brackets.charAt(i + 1) != \">\") {\n              \
    \  return false\n            }\n        }\n        return true", "        for\
    \ (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) != \"<\"\
    ) {\n                return false\n            }\n        }\n        for (i <-\
    \ 0 until brackets.length - 1) {\n            if (brackets.charAt(i) != \">\"\
    ) {\n                return false\n            }\n        }\n        return true",
  "        if (brackets.length == 0) {\n            return true\n        }\n     \
    \   var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(0,\
    \ i))\n            } else {\n                if (stack.isEmpty()) {\n        \
    \            return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n            if (i\
    \ + 1 < brackets.length && brackets.charAt(i + 1) != \">\") {\n              \
    \  return false\n            }\n        }\n        return true", "        var\
    \ stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else {\n                if (stack.isEmpty()) {\n    \
    \                return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        var openingBrackets = 0\n        var closingBrackets = 0\n        for (i\
    \ <- 0 until brackets.length) {\n            if (brackets[i] == \"<\") {\n   \
    \             openingBrackets += 1\n            } else {\n                openingBrackets\
    \ -= 1\n            }\n            if (brackets[i] == \">\") {\n             \
    \   closingBrackets += 1\n            } else {\n                closingBrackets\
    \ -= 1\n            }\n            if (openingBrackets < 0 || closingBrackets\
    \ < 0) {\n                return false\n            }\n        }\n        return\
    \ true", "        var openingBrackets = 0\n        var closingBrackets = 0\n \
    \       for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"\
    <\") {\n                openingBrackets += 1\n            } else {\n         \
    \       openingBrackets -= 1\n            }\n            if (brackets[i] == \"\
    >\") {\n                closingBrackets += 1\n            } else {\n         \
    \       closingBrackets -= 1\n            }\n            if (openingBrackets <\
    \ 0 || closingBrackets < 0) {\n                return false\n            }\n \
    \       }\n        return true", "        for (i <- 0 until brackets.length) {\n\
    \            if (brackets.charAt(i) != \"<\") {\n                return false\n\
    \            }\n            if (i + 1 < brackets.length && brackets.charAt(i +\
    \ 1) != \">\") {\n                return false\n            }\n        }\n   \
    \     return true", "        if (brackets.length == 0) {\n            return true\n\
    \        }\n        if (brackets.length == 1) {\n            return false\n  \
    \      }\n        if (brackets.charAt(0) == '<') {\n            return correctBracketing(brackets.substring(1))\n\
    \        }\n        if (brackets.charAt(brackets.length - 1) == '>') {\n     \
    \       return correctBracketing(brackets.substring(0, brackets.length - 1))\n\
    \        }\n        return false", "        var stack = mutable.Stack[String]()\n\
    \        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ == \"<\") {\n                stack.push(\"<\")\n            } else if (brackets.charAt(i)\
    \ == \">\") {\n                if (stack.isEmpty()) {\n                    return\
    \ false\n                } else if (stack.peek() == \"<\") {\n               \
    \     stack.pop()\n                } else {\n                    return false\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        if (brackets.length == 0) {\n            return true\n        }\n     \
    \   if (brackets.length == 1) {\n            return false\n        }\n       \
    \ if (brackets.charAt(0) == '<') {\n            return correctBracketing(brackets.substring(1))\n\
    \        }\n        if (brackets.charAt(brackets.length - 1) == '>') {\n     \
    \       return correctBracketing(brackets.substring(0, brackets.length - 1))\n\
    \        }\n        return false", "        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) != \"<\") {\n                return false\n\
    \            }\n            if (i + 1 < brackets.length && brackets.charAt(i +\
    \ 1) != \">\") {\n                return false\n            }\n        }\n   \
    \     return true", "        var openBrackets = 0\n        var closeBrackets =\
    \ 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i]\
    \ == \"<\") {\n                openBrackets += 1\n            } else {\n     \
    \           closeBrackets += 1\n            }\n            if (openBrackets ==\
    \ closeBrackets) {\n                return true\n            }\n        }\n  \
    \      return false", "        var stack = mutable.Stack[String]()\n        for\
    \ (var i = 0; i < brackets.length; i++) {\n            var c = brackets.charAt(i)\n\
    \            if (c == \"<\") {\n                stack.push(\"<\")\n          \
    \  } else if (c == \">\") {\n                if (stack.isEmpty()) {\n        \
    \            return false\n                } else if (stack.pop() != \"<\") {\n\
    \                    return false\n                }\n            }\n        }\n\
    \        return stack.isEmpty()", "        if (brackets.length == 0) {\n     \
    \       return true\n        }\n        var openBrackets = 0\n        var closeBrackets\
    \ = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i]\
    \ == \"<\") {\n                openBrackets += 1\n            } else if (brackets[i]\
    \ == \">\") {\n                closeBrackets += 1\n            }\n        }\n\
    \        return (openBrackets == closeBrackets)", "        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) != \"<\") {\n                return false\n\
    \            }\n            if (i + 1 < brackets.length && brackets.charAt(i +\
    \ 1) != \">\") {\n                return false\n            }\n        }\n   \
    \     return true", "        var stack = mutable.Stack[String]()\n        for\
    \ (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == \"<\"\
    ) {\n                stack.push(brackets.substring(i, i + 1))\n            } else\
    \ {\n                if (stack.isEmpty()) {\n                    return false\n\
    \                } else {\n                    stack.pop()\n                }\n\
    \            }\n        }\n        return stack.isEmpty()", "        var stack\
    \ = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n  \
    \          if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else {\n                if (stack.isEmpty()) {\n    \
    \                return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        var openingBrackets = 0\n        var closingBrackets = 0\n        for (i\
    \ <- 0 until brackets.length) {\n            if (brackets[i] == \"<\") {\n   \
    \             openingBrackets += 1\n            } else {\n                openingBrackets\
    \ -= 1\n            }\n            if (brackets[i] == \">\") {\n             \
    \   closingBrackets += 1\n            } else {\n                closingBrackets\
    \ -= 1\n            }\n            if (openingBrackets < 0 || closingBrackets\
    \ < 0) {\n                return false\n            }\n        }\n        return\
    \ true", "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n            if (i\
    \ + 1 < brackets.length && brackets.charAt(i + 1) != \">\") {\n              \
    \  return false\n            }\n        }\n        return true", "        var\
    \ stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            var c = brackets.charAt(i)\n            if (c == \"<\") {\n \
    \               stack.push(c)\n            } else if (c == \">\") {\n        \
    \        if (stack.isEmpty()) {\n                    return false\n          \
    \      } else {\n                    stack.pop()\n                }\n        \
    \    }\n        }\n        return stack.isEmpty()", "        var openingBrackets\
    \ = 0\n        var closingBrackets = 0\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets[i] == \"<\") {\n                openingBrackets\
    \ += 1\n            } else {\n                closingBrackets += 1\n         \
    \   }\n            if (openingBrackets == 0) {\n                return false\n\
    \            }\n            if (closingBrackets == 0) {\n                return\
    \ false\n            }\n        }\n        return true", "        var openingBrackets\
    \ = 0\n        var closingBrackets = 0\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets[i] == \"<\") {\n                openingBrackets\
    \ += 1\n            } else {\n                closingBrackets += 1\n         \
    \   }\n            if (openingBrackets == 0) {\n                return false\n\
    \            }\n            if (closingBrackets == 0) {\n                return\
    \ false\n            }\n        }\n        return true", "        if (brackets.length\
    \ == 0) {\n            return true\n        }\n        var openBrackets = 0\n\
    \        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length)\
    \ {\n            if (brackets[i] == \"<\") {\n                openBrackets +=\
    \ 1\n            } else if (brackets[i] == \">\") {\n                closeBrackets\
    \ += 1\n            }\n            i += 1\n        }\n        return openBrackets\
    \ == closeBrackets", "        var stack = mutable.Stack[String]()\n        for\
    \ (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == \"<\"\
    ) {\n                stack.push(brackets.substring(i, i + 1))\n            } else\
    \ if (brackets.charAt(i) == \">\") {\n                if (stack.isEmpty()) {\n\
    \                    return false\n                } else {\n                \
    \    stack.pop()\n                }\n            }\n        }\n        return\
    \ stack.isEmpty()", "        if (brackets.length == 0) {\n            return true\n\
    \        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket\
    \ = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = 0\n\
    \        var closingBracketIndex = brackets.length - 1\n        while (openingBracketIndex\
    \ < brackets.length) {\n            if (brackets.charAt(openingBracketIndex) !=\
    \ openingBracket) {\n                return false\n            }\n           \
    \ openingBracketIndex += 1\n            if (openingBracketIndex == brackets.length)\
    \ {\n                return false\n            }\n            if (brackets.charAt(openingBracketIndex)\
    \ != closingBracket) {\n                return false\n            }\n        \
    \    closingBracketIndex -= 1\n        }\n        return true", "        if (brackets.length\
    \ == 0) {\n            return true\n        }\n        var openBracket = 0\n \
    \       var closeBracket = 0\n        var i = 0\n        while (i < brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                openBracket\
    \ += 1\n            } else if (brackets.charAt(i) == \">\") {\n              \
    \  closeBracket += 1\n            }\n            i += 1\n        }\n        return\
    \ (openBracket == closeBracket)", "        var stack = mutable.Stack[String]()\n\
    \        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ == \"<\") {\n                stack.push(\"<\")\n            } else if (brackets.charAt(i)\
    \ == \">\") {\n                if (stack.isEmpty()) {\n                    return\
    \ false\n                } else if (stack.peek() == \"<\") {\n               \
    \     stack.pop()\n                } else {\n                    return false\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else {\n                if (stack.isEmpty()) {\n    \
    \                return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n            if (i\
    \ + 1 < brackets.length && brackets.charAt(i + 1) != \">\") {\n              \
    \  return false\n            }\n        }\n        return true", "        var\
    \ stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else if (brackets.charAt(i) == \">\") {\n           \
    \     if (stack.isEmpty()) {\n                    return false\n             \
    \   } else {\n                    stack.pop()\n                }\n           \
    \ }\n        }\n        return stack.isEmpty()", "        var stack = mutable.Stack[String]()\n\
    \        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ == \"<\") {\n                stack.push(brackets.substring(i, i + 1))\n    \
    \        } else if (brackets.charAt(i) == \">\") {\n                if (stack.isEmpty())\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop()\n                }\n            }\n        }\n        return\
    \ stack.isEmpty()", "        for (i <- 0 until brackets.length) {\n          \
    \  if (brackets.charAt(i) != \"<\") {\n                return false\n        \
    \    }\n            if (i + 1 < brackets.length && brackets.charAt(i + 1) != \"\
    >\") {\n                return false\n            }\n        }\n        return\
    \ true", "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n            if (i\
    \ + 1 < brackets.length && brackets.charAt(i + 1) != \">\") {\n              \
    \  return false\n            }\n        }\n        return true", "        if (brackets.length\
    \ == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n\
    \        var closingBracket = brackets.charAt(brackets.length - 1)\n        var\
    \ openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex\
    \ = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1\
    \ || closingBracketIndex == -1) {\n            return false\n        }\n     \
    \   var openingBracketIndex2 = brackets.indexOf(openingBracket, openingBracketIndex\
    \ + 1)\n        var closingBracketIndex2 = brackets.lastIndexOf(closingBracket,\
    \ closingBracketIndex - 1)\n        if (openingBracketIndex2 == -1 || closingBracketIndex2\
    \ == -1) {\n            return false\n        }\n        if (openingBracketIndex2\
    \ < closingBracketIndex2) {\n            return false\n        }\n        return\
    \ true", "        if (brackets.length == 0) {\n            return true\n     \
    \   }\n        var openBracket = 0\n        var closeBracket = 0\n        var\
    \ i = 0\n        while (i < brackets.length) {\n            if (brackets[i] ==\
    \ \"<\") {\n                openBracket += 1\n            } else if (brackets[i]\
    \ == \">\") {\n                closeBracket += 1\n            }\n            i\
    \ += 1\n        }\n        return (openBracket == closeBracket)", "        for\
    \ (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) != \"<\"\
    ) {\n                return false\n            }\n        }\n        return true",
  "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n            if (i\
    \ + 1 < brackets.length && brackets.charAt(i + 1) != \">\") {\n              \
    \  return false\n            }\n        }\n        return true", "        var\
    \ stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else {\n                if (stack.isEmpty()) {\n    \
    \                return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets[i] == \"<\") {\n                stack.push(brackets[i])\n\
    \            } else {\n                if (stack.isEmpty()) {\n              \
    \      return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else {\n                if (stack.isEmpty()) {\n    \
    \                return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        var openingBrackets = 0\n        var closingBrackets = 0\n        for (i\
    \ <- 0 until brackets.length) {\n            if (brackets[i] == \"<\") {\n   \
    \             openingBrackets += 1\n            } else {\n                closingBrackets\
    \ += 1\n            }\n            if (openingBrackets == 0) {\n             \
    \   return false\n            }\n            if (closingBrackets == 0) {\n   \
    \             return false\n            }\n        }\n        return true", " \
    \       var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else {\n                var top = stack.pop()\n     \
    \           if (top != brackets.substring(i, i + 1)) {\n                    return\
    \ false\n                }\n            }\n        }\n        return stack.isEmpty()",
  "        if (brackets.length == 0) {\n            return true\n        }\n     \
    \   var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets[i] == \">\") {\n                stack.push(brackets[i])\n\
    \            } else {\n                if (stack.isEmpty()) {\n              \
    \      return false\n                }\n                if (brackets[i] == \"\
    <\") {\n                    if (!stack.pop().equals(\"<\")) {\n              \
    \          return false\n                    }\n                } else {\n   \
    \                 stack.pop()\n                }\n            }\n        }\n \
    \       return stack.isEmpty()", "        var stack = mutable.Stack[String]()\n\
    \        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ == \"<\") {\n                stack.push(brackets.substring(i, i + 1))\n    \
    \        } else {\n                if (stack.isEmpty()) {\n                  \
    \  return false\n                } else {\n                    stack.pop()\n \
    \               }\n            }\n        }\n        return stack.isEmpty()",
  "        for (i <- 0 until brackets.length - 1) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n            if (brackets.charAt(i\
    \ + 1) != \">\") {\n                return false\n            }\n        }\n \
    \       return true", "        var openBrackets = 0\n        var closeBrackets\
    \ = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i]\
    \ == \"<\") {\n                openBrackets += 1\n            } else {\n     \
    \           closeBrackets += 1\n            }\n            if (openBrackets ==\
    \ closeBrackets) {\n                return true\n            }\n        }\n  \
    \      return false", "        var stack = mutable.Stack[String]()\n        for\
    \ (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == \">\"\
    ) {\n                stack.push(brackets.substring(0, i))\n            } else\
    \ if (brackets.charAt(i) == \"<\") {\n                if (stack.isEmpty()) {\n\
    \                    return false\n                } else {\n                \
    \    stack.pop()\n                }\n            }\n        }\n        return\
    \ stack.isEmpty()", "        if (brackets.length == 0) {\n            return true\n\
    \        }\n        var openingBracket = brackets[0]\n        var closingBracket\
    \ = brackets[1]\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n\
    \        var closingBracketIndex = brackets.indexOf(closingBracket)\n        if\
    \ (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return\
    \ false\n        }\n        var openingBracketCount = 1\n        var closingBracketCount\
    \ = 1\n        for (i <- 1 to brackets.length - 1) {\n            if (brackets[i]\
    \ == openingBracket) {\n                openingBracketCount += 1\n           \
    \ } else if (brackets[i] == closingBracket) {\n                closingBracketCount\
    \ += 1\n            }\n            if (openingBracketCount == closingBracketCount)\
    \ {\n                openingBracketCount = 1\n                closingBracketCount\
    \ = 1\n            }\n        }\n        return openingBracketCount == closingBracketCount",
  "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n            if (i\
    \ + 1 < brackets.length && brackets.charAt(i + 1) != \">\") {\n              \
    \  return false\n            }\n        }\n        return true", "        for\
    \ (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) != \"<\"\
    ) {\n                return false\n            }\n            if (i + 1 < brackets.length\
    \ && brackets.charAt(i + 1) != \">\") {\n                return false\n      \
    \      }\n        }\n        return true", "        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) != \"<\") {\n                return false\n\
    \            }\n            if (i + 1 < brackets.length && brackets.charAt(i +\
    \ 1) != \">\") {\n                return false\n            }\n        }\n   \
    \     return true", "        var stack = mutable.Stack[String]()\n        for\
    \ (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == \"<\"\
    ) {\n                stack.push(brackets.substring(i, i + 1))\n            } else\
    \ if (brackets.charAt(i) == \">\") {\n                if (stack.isEmpty()) {\n\
    \                    return false\n                } else {\n                \
    \    stack.pop()\n                }\n            }\n        }\n        return\
    \ stack.isEmpty()", "        for (i <- 0 until brackets.length - 1) {\n      \
    \      if (brackets.charAt(i) != \"<\") {\n                return false\n    \
    \        }\n            if (brackets.charAt(i + 1) != \">\") {\n             \
    \   return false\n            }\n        }\n        return true", "        var\
    \ stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else {\n                if (stack.isEmpty()) {\n    \
    \                return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else {\n                if (stack.isEmpty()) {\n    \
    \                return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n            if (i\
    \ + 1 < brackets.length && brackets.charAt(i + 1) != \">\") {\n              \
    \  return false\n            }\n        }\n        return true", "        var\
    \ stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else if (brackets.charAt(i) == \">\") {\n           \
    \     if (stack.isEmpty()) {\n                    return false\n             \
    \   } else {\n                    stack.pop()\n                }\n           \
    \ }\n        }\n        return stack.isEmpty()", "        if (brackets.length\
    \ == 0) {\n            return true\n        }\n        var openingBracket = brackets[0]\n\
    \        var closingBracket = brackets[1]\n        var openingBracketIndex = 0\n\
    \        var closingBracketIndex = 0\n        var openingBracketFound = false\n\
    \        var closingBracketFound = false\n        for (i <- 1 to brackets.length\
    \ - 1) {\n            if (brackets[i] == openingBracket) {\n                openingBracketFound\
    \ = true\n                openingBracketIndex = i\n            }\n           \
    \ if (brackets[i] == closingBracket) {\n                closingBracketFound =\
    \ true\n                closingBracketIndex = i\n            }\n            if\
    \ (openingBracketFound && !closingBracketFound) {\n                return false\n\
    \            }\n        }\n        if (!openingBracketFound) {\n            return\
    \ false\n        }\n        if (closingBracketIndex == brackets.length - 1) {\n\
    \            return true\n        }\n        return false", "        for (i <-\
    \ 0 until brackets.length) {\n            if (brackets.charAt(i) != \"<\") {\n\
    \                return false\n            }\n        }\n        for (i <- 0 until\
    \ brackets.length) {\n            if (brackets.charAt(i) != \">\") {\n       \
    \         return false\n            }\n        }\n        return true", "    \
    \    if (brackets.length == 0) {\n            return true\n        }\n       \
    \ var openBracket = 0\n        var closeBracket = 0\n        var openBracketIndex\
    \ = 0\n        var closeBracketIndex = 0\n        var openBracketStack = List.empty[String]\n\
    \        var closeBracketStack = List.empty[String]\n        for (i <- 0 until\
    \ brackets.length) {\n            if (brackets[i] == \"<\") {\n              \
    \  openBracket += 1\n                openBracketStack = openBracketStack.append(brackets[i])\n\
    \            } else if (brackets[i] == \">\") {\n                closeBracket\
    \ += 1\n                closeBracketStack = closeBracketStack.append(brackets[i])\n\
    \            }\n            if (openBracket == closeBracket) {\n             \
    \   openBracketIndex = openBracketStack.indexOf(brackets[i])\n               \
    \ closeBracketIndex = closeBracketStack.indexOf(brackets[i])\n               \
    \ if (openBracketIndex != closeBracketIndex) {\n                    return false\n\
    \                }\n            }\n        }\n        return true", "        if\
    \ (brackets.length == 0) {\n            return true\n        }\n        var openBrackets\
    \ = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets[i] == \"<\") {\n                openBrackets +=\
    \ 1\n            } else if (brackets[i] == \">\") {\n                closeBrackets\
    \ += 1\n            }\n        }\n        return openBrackets == closeBrackets",
  "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n            if (i\
    \ + 1 < brackets.length && brackets.charAt(i + 1) != \">\") {\n              \
    \  return false\n            }\n        }\n        return true", "        for\
    \ (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) != \"<\"\
    ) {\n                return false\n            }\n            if (i + 1 < brackets.length\
    \ && brackets.charAt(i + 1) != \">\") {\n                return false\n      \
    \      }\n        }\n        return true", "        var stack = mutable.Stack[String]()\n\
    \        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ == \"<\") {\n                stack.push(brackets.substring(i, i + 1))\n    \
    \        } else {\n                if (stack.isEmpty()) {\n                  \
    \  return false\n                } else {\n                    stack.pop()\n \
    \               }\n            }\n        }\n        return stack.isEmpty()",
  "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else {\n                if (stack.isEmpty()) {\n    \
    \                return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        if (brackets.length == 0) {\n            return true\n        }\n     \
    \   var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n \
    \       while (i < brackets.length) {\n            if (brackets[i] == \"<\") {\n\
    \                openBrackets += 1\n            } else {\n                closeBrackets\
    \ += 1\n            }\n            i += 1\n        }\n        if (openBrackets\
    \ == closeBrackets) {\n            return true\n        } else {\n           \
    \ return false\n        }", "        for (i <- 0 until brackets.length) {\n  \
    \          if (brackets.charAt(i) != \"<\") {\n                return false\n\
    \            }\n            if (i + 1 < brackets.length && brackets.charAt(i +\
    \ 1) != \">\") {\n                return false\n            }\n        }\n   \
    \     return true", "        var stack = mutable.Stack[String]()\n        for\
    \ (i <- 0 until brackets.length) {\n            if (brackets[i] == \">\") {\n\
    \                stack.push(brackets[i])\n            } else {\n             \
    \   if (stack.isEmpty()) {\n                    return false\n               \
    \ } else {\n                    stack.pop()\n                }\n            }\n\
    \        }\n        return stack.isEmpty()", "        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) != \"<\") {\n                return false\n\
    \            }\n        }\n        for (i <- 0 until brackets.length - 1) {\n\
    \            if (brackets.charAt(i) != \">\" && brackets.charAt(i + 1) != \">\"\
    ) {\n                return false\n            }\n        }\n        return true",
  "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else {\n                if (stack.isEmpty()) {\n    \
    \                return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else if (brackets.charAt(i) == \">\") {\n           \
    \     if (stack.isEmpty()) {\n                    return false\n             \
    \   } else {\n                    stack.pop()\n                }\n           \
    \ }\n        }\n        return stack.isEmpty()", "        var stack = mutable.Stack[String]()\n\
    \        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ == \"<\") {\n                stack.push(\"<\")\n            } else if (brackets.charAt(i)\
    \ == \">\") {\n                if (stack.isEmpty()) {\n                    return\
    \ false\n                } else if (stack.pop() != \"<\") {\n                \
    \    return false\n                }\n            }\n        }\n        return\
    \ stack.isEmpty()", "        for (i <- 0 until brackets.length) {\n          \
    \  if (brackets.charAt(i) != \"<\") {\n                return false\n        \
    \    }\n        }\n        return true", "        if (brackets.length == 0) {\n\
    \            return true\n        }\n        var openBrackets = 0\n        var\
    \ closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n\
    \            if (brackets[i] == \"<\") {\n                openBrackets += 1\n\
    \            } else if (brackets[i] == \">\") {\n                closeBrackets\
    \ += 1\n            }\n            i += 1\n        }\n        return (openBrackets\
    \ == closeBrackets)", "        for (i <- 0 until brackets.length) {\n        \
    \    if (brackets.charAt(i) != \"<\") {\n                return false\n      \
    \      }\n            if (i + 1 < brackets.length && brackets.charAt(i + 1) !=\
    \ \">\") {\n                return false\n            }\n        }\n        return\
    \ true", "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n            if (i\
    \ + 1 < brackets.length && brackets.charAt(i + 1) != \">\") {\n              \
    \  return false\n            }\n        }\n        return true", "        var\
    \ stack = mutable.Stack[String]()\n        var openBrackets = mutable.Stack[String]()\n\
    \        var result = true\n        for (i <- 0 until brackets.length) {\n   \
    \         var c = brackets.charAt(i)\n            if (c == \"<\") {\n        \
    \        stack.push(\"<\")\n                openBrackets.push(\"<\")\n       \
    \     } else if (c == \">\") {\n                if (openBrackets.isEmpty()) {\n\
    \                    result = false\n                } else if (stack.peek() !=\
    \ openBrackets.peek()) {\n                    result = false\n               \
    \ } else {\n                    stack.pop()\n                    openBrackets.pop()\n\
    \                }\n            }\n        }\n        return result", "      \
    \  var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else if (brackets.charAt(i) == \">\") {\n           \
    \     if (stack.isEmpty()) {\n                    return false\n             \
    \   } else {\n                    stack.pop()\n                }\n           \
    \ }\n        }\n        return stack.isEmpty()", "        if (brackets.length\
    \ == 0) {\n            return true\n        }\n        var openBracket = 0\n \
    \       var closeBracket = 0\n        var openBracketIndex = 0\n        var closeBracketIndex\
    \ = 0\n        var openBracketFound = false\n        var closeBracketFound = false\n\
    \        for (i <- 0 until brackets.length) {\n            if (brackets[i] ==\
    \ \"<\") {\n                openBracketFound = true\n                openBracket++\n\
    \                openBracketIndex = i\n            } else if (brackets[i] == \"\
    >\") {\n                closeBracketFound = true\n                closeBracket++\n\
    \                closeBracketIndex = i\n            }\n        }\n        if (openBracketFound\
    \ && !closeBracketFound) {\n            return false\n        } else if (!openBracketFound\
    \ && closeBracketFound) {\n            return false\n        } else if (openBracketFound\
    \ && closeBracketFound) {\n            if (openBracket == closeBracket) {\n  \
    \              return true\n            } else {\n                return false\n\
    \            }\n        } else {\n            return false\n        }", "    \
    \    var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else {\n                if (stack.isEmpty()) {\n    \
    \                return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        if (brackets.length == 0) {\n            return true\n        }\n     \
    \   var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(\"\
    <\")\n            } else {\n                if (stack.isEmpty()) {\n         \
    \           return false\n                }\n                if (brackets.charAt(i)\
    \ != stack.peek()) {\n                    return false\n                }\n  \
    \              stack.pop()\n            }\n        }\n        return stack.isEmpty()",
  "        var stack = mutable.Stack[String]()\n        for (var i = 0; i < brackets.length;\
    \ i++) {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else {\n                if (stack.isEmpty()) {\n    \
    \                return false\n                } else {\n                    var\
    \ top = stack.pop()\n                    if (top != \"<\") {\n               \
    \         return false\n                    }\n                }\n           \
    \ }\n        }\n        return stack.isEmpty()", "        if (brackets.length\
    \ == 0) {\n            return true\n        }\n        var stack = mutable.Stack[String]()\n\
    \        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ == \"<\") {\n                stack.push(\"<\")\n            } else {\n     \
    \           if (stack.isEmpty()) {\n                    return false\n       \
    \         } else {\n                    if (brackets.charAt(i) != stack.peek())\
    \ {\n                        return false\n                    } else {\n    \
    \                    stack.pop()\n                    }\n                }\n \
    \           }\n        }\n        return stack.isEmpty()", "        var stack\
    \ = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n  \
    \          if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else {\n                if (stack.isEmpty()) {\n    \
    \                return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else {\n                if (stack.isEmpty()) {\n    \
    \                return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        if (stack.isEmpty()) {\n\
    \            return true\n        } else {\n            return false\n       \
    \ }", "        var stack = mutable.Stack[String]()\n        for (i <- 0 until\
    \ brackets.length) {\n            var c = brackets.charAt(i)\n            if (c\
    \ == \"<\") {\n                stack.push(\"<\")\n            } else if (c ==\
    \ \">\") {\n                if (stack.isEmpty()) {\n                    return\
    \ false\n                } else if (stack.pop() != \"<\") {\n                \
    \    return false\n                }\n            }\n        }\n        return\
    \ stack.isEmpty()", "        for (i <- 0 until brackets.length - 1) {\n      \
    \      if (brackets.charAt(i) != \"<\") {\n                return false\n    \
    \        }\n            if (brackets.charAt(i + 1) != \">\") {\n             \
    \   return false\n            }\n        }\n        return true", "        var\
    \ stack = mutable.Stack[String]()\n        var i = 0\n        while (i < brackets.length)\
    \ {\n            var c = brackets.charAt(i)\n            if (c == \"<\") {\n \
    \               stack.push(\"<\")\n            } else if (c == \">\") {\n    \
    \            if (stack.isEmpty()) {\n                    return false\n      \
    \          } else if (stack.pop() != \"<\") {\n                    return false\n\
    \                }\n            }\n            i += 1\n        }\n        return\
    \ stack.isEmpty()", "        if (brackets.length == 0) {\n            return true\n\
    \        }\n        var openBracket = 0\n        var closeBracket = 0\n      \
    \  var openBracketIndex = 0\n        var closeBracketIndex = 0\n        var openBracketFound\
    \ = false\n        var closeBracketFound = false\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets[i] == \"<\") {\n                openBracketFound\
    \ = true\n                openBracket++\n                openBracketIndex = i\n\
    \            } else if (brackets[i] == \">\") {\n                closeBracketFound\
    \ = true\n                closeBracket++\n                closeBracketIndex =\
    \ i\n            }\n        }\n        if (openBracketFound && !closeBracketFound)\
    \ {\n            return false\n        }\n        if (!openBracketFound && closeBracketFound)\
    \ {\n            return false\n        }\n        if (openBracketFound && closeBracketFound)\
    \ {\n            if (openBracket > closeBracket) {\n                return false\n\
    \            }\n            if (openBracket == closeBracket) {\n             \
    \   if (openBracketIndex > closeBracketIndex) {\n                    return false\n\
    \                }\n            }\n        }\n        return true", "        var\
    \ stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else {\n                if (stack.isEmpty()) {\n    \
    \                return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        if (brackets.length == 0) {\n            return true\n        }\n     \
    \   var openBracket = 0\n        var closeBracket = 0\n        var openBracketIndex\
    \ = 0\n        var closeBracketIndex = 0\n        var openBracketStack = List.empty[String]\n\
    \        var closeBracketStack = List.empty[String]\n        for (i <- 0 until\
    \ brackets.length) {\n            if (brackets.charAt(i) == \"<\") {\n       \
    \         openBracket += 1\n                openBracketStack = openBracketStack.append(brackets.substring(openBracketIndex,\
    \ i))\n                openBracketIndex = i\n            } else if (brackets.charAt(i)\
    \ == \">\") {\n                closeBracket += 1\n                closeBracketStack\
    \ = closeBracketStack.append(brackets.substring(closeBracketIndex, i))\n     \
    \           closeBracketIndex = i\n            }\n        }\n        if (openBracket\
    \ != closeBracket) {\n            return false\n        }\n        for (i <- 0\
    \ until openBracketStack.length) {\n            if (openBracketStack.apply(i)\
    \ != closeBracketStack.apply(i)) {\n                return false\n           \
    \ }\n        }\n        return true", "        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) != \"<\") {\n                return false\n\
    \            }\n            if (i + 1 < brackets.length && brackets.charAt(i +\
    \ 1) != \">\") {\n                return false\n            }\n        }\n   \
    \     return true", "        for (i <- 0 until brackets.length) {\n          \
    \  if (brackets.charAt(i) != \"<\") {\n                return false\n        \
    \    }\n            if (i + 1 < brackets.length && brackets.charAt(i + 1) != \"\
    >\") {\n                return false\n            }\n        }\n        return\
    \ true", "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n        }\n      \
    \  return true", "        for (i <- 0 until brackets.length) {\n            if\
    \ (brackets.charAt(i) != \"<\") {\n                return false\n            }\n\
    \            if (i + 1 < brackets.length && brackets.charAt(i + 1) != \">\") {\n\
    \                return false\n            }\n        }\n        return true",
  "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            var c = brackets.charAt(i)\n            if (c == \"<\") {\n \
    \               stack.push(c)\n            } else if (c == \">\") {\n        \
    \        if (stack.isEmpty()) {\n                    return false\n          \
    \      } else {\n                    stack.pop()\n                }\n        \
    \    }\n        }\n        return stack.isEmpty()", "        for (i <- 0 until\
    \ brackets.length) {\n            if (brackets.charAt(i) != \"<\") {\n       \
    \         return false\n            }\n            if (i + 1 < brackets.length\
    \ && brackets.charAt(i + 1) != \">\") {\n                return false\n      \
    \      }\n        }\n        return true", "        var stack = mutable.Stack[String]()\n\
    \        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ == \"<\") {\n                stack.push(brackets.substring(i, i + 1))\n    \
    \        } else {\n                if (stack.isEmpty()) {\n                  \
    \  return false\n                } else {\n                    stack.pop()\n \
    \               }\n            }\n        }\n        return stack.isEmpty()",
  "        if (brackets.length == 0) {\n            return true\n        }\n     \
    \   if (brackets.length == 1) {\n            return false\n        }\n       \
    \ var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(1)\n\
    \        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var\
    \ closingBracketIndex = brackets.indexOf(closingBracket)\n        var openingBracketIndex2\
    \ = brackets.indexOf(openingBracket, openingBracketIndex + 1)\n        var closingBracketIndex2\
    \ = brackets.indexOf(closingBracket, closingBracketIndex + 1)\n        if (openingBracketIndex2\
    \ == -1 || closingBracketIndex2 == -1) {\n            return false\n        }\n\
    \        if (openingBracketIndex2 > closingBracketIndex2) {\n            return\
    \ false\n        }\n        if (openingBracketIndex2 == closingBracketIndex2)\
    \ {\n            return false\n        }\n        if (openingBracketIndex2 ==\
    \ openingBracketIndex + 1) {\n            return false\n        }\n        if\
    \ (closingBracketIndex2 == closingBracketIndex + 1) {\n            return false\n\
    \        }\n        if (openingBracketIndex2 == closingBracketIndex2) {\n    \
    \        return false\n        }\n        if (openingBracketIndex2 == openingBracketIndex\
    \ + 2) {\n            return false\n        }\n        if (closingBracketIndex2\
    \ == closingBracketIndex + 2) {\n            return false\n        }\n       \
    \ if (openingBracketIndex2 == closingBracketIndex2) {\n            return false\n\
    \        }\n        if (openingBracketIndex2 == openingBracketIndex + 3) {\n \
    \           return false\n        }\n        if (closingBracketIndex2 == closingBracketIndex\
    \ + 3) {\n            return false\n        }\n        if (openingBracketIndex2\
    \ == closingBracketIndex2) {\n            return false\n        }\n        if\
    \ (openingBracketIndex2 == openingBracketIndex + 4) {\n            return false\n\
    \        }\n        if (closingBracketIndex2 == closingBracketIndex + 4) {\n \
    \           return false\n        }\n        if (openingBracket", "        if\
    \ (brackets.length == 0) {\n            return true\n        }\n        var openingBracket\
    \ = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length\
    \ - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n \
    \       var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n     \
    \   var isCorrect = openingBracketIndex != -1 && closingBracketIndex != -1 &&\
    \ openingBracketIndex < closingBracketIndex\n        if (isCorrect) {\n      \
    \      return correctBracketing(brackets.substring(1, brackets.length - 1))\n\
    \        } else {\n            return false\n        }", "        if (brackets.length\
    \ == 0) {\n            return true\n        }\n        var openBrackets = 0\n\
    \        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length)\
    \ {\n            if (brackets[i] == \"<\") {\n                openBrackets +=\
    \ 1\n            } else {\n                closeBrackets += 1\n            }\n\
    \            i += 1\n        }\n        if (openBrackets == closeBrackets) {\n\
    \            return true\n        } else {\n            return false\n       \
    \ }", "        var stack = mutable.Stack[String]()\n        for (i <- 0 until\
    \ brackets.length) {\n            if (brackets.charAt(i) == \"<\") {\n       \
    \         stack.push(brackets.substring(i, i + 1))\n            } else {\n   \
    \             if (stack.isEmpty()) {\n                    return false\n     \
    \           } else {\n                    stack.pop()\n                }\n   \
    \         }\n        }\n        return stack.isEmpty()", "        var stack =\
    \ mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n    \
    \        if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else {\n                if (stack.isEmpty()) {\n    \
    \                return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty()",
  "        if (brackets.length == 0) {\n            return true\n        }\n     \
    \   var openBracket = 0\n        var closeBracket = 0\n        var openBracketIndex\
    \ = 0\n        var closeBracketIndex = 0\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets[i] == \"<\") {\n                openBracket += 1\n\
    \                openBracketIndex = i\n            } else if (brackets[i] == \"\
    >\") {\n                closeBracket += 1\n                closeBracketIndex =\
    \ i\n            }\n        }\n        if (openBracket != closeBracket) {\n  \
    \          return false\n        }\n        var openBracketIndex2 = openBracketIndex\
    \ + 1\n        var closeBracketIndex2 = closeBracketIndex - 1\n        for (i\
    \ <- openBracketIndex2 until closeBracketIndex2) {\n            if (brackets[i]\
    \ == \"<\") {\n                openBracket += 1\n            } else if (brackets[i]\
    \ == \">\") {\n                closeBracket += 1\n            }\n        }\n \
    \       return openBracket == closeBracket", "        if (brackets.length == 0)\
    \ {\n            return true\n        }\n        var stack = mutable.Stack[String]()\n\
    \        var openBrackets = mutable.Stack[String]()\n        var i = 0\n     \
    \   while (i < brackets.length) {\n            if (brackets[i] == \"<\") {\n \
    \               stack.push(\"<\")\n                openBrackets.push(\"<\")\n\
    \            } else if (brackets[i] == \">\") {\n                if (stack.isEmpty())\
    \ {\n                    return false\n                }\n                if (openBrackets.isEmpty())\
    \ {\n                    return false\n                }\n                if (stack.peek()\
    \ != openBrackets.peek()) {\n                    return false\n              \
    \  }\n                stack.pop()\n                openBrackets.pop()\n      \
    \      }\n            i += 1\n        }\n        if (stack.isEmpty()) {\n    \
    \        return true\n        }\n        return false", "        for (i <- 0 until\
    \ brackets.length - 1) {\n            if (brackets.charAt(i) != \"<\") {\n   \
    \             return false\n            }\n            if (brackets.charAt(i +\
    \ 1) != \">\") {\n                return false\n            }\n        }\n   \
    \     return true", "        for (i <- 0 until brackets.length) {\n          \
    \  if (brackets.charAt(i) != \"<\") {\n                return false\n        \
    \    }\n            if (i + 1 < brackets.length && brackets.charAt(i + 1) != \"\
    >\") {\n                return false\n            }\n        }\n        return\
    \ true", "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n            if (i\
    \ + 1 < brackets.length && brackets.charAt(i + 1) != \">\") {\n              \
    \  return false\n            }\n        }\n        return true", "        var\
    \ stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \">\") {\n                stack.push(brackets.substring(0,\
    \ i))\n            } else if (brackets.charAt(i) == \"<\") {\n               \
    \ if (stack.isEmpty()) {\n                    return false\n                }\
    \ else {\n                    stack.pop()\n                }\n            }\n\
    \        }\n        return stack.isEmpty()", "        if (brackets.length == 0)\
    \ {\n            return true\n        }\n        var openBracket = 0\n       \
    \ var closeBracket = 0\n        var openBracketIndex = 0\n        var closeBracketIndex\
    \ = 0\n        var openBracketFound = false\n        var closeBracketFound = false\n\
    \        for (i <- 0 until brackets.length) {\n            if (brackets[i] ==\
    \ \"<\") {\n                openBracketFound = true\n                openBracket++\n\
    \                openBracketIndex = i\n            } else if (brackets[i] == \"\
    >\") {\n                closeBracketFound = true\n                closeBracket++\n\
    \                closeBracketIndex = i\n            }\n        }\n        if (openBracketFound\
    \ && !closeBracketFound) {\n            return false\n        } else if (!openBracketFound\
    \ && closeBracketFound) {\n            return false\n        } else if (openBracketFound\
    \ && closeBracketFound) {\n            if (openBracket == closeBracket) {\n  \
    \              return true\n            } else {\n                return false\n\
    \            }\n        } else {\n            return false\n        }", "    \
    \    for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n        }\n      \
    \  for (i <- 0 until brackets.length - 1) {\n            if (brackets.charAt(i)\
    \ != \">\" && brackets.charAt(i + 1) != \">\") {\n                return false\n\
    \            }\n        }\n        return true\n    }\n\n    // brackets is a\
    \ string of \"<\" and \">\".\n    // return true if every opening bracket has\
    \ a corresponding closing bracket.\n    // >>> correctBracketing2((\"<\"))\n \
    \   // (false)\n    // >>> correctBracketing2((\"<>\"))\n    // (true)\n    //\
    \ >>> correctBracketing2((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing2((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing2(brackets : String) : Boolean\
    \ = {\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n        }\n      \
    \  for (i <- 0 until brackets.length - 1) {\n            if (brackets.charAt(i)\
    \ != \">\" && brackets.charAt(i + 1) != \">\") {\n                return false\n\
    \            }\n        }\n        return true", "        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) != \"<\") {\n                return false\n\
    \            }\n            if (i + 1 < brackets.length && brackets.charAt(i +\
    \ 1) != \">\") {\n                return false\n            }\n        }\n   \
    \     return true", "        if (brackets.length == 0) {\n            return true\n\
    \        }\n        var stack = mutable.Stack[String]()\n        for (i <- 0 until\
    \ brackets.length) {\n            if (brackets.charAt(i) == \"<\") {\n       \
    \         stack.push(brackets.substring(0, i))\n            } else if (brackets.charAt(i)\
    \ == \">\") {\n                if (stack.isEmpty()) {\n                    return\
    \ false\n                } else {\n                    stack.pop()\n         \
    \       }\n            }\n        }\n        return stack.isEmpty()", "      \
    \  if (brackets.length == 0) {\n            return true\n        }\n        var\
    \ openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length\
    \ - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n \
    \       var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n     \
    \   if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n          \
    \  return false\n        }\n        var openingBracketCount = 1\n        var closingBracketCount\
    \ = 1\n        for (var i = 1; i < brackets.length - 1; i++) {\n            if\
    \ (brackets.charAt(i) == openingBracket) {\n                openingBracketCount\
    \ += 1\n            } else if (brackets.charAt(i) == closingBracket) {\n     \
    \           closingBracketCount += 1\n            }\n            if (openingBracketCount\
    \ == closingBracketCount) {\n                openingBracketCount = 0\n       \
    \         closingBracketCount = 0\n            }\n        }\n        return openingBracketCount\
    \ == 0", "        if (brackets.length == 0) {\n            return true\n     \
    \   }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var\
    \ i = 0\n        while (i < brackets.length) {\n            if (brackets[i] ==\
    \ \"<\") {\n                openBrackets += 1\n            } else if (brackets[i]\
    \ == \">\") {\n                closeBrackets += 1\n            }\n           \
    \ i += 1\n        }\n        return (openBrackets == closeBrackets)", "      \
    \  for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) !=\
    \ \"<\") {\n                return false\n            }\n            if (i + 1\
    \ < brackets.length && brackets.charAt(i + 1) != \">\") {\n                return\
    \ false\n            }\n        }\n        return true", "        for (i <- 0\
    \ until brackets.length) {\n            if (brackets.charAt(i) != \"<\") {\n \
    \               return false\n            }\n            if (i + 1 < brackets.length\
    \ && brackets.charAt(i + 1) != \">\") {\n                return false\n      \
    \      }\n        }\n        return true", "        var stack = mutable.Stack[String]()\n\
    \        for (i <- 0 until brackets.length) {\n            var c = brackets.charAt(i)\n\
    \            if (c == \"<\") {\n                stack.push(\"<\")\n          \
    \  } else if (c == \">\") {\n                var top = stack.pop()\n         \
    \       if (top != \">\") {\n                    return false\n              \
    \  }\n            }\n        }\n        return stack.isEmpty()", "        for\
    \ (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) != \"<\"\
    ) {\n                return false\n            }\n            if (i + 1 < brackets.length\
    \ && brackets.charAt(i + 1) != \">\") {\n                return false\n      \
    \      }\n        }\n        return true", "        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) != \"<\") {\n                return false\n\
    \            }\n            if (i + 1 < brackets.length && brackets.charAt(i +\
    \ 1) != \">\") {\n                return false\n            }\n        }\n   \
    \     return true", "        if (brackets.length == 0) {\n            return true\n\
    \        }\n        var stack = mutable.Stack[String]()\n        var openBracket\
    \ = 0\n        for (var i = 0; i < brackets.length; i++) {\n            var c\
    \ = brackets.charAt(i)\n            if (c == \"<\") {\n                openBracket\
    \ += 1\n            } else if (c == \">\") {\n                openBracket -= 1\n\
    \            } else {\n                stack.push(c)\n            }\n        }\n\
    \        return openBracket == 0 && stack.isEmpty()", "        var openBrackets\
    \ = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets[i] == \"<\") {\n                openBrackets +=\
    \ 1\n            } else {\n                closeBrackets += 1\n            }\n\
    \        }\n        return openBrackets == closeBrackets", "        for (i <-\
    \ 0 until brackets.length) {\n            if (brackets.charAt(i) != \"<\") {\n\
    \                return false\n            }\n            if (i + 1 < brackets.length\
    \ && brackets.charAt(i + 1) != \">\") {\n                return false\n      \
    \      }\n        }\n        return true", "        var stack = mutable.Stack[String]()\n\
    \        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ == \"<\") {\n                stack.push(brackets.substring(i, i + 1))\n    \
    \        } else {\n                if (stack.isEmpty()) {\n                  \
    \  return false\n                } else {\n                    var top = stack.pop()\n\
    \                    if (top != \"<\") {\n                        return false\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ stack.isEmpty()", "        var stack = mutable.Stack[String]()\n        for\
    \ (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == \">\"\
    ) {\n                stack.push(brackets.substring(0, i))\n            } else\
    \ {\n                if (stack.isEmpty()) {\n                    return false\n\
    \                } else {\n                    stack.pop()\n                }\n\
    \            }\n        }\n        return stack.isEmpty()", "        for (i <-\
    \ 0 until brackets.length) {\n            if (brackets.charAt(i) != \"<\") {\n\
    \                return false\n            }\n        }\n        return true",
  "        if (brackets.length == 0) {\n            return true\n        }\n     \
    \   var openBracket = 0\n        var closeBracket = 0\n        var openBracketIndex\
    \ = 0\n        var closeBracketIndex = 0\n        var result = true\n        while\
    \ (openBracket < brackets.length) {\n            openBracketIndex = brackets.indexOf(\"\
    <\", openBracket)\n            closeBracketIndex = brackets.indexOf(\">\", closeBracket)\n\
    \            if (openBracketIndex == -1 || closeBracketIndex == -1) {\n      \
    \          result = false\n                break\n            }\n            openBracket\
    \ = openBracketIndex + 1\n            closeBracket = closeBracketIndex + 1\n \
    \           result = result && (openBracketIndex < closeBracketIndex)\n      \
    \  }\n        return result", "        var stack = mutable.Stack[String]()\n \
    \       for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ == \"<\") {\n                stack.push(brackets.substring(i, i + 1))\n    \
    \        } else {\n                if (stack.isEmpty()) {\n                  \
    \  return false\n                } else {\n                    stack.pop()\n \
    \               }\n            }\n        }\n        return stack.isEmpty()",
  "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(\"\
    <\")\n            } else {\n                if (stack.isEmpty()) {\n         \
    \           return false\n                } else {\n                    if (brackets.charAt(i)\
    \ != stack.pop()) {\n                        return false\n                  \
    \  }\n                }\n            }\n        }\n        return stack.isEmpty()",
  "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ != \"<\") {\n                return false\n            }\n            if (i\
    \ + 1 < brackets.length && brackets.charAt(i + 1) != \">\") {\n              \
    \  return false\n            }\n        }\n        return true", "        if (brackets.length\
    \ == 0) {\n            return true\n        }\n        var stack = mutable.Stack[String]()\n\
    \        for (var i = 0; i < brackets.length; i++) {\n            if (brackets.charAt(i)\
    \ == '<') {\n                stack.push(brackets.substring(i, i + 1))\n      \
    \      } else {\n                if (stack.isEmpty()) {\n                    return\
    \ false\n                }\n                var top = stack.pop()\n          \
    \      if (top != brackets.substring(i, i + 1)) {\n                    return\
    \ false\n                }\n            }\n        }\n        return stack.isEmpty()",
  "        if (brackets.length == 0) {\n            return true\n        }\n     \
    \   var openingBracket = brackets[0]\n        var closingBracket = brackets[1]\n\
    \        var openingBracketIndex = 0\n        var closingBracketIndex = 0\n  \
    \      var openingBracketFound = false\n        var closingBracketFound = false\n\
    \        for (i <- 1 to brackets.length - 1) {\n            if (brackets[i] ==\
    \ openingBracket) {\n                openingBracketFound = true\n            \
    \    openingBracketIndex = i\n            }\n            if (brackets[i] == closingBracket)\
    \ {\n                closingBracketFound = true\n                closingBracketIndex\
    \ = i\n            }\n            if (openingBracketFound && closingBracketFound)\
    \ {\n                return true\n            }\n        }\n        return false",
  "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else if (brackets.charAt(i) == \">\") {\n           \
    \     if (stack.isEmpty()) {\n                    return false\n             \
    \   } else {\n                    stack.pop()\n                }\n           \
    \ }\n        }\n        return stack.isEmpty()", "        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) != \"<\") {\n                return false\n\
    \            }\n        }\n        for (i <- 0 until brackets.length - 1) {\n\
    \            if (brackets.charAt(i) != \">\" && brackets.charAt(i + 1) != \">\"\
    ) {\n                return false\n            }\n        }\n        return true",
  "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(brackets.substring(i,\
    \ i + 1))\n            } else {\n                if (stack.isEmpty()) {\n    \
    \                return false\n                } else {\n                    if\
    \ (brackets.charAt(i) != \">\") {\n                        return false\n    \
    \                } else {\n                        stack.pop()\n             \
    \       }\n                }\n            }\n        }\n        return stack.isEmpty()",
  "        if (brackets.length == 0) {\n            return true\n        }\n     \
    \   var stack = mutable.Stack[String]()\n        var openBrackets = mutable.Stack[String]()\n\
    \        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i)\
    \ == \"<\") {\n                openBrackets.push(brackets.substring(i, i + 1))\n\
    \            } else {\n                if (openBrackets.isEmpty()) {\n       \
    \             return false\n                }\n                stack.push(openBrackets.pop())\n\
    \            }\n        }\n        return stack.isEmpty()", "        for (i <-\
    \ 0 until brackets.length) {\n            if (brackets.charAt(i) != \"<\") {\n\
    \                return false\n            }\n        }\n        return true",
  "        var openingBrackets = 0\n        var closingBrackets = 0\n        for (i\
    \ <- 0 until brackets.length) {\n            if (brackets[i] == \"<\") {\n   \
    \             openingBrackets += 1\n            } else {\n                closingBrackets\
    \ += 1\n            }\n            if (openingBrackets == 0) {\n             \
    \   return false\n            }\n            if (closingBrackets == 0) {\n   \
    \             return false\n            }\n        }\n        return true", " \
    \       var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(\"\
    <\")\n            } else if (brackets.charAt(i) == \">\") {\n                if\
    \ (stack.isEmpty()) {\n                    return false\n                } else\
    \ if (stack.peek() == \"<\") {\n                    stack.pop()\n            \
    \    } else {\n                    return false\n                }\n         \
    \   }\n        }\n        return stack.isEmpty()", "        if (brackets.length\
    \ == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n\
    \        var closingBracket = brackets.charAt(1)\n        var openingBracketIndex\
    \ = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.indexOf(closingBracket)\n\
    \        var isCorrect = true\n        for (i <- 1 to brackets.length - 1) {\n\
    \            if (brackets.charAt(i) == openingBracket) {\n                openingBracketIndex\
    \ = i\n            }\n            if (brackets.charAt(i) == closingBracket) {\n\
    \                closingBracketIndex = i\n            }\n            if (openingBracketIndex\
    \ != -1 && closingBracketIndex != -1 && openingBracketIndex != closingBracketIndex\
    \ + 1) {\n                isCorrect = false\n                break\n         \
    \   }\n        }\n        return isCorrect", "        if (brackets.length == 0)\
    \ {\n            return true\n        }\n        var openBrackets = 0\n      \
    \  var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length)\
    \ {\n            if (brackets[i] == \"<\") {\n                openBrackets +=\
    \ 1\n            } else if (brackets[i] == \">\") {\n                closeBrackets\
    \ += 1\n            }\n            i += 1\n        }\n        return openBrackets\
    \ == closeBrackets", "        if (brackets.length == 0) {\n            return\
    \ true\n        }\n        var stack = mutable.Stack[String]()\n        var openBrackets\
    \ = mutable.Stack[String]()\n        var i = 0\n        while (i < brackets.length)\
    \ {\n            if (brackets.charAt(i) == \"<\") {\n                stack.push(\"\
    <\")\n                openBrackets.push(\"<\")\n            } else if (brackets.charAt(i)\
    \ == \">\") {\n                if (stack.isEmpty()) {\n                    return\
    \ false\n                }\n                if (stack.peek() != \"<\") {\n   \
    \                 return false\n                }\n                stack.pop()\n\
    \                openBrackets.pop()\n            }\n            i = i + 1\n  \
    \      }\n        if (!stack.isEmpty()) {\n            return false\n        }\n\
    \        return true", "        for (i <- 0 until brackets.length) {\n       \
    \     if (brackets.charAt(i) != \"<\") {\n                return false\n     \
    \       }\n            if (i + 1 < brackets.length && brackets.charAt(i + 1) !=\
    \ \">\") {\n                return false\n            }\n        }\n        return\
    \ true"]
stop_tokens:
- "\n    }\n"
