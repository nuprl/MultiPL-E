{
  "name": "HumanEval_140_fix_spaces",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var textLength = text.length\n        var i = 0\n        while (i < textLength) {\n            var c = text.charAt(i)\n            if (c == ' ') {\n                result += '_'\n            } else {\n                result += c\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppmjxzfj1.scala:34)\n\tat Problem.main(tmppmjxzfj1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpcv7jll.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            var spaces = text.split(\"  \")\n            var result = \"\"\n            for (i in 0 until spaces.length) {\n                if (i == 0) {\n                    result = result + spaces[i]\n                } else {\n                    result = result + spaces[i].replaceAll(\" \", \"-\")\n                }\n            }\n            return result\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293365,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprpu9bfky.scala:21:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mfor\u001b[0m (i in \u001b[31m0\u001b[0m until spaces.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmprpu9bfky.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprpu9bfky.scala:27:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            }\n\u001b[31m\u001b[31m   |\u001b[0m             ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        if (text.length() == 0) return \"\"\n        if (text.contains(\" \")) {\n            var result = \"\"\n            var lastSpace = -1\n            var lastSpaceIndex = -1\n            var lastSpaceIndex2 = -1\n            var lastSpaceIndex3 = -1\n            var lastSpaceIndex4 = -1\n            var lastSpaceIndex5 = -1\n            var lastSpaceIndex6 = -1\n            var lastSpaceIndex7 = -1\n            var lastSpaceIndex8 = -1\n            var lastSpaceIndex9 = -1\n            var lastSpaceIndex10 = -1\n            var lastSpaceIndex11 = -1\n            var lastSpaceIndex12 = -1\n            var lastSpaceIndex13 = -1\n            var lastSpaceIndex14 = -1\n            var lastSpaceIndex15 = -1\n            var lastSpaceIndex16 = -1\n            var lastSpaceIndex17 = -1\n            var lastSpaceIndex18 = -1\n            var lastSpaceIndex19 = -1\n            var lastSpaceIndex20 = -1\n            var lastSpaceIndex21 = -1\n            var lastSpaceIndex22 = -1\n            var lastSpaceIndex23 = -1\n            var lastSpaceIndex24 = -1\n            var lastSpaceIndex25 = -1\n            var lastSpaceIndex26 = -1\n            var lastSpaceIndex27 = -1\n            var lastSpaceIndex28 = -1\n            var lastSpaceIndex29 = -1\n            var lastSpaceIndex30 = -1\n            var lastSpaceIndex31 = -1\n            var lastSpaceIndex32 = -1\n            var lastSpaceIndex33 = -1\n            var lastSpaceIndex34 = -1\n            var lastSpaceIndex35 = -1\n            var lastSpaceIndex36 = -1\n            var lastSpaceIndex37 = -1\n            var lastSpaceIndex38 = -1\n            var lastSpaceIndex39 = -1\n            var lastSpaceIndex40 = -1\n            var lastSpaceIndex41 = -1\n            var lastSpaceIndex42 = -1\n            var lastSpaceIndex43 = -1\n            var lastSpaceIndex44 = -1\n            var lastSpaceIndex45 = -1\n            var lastSpaceIndex46 = -1\n            var lastSpace\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpimp4h9m_.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpimp4h9m_.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpimp4h9m_.scala:77:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpimp4h9m_.scala:69:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m69 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \", \"_\")\n        var i = 0\n        while (i < s.length - 1) {\n            if (s[i] == ' ' && s[i + 1] == ' ') {\n                s = s.substring(0, i) + '-' + s.substring(i + 2)\n                i = i + 2\n            } else {\n                i = i + 1\n            }\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf9h2d5zh.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (s[\u001b[35mi\u001b[0m] == \u001b[31m' '\u001b[0m && s[\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[31m1\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \",\"_\")\n        var text3 = text2.replaceAll(\"  \",\"_\")\n        var text4 = text3.replaceAll(\"  \",\"-\")\n        return text4\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbatb_ug0.scala:25)\n\tat Problem.main(tmpbatb_ug0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"-\")\n        return text4\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0j96lj1z.scala:25)\n\tat Problem.main(tmp0j96lj1z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"-\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:18:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:20:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"-\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpcv7jll.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var text_ = text\n        var text_len = text.length\n        var i = 0\n        while (i < text_len) {\n            var c = text_[i]\n            if (c == ' ') {\n                result += '_'\n            } else {\n                result += c\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuw337rej.scala:21:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mc\u001b[0m = text_[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var space = \" \"\n        var space2 = \"  \"\n        var space3 = \"   \"\n        var space4 = \"    \"\n        var space5 = \"     \"\n        var space6 = \"      \"\n        var space7 = \"       \"\n        var space8 = \"        \"\n        var space9 = \"         \"\n        var space10 = \"          \"\n        var space11 = \"           \"\n        var space12 = \"            \"\n        var space13 = \"             \"\n        var space14 = \"              \"\n        var space15 = \"               \"\n        var space16 = \"                \"\n        var space17 = \"                 \"\n        var space18 = \"                  \"\n        var space19 = \"                   \"\n        var space20 = \"                    \"\n        var space21 = \"                     \"\n        var space22 = \"                      \"\n        var space23 = \"                       \"\n        var space24 = \"                        \"\n        var space25 = \"                         \"\n        var space26 = \"                          \"\n        var space27 = \"                           \"\n        var space28 = \"                            \"\n        var space29 = \"                             \"\n        var space30 = \"                               \"\n        var space31 = \"                                 \"\n        var space32 = \"                                   \"\n        var space33 = \"                                    \"\n        var space34 = \"                                     \"\n        var space35 = \"                                      \"\n        var space36 = \"                                       \"\n        var space37 = \"                                        \"\n        var space38 = \"                                         \"\n        var space39 = \"                                          \"\n        var space40 = \"                                           \"\n        var space41 = \"                                           \"\n        var space42 = \"                                           \"\n        var space43 = \"                                           \"\n        var space44 = \"                                           \"\n        var space45 = \"                                           \"\n        var space46 = \"                                           \"\n        var space47 = \"                                           \"\n        var space48 = \"                                           \"\n        var space49 = \"                                           \"\n        var space50 = \"                                           \"\n        var space51 =\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpi7hkqhxx.scala:67:21 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mspace51\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7hkqhxx.scala:68:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var index = 0\n        while (index < text.length) {\n            var c = text.charAt(index)\n            if (c == ' ') {\n                result += '_'\n            } else {\n                result += c\n            }\n            index += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293365,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzp8ct1_s.scala:33)\n\tat Problem.main(tmpzp8ct1_s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \", \"_\")\n        if (s.contains(\"  \")) {\n            var s2 = s.replaceAll(\"  \", \"__\")\n            if (s2.contains(\"  \")) {\n                s2 = s2.replaceAll(\"  \", \"_\")\n            }\n            s = s2\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphc5wpfr4.scala:30)\n\tat Problem.main(tmphc5wpfr4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"_\")\n        var text5 = text4.replaceAll(\"  \", \"_\")\n        var text6 = text5.replaceAll(\"  \", \"_\")\n        var text7 = text6.replaceAll(\"  \", \"_\")\n        var text8 = text7.replaceAll(\"  \", \"_\")\n        var text9 = text8.replaceAll(\"  \", \"_\")\n        var text10 = text9.replaceAll(\"  \", \"_\")\n        var text11 = text10.replaceAll(\"  \", \"_\")\n        var text12 = text11.replaceAll(\"  \", \"_\")\n        var text13 = text12.replaceAll(\"  \", \"_\")\n        var text14 = text13.replaceAll(\"  \", \"_\")\n        var text15 = text14.replaceAll(\"  \", \"_\")\n        var text16 = text15.replaceAll(\"  \", \"_\")\n        var text17 = text16.replaceAll(\"  \", \"_\")\n        var text18 = text17.replaceAll(\"  \", \"_\")\n        var text19 = text18.replaceAll(\"  \", \"_\")\n        var text20 = text19.replaceAll(\"  \", \"_\")\n        var text21 = text20.replaceAll(\"  \", \"_\")\n        var text22 = text21.replaceAll(\"  \", \"_\")\n        var text23 = text22.replaceAll(\"  \", \"_\")\n        var text24 = text23.replaceAll(\"  \", \"_\")\n        var text25 = text24.replaceAll(\"  \", \"_\")\n        var text26 = text25.replaceAll(\"  \", \"_\")\n        var text27 = text26.replaceAll(\"  \", \"_\")\n        var text28 = text27.replaceAll(\"  \", \"_\")\n        var text29 = text28.replaceAll(\"  \", \"_\")\n        var text30 = text29.replaceAll(\"  \", \"_\")\n        var text31 = text30.replaceAll(\"  \", \"_\")\n        var text32 = text31.replaceAll(\"  \", \"_\")\n        var text33 = text32.replaceAll(\"  \", \"_\")\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpp1scovkp.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1scovkp.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < text.length) {\n            if (text[i] == ' ') {\n                result += '_'\n            } else {\n                result += text[i]\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293365,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0mcki67d.scala:19:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (text[\u001b[35mi\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0mcki67d.scala:22:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result += text[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0mcki67d.scala:22:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result += text[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"_\")\n        var text5 = text4.replaceAll(\"  \", \"_\")\n        var text6 = text5.replaceAll(\"  \", \"_\")\n        var text7 = text6.replaceAll(\"  \", \"_\")\n        var text8 = text7.replaceAll(\"  \", \"_\")\n        var text9 = text8.replaceAll(\"  \", \"_\")\n        var text10 = text9.replaceAll(\"  \", \"_\")\n        var text11 = text10.replaceAll(\"  \", \"_\")\n        var text12 = text11.replaceAll(\"  \", \"_\")\n        var text13 = text12.replaceAll(\"  \", \"_\")\n        var text14 = text13.replaceAll(\"  \", \"_\")\n        var text15 = text14.replaceAll(\"  \", \"_\")\n        var text16 = text15.replaceAll(\"  \", \"_\")\n        var text17 = text16.replaceAll(\"  \", \"_\")\n        var text18 = text17.replaceAll(\"  \", \"_\")\n        var text19 = text18.replaceAll(\"  \", \"_\")\n        var text20 = text19.replaceAll(\"  \", \"_\")\n        var text21 = text20.replaceAll(\"  \", \"_\")\n        var text22 = text21.replaceAll(\"  \", \"_\")\n        var text23 = text22.replaceAll(\"  \", \"_\")\n        var text24 = text23.replaceAll(\"  \", \"_\")\n        var text25 = text24.replaceAll(\"  \", \"_\")\n        var text26 = text25.replaceAll(\"  \", \"_\")\n        var text27 = text26.replaceAll(\"  \", \"_\")\n        var text28 = text27.replaceAll(\"  \", \"_\")\n        var text29 = text28.replaceAll(\"  \", \"_\")\n        var text30 = text29.replaceAll(\"  \", \"_\")\n        var text31 = text30.replaceAll(\"  \", \"_\")\n        var text32 = text31.replaceAll(\"  \", \"_\")\n        var text33 = text32.replaceAll(\"  \", \"_\")\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpp1scovkp.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1scovkp.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        if (text.length() == 0) return text\n        if (text.contains(\" \")) {\n            var sb = new StringBuilder()\n            var lastSpace = -1\n            var lastSpaceIndex = -1\n            for (var i = 0; i < text.length(); i++) {\n                var c = text.charAt(i)\n                if (c == ' ') {\n                    if (lastSpaceIndex == -1) {\n                        lastSpace = i\n                        lastSpaceIndex = i\n                    }\n                } else {\n                    if (lastSpaceIndex != -1) {\n                        sb.append(text.substring(lastSpace, lastSpaceIndex))\n                        sb.append('_')\n                        lastSpace = -1\n                        lastSpaceIndex = -1\n                    }\n                    sb.append(c)\n                }\n            }\n            if (lastSpaceIndex != -1) {\n                sb.append(text.substring(lastSpace, lastSpaceIndex))\n            }\n            return sb.toString()\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293365,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp9o6qtkq7.scala:22:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < text.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9o6qtkq7.scala:22:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < text.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp9o6qtkq7.scala:22:50 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < text.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9o6qtkq7.scala:22:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < text.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \", \"_\")\n        var s2 = s.replaceAll(\"  \", \"_\")\n        var s3 = s2.replaceAll(\"  \", \"-\")\n        return s3\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp283eu53s.scala:25)\n\tat Problem.main(tmp283eu53s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var index = 0\n        while (index < text.length) {\n            if (text[index] == ' ') {\n                result += '_'\n            } else {\n                result += text[index]\n            }\n            index += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprh35e_jq.scala:19:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (text[\u001b[35mindex\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type index\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprh35e_jq.scala:22:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result += text[\u001b[35mindex\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprh35e_jq.scala:22:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result += text[\u001b[35mindex\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type index\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var index = 0\n        while (index < text.length) {\n            var ch = text.charAt(index)\n            if (ch == \" \") {\n                result += \"_\"\n            } else {\n                result += ch\n            }\n            index += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp2ld0lj4x.scala:20:16 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mif\u001b[0m (ch == \u001b[31m\" \"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text.contains(\" \")) {\n            var sb = new StringBuilder()\n            var i = 0\n            while (i < text.length) {\n                if (text.charAt(i) == ' ') {\n                    sb.append(\"_\")\n                } else {\n                    sb.append(text.charAt(i))\n                }\n                i = i + 1\n            }\n            return sb.toString()\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqctq5uzs.scala:36)\n\tat Problem.main(tmpqctq5uzs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text_ = text\n        var text_ = text_.replaceAll(\" \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpsazjz51q.scala:50:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mtext_\u001b[0m = text_.replaceAll(\"  \n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpsazjz51q.scala:52:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsazjz51q.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mtext_\u001b[0m = text_.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtext_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mtext_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsazjz51q.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mtext_\u001b[0m = text_.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtext_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mtext_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsazjz51q.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mtext_\u001b[0m = text_.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtext_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mtext_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Erro",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"__\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"-\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:18:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:20:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"-\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var spaces = 0\n        var i = 0\n        while (i < text.length) {\n            if (text.charAt(i) == ' ') {\n                spaces += 1\n            } else {\n                if (spaces > 2) {\n                    result += '-'\n                    spaces = 0\n                }\n                result += text.charAt(i)\n                spaces = 0\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp718d0zp2.scala:36)\n\tat Problem.main(tmp718d0zp2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"_\")\n        var text5 = text4.replaceAll(\"  \", \"_\")\n        var text6 = text5.replaceAll(\"  \", \"_\")\n        var text7 = text6.replaceAll(\"  \", \"_\")\n        var text8 = text7.replaceAll(\"  \", \"_\")\n        var text9 = text8.replaceAll(\"  \", \"_\")\n        var text10 = text9.replaceAll(\"  \", \"_\")\n        var text11 = text10.replaceAll(\"  \", \"_\")\n        var text12 = text11.replaceAll(\"  \", \"_\")\n        var text13 = text12.replaceAll(\"  \", \"_\")\n        var text14 = text13.replaceAll(\"  \", \"_\")\n        var text15 = text14.replaceAll(\"  \", \"_\")\n        var text16 = text15.replaceAll(\"  \", \"_\")\n        var text17 = text16.replaceAll(\"  \", \"_\")\n        var text18 = text17.replaceAll(\"  \", \"_\")\n        var text19 = text18.replaceAll(\"  \", \"_\")\n        var text20 = text19.replaceAll(\"  \", \"_\")\n        var text21 = text20.replaceAll(\"  \", \"_\")\n        var text22 = text21.replaceAll(\"  \", \"_\")\n        var text23 = text22.replaceAll(\"  \", \"_\")\n        var text24 = text23.replaceAll(\"  \", \"_\")\n        var text25 = text24.replaceAll(\"  \", \"_\")\n        var text26 = text25.replaceAll(\"  \", \"_\")\n        var text27 = text26.replaceAll(\"  \", \"_\")\n        var text28 = text27.replaceAll(\"  \", \"_\")\n        var text29 = text28.replaceAll(\"  \", \"_\")\n        var text30 = text29.replaceAll(\"  \", \"_\")\n        var text31 = text30.replaceAll(\"  \", \"_\")\n        var text32 = text31.replaceAll(\"  \", \"_\")\n        var text33 = text32.replaceAll(\"  \", \"_\")\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpp1scovkp.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1scovkp.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"-\")\n        return text4\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0j96lj1z.scala:25)\n\tat Problem.main(tmp0j96lj1z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp829g2mke.scala:55:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        text = text.replaceAll(\"  \n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp829g2mke.scala:57:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:18:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:19:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:20:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation av",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \",\"_\")\n        var text3 = text2.replaceAll(\"  \",\"_\")\n        var text4 = text3.replaceAll(\"  \",\"_\")\n        var text5 = text4.replaceAll(\"  \",\"_\")\n        var text6 = text5.replaceAll(\"  \",\"_\")\n        var text7 = text6.replaceAll(\"  \",\"_\")\n        var text8 = text7.replaceAll(\"  \",\"_\")\n        var text9 = text8.replaceAll(\"  \",\"_\")\n        var text10 = text9.replaceAll(\"  \",\"_\")\n        var text11 = text10.replaceAll(\"  \",\"_\")\n        var text12 = text11.replaceAll(\"  \",\"_\")\n        var text13 = text12.replaceAll(\"  \",\"_\")\n        var text14 = text13.replaceAll(\"  \",\"_\")\n        var text15 = text14.replaceAll(\"  \",\"_\")\n        var text16 = text15.replaceAll(\"  \",\"_\")\n        var text17 = text16.replaceAll(\"  \",\"_\")\n        var text18 = text17.replaceAll(\"  \",\"_\")\n        var text19 = text18.replaceAll(\"  \",\"_\")\n        var text20 = text19.replaceAll(\"  \",\"_\")\n        var text21 = text20.replaceAll(\"  \",\"_\")\n        var text22 = text21.replaceAll(\"  \",\"_\")\n        var text23 = text22.replaceAll(\"  \",\"_\")\n        var text24 = text23.replaceAll(\"  \",\"_\")\n        var text25 = text24.replaceAll(\"  \",\"_\")\n        var text26 = text25.replaceAll(\"  \",\"_\")\n        var text27 = text26.replaceAll(\"  \",\"_\")\n        var text28 = text27.replaceAll(\"  \",\"_\")\n        var text29 = text28.replaceAll(\"  \",\"_\")\n        var text30 = text29.replaceAll(\"  \",\"_\")\n        var text31 = text30.replaceAll(\"  \",\"_\")\n        var text32 = text31.replaceAll(\"  \",\"_\")\n        var text33 = text32.replaceAll(\"  \",\"_\")\n        \n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293369,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_pubmtzk.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"_\")\n        var text5 = text4.replaceAll(\"  \", \"_\")\n        var text6 = text5.replaceAll(\"  \", \"_\")\n        var text7 = text6.replaceAll(\"  \", \"_\")\n        var text8 = text7.replaceAll(\"  \", \"_\")\n        var text9 = text8.replaceAll(\"  \", \"_\")\n        var text10 = text9.replaceAll(\"  \", \"_\")\n        var text11 = text10.replaceAll(\"  \", \"_\")\n        var text12 = text11.replaceAll(\"  \", \"_\")\n        var text13 = text12.replaceAll(\"  \", \"_\")\n        var text14 = text13.replaceAll(\"  \", \"_\")\n        var text15 = text14.replaceAll(\"  \", \"_\")\n        var text16 = text15.replaceAll(\"  \", \"_\")\n        var text17 = text16.replaceAll(\"  \", \"_\")\n        var text18 = text17.replaceAll(\"  \", \"_\")\n        var text19 = text18.replaceAll(\"  \", \"_\")\n        var text20 = text19.replaceAll(\"  \", \"_\")\n        var text21 = text20.replaceAll(\"  \", \"_\")\n        var text22 = text21.replaceAll(\"  \", \"_\")\n        var text23 = text22.replaceAll(\"  \", \"_\")\n        var text24 = text23.replaceAll(\"  \", \"_\")\n        var text25 = text24.replaceAll(\"  \", \"_\")\n        var text26 = text25.replaceAll(\"  \", \"_\")\n        var text27 = text26.replaceAll(\"  \", \"_\")\n        var text28 = text27.replaceAll(\"  \", \"_\")\n        var text29 = text28.replaceAll(\"  \", \"_\")\n        var text30 = text29.replaceAll(\"  \", \"_\")\n        var text31 = text30.replaceAll(\"  \", \"_\")\n        var text32 = text31.replaceAll(\"  \", \"_\")\n        var text33 = text32.replaceAll(\"  \", \"_\")\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpp1scovkp.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1scovkp.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzqgdfx0c.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzqgdfx0c.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var index = 0\n        while (index < text.length) {\n            var c = text.charAt(index)\n            if (c == ' ') {\n                result += '_'\n            } else {\n                result += c\n            }\n            index += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293365,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzp8ct1_s.scala:33)\n\tat Problem.main(tmpzp8ct1_s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var index = 0\n        var lastIndex = 0\n        while(index < text.length) {\n            if(text[index] == ' ') {\n                if(lastIndex != index) {\n                    result += text[lastIndex:index]\n                    lastIndex = index\n                }\n                result += '_'\n            }\n            index += 1\n        }\n        if(lastIndex != index) {\n            result += text[lastIndex:index]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293371,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxqb4cey7.scala:22:44 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                    result += text[\u001b[35mlastIndex\u001b[0m:index]\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            ']' expected, but ':' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxqb4cey7.scala:30:36 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            result += text[\u001b[35mlastIndex\u001b[0m:index]\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    ']' expected, but ':' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxqb4cey7.scala:20:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mif\u001b[0m(text[\u001b[35mindex\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: type index\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxqb4cey7.scala:22:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                    result += text[\u001b[35mlastIndex\u001b[0m:index]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxqb4cey7.scala:30:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            result += text[\u001b[35mlastIndex\u001b[0m:index]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \", \"_\")\n        var t = s.replaceAll(\"  \", \"_\")\n        var u = t.replaceAll(\"  \", \"-\")\n        return u\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293371,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu3mp2vdd.scala:25)\n\tat Problem.main(tmpu3mp2vdd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"__\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"__\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \",\"_\")\n        if (s.contains(\"  \")) {\n            var s2 = s.replaceAll(\"  \",\"-\")\n            s = s2\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293371,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuaia6a74.scala:27)\n\tat Problem.main(tmpuaia6a74.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp829g2mke.scala:55:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        text = text.replaceAll(\"  \n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp829g2mke.scala:57:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:18:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:19:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:20:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation av",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\"\\\\s+\", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"(\\\\s+)(\\\\s+)\", \"_$2\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293370,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9_irzx4p.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\"\\\\s+\"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9_irzx4p.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"(\\\\s+)(\\\\s+)\"\u001b[0m, \u001b[31m\"_$2\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \",\"_\")\n        if (s.contains(\"  \")) {\n            var s2 = s.replaceAll(\"  \",\"-\")\n            s = s2\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293371,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuaia6a74.scala:27)\n\tat Problem.main(tmpuaia6a74.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var index = 0\n        while (index < text.length) {\n            if (text[index] == ' ') {\n                result += '_'\n                index += 1\n            } else {\n                result += text[index]\n                index += 1\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1mzahm3x.scala:19:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (text[\u001b[35mindex\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type index\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1mzahm3x.scala:23:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                result += text[\u001b[35mindex\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1mzahm3x.scala:23:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                result += text[\u001b[35mindex\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type index\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp829g2mke.scala:55:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        text = text.replaceAll(\"  \n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp829g2mke.scala:57:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:18:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:19:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:20:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation av",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \",\"_\")\n        var text3 = text2.replaceAll(\"  \",\"_\")\n        var text4 = text3.replaceAll(\"  \",\"_\")\n        var text5 = text4.replaceAll(\"  \",\"_\")\n        var text6 = text5.replaceAll(\"  \",\"_\")\n        var text7 = text6.replaceAll(\"  \",\"_\")\n        var text8 = text7.replaceAll(\"  \",\"_\")\n        var text9 = text8.replaceAll(\"  \",\"_\")\n        var text10 = text9.replaceAll(\"  \",\"_\")\n        var text11 = text10.replaceAll(\"  \",\"_\")\n        var text12 = text11.replaceAll(\"  \",\"_\")\n        var text13 = text12.replaceAll(\"  \",\"_\")\n        var text14 = text13.replaceAll(\"  \",\"_\")\n        var text15 = text14.replaceAll(\"  \",\"_\")\n        var text16 = text15.replaceAll(\"  \",\"_\")\n        var text17 = text16.replaceAll(\"  \",\"_\")\n        var text18 = text17.replaceAll(\"  \",\"_\")\n        var text19 = text18.replaceAll(\"  \",\"_\")\n        var text20 = text19.replaceAll(\"  \",\"_\")\n        var text21 = text20.replaceAll(\"  \",\"_\")\n        var text22 = text21.replaceAll(\"  \",\"_\")\n        var text23 = text22.replaceAll(\"  \",\"_\")\n        var text24 = text23.replaceAll(\"  \",\"_\")\n        var text25 = text24.replaceAll(\"  \",\"_\")\n        var text26 = text25.replaceAll(\"  \",\"_\")\n        var text27 = text26.replaceAll(\"  \",\"_\")\n        var text28 = text27.replaceAll(\"  \",\"_\")\n        var text29 = text28.replaceAll(\"  \",\"_\")\n        var text30 = text29.replaceAll(\"  \",\"_\")\n        var text31 = text30.replaceAll(\"  \",\"_\")\n        var text32 = text31.replaceAll(\"  \",\"_\")\n        var text33 = text32.replaceAll(\"  \",\"_\")\n        \n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293369,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_pubmtzk.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp829g2mke.scala:55:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        text = text.replaceAll(\"  \n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp829g2mke.scala:57:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:18:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:19:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:20:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation av",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var index = 0\n        var lastIndex = 0\n        while (index < text.length) {\n            if (text[index] == ' ') {\n                result += text[lastIndex:index] + '_'\n                lastIndex = index + 1\n            }\n            index += 1\n        }\n        result += text[lastIndex:]\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293374,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4bqghv_4.scala:21:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                result += text[\u001b[35mlastIndex\u001b[0m:index] + \u001b[31m'_'\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        ']' expected, but ':' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4bqghv_4.scala:26:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        result += text[\u001b[35mlastIndex\u001b[0m:]\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                ']' expected, but ':' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4bqghv_4.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mif\u001b[0m (text[\u001b[35mindex\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type index\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4bqghv_4.scala:21:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                result += text[\u001b[35mlastIndex\u001b[0m:index] + \u001b[31m'_'\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4bqghv_4.scala:26:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        result += text[\u001b[35mlastIndex\u001b[0m:]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value += is not a member of String - did you mean String.!=?\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        if (text.length == 0) return text\n        text = text.replaceAll(\" \", \"_\")\n        if (text.length == 0) return text\n        if (text.length == 1) return text\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n            if (text.length == 0) return text\n            if (text.length == 1) return text\n            if (text.contains(\"  \")) {\n                text = text.replaceAll(\"  \", \"-\")\n                if (text.length == 0) return text\n                if (text.length == 1) return text\n                if (text.contains(\"  \")) {\n                    throw new RuntimeException(\"Cannot fix spaces\")\n                }\n            }\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293370,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmprzlecz1q.scala:18:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmprzlecz1q.scala:22:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmprzlecz1q.scala:26:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"-\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \", \"_\")\n        if (s.contains(\"  \")) {\n            s = s.replaceAll(\"  \", \"-\")\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7x8rgv0l.scala:26)\n\tat Problem.main(tmp7x8rgv0l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"-\")\n        return text4\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0j96lj1z.scala:25)\n\tat Problem.main(tmp0j96lj1z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var space = \" \"\n        var space2 = \"  \"\n        var space3 = \"   \"\n        var space4 = \"    \"\n        var space5 = \"     \"\n        var space6 = \"      \"\n        var space7 = \"       \"\n        var space8 = \"        \"\n        var space9 = \"         \"\n        var space10 = \"          \"\n        var space11 = \"           \"\n        var space12 = \"            \"\n        var space13 = \"             \"\n        var space14 = \"              \"\n        var space15 = \"               \"\n        var space16 = \"                \"\n        var space17 = \"                 \"\n        var space18 = \"                  \"\n        var space19 = \"                   \"\n        var space20 = \"                    \"\n        var space21 = \"                     \"\n        var space22 = \"                      \"\n        var space23 = \"                       \"\n        var space24 = \"                        \"\n        var space25 = \"                         \"\n        var space26 = \"                          \"\n        var space27 = \"                           \"\n        var space28 = \"                            \"\n        var space29 = \"                             \"\n        var space30 = \"                               \"\n        var space31 = \"                                 \"\n        var space32 = \"                                  \"\n        var space33 = \"                                    \"\n        var space34 = \"                                      \"\n        var space35 = \"                                        \"\n        var space36 = \"                                          \"\n        var space37 = \"                                            \"\n        var space38 = \"                                              \"\n        var space39 = \"                                                \"\n        var space40 = \"                                                   \"\n        var space41 = \"                                                      \"\n        var space42 = \"                                                         \"\n        var space43 = \"                                                            \"\n        var space44 = \"                                                              \"\n        var space45 = \"                                                                \"\n        var space46 = \"                                                                  \"\n        var space47 = \"                                                                    \"\n        var space48 = \"                                                                      \"\n        var space49 = \"                                                                        \"\n        \n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6av_u810.scala:67:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzqgdfx0c.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzqgdfx0c.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"_\")\n        var text5 = text4.replaceAll(\"  \", \"_\")\n        var text6 = text5.replaceAll(\"  \", \"_\")\n        var text7 = text6.replaceAll(\"  \", \"_\")\n        var text8 = text7.replaceAll(\"  \", \"_\")\n        var text9 = text8.replaceAll(\"  \", \"_\")\n        var text10 = text9.replaceAll(\"  \", \"_\")\n        var text11 = text10.replaceAll(\"  \", \"_\")\n        var text12 = text11.replaceAll(\"  \", \"_\")\n        var text13 = text12.replaceAll(\"  \", \"_\")\n        var text14 = text13.replaceAll(\"  \", \"_\")\n        var text15 = text14.replaceAll(\"  \", \"_\")\n        var text16 = text15.replaceAll(\"  \", \"_\")\n        var text17 = text16.replaceAll(\"  \", \"_\")\n        var text18 = text17.replaceAll(\"  \", \"_\")\n        var text19 = text18.replaceAll(\"  \", \"_\")\n        var text20 = text19.replaceAll(\"  \", \"_\")\n        var text21 = text20.replaceAll(\"  \", \"_\")\n        var text22 = text21.replaceAll(\"  \", \"_\")\n        var text23 = text22.replaceAll(\"  \", \"_\")\n        var text24 = text23.replaceAll(\"  \", \"_\")\n        var text25 = text24.replaceAll(\"  \", \"_\")\n        var text26 = text25.replaceAll(\"  \", \"_\")\n        var text27 = text26.replaceAll(\"  \", \"_\")\n        var text28 = text27.replaceAll(\"  \", \"_\")\n        var text29 = text28.replaceAll(\"  \", \"_\")\n        var text30 = text29.replaceAll(\"  \", \"_\")\n        var text31 = text30.replaceAll(\"  \", \"_\")\n        var text32 = text31.replaceAll(\"  \", \"_\")\n        var text33 = text32.replaceAll(\"  \", \"_\")\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpp1scovkp.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1scovkp.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \",\"_\")\n        if (s.contains(\"  \")) {\n            var s2 = s.replaceAll(\"  \",\"-\")\n            s = s2\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293371,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuaia6a74.scala:27)\n\tat Problem.main(tmpuaia6a74.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        if (text.length() == 0) return text\n        if (text.contains(\" \")) {\n            var sb = new StringBuilder()\n            var i = 0\n            while (i < text.length()) {\n                var c = text.charAt(i)\n                if (c == ' ') {\n                    if (i < text.length() - 1 && text.charAt(i + 1) == ' ') {\n                        sb.append('_')\n                        i += 2\n                    } else {\n                        sb.append('_')\n                        i += 1\n                    }\n                } else {\n                    sb.append(c)\n                    i += 1\n                }\n            }\n            return sb.toString()\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293375,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptjk8dxim.scala:44)\n\tat Problem.main(tmptjk8dxim.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \",\"_\")\n        if (s.contains(\"  \")) {\n            var s2 = s.replaceAll(\"  \",\"-\")\n            s = s2\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293371,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuaia6a74.scala:27)\n\tat Problem.main(tmpuaia6a74.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293374,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9cvgl_zq.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9cvgl_zq.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9cvgl_zq.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9cvgl_zq.scala:22:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9cvgl_zq.scala:25:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9cvgl_zq.scala:28:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) {\n            return null\n        }\n        if (text.length() == 0) {\n            return text\n        }\n        if (text.contains(\" \")) {\n            var result = \"\"\n            var index = 0\n            while (index < text.length()) {\n                var c = text.charAt(index)\n                if (c == ' ') {\n                    result += '_'\n                } else {\n                    result += c\n                }\n                index += 1\n            }\n            return result\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293374,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0d6a0d5u.scala:43)\n\tat Problem.main(tmp0d6a0d5u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \",\"_\")\n        var i = 0\n        while(i < s.length - 1) {\n            if(s[i] == ' ' && s[i+1] == ' ') {\n                s = s.substring(0,i) + \"-\" + s.substring(i+1)\n                i = i + 1\n            } else {\n                i = i + 1\n            }\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293371,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnognrqx6.scala:19:17 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m(s[\u001b[35mi\u001b[0m] == \u001b[31m' '\u001b[0m && s[\u001b[35mi+\u001b[31m1\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"__\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293374,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9cvgl_zq.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9cvgl_zq.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9cvgl_zq.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9cvgl_zq.scala:22:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9cvgl_zq.scala:25:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9cvgl_zq.scala:28:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzqgdfx0c.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzqgdfx0c.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < text.length) {\n            var c = text.charAt(i)\n            if (c == ' ') {\n                result += '_'\n            } else {\n                result += c\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293374,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpycbmnqs8.scala:33)\n\tat Problem.main(tmpycbmnqs8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"__\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293371,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpav8xwomx.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \",\"_\")\n        if (s.contains(\"  \")) {\n            s = s.replaceAll(\"  \",\"-\")\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz47igfug.scala:26)\n\tat Problem.main(tmpz47igfug.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"-\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:18:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:20:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"-\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"_\")\n        var text5 = text4.replaceAll(\"  \", \"_\")\n        var text6 = text5.replaceAll(\"  \", \"_\")\n        var text7 = text6.replaceAll(\"  \", \"_\")\n        var text8 = text7.replaceAll(\"  \", \"_\")\n        var text9 = text8.replaceAll(\"  \", \"_\")\n        var text10 = text9.replaceAll(\"  \", \"_\")\n        var text11 = text10.replaceAll(\"  \", \"_\")\n        var text12 = text11.replaceAll(\"  \", \"_\")\n        var text13 = text12.replaceAll(\"  \", \"_\")\n        var text14 = text13.replaceAll(\"  \", \"_\")\n        var text15 = text14.replaceAll(\"  \", \"_\")\n        var text16 = text15.replaceAll(\"  \", \"_\")\n        var text17 = text16.replaceAll(\"  \", \"_\")\n        var text18 = text17.replaceAll(\"  \", \"_\")\n        var text19 = text18.replaceAll(\"  \", \"_\")\n        var text20 = text19.replaceAll(\"  \", \"_\")\n        var text21 = text20.replaceAll(\"  \", \"_\")\n        var text22 = text21.replaceAll(\"  \", \"_\")\n        var text23 = text22.replaceAll(\"  \", \"_\")\n        var text24 = text23.replaceAll(\"  \", \"_\")\n        var text25 = text24.replaceAll(\"  \", \"_\")\n        var text26 = text25.replaceAll(\"  \", \"_\")\n        var text27 = text26.replaceAll(\"  \", \"_\")\n        var text28 = text27.replaceAll(\"  \", \"_\")\n        var text29 = text28.replaceAll(\"  \", \"_\")\n        var text30 = text29.replaceAll(\"  \", \"_\")\n        var text31 = text30.replaceAll(\"  \", \"_\")\n        var text32 = text31.replaceAll(\"  \", \"_\")\n        var text33 = text32.replaceAll(\"  \", \"_\")\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpp1scovkp.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1scovkp.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzqgdfx0c.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzqgdfx0c.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) {\n            return null\n        }\n        text = text.replaceAll(\" \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text =\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293371,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpuau30yks.scala:57:14 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m        text =\n\u001b[31m\u001b[31m   |\u001b[0m              ^\u001b[0m\n\u001b[31m   |\u001b[0m              expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpuau30yks.scala:19:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpuau30yks.scala:20:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpuau30yks.scala:21:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpuau30yks.scala:22:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpuau30yks.scala:23:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"-\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:18:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:20:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"-\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"_\")\n        var text5 = text4.replaceAll(\"  \", \"_\")\n        var text6 = text5.replaceAll(\"  \", \"_\")\n        var text7 = text6.replaceAll(\"  \", \"_\")\n        var text8 = text7.replaceAll(\"  \", \"_\")\n        var text9 = text8.replaceAll(\"  \", \"_\")\n        var text10 = text9.replaceAll(\"  \", \"_\")\n        var text11 = text10.replaceAll(\"  \", \"_\")\n        var text12 = text11.replaceAll(\"  \", \"_\")\n        var text13 = text12.replaceAll(\"  \", \"_\")\n        var text14 = text13.replaceAll(\"  \", \"_\")\n        var text15 = text14.replaceAll(\"  \", \"_\")\n        var text16 = text15.replaceAll(\"  \", \"_\")\n        var text17 = text16.replaceAll(\"  \", \"_\")\n        var text18 = text17.replaceAll(\"  \", \"_\")\n        var text19 = text18.replaceAll(\"  \", \"_\")\n        var text20 = text19.replaceAll(\"  \", \"_\")\n        var text21 = text20.replaceAll(\"  \", \"_\")\n        var text22 = text21.replaceAll(\"  \", \"_\")\n        var text23 = text22.replaceAll(\"  \", \"_\")\n        var text24 = text23.replaceAll(\"  \", \"_\")\n        var text25 = text24.replaceAll(\"  \", \"_\")\n        var text26 = text25.replaceAll(\"  \", \"_\")\n        var text27 = text26.replaceAll(\"  \", \"_\")\n        var text28 = text27.replaceAll(\"  \", \"_\")\n        var text29 = text28.replaceAll(\"  \", \"_\")\n        var text30 = text29.replaceAll(\"  \", \"_\")\n        var text31 = text30.replaceAll(\"  \", \"_\")\n        var text32 = text31.replaceAll(\"  \", \"_\")\n        var text33 = text32.replaceAll(\"  \", \"_\")\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpp1scovkp.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1scovkp.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"-\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:18:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:20:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"-\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \",\"_\")\n        if (s.contains(\"  \")) {\n            s = s.replaceAll(\"  \",\"-\")\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz47igfug.scala:26)\n\tat Problem.main(tmpz47igfug.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        if (text2.contains(\"  \")) {\n            var text3 = text2.replaceAll(\"  \", \"-\")\n            return text3\n        } else {\n            return text2\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293374,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1eaiubci.scala:28)\n\tat Problem.main(tmp1eaiubci.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \",\"_\")\n        var s2 = s.replaceAll(\"  \",\"-\")\n        return s2\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293374,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5jyerxbx.scala:24)\n\tat Problem.main(tmp5jyerxbx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \", \"_\")\n        var s2 = s.replaceAll(\"  \", \"_\")\n        var s3 = s2.replaceAll(\"  \", \"\")\n        var s4 = s3.replaceAll(\"  \", \"\")\n        var s5 = s4.replaceAll(\"  \", \"\")\n        var s6 = s5.replaceAll(\"  \", \"\")\n        var s7 = s6.replaceAll(\"  \", \"\")\n        var s8 = s7.replaceAll(\"  \", \"\")\n        var s9 = s8.replaceAll(\"  \", \"\")\n        var s10 = s9.replaceAll(\"  \", \"\")\n        var s11 = s10.replaceAll(\"  \", \"\")\n        var s12 = s11.replaceAll(\"  \", \"\")\n        var s13 = s12.replaceAll(\"  \", \"\")\n        var s14 = s13.replaceAll(\"  \", \"\")\n        var s15 = s14.replaceAll(\"  \", \"\")\n        var s16 = s15.replaceAll(\"  \", \"\")\n        var s17 = s16.replaceAll(\"  \", \"\")\n        var s18 = s17.replaceAll(\"  \", \"\")\n        var s19 = s18.replaceAll(\"  \", \"\")\n        var s20 = s19.replaceAll(\"  \", \"\")\n        var s21 = s20.replaceAll(\"  \", \"\")\n        var s22 = s21.replaceAll(\"  \", \"\")\n        var s23 = s22.replaceAll(\"  \", \"\")\n        var s24 = s23.replaceAll(\"  \", \"\")\n        var s25 = s24.replaceAll(\"  \", \"\")\n        var s26 = s25.replaceAll(\"  \", \"\")\n        var s27 = s26.replaceAll(\"  \", \"\")\n        var s28 = s27.replaceAll(\"  \", \"\")\n        var s29 = s28.replaceAll(\"  \", \"\")\n        var s30 = s29.replaceAll(\"  \", \"\")\n        var s31 = s30.replaceAll(\"  \", \"\")\n        var s32 = s31.replaceAll(\"  \", \"\")\n        var s33\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293374,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8my6jea6.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8my6jea6.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var spaces = 0\n        var space = false\n        for (i <- 0 until text.length) {\n            if (text[i] == ' ') {\n                if (space) {\n                    result += '-'\n                    space = false\n                } else {\n                    result += '_'\n                    space = true\n                }\n                spaces += 1\n            } else {\n                result += text[i]\n                space = false\n            }\n        }\n        if (spaces > 2) {\n            result = result.replaceAll(\"-\", \"_\")\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293376,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4c2cwt9n.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mif\u001b[0m (text[\u001b[35mi\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4c2cwt9n.scala:30:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                result += text[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4c2cwt9n.scala:30:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                result += text[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"-\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpf_uvnhdx.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpf_uvnhdx.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"-\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp829g2mke.scala:55:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        text = text.replaceAll(\"  \n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp829g2mke.scala:57:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:18:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:19:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:20:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation av",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293376,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpowdvpc87.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"_\")\n        var text5 = text4.replaceAll(\"  \", \"_\")\n        var text6 = text5.replaceAll(\"  \", \"_\")\n        var text7 = text6.replaceAll(\"  \", \"_\")\n        var text8 = text7.replaceAll(\"  \", \"_\")\n        var text9 = text8.replaceAll(\"  \", \"_\")\n        var text10 = text9.replaceAll(\"  \", \"_\")\n        var text11 = text10.replaceAll(\"  \", \"_\")\n        var text12 = text11.replaceAll(\"  \", \"_\")\n        var text13 = text12.replaceAll(\"  \", \"_\")\n        var text14 = text13.replaceAll(\"  \", \"_\")\n        var text15 = text14.replaceAll(\"  \", \"_\")\n        var text16 = text15.replaceAll(\"  \", \"_\")\n        var text17 = text16.replaceAll(\"  \", \"_\")\n        var text18 = text17.replaceAll(\"  \", \"_\")\n        var text19 = text18.replaceAll(\"  \", \"_\")\n        var text20 = text19.replaceAll(\"  \", \"_\")\n        var text21 = text20.replaceAll(\"  \", \"_\")\n        var text22 = text21.replaceAll(\"  \", \"_\")\n        var text23 = text22.replaceAll(\"  \", \"_\")\n        var text24 = text23.replaceAll(\"  \", \"_\")\n        var text25 = text24.replaceAll(\"  \", \"_\")\n        var text26 = text25.replaceAll(\"  \", \"_\")\n        var text27 = text26.replaceAll(\"  \", \"_\")\n        var text28 = text27.replaceAll(\"  \", \"_\")\n        var text29 = text28.replaceAll(\"  \", \"_\")\n        var text30 = text29.replaceAll(\"  \", \"_\")\n        var text31 = text30.replaceAll(\"  \", \"_\")\n        var text32 = text31.replaceAll(\"  \", \"_\")\n        var text33 = text32.replaceAll(\"  \", \"_\")\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpp1scovkp.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1scovkp.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        text = text.replaceAll(\"  \n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp829g2mke.scala:55:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        text = text.replaceAll(\"  \n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp829g2mke.scala:57:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:18:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:19:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp829g2mke.scala:20:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation av",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < text.length) {\n            var c = text.charAt(i)\n            if (c == ' ') {\n                result += '_'\n            } else {\n                result += c\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293374,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpycbmnqs8.scala:33)\n\tat Problem.main(tmpycbmnqs8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"-\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:18:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:20:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"-\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < text.length) {\n            if (text.charAt(i) == ' ') {\n                result += '_'\n            } else {\n                result += text.charAt(i)\n            }\n            i = i + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptpu0mxlo.scala:32)\n\tat Problem.main(tmptpu0mxlo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"_\")\n        var text5 = text4.replaceAll(\"  \", \"_\")\n        var text6 = text5.replaceAll(\"  \", \"_\")\n        var text7 = text6.replaceAll(\"  \", \"_\")\n        var text8 = text7.replaceAll(\"  \", \"_\")\n        var text9 = text8.replaceAll(\"  \", \"_\")\n        var text10 = text9.replaceAll(\"  \", \"_\")\n        var text11 = text10.replaceAll(\"  \", \"_\")\n        var text12 = text11.replaceAll(\"  \", \"_\")\n        var text13 = text12.replaceAll(\"  \", \"_\")\n        var text14 = text13.replaceAll(\"  \", \"_\")\n        var text15 = text14.replaceAll(\"  \", \"_\")\n        var text16 = text15.replaceAll(\"  \", \"_\")\n        var text17 = text16.replaceAll(\"  \", \"_\")\n        var text18 = text17.replaceAll(\"  \", \"_\")\n        var text19 = text18.replaceAll(\"  \", \"_\")\n        var text20 = text19.replaceAll(\"  \", \"_\")\n        var text21 = text20.replaceAll(\"  \", \"_\")\n        var text22 = text21.replaceAll(\"  \", \"_\")\n        var text23 = text22.replaceAll(\"  \", \"_\")\n        var text24 = text23.replaceAll(\"  \", \"_\")\n        var text25 = text24.replaceAll(\"  \", \"_\")\n        var text26 = text25.replaceAll(\"  \", \"_\")\n        var text27 = text26.replaceAll(\"  \", \"_\")\n        var text28 = text27.replaceAll(\"  \", \"_\")\n        var text29 = text28.replaceAll(\"  \", \"_\")\n        var text30 = text29.replaceAll(\"  \", \"_\")\n        var text31 = text30.replaceAll(\"  \", \"_\")\n        var text32 = text31.replaceAll(\"  \", \"_\")\n        var text33 = text32.replaceAll(\"  \", \"_\")\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpp1scovkp.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1scovkp.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \", \"_\")\n        var i = 0\n        while (i < s.length - 1) {\n            if (s[i] == ' ' && s[i + 1] == ' ') {\n                s = s.substring(0, i) + '-' + s.substring(i + 2)\n                i = i + 2\n            } else {\n                i = i + 1\n            }\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf9h2d5zh.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (s[\u001b[35mi\u001b[0m] == \u001b[31m' '\u001b[0m && s[\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[31m1\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var lastSpace = -1\n        var lastSpaceIndex = -1\n        for (i <- 0 until text.length) {\n            if (text[i] == ' ') {\n                if (lastSpaceIndex == -1) {\n                    lastSpace = i\n                    lastSpaceIndex = i\n                } else {\n                    result = result + text[lastSpaceIndex:i] + '_'\n                    lastSpace = -1\n                    lastSpaceIndex = -1\n                }\n            } else {\n                if (lastSpaceIndex != -1) {\n                    result = result + text[lastSpaceIndex:i] + '-'\n                    lastSpace = -1\n                    lastSpaceIndex = -1\n                }\n            }\n        }\n        if (lastSpaceIndex != -1) {\n            result = result + text[lastSpaceIndex:]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293377,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr83ba6jy.scala:25:57 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                    result = result + text[\u001b[35mlastSpaceIndex\u001b[0m:i] + \u001b[31m'_'\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             ']' expected, but ':' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr83ba6jy.scala:31:57 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                    result = result + text[\u001b[35mlastSpaceIndex\u001b[0m:i] + \u001b[31m'-'\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             ']' expected, but ':' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr83ba6jy.scala:38:49 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m            result = result + text[\u001b[35mlastSpaceIndex\u001b[0m:]\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             ']' expected, but ':' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr83ba6jy.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mif\u001b[0m (text[\u001b[35mi\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        if (text.contains(\"  \")) {\n            text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293374,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9cvgl_zq.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9cvgl_zq.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9cvgl_zq.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9cvgl_zq.scala:22:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9cvgl_zq.scala:25:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9cvgl_zq.scala:28:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"__\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var index = 0\n        var lastIndex = 0\n        while (index < text.length) {\n            if (text[index] == ' ') {\n                if (lastIndex < index) {\n                    result += text[lastIndex:index]\n                }\n                result += '_'\n                lastIndex = index + 1\n            } else {\n                lastIndex = index\n            }\n            index += 1\n        }\n        if (lastIndex < index) {\n            result += text[lastIndex:index]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps289p6pv.scala:22:44 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                    result += text[\u001b[35mlastIndex\u001b[0m:index]\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            ']' expected, but ':' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps289p6pv.scala:32:36 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            result += text[\u001b[35mlastIndex\u001b[0m:index]\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    ']' expected, but ':' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps289p6pv.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mif\u001b[0m (text[\u001b[35mindex\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type index\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps289p6pv.scala:22:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                    result += text[\u001b[35mlastIndex\u001b[0m:index]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps289p6pv.scala:32:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            result += text[\u001b[35mlastIndex\u001b[0m:index]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text.contains(\" \")) {\n            var spaces = text.split(\" \")\n            var newText = \"\"\n            for (i <- 0 to spaces.length - 1) {\n                if (spaces[i].length() > 1) {\n                    newText += spaces[i].replaceAll(\" \", \"_\")\n                } else {\n                    newText += spaces[i]\n                }\n                if (i < spaces.length - 1) {\n                    newText += \"-\"\n                }\n            }\n            return newText\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293381,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbn1n2at7.scala:20:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                \u001b[33mif\u001b[0m (spaces[\u001b[35mi\u001b[0m].length() > \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbn1n2at7.scala:21:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    newText += spaces[\u001b[35mi\u001b[0m].replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbn1n2at7.scala:21:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    newText += spaces[\u001b[35mi\u001b[0m].replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbn1n2at7.scala:23:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                    newText += spaces[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbn1n2at7.scala:23:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                    newText += spaces[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        if (text3.length() > 2) {\n            var text4 = text3.replaceAll(\"  \", \"-\")\n            return text4\n        } else {\n            return text3\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293381,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppxzread4.scala:29)\n\tat Problem.main(tmppxzread4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \", \"_\")\n        var i = 0\n        while (i < s.length - 1) {\n            if (s.charAt(i) == ' ' && s.charAt(i + 1) == ' ') {\n                s = s.substring(0, i) + \"_\" + s.substring(i + 2)\n                i = 0\n            } else {\n                i += 1\n            }\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq2t_t7k6.scala:32)\n\tat Problem.main(tmpq2t_t7k6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293376,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpowdvpc87.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        if (text2.contains(\"  \")) {\n            var text3 = text2.replaceAll(\"  \", \"__\")\n            if (text3.contains(\"  \")) {\n                var text4 = text3.replaceAll(\"  \", \"__\")\n                if (text4.contains(\"  \")) {\n                    var text5 = text4.replaceAll(\"  \", \"__\")\n                    if (text5.contains(\"  \")) {\n                        var text6 = text5.replaceAll(\"  \", \"__\")\n                        if (text6.contains(\"  \")) {\n                            var text7 = text6.replaceAll(\"  \", \"__\")\n                            if (text7.contains(\"  \")) {\n                                var text8 = text7.replaceAll(\"  \", \"__\")\n                                if (text8.contains(\"  \")) {\n                                    var text9 = text8.replaceAll(\"  \", \"__\")\n                                    if (text9.contains(\"  \")) {\n                                        var text10 = text9.replaceAll(\"  \", \"__\")\n                                        if (text10.contains(\"  \")) {\n                                            var text11 = text10.replaceAll(\"  \", \"__\")\n                                            if (text11.contains(\"  \")) {\n                                                var text12 = text11.replaceAll(\"  \", \"__\")\n                                                if (text12.contains(\"  \")) {\n                                                    var text13 = text12.replaceAll(\"  \", \"__\")\n                                                    if (text13.contains(\"  \")) {\n                                                        var text14 = text13.replaceAll(\"  \", \"__\")\n                                                        if (text14.contains(\"  \")) {\n                                                            var text15 = text14.replaceAll(\"  \", \"__\")\n                                                            if (text15.contains(\"  \")) {\n                                                                var text16 = text15.replaceAll(\"  \", \"__\")\n                                                                if (text16.contains(\"  \")) {\n                               \n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293378,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1lacy7ip.scala:57:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1lacy7ip.scala:17:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mif\u001b[0m (text2.contains(\u001b[31m\"  \"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m18 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mtext3\u001b[0m = text2.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (text3.contains(\u001b[31m\"  \"\u001b[0m)) {\n\u001b[31m20 |\u001b[0m                \u001b[33mvar\u001b[0m \u001b[36mtext4\u001b[0m = text3.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m21 |\u001b[0m                \u001b[33mif\u001b[0m (text4.contains(\u001b[31m\"  \"\u001b[0m)) {\n\u001b[31m22 |\u001b[0m                    \u001b[33mvar\u001b[0m \u001b[36mtext5\u001b[0m = text4.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m23 |\u001b[0m                    \u001b[33mif\u001b[0m (text5.contains(\u001b[31m\"  \"\u001b[0m)) {\n\u001b[31m24 |\u001b[0m                        \u001b[33mvar\u001b[0m \u001b[36mtext6\u001b[0m = text5.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m25 |\u001b[0m                        \u001b[33mif\u001b[0m (text6.contains(\u001b[31m\"  \"\u001b[0m)) {\n\u001b[31m26 |\u001b[0m                            \u001b[33mvar\u001b[0m \u001b[36mtext7\u001b[0m = text6.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m27 |\u001b[0m                            \u001b[33mif\u001b[0m (text7.contains(\u001b[31m\"  \"\u001b[0m)) {\n\u001b[31m28 |\u001b[0m                                \u001b[33mvar\u001b[0m \u001b[36mtext8\u001b[0m = text7.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m29 |\u001b[0m                                \u001b[33mif\u001b[0m (text8.contains(\u001b[31m\"  \"\u001b[0m)) {\n\u001b[31m30 |\u001b[0m                                    \u001b[33mvar\u001b[0m \u001b[36mtext9\u001b[0m = text8.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m31 |\u001b[0m                                    \u001b[33mif\u001b[0m (text9.contains(\u001b[31m\"  \"\u001b[0m)) {\n\u001b[31m32 |\u001b[0m                                        \u001b[33mvar\u001b[0m \u001b[36mtext10\u001b[0m = text9.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m33 |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"-\")\n        return text4\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0j96lj1z.scala:25)\n\tat Problem.main(tmp0j96lj1z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \", \"_\")\n        if (s.contains(\"  \")) {\n            s = s.replaceAll(\"  \", \"__\")\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293381,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu5s35z3v.scala:26)\n\tat Problem.main(tmpu5s35z3v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \",\"_\")\n        if (s.contains(\"  \")) {\n            var s2 = s.replaceAll(\"  \",\"-\")\n            return s2\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293382,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_9g35uic.scala:27)\n\tat Problem.main(tmp_9g35uic.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var index = 0\n        var lastIndex = 0\n        while (index < text.length) {\n            var currentIndex = text.indexOf(\" \", index)\n            if (currentIndex == -1) {\n                result += text.substring(lastIndex, index)\n                index = text.length\n            } else {\n                result += text.substring(lastIndex, currentIndex)\n                if (currentIndex - lastIndex > 2) {\n                    result += \"_\"\n                }\n                index = currentIndex + 1\n            }\n            lastIndex = index\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293382,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7m6d5xtx.scala:36)\n\tat Problem.main(tmp7m6d5xtx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpcv7jll.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \",\"_\")\n        var text3 = text2.replaceAll(\"  \",\"_\")\n        var text4 = text3.replaceAll(\"  \",\"-\")\n        return text4\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbatb_ug0.scala:25)\n\tat Problem.main(tmpbatb_ug0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \",\"_\")\n        if (s.contains(\"  \")) {\n            var s2 = s.replaceAll(\"  \",\"-\")\n            return s2\n        } else {\n            return s\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293382,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjxk6vvbw.scala:28)\n\tat Problem.main(tmpjxk6vvbw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"-\")\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293382,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu_r3f73c.scala:24)\n\tat Problem.main(tmpu_r3f73c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \",\"_\")\n        if (s.contains(\"  \")) {\n            s = s.replaceAll(\"  \",\"-\")\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz47igfug.scala:26)\n\tat Problem.main(tmpz47igfug.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var lastSpace = -1\n        var lastSpaceIndex = -1\n        var lastNonSpaceIndex = -1\n        var lastNonSpaceIndex2 = -1\n        var lastNonSpaceIndex3 = -1\n        var lastNonSpaceIndex4 = -1\n        var lastNonSpaceIndex5 = -1\n        var lastNonSpaceIndex6 = -1\n        var lastNonSpaceIndex7 = -1\n        var lastNonSpaceIndex8 = -1\n        var lastNonSpaceIndex9 = -1\n        var lastNonSpaceIndex10 = -1\n        var lastNonSpaceIndex11 = -1\n        var lastNonSpaceIndex12 = -1\n        var lastNonSpaceIndex13 = -1\n        var lastNonSpaceIndex14 = -1\n        var lastNonSpaceIndex15 = -1\n        var lastNonSpaceIndex16 = -1\n        var lastNonSpaceIndex17 = -1\n        var lastNonSpaceIndex18 = -1\n        var lastNonSpaceIndex19 = -1\n        var lastNonSpaceIndex20 = -1\n        var lastNonSpaceIndex21 = -1\n        var lastNonSpaceIndex22 = -1\n        var lastNonSpaceIndex23 = -1\n        var lastNonSpaceIndex24 = -1\n        var lastNonSpaceIndex25 = -1\n        var lastNonSpaceIndex26 = -1\n        var lastNonSpaceIndex27 = -1\n        var lastNonSpaceIndex28 = -1\n        var lastNonSpaceIndex29 = -1\n        var lastNonSpaceIndex30 = -1\n        var lastNonSpaceIndex31 = -1\n        var lastNonSpaceIndex32 = -1\n        var lastNonSpaceIndex33 = -1\n        var lastNonSpaceIndex34 = -1\n        var lastNonSpaceIndex35 = -1\n        var lastNonSpaceIndex36 = -1\n        var lastNonSpaceIndex37 = -1\n        var lastNonSpaceIndex38 = -1\n        var lastNonSpaceIndex39 = -1\n        var lastNonSpaceIndex40 = -1\n        var lastNonSpaceIndex41 = -1\n        var lastNonSpaceIndex42 = -1\n        var lastNonSpaceIndex43 = -1\n        var lastNonSpaceIndex44 = -1\n        var lastNonSpaceIndex\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsj4t5ywi.scala:64:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsj4t5ywi.scala:64:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"__\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \", \"_\")\n        var i = 0\n        while (i < s.length - 1) {\n            if (s.charAt(i) == ' ' && s.charAt(i + 1) == ' ') {\n                s = s.substring(0, i) + '-' + s.substring(i + 2)\n                i = i + 1\n            } else {\n                i = i + 1\n            }\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293382,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr89fo867.scala:32)\n\tat Problem.main(tmpr89fo867.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"_\")\n        var text5 = text4.replaceAll(\"  \", \"_\")\n        var text6 = text5.replaceAll(\"  \", \"_\")\n        var text7 = text6.replaceAll(\"  \", \"_\")\n        var text8 = text7.replaceAll(\"  \", \"_\")\n        var text9 = text8.replaceAll(\"  \", \"_\")\n        var text10 = text9.replaceAll(\"  \", \"_\")\n        var text11 = text10.replaceAll(\"  \", \"_\")\n        var text12 = text11.replaceAll(\"  \", \"_\")\n        var text13 = text12.replaceAll(\"  \", \"_\")\n        var text14 = text13.replaceAll(\"  \", \"_\")\n        var text15 = text14.replaceAll(\"  \", \"_\")\n        var text16 = text15.replaceAll(\"  \", \"_\")\n        var text17 = text16.replaceAll(\"  \", \"_\")\n        var text18 = text17.replaceAll(\"  \", \"_\")\n        var text19 = text18.replaceAll(\"  \", \"_\")\n        var text20 = text19.replaceAll(\"  \", \"_\")\n        var text21 = text20.replaceAll(\"  \", \"_\")\n        var text22 = text21.replaceAll(\"  \", \"_\")\n        var text23 = text22.replaceAll(\"  \", \"_\")\n        var text24 = text23.replaceAll(\"  \", \"_\")\n        var text25 = text24.replaceAll(\"  \", \"_\")\n        var text26 = text25.replaceAll(\"  \", \"_\")\n        var text27 = text26.replaceAll(\"  \", \"_\")\n        var text28 = text27.replaceAll(\"  \", \"_\")\n        var text29 = text28.replaceAll(\"  \", \"_\")\n        var text30 = text29.replaceAll(\"  \", \"_\")\n        var text31 = text30.replaceAll(\"  \", \"_\")\n        var text32 = text31.replaceAll(\"  \", \"_\")\n        var text33 = text32.replaceAll(\"  \", \"_\")\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpp1scovkp.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1scovkp.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\"\\\\s+\", \"_\")\n        if (s.contains(\"  \")) {\n            s = s.replaceAll(\"\\\\s+\", \"-\")\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293383,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvtlyoeje.scala:25)\n\tat Problem.main(tmpvtlyoeje.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text_ = text.replaceAll(\" \", \"_\")\n        var text__ = text_.replaceAll(\"  \", \"_\")\n        var text___ = text__.replaceAll(\"  \", \"_\")\n        var text____ = text___.replaceAll(\"  \", \"_\")\n        var text_____ = text____.replaceAll(\"  \", \"_\")\n        var text______ = text_____.replaceAll(\"  \", \"_\")\n        var text_______ = text______.replaceAll(\"  \", \"_\")\n        var text________ = text_______.replaceAll(\"  \", \"_\")\n        var text_________ = text________.replaceAll(\"  \", \"_\")\n        var text__________ = text_________.replaceAll(\"  \", \"_\")\n        var text___________ = text__________.replaceAll(\"  \", \"_\")\n        var text____________ = text___________.replaceAll(\"  \", \"_\")\n        var text_____________ = text____________.replaceAll(\"  \", \"_\")\n        var text______________ = text_____________.replaceAll(\"  \", \"_\")\n        var text_______________ = text______________.replaceAll(\"  \", \"_\")\n        var text________________ = text_______________.replaceAll(\"  \", \"_\")\n        var text_________________ = text________________.replaceAll(\"  \", \"_\")\n        var text__________________ = text_________________.replaceAll(\"  \", \"_\")\n        var text___________________ = text__________________.replaceAll(\"  \", \"_\")\n        var text____________________ = text___________________.replaceAll(\"  \", \"_\")\n        var text_____________________ = text____________________.replaceAll(\"  \", \"_\")\n        var text______________________ = text_____________________.replaceAll(\"  \", \"_\")\n        var text_______________________ = text______________________.replaceAll(\"  \", \"_\")\n        var text________________________ = text_______________________.replaceAll(\"  \", \"_\")\n        var text_________________________ = text________________________.replaceAll(\"  \", \"_\")\n        var text__________________________ = text_________________________.replaceAll(\"  \", \"_\")\n        var text___________________________ = text__________________________.replaceAll(\"  \", \"_\")\n        var text____________________________ = text___________________________.replaceAll(\"  \", \"_\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp17sb87ta.scala:43:96 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mtext____________________________\u001b[0m = text___________________________.replaceAll(\u001b[31m\"  \"\u001b[0m, \"_\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp17sb87ta.scala:45:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp17sb87ta.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp17sb87ta.scala:45:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: _def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \",\"_\")\n        if (s.contains(\"  \")) {\n            s = s.replaceAll(\"  \",\"-\")\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz47igfug.scala:26)\n\tat Problem.main(tmpz47igfug.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \",\"_\")\n        if (s.contains(\"  \")) {\n            s = s.replaceAll(\"  \",\"-\")\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz47igfug.scala:26)\n\tat Problem.main(tmpz47igfug.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text.contains(\" \")) {\n            var spaces = text.split(\" \")\n            var result = \"\"\n            for (i <- 0 until spaces.length) {\n                if (i == 0) {\n                    result = spaces[i]\n                } else {\n                    if (spaces[i].length() > 1) {\n                        result = result + \"_\" + spaces[i]\n                    } else {\n                        result = result + spaces[i]\n                    }\n                }\n            }\n            return result\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293381,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0nsnsdxf.scala:21:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    result = spaces[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0nsnsdxf.scala:23:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                    \u001b[33mif\u001b[0m (spaces[\u001b[35mi\u001b[0m].length() > \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0nsnsdxf.scala:24:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                        result = result + \u001b[31m\"_\"\u001b[0m + spaces[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0nsnsdxf.scala:26:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                        result = result + spaces[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"--\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp6j23epay.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp6j23epay.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"--\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \", \"_\")\n        var i = 0\n        while (i < s.length - 1) {\n            if (s.charAt(i) == ' ' && s.charAt(i + 1) == ' ') {\n                s = s.substring(0, i) + \"_\" + s.substring(i + 1)\n                i = 0\n            } else {\n                i = i + 1\n            }\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293383,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphgtj12j3.scala:32)\n\tat Problem.main(tmphgtj12j3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        if (text3.length() > 2) {\n            var text4 = text3.replaceAll(\"  \", \"-\")\n            return text4\n        } else {\n            return text3\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293381,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppxzread4.scala:29)\n\tat Problem.main(tmppxzread4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < text.length) {\n            if (text[i] == ' ') {\n                result += '_'\n            } else {\n                result += text[i]\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293365,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0mcki67d.scala:19:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (text[\u001b[35mi\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0mcki67d.scala:22:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result += text[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0mcki67d.scala:22:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result += text[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"-\")\n        return text4\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0j96lj1z.scala:25)\n\tat Problem.main(tmp0j96lj1z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"-\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpf_uvnhdx.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpf_uvnhdx.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"-\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"-\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:18:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:20:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"-\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"__\")\n            .replaceAll(\"  \", \"___\")\n            .replaceAll(\"  \", \"____\")\n            .replaceAll(\"  \", \"_____\")\n            .replaceAll(\"  \", \"______\")\n            .replaceAll(\"  \", \"_______\")\n            .replaceAll(\"  \", \"________\")\n            .replaceAll(\"  \", \"_________\")\n            .replaceAll(\"  \", \"__________\")\n            .replaceAll(\"  \", \"___________\")\n            .replaceAll(\"  \", \"____________\")\n            .replaceAll(\"  \", \"_____________\")\n            .replaceAll(\"  \", \"______________\")\n            .replaceAll(\"  \", \"_______________\")\n            .replaceAll(\"  \", \"________________\")\n            .replaceAll(\"  \", \"_________________\")\n            .replaceAll(\"  \", \"__________________\")\n            .replaceAll(\"  \", \"___________________\")\n            .replaceAll(\"  \", \"____________________\")\n            .replaceAll(\"  \", \"_____________________\")\n            .replaceAll(\"  \", \"______________________\")\n            .replaceAll(\"  \", \"_______________________\")\n            .replaceAll(\"  \", \"________________________\")\n            .replaceAll(\"  \", \"_________________________\")\n            .replaceAll(\"  \", \"__________________________\")\n            .replaceAll(\"  \", \"___________________________\")\n            .replaceAll(\"  \", \"____________________________\")\n            .replaceAll(\"  \", \"_____________________________\")\n            .replaceAll(\"  \", \"______________________________\")\n            .replaceAll(\"  \", \"_______________________________\")\n            .replaceAll(\"  \", \"________________________________\")\n            .replaceAll(\"  \", \"_________________________________\")\n            .replaceAll(\"  \", \"__________________________________\")\n            .replaceAll(\"  \", \"___________________________________\")\n            .replaceAll(\"  \", \"____________________________________\")\n            .replaceAll(\"  \", \"_____________________________________\")\n            .replaceAll(\"  \", \"______________________________________\")\n            .replaceAll(\"  \", \"_______________________________________\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293381,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpdzzdw55g.scala:55:30 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m            .replaceAll(\u001b[31m\"  \"\u001b[0m, \"_______________________________________\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdzzdw55g.scala:57:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdzzdw55g.scala:57:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: _______________________________________def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"-\")\n        return text4\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0j96lj1z.scala:25)\n\tat Problem.main(tmp0j96lj1z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < text.length) {\n            var c = text.charAt(i)\n            if (c == ' ') {\n                result += '_'\n            } else {\n                result += c\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293374,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpycbmnqs8.scala:33)\n\tat Problem.main(tmpycbmnqs8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"-\")\n        return text4\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0j96lj1z.scala:25)\n\tat Problem.main(tmp0j96lj1z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"_\")\n        var text5 = text4.replaceAll(\"  \", \"_\")\n        var text6 = text5.replaceAll(\"  \", \"_\")\n        var text7 = text6.replaceAll(\"  \", \"_\")\n        var text8 = text7.replaceAll(\"  \", \"_\")\n        var text9 = text8.replaceAll(\"  \", \"_\")\n        var text10 = text9.replaceAll(\"  \", \"_\")\n        var text11 = text10.replaceAll(\"  \", \"_\")\n        var text12 = text11.replaceAll(\"  \", \"_\")\n        var text13 = text12.replaceAll(\"  \", \"_\")\n        var text14 = text13.replaceAll(\"  \", \"_\")\n        var text15 = text14.replaceAll(\"  \", \"_\")\n        var text16 = text15.replaceAll(\"  \", \"_\")\n        var text17 = text16.replaceAll(\"  \", \"_\")\n        var text18 = text17.replaceAll(\"  \", \"_\")\n        var text19 = text18.replaceAll(\"  \", \"_\")\n        var text20 = text19.replaceAll(\"  \", \"_\")\n        var text21 = text20.replaceAll(\"  \", \"_\")\n        var text22 = text21.replaceAll(\"  \", \"_\")\n        var text23 = text22.replaceAll(\"  \", \"_\")\n        var text24 = text23.replaceAll(\"  \", \"_\")\n        var text25 = text24.replaceAll(\"  \", \"_\")\n        var text26 = text25.replaceAll(\"  \", \"_\")\n        var text27 = text26.replaceAll(\"  \", \"_\")\n        var text28 = text27.replaceAll(\"  \", \"_\")\n        var text29 = text28.replaceAll(\"  \", \"_\")\n        var text30 = text29.replaceAll(\"  \", \"_\")\n        var text31 = text30.replaceAll(\"  \", \"_\")\n        var text32 = text31.replaceAll(\"  \", \"_\")\n        var text33 = text32.replaceAll(\"  \", \"_\")\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpp1scovkp.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1scovkp.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"-\")\n        return text4\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0j96lj1z.scala:25)\n\tat Problem.main(tmp0j96lj1z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"__\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var textLength = text.length\n        var i = 0\n        while (i < textLength) {\n            var c = text.charAt(i)\n            if (c == ' ') {\n                result = result + '_'\n            } else {\n                result = result + c\n            }\n            i = i + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293384,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_56mkndi.scala:34)\n\tat Problem.main(tmp_56mkndi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"-\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:18:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:20:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"-\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"_\")\n        var text5 = text4.replaceAll(\"  \", \"_\")\n        var text6 = text5.replaceAll(\"  \", \"_\")\n        var text7 = text6.replaceAll(\"  \", \"_\")\n        var text8 = text7.replaceAll(\"  \", \"_\")\n        var text9 = text8.replaceAll(\"  \", \"_\")\n        var text10 = text9.replaceAll(\"  \", \"_\")\n        var text11 = text10.replaceAll(\"  \", \"_\")\n        var text12 = text11.replaceAll(\"  \", \"_\")\n        var text13 = text12.replaceAll(\"  \", \"_\")\n        var text14 = text13.replaceAll(\"  \", \"_\")\n        var text15 = text14.replaceAll(\"  \", \"_\")\n        var text16 = text15.replaceAll(\"  \", \"_\")\n        var text17 = text16.replaceAll(\"  \", \"_\")\n        var text18 = text17.replaceAll(\"  \", \"_\")\n        var text19 = text18.replaceAll(\"  \", \"_\")\n        var text20 = text19.replaceAll(\"  \", \"_\")\n        var text21 = text20.replaceAll(\"  \", \"_\")\n        var text22 = text21.replaceAll(\"  \", \"_\")\n        var text23 = text22.replaceAll(\"  \", \"_\")\n        var text24 = text23.replaceAll(\"  \", \"_\")\n        var text25 = text24.replaceAll(\"  \", \"_\")\n        var text26 = text25.replaceAll(\"  \", \"_\")\n        var text27 = text26.replaceAll(\"  \", \"_\")\n        var text28 = text27.replaceAll(\"  \", \"_\")\n        var text29 = text28.replaceAll(\"  \", \"_\")\n        var text30 = text29.replaceAll(\"  \", \"_\")\n        var text31 = text30.replaceAll(\"  \", \"_\")\n        var text32 = text31.replaceAll(\"  \", \"_\")\n        var text33 = text32.replaceAll(\"  \", \"_\")\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpp1scovkp.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1scovkp.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzqgdfx0c.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzqgdfx0c.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var lastSpace = -1\n        var lastSpace2 = -1\n        var lastSpace3 = -1\n        var lastSpace4 = -1\n        var lastSpace5 = -1\n        var lastSpace6 = -1\n        var lastSpace7 = -1\n        var lastSpace8 = -1\n        var lastSpace9 = -1\n        var lastSpace10 = -1\n        var lastSpace11 = -1\n        var lastSpace12 = -1\n        var lastSpace13 = -1\n        var lastSpace14 = -1\n        var lastSpace15 = -1\n        var lastSpace16 = -1\n        var lastSpace17 = -1\n        var lastSpace18 = -1\n        var lastSpace19 = -1\n        var lastSpace20 = -1\n        var lastSpace21 = -1\n        var lastSpace22 = -1\n        var lastSpace23 = -1\n        var lastSpace24 = -1\n        var lastSpace25 = -1\n        var lastSpace26 = -1\n        var lastSpace27 = -1\n        var lastSpace28 = -1\n        var lastSpace29 = -1\n        var lastSpace30 = -1\n        var lastSpace31 = -1\n        var lastSpace32 = -1\n        var lastSpace33 = -1\n        var lastSpace34 = -1\n        var lastSpace35 = -1\n        var lastSpace36 = -1\n        var lastSpace37 = -1\n        var lastSpace38 = -1\n        var lastSpace39 = -1\n        var lastSpace40 = -1\n        var lastSpace41 = -1\n        var lastSpace42 = -1\n        var lastSpace43 = -1\n        var lastSpace44 = -1\n        var lastSpace45 = -1\n        var lastSpace46 = -1\n        var lastSpace47 = -1\n        var lastSpace48 = -1\n        var lastSpace49 = -1\n        var lastSpace50 = -1\n        var lastSpace51 = -1\n        var lastSpace52 = -1\n        var lastSpace53 = -1\n        var lastSpace54 = -1\n        var lastSpace55 = -1\n        var lastSpace56 = -1\n        var last\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293384,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp09r_8pff.scala:74:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp09r_8pff.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        text = text.replaceAll(\"  \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"-\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:18:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgcjlewfd.scala:20:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"-\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\"\\\\s+\", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"(\\\\s){2,}\", \"_\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmphjxa2d0h.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\"\\\\s+\"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmphjxa2d0h.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"(\\\\s){2,}\"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \",\"_\")\n        if (s.contains(\"  \")) {\n            var s2 = s.replaceAll(\"  \",\"-\")\n            s = s2\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293371,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuaia6a74.scala:27)\n\tat Problem.main(tmpuaia6a74.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"-\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpcv7jll.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"_\")\n        var text5 = text4.replaceAll(\"  \", \"_\")\n        var text6 = text5.replaceAll(\"  \", \"_\")\n        var text7 = text6.replaceAll(\"  \", \"_\")\n        var text8 = text7.replaceAll(\"  \", \"_\")\n        var text9 = text8.replaceAll(\"  \", \"_\")\n        var text10 = text9.replaceAll(\"  \", \"_\")\n        var text11 = text10.replaceAll(\"  \", \"_\")\n        var text12 = text11.replaceAll(\"  \", \"_\")\n        var text13 = text12.replaceAll(\"  \", \"_\")\n        var text14 = text13.replaceAll(\"  \", \"_\")\n        var text15 = text14.replaceAll(\"  \", \"_\")\n        var text16 = text15.replaceAll(\"  \", \"_\")\n        var text17 = text16.replaceAll(\"  \", \"_\")\n        var text18 = text17.replaceAll(\"  \", \"_\")\n        var text19 = text18.replaceAll(\"  \", \"_\")\n        var text20 = text19.replaceAll(\"  \", \"_\")\n        var text21 = text20.replaceAll(\"  \", \"_\")\n        var text22 = text21.replaceAll(\"  \", \"_\")\n        var text23 = text22.replaceAll(\"  \", \"_\")\n        var text24 = text23.replaceAll(\"  \", \"_\")\n        var text25 = text24.replaceAll(\"  \", \"_\")\n        var text26 = text25.replaceAll(\"  \", \"_\")\n        var text27 = text26.replaceAll(\"  \", \"_\")\n        var text28 = text27.replaceAll(\"  \", \"_\")\n        var text29 = text28.replaceAll(\"  \", \"_\")\n        var text30 = text29.replaceAll(\"  \", \"_\")\n        var text31 = text30.replaceAll(\"  \", \"_\")\n        var text32 = text31.replaceAll(\"  \", \"_\")\n        var text33 = text32.replaceAll(\"  \", \"_\")\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpp1scovkp.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1scovkp.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"-\")\n        return text4\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0j96lj1z.scala:25)\n\tat Problem.main(tmp0j96lj1z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \", \"_\")\n        var s2 = s.replaceAll(\"  \", \"_\")\n        if (s2.length() > 2) {\n            s2 = s2.replaceAll(\"  \", \"-\")\n        }\n        return s2\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293385,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmbp4e9mt.scala:27)\n\tat Problem.main(tmpmbp4e9mt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzqgdfx0c.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzqgdfx0c.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var spaces = 0\n        var i = 0\n        while (i < text.length) {\n            if (text[i] == ' ') {\n                spaces += 1\n                if (spaces > 2) {\n                    result += '-'\n                }\n            } else {\n                result += text[i]\n                spaces = 0\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293386,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvkzhl3m0.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mif\u001b[0m (text[\u001b[35mi\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvkzhl3m0.scala:26:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                result += text[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvkzhl3m0.scala:26:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                result += text[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < text.length) {\n            if (text[i] == ' ') {\n                result += '_'\n            } else {\n                result += text[i]\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293365,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0mcki67d.scala:19:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (text[\u001b[35mi\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0mcki67d.scala:22:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result += text[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0mcki67d.scala:22:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result += text[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"-\")\n        return text4\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0j96lj1z.scala:25)\n\tat Problem.main(tmp0j96lj1z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \",\"_\")\n        var text3 = text2.replaceAll(\"  \",\"_\")\n        var text4 = text3.replaceAll(\"__\",\"-\")\n        return text4\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293387,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi5try6c_.scala:24)\n\tat Problem.main(tmpi5try6c_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text.contains(\" \")) {\n            var result = \"\"\n            var index = 0\n            while (index < text.length) {\n                var space = text.indexOf(\" \", index)\n                if (space == -1) {\n                    result += text.substring(index)\n                    break\n                } else {\n                    result += text.substring(index, space)\n                    if (space + 1 < text.length && text.charAt(space + 1) == \" \") {\n                        result += \"-\"\n                        index = space + 2\n                    } else {\n                        index = space + 1\n                    }\n                }\n            }\n            return result\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293387,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4v3cguvk.scala:23:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp4v3cguvk.scala:26:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                    \u001b[33mif\u001b[0m (space + \u001b[31m1\u001b[0m < text.length && text.charAt(space + \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \", \"_\")\n        var c = s.count(\" \")\n        if (c > 2) {\n            var t = s.replaceAll(\" \", \"-\")\n            return t\n        } else {\n            return s\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293387,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd_qbnsgh.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mc\u001b[0m = s.count(\u001b[31m\" \"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (\u001b[32m\" \"\u001b[0m : String)\n\u001b[31m   |\u001b[0m                        Required: Char => Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"--\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp6j23epay.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp6j23epay.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"--\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \",\"_\")\n        if (s.contains(\"  \")) {\n            var s2 = s.replaceAll(\"  \",\"-\")\n            return s2\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293382,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_9g35uic.scala:27)\n\tat Problem.main(tmp_9g35uic.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"__\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"__\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \",\"_\")\n        if (s.contains(\"  \")) {\n            var s2 = s.replaceAll(\"  \",\"-\")\n            return s2\n        } else {\n            return s\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293382,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjxk6vvbw.scala:28)\n\tat Problem.main(tmpjxk6vvbw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"_\")\n        var text5 = text4.replaceAll(\"  \", \"_\")\n        var text6 = text5.replaceAll(\"  \", \"_\")\n        var text7 = text6.replaceAll(\"  \", \"_\")\n        var text8 = text7.replaceAll(\"  \", \"_\")\n        var text9 = text8.replaceAll(\"  \", \"_\")\n        var text10 = text9.replaceAll(\"  \", \"_\")\n        var text11 = text10.replaceAll(\"  \", \"_\")\n        var text12 = text11.replaceAll(\"  \", \"_\")\n        var text13 = text12.replaceAll(\"  \", \"_\")\n        var text14 = text13.replaceAll(\"  \", \"_\")\n        var text15 = text14.replaceAll(\"  \", \"_\")\n        var text16 = text15.replaceAll(\"  \", \"_\")\n        var text17 = text16.replaceAll(\"  \", \"_\")\n        var text18 = text17.replaceAll(\"  \", \"_\")\n        var text19 = text18.replaceAll(\"  \", \"_\")\n        var text20 = text19.replaceAll(\"  \", \"_\")\n        var text21 = text20.replaceAll(\"  \", \"_\")\n        var text22 = text21.replaceAll(\"  \", \"_\")\n        var text23 = text22.replaceAll(\"  \", \"_\")\n        var text24 = text23.replaceAll(\"  \", \"_\")\n        var text25 = text24.replaceAll(\"  \", \"_\")\n        var text26 = text25.replaceAll(\"  \", \"_\")\n        var text27 = text26.replaceAll(\"  \", \"_\")\n        var text28 = text27.replaceAll(\"  \", \"_\")\n        var text29 = text28.replaceAll(\"  \", \"_\")\n        var text30 = text29.replaceAll(\"  \", \"_\")\n        var text31 = text30.replaceAll(\"  \", \"_\")\n        var text32 = text31.replaceAll(\"  \", \"_\")\n        var text33 = text32.replaceAll(\"  \", \"_\")\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpp1scovkp.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1scovkp.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \", \"_\")\n        var c = s.replaceAll(\"  \", \"_\")\n        if (c.length() > 2) {\n            s = c.replaceAll(\"  \", \"-\")\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293388,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_pbgglj6.scala:27)\n\tat Problem.main(tmp_pbgglj6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var lastSpace = -1\n        var lastSpace2 = -1\n        for (i <- 0 until text.length) {\n            if (text[i] == ' ') {\n                if (lastSpace == -1) {\n                    lastSpace = i\n                } else {\n                    if (lastSpace2 == -1) {\n                        lastSpace2 = i\n                    } else {\n                        if (lastSpace2 - lastSpace > 1) {\n                            result = result + \"_\"\n                            lastSpace2 = -1\n                        } else {\n                            result = result + \"-\"\n                            lastSpace2 = -1\n                        }\n                    }\n                    lastSpace = i\n                }\n            } else {\n                result = result + text[i]\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293386,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxl8nyrkn.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mif\u001b[0m (text[\u001b[35mi\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxl8nyrkn.scala:38:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m                result = result + text[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .replaceAll(\"  \", \"_\")\n            .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293376,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpowdvpc87.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var lastIndex = 0\n        var currentIndex = 0\n        while (currentIndex < text.length) {\n            if (text[currentIndex] == ' ') {\n                result += text[lastIndex:currentIndex] + '_'\n                lastIndex = currentIndex\n            }\n            currentIndex += 1\n        }\n        result += text[lastIndex:]\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293388,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp523tamkj.scala:21:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                result += text[\u001b[35mlastIndex\u001b[0m:currentIndex] + \u001b[31m'_'\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        ']' expected, but ':' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp523tamkj.scala:26:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        result += text[\u001b[35mlastIndex\u001b[0m:]\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                ']' expected, but ':' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp523tamkj.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mif\u001b[0m (text[\u001b[35mcurrentIndex\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type currentIndex\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp523tamkj.scala:21:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                result += text[\u001b[35mlastIndex\u001b[0m:currentIndex] + \u001b[31m'_'\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp523tamkj.scala:26:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        result += text[\u001b[35mlastIndex\u001b[0m:]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value += is not a member of String - did you mean String.!=?\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var index = 0\n        var lastIndex = 0\n        while (index < text.length) {\n            if (text[index] == ' ') {\n                result += text[lastIndex:index] + '_'\n                lastIndex = index + 1\n            }\n            index += 1\n        }\n        result += text[lastIndex:]\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293374,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4bqghv_4.scala:21:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                result += text[\u001b[35mlastIndex\u001b[0m:index] + \u001b[31m'_'\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        ']' expected, but ':' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4bqghv_4.scala:26:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        result += text[\u001b[35mlastIndex\u001b[0m:]\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                ']' expected, but ':' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4bqghv_4.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mif\u001b[0m (text[\u001b[35mindex\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type index\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4bqghv_4.scala:21:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                result += text[\u001b[35mlastIndex\u001b[0m:index] + \u001b[31m'_'\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4bqghv_4.scala:26:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        result += text[\u001b[35mlastIndex\u001b[0m:]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value += is not a member of String - did you mean String.!=?\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \",\"_\")\n        if (s.contains(\"  \")) {\n            var s2 = s.replaceAll(\"  \",\"-\")\n            return s2\n        } else {\n            return s\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293382,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjxk6vvbw.scala:28)\n\tat Problem.main(tmpjxk6vvbw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < text.length) {\n            if (text[i] == ' ') {\n                result += '_'\n            } else {\n                result += text[i]\n            }\n            i = i + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293388,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwd1oitcy.scala:19:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (text[\u001b[35mi\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwd1oitcy.scala:22:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result += text[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwd1oitcy.scala:22:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result += text[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"__\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"__\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \", \"_\")\n        var t = s.replaceAll(\"  \", \"_\")\n        var u = t.replaceAll(\"  \", \"\")\n        var v = u.replaceAll(\" \", \"-\")\n        return v\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293388,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptpnpdoiu.scala:26)\n\tat Problem.main(tmptpnpdoiu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text_ = text\n        var text_ = text_.replaceAll(\" \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \", \"_\")\n        var text_ = text_.replaceAll(\"  \n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpsazjz51q.scala:50:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mtext_\u001b[0m = text_.replaceAll(\"  \n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpsazjz51q.scala:52:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsazjz51q.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mtext_\u001b[0m = text_.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtext_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mtext_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsazjz51q.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mtext_\u001b[0m = text_.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtext_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mtext_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsazjz51q.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mtext_\u001b[0m = text_.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtext_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mtext_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Erro",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) {\n            return null\n        }\n        if (text.length() == 0) {\n            return \"\"\n        }\n        var result = \"\"\n        var lastChar = text[0]\n        var lastCharIsSpace = lastChar == ' '\n        var lastCharIsSpaceOrDash = lastChar == ' ' || lastChar == '-'\n        var lastCharIsDash = lastChar == '-'\n        var lastCharIsDashOrSpace = lastChar == '-' || lastChar == ' '\n        var lastCharIsSpaceOrDashOrDash = lastChar == ' ' || lastChar == '-' || lastChar == '-'\n        var lastCharIsSpaceOrDashOrDashOrSpace = lastChar == ' ' || lastChar == '-' || lastChar == '-' || lastChar == ' '\n        var lastCharIsSpaceOrDashOrDashOrDash = lastChar == ' ' || lastChar == '-' || lastChar == '-' || lastChar == '-' || lastChar == ' '\n        var lastCharIsSpaceOrDashOrDashOrDashOrSpace = lastChar == ' ' || lastChar == '-' || lastChar == '-' || lastChar == '-' || lastChar == ' '\n        var lastCharIsSpaceOrDashOrDashOrDashOrDash = lastChar == ' ' || lastChar == '-' || lastChar == '-' || lastChar == '-' || lastChar == '-' || lastChar == ' '\n        var lastCharIsSpaceOrDashOrDashOrDashOrDashOrSpace = lastChar == ' ' || lastChar == '-' || lastChar == '-' || lastChar == '-' || lastChar == '-' || lastChar == ' '\n        var lastCharIsSpaceOrDashOrDashOrDashOrDashOrDash = lastChar == ' ' || lastChar == '-' || lastChar == '-' || lastChar == '-' || lastChar == '-' || lastChar == '-' || lastChar == ' '\n        var lastCharIsSpaceOrDashOrDashOrDashOrDashOrDashOrSpace = lastChar == ' ' || lastChar == '-' || lastChar == '-' || lastChar == '-' || lastChar == '-' || lastChar == '-' || lastChar == ' '\n        var lastCharIsSpaceOrDashOrDashOrDashOrDashOr\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293388,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgjs1mvm9.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgjs1mvm9.scala:23:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlastChar\u001b[0m = text[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgjs1mvm9.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \",\"_\")\n        if (s.contains(\"  \")) {\n            s = s.replaceAll(\"  \",\"-\")\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz47igfug.scala:26)\n\tat Problem.main(tmpz47igfug.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var text2 = text.replaceAll(\" \", \"_\")\n        var text3 = text2.replaceAll(\"  \", \"_\")\n        var text4 = text3.replaceAll(\"  \", \"_\")\n        var text5 = text4.replaceAll(\"  \", \"_\")\n        var text6 = text5.replaceAll(\"  \", \"_\")\n        var text7 = text6.replaceAll(\"  \", \"_\")\n        var text8 = text7.replaceAll(\"  \", \"_\")\n        var text9 = text8.replaceAll(\"  \", \"_\")\n        var text10 = text9.replaceAll(\"  \", \"_\")\n        var text11 = text10.replaceAll(\"  \", \"_\")\n        var text12 = text11.replaceAll(\"  \", \"_\")\n        var text13 = text12.replaceAll(\"  \", \"_\")\n        var text14 = text13.replaceAll(\"  \", \"_\")\n        var text15 = text14.replaceAll(\"  \", \"_\")\n        var text16 = text15.replaceAll(\"  \", \"_\")\n        var text17 = text16.replaceAll(\"  \", \"_\")\n        var text18 = text17.replaceAll(\"  \", \"_\")\n        var text19 = text18.replaceAll(\"  \", \"_\")\n        var text20 = text19.replaceAll(\"  \", \"_\")\n        var text21 = text20.replaceAll(\"  \", \"_\")\n        var text22 = text21.replaceAll(\"  \", \"_\")\n        var text23 = text22.replaceAll(\"  \", \"_\")\n        var text24 = text23.replaceAll(\"  \", \"_\")\n        var text25 = text24.replaceAll(\"  \", \"_\")\n        var text26 = text25.replaceAll(\"  \", \"_\")\n        var text27 = text26.replaceAll(\"  \", \"_\")\n        var text28 = text27.replaceAll(\"  \", \"_\")\n        var text29 = text28.replaceAll(\"  \", \"_\")\n        var text30 = text29.replaceAll(\"  \", \"_\")\n        var text31 = text30.replaceAll(\"  \", \"_\")\n        var text32 = text31.replaceAll(\"  \", \"_\")\n        var text33 = text32.replaceAll(\"  \", \"_\")\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpp1scovkp.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1scovkp.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\"\\\\s+\", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"(\\\\s+)\\\\s+\", \"_$1_\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293387,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpa11bs17r.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\"\\\\s+\"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpa11bs17r.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"(\\\\s+)\\\\s+\"\u001b[0m, \u001b[31m\"_$1_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"__\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzw3mz2vx.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"__\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var s = text.replaceAll(\" \", \"_\")\n        if (s.contains(\"  \")) {\n            s = s.replaceAll(\"  \", \"-\")\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7x8rgv0l.scala:26)\n\tat Problem.main(tmp7x8rgv0l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"--\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp6j23epay.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp6j23epay.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"--\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        text.replaceAll(\" \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .replaceAll(\"  \", \"_\")\n        .\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjph6uzmh.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        if (text == null) return null\n        text = text.replaceAll(\" \", \"_\")\n        if (text.contains(\"  \")) {\n            text = text.replaceAll(\"  \", \"_\")\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzqgdfx0c.scala:17:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        text = text.replaceAll(\u001b[31m\" \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzqgdfx0c.scala:19:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            text = text.replaceAll(\u001b[31m\"  \"\u001b[0m, \u001b[31m\"_\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val text\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var i = 0\n        while(i < text.length) {\n            if(text[i] == ' ') {\n                result += '_'\n            } else {\n                result += text[i]\n            }\n            i = i + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293388,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvmz03kxp.scala:19:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m(text[\u001b[35mi\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvmz03kxp.scala:22:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result += text[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvmz03kxp.scala:22:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result += text[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        var result = \"\"\n        var lastIndex = 0\n        var i = 0\n        while (i < text.length) {\n            if (text[i] == ' ') {\n                result += text[i]\n                lastIndex = i\n            }\n            i += 1\n        }\n        if (lastIndex < text.length) {\n            result += text[lastIndex:text.length]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n",
      "timestamp": 1664293388,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8xkuhx_w.scala:27:36 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            result += text[\u001b[35mlastIndex\u001b[0m:text.length]\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    ']' expected, but ':' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8xkuhx_w.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mif\u001b[0m (text[\u001b[35mi\u001b[0m] == \u001b[31m' '\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8xkuhx_w.scala:21:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                result += text[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8xkuhx_w.scala:21:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                result += text[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8xkuhx_w.scala:27:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            result += text[\u001b[35mlastIndex\u001b[0m:text.length]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}