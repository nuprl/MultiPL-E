name: HumanEval_79_decimal_to_binary
language: python
results:
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = str(decimal)\n\
    \    decimal = decimal.zfill(len(decimal) + 2)\n    decimal = decimal.zfill(int(len(decimal)\
    \ / 2))\n    decimal = decimal.zfill(int(len(decimal) / 2))\n    decimal = decimal.zfill(int(len(decimal)\
    \ / 2))\n    decimal = decimal.zfill(int(len(decimal) / 2))\n    decimal = decimal.zfill(int(len(decimal)\
    \ / 2))\n    decimal = decimal.zfill(int(len(decimal) / 2))\n    decimal = decimal.zfill(int(len(decimal)\
    \ / 2))\n    decimal = decimal.zfill(int(len(decimal) / 2))\n    decimal = decimal.zfill(int(len(decimal)\
    \ / 2))\n    decimal = decimal.zfill(int(len(decimal) / 2))\n    decimal = decimal.zfill(int(len(decimal)\
    \ / 2))\n    decimal = decimal.zfill(int(len(decimal) / 2))\n    decimal = decimal.zfill(int(len(decimal)\
    \ / 2))\n    decimal = decimal.zfill(int(len(decimal) / 2))\n    decimal = decimal.zfill(int(len(decimal)\
    \ / 2))\n    decimal = decimal.zfill(int(len(decimal) / 2))\n    decimal = decimal.zfill(int(len(decimal)\
    \ / 2))\n    decimal = decimal.zfill(int(len(decimal) / 2))\n    decimal = decimal.zfill(int(len(decimal)\
    \ / 2))\n    decimal = decimal.zfill(int(len(decimal) / 2))\n    decimal = decimal.zfill(int(len(decimal)\
    \ / 2))\n    decimal = decimal.zfill(int(len(decimal) / 2))\n    decimal = decimal.zfill(int(len(decimal)\
    \ / 2))\n    decimal = decimal.zfill(int(len(decimal) / 2))\n    decimal = decimal.zfill(int(len(decimal)\
    \ / 2))\n    decimal = decimal.zfill(int(len(decimal) / 2))\n    decimal = decimal.zfill(int(len(decimal)\
    \ / 2))\n    decimal = decimal.zfill(int(len(decimal) / 2))\n    decimal = decimal.zfill(int(len(decimal)\
    \ / 2))\n    decimal = decimal.zfill(int(len(decimal) / 2))\n    decimal = decimal.zfill(int(len(decimal)\
    \ / 2))\n    decimal = decimal.zfill(int(len(decimal) / 2))\n    decimal = decimal.zfill(int(len(decimal)\
    \ / 2))\n    decimal = decimal.zfill(int(len(decimal) / 2))\n    decimal = decimal.zfill(int(len(decimal)\
    \ / 2))\n    decimal = decimal.zfill(int(len(decimal) / 2))\n    decimal = decimal.zfill(int(len(decimal)\
    \ / 2))\n    decimal = decimal.zfill(int(\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpywb6drq1.py\", line 54\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    binary_string\
    \ = \"\"\n    binary_string = \"db\"\n    while decimal > 0:\n        binary_string\
    \ += \"0\"\n        decimal -= 1\n    while decimal < 0:\n        binary_string\
    \ += \"1\"\n        decimal += 1\n    binary_string += \"db\"\n    binary_string\
    \ = binary_string[::-1]\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjlj771hf.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpjlj771hf.py\", line 34,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpjlj771hf.py\"\
    , line 28, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        binary = str(decimal % 2) + binary\n       \
    \ decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4towqn_i.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4towqn_i.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp4towqn_i.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal\
    \ = int(decimal // 2)\n    binary = binary + \"db\"\n    return binary\n\n\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbwnp0v9u.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbwnp0v9u.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbwnp0v9u.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    binary_count\
    \ = 0\n    while decimal > 0:\n        binary_count += 1\n        decimal = decimal\
    \ // 2\n        binary += \"0\"\n    if binary_count == 0:\n        binary +=\
    \ \"0\"\n    else:\n        binary += \"1\"\n    return binary\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph7wo76h9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmph7wo76h9.py\", line 33,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmph7wo76h9.py\"\
    , line 27, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7uhxy3g1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp7uhxy3g1.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp7uhxy3g1.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzpigzc0g.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzpigzc0g.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpzpigzc0g.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    while\
    \ decimal > 0:\n        binary_string += \"0\"\n        decimal -= 1\n    while\
    \ decimal < 0:\n        binary_string += \"1\"\n        decimal += 1\n    return\
    \ binary_string\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps989b06h.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmps989b06h.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmps989b06h.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgmxxx5yf.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpgmxxx5yf.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpgmxxx5yf.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnpm0dyst.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpnpm0dyst.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpnpm0dyst.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        decimal = decimal // 2\n        binary += \"\
    0\"\n    binary += \"1\"\n    binary = binary[::-1]\n    binary = binary[2:]\n\
    \    binary = binary[:len(binary) - 2]\n    binary = binary + \"db\"\n    return\
    \ binary\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpedccthuq.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpedccthuq.py\", line 33,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpedccthuq.py\"\
    , line 27, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    if decimal < 0:\n        raise ValueError(\"\
    decimal number must be positive\")\n    if decimal < 2:\n        return f\"db0{decimal_to_binary(decimal)}\"\
    \n    binary_string = \"\"\n    while decimal > 0:\n        binary_string += str(decimal\
    \ % 2)\n        decimal = int(decimal // 2)\n    return f\"db{binary_string}\"\
    \n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwvivmzg2.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpwvivmzg2.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpwvivmzg2.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\n  File \"/tmp/tmpwvivmzg2.py\"\
    , line 16, in decimal_to_binary\n    return f\"db0{decimal_to_binary(decimal)}\"\
    \n  File \"/tmp/tmpwvivmzg2.py\", line 16, in decimal_to_binary\n    return f\"\
    db0{decimal_to_binary(decimal)}\"\n  File \"/tmp/tmpwvivmzg2.py\", line 16, in\
    \ decimal_to_binary\n    return f\"db0{decimal_to_binary(decimal)}\"\n  [Previous\
    \ line repeated 993 more times]\n  File \"/tmp/tmpwvivmzg2.py\", line 13, in decimal_to_binary\n\
    \    if decimal < 0:\nRecursionError: maximum recursion depth exceeded in comparison\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_lr8bp06.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp_lr8bp06.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp_lr8bp06.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_5c_kqb7.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp_5c_kqb7.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp_5c_kqb7.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp94hu5hnc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp94hu5hnc.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp94hu5hnc.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = int(decimal)\n\
    \    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal\
    \ = int(decimal // 2)\n    binary = binary + \"db\"\n    return binary\n\n\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvr608sap.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpvr608sap.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpvr608sap.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    binary_string += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptn4l_2dh.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptn4l_2dh.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmptn4l_2dh.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi4czf2ec.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpi4czf2ec.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpi4czf2ec.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    binary_string += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe6xb68ik.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpe6xb68ik.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpe6xb68ik.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    binary_string += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmputqlf27a.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmputqlf27a.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmputqlf27a.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    binary_string += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8cfdntx.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpk8cfdntx.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpk8cfdntx.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp507brcds.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp507brcds.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp507brcds.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary += \"0\"\n        decimal -= 1\n    while decimal < 0:\n\
    \        binary += \"1\"\n        decimal += 1\n    return binary\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8qd_5wsy.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8qd_5wsy.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp8qd_5wsy.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    binary_string += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwwtw90fw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwwtw90fw.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpwwtw90fw.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal\
    \ = int(decimal / 2)\n    return \"db\" + binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsflqxdey.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpsflqxdey.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpsflqxdey.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpybzcw53c.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpybzcw53c.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpybzcw53c.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = str(decimal)\n\
    \    length = len(decimal)\n    decimal = decimal[::-1]\n    decimal = decimal.zfill(length)\n\
    \    decimal = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\")\n  \
    \  decimal = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\")\n    decimal\
    \ = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\")\n    decimal =\
    \ decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"\
    0\")\n    decimal = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\"\
    )\n    decimal = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\")\n\
    \    decimal = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\")\n  \
    \  decimal = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\")\n    decimal\
    \ = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\")\n    decimal =\
    \ decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"\
    0\")\n    decimal = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\"\
    )\n    decimal = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\")\n\
    \    decimal = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\")\n  \
    \  decimal = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\")\n    decimal\
    \ = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\")\n    decimal =\
    \ decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"\
    0\")\n    decimal = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\"\
    )\n    decimal = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\")\n\
    \    decimal = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\")\n  \
    \  decimal = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\")\n    decimal\
    \ = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\")\n    decimal =\
    \ decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"\
    0\")\n    decimal = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\"\
    )\n    decimal = decimal.l\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqr820s5e.py\", line\
    \ 78, in <module>\n    test_check()\n  File \"/tmp/tmpqr820s5e.py\", line 76,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpqr820s5e.py\"\
    , line 70, in check\n    assert candidate(0) == 'db0db'\n  File \"/tmp/tmpqr820s5e.py\"\
    , line 68, in decimal_to_binary\n    decimal = decimal.l\nAttributeError: 'str'\
    \ object has no attribute 'l'\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        binary = str(decimal % 2) + binary\n       \
    \ decimal = int(decimal / 2)\n    return \"db\" + binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwsiv5g26.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwsiv5g26.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpwsiv5g26.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ != 0:\n        binary += \"0\"\n        decimal -= 1\n    while len(binary)\
    \ < 32:\n        binary += \"0\"\n    return binary\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkrm4of72.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpkrm4of72.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpkrm4of72.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        decimal, remainder = divmod(decimal, 2)\n  \
    \      binary += \"1\" if remainder else \"0\"\n    return binary\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7l4f8a3t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7l4f8a3t.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp7l4f8a3t.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal\
    \ = int(decimal / 2)\n    binary = binary + \"db\"\n    return binary\n\n\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7wa2j54s.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp7wa2j54s.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp7wa2j54s.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal\
    \ = int(decimal / 2)\n    binary = binary + \"db\"\n    return binary\n\n\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprihh5ia5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmprihh5ia5.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmprihh5ia5.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        decimal, remainder = divmod(decimal, 2)\n  \
    \      binary += str(remainder)\n    return binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxsbl2y5.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkxsbl2y5.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpkxsbl2y5.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal\
    \ = decimal // 2\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert\
    \ candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\n\
    def test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_alb4xji.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_alb4xji.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp_alb4xji.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal\
    \ = int(decimal / 2)\n    binary = binary + \"db\"\n    return binary\n\n\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph9_5oev4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmph9_5oev4.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmph9_5oev4.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        binary = str(decimal % 2) + binary\n       \
    \ decimal = decimal // 2\n    binary = binary[::-1]\n    binary = binary[:len(binary)\
    \ - 1] + \"db\" + binary[len(binary) - 1:]\n    return binary\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgus1brci.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgus1brci.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpgus1brci.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nylsss9.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5nylsss9.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp5nylsss9.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcn3oennk.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpcn3oennk.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpcn3oennk.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd5bgu8wf.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpd5bgu8wf.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpd5bgu8wf.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmponxa1ce6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmponxa1ce6.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmponxa1ce6.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        binary = str(decimal % 2) + binary\n       \
    \ decimal = decimal // 2\n    return binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcc_k5cng.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcc_k5cng.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpcc_k5cng.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    binary_number\
    \ = \"\"\n    binary_number = binary_number + \"0\"\n    while decimal > 0:\n\
    \        binary_number = binary_number + \"1\"\n        decimal = decimal - 1\n\
    \    binary_number = binary_number + \"0\"\n    binary = binary + binary_number\n\
    \    return binary\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8o18z8cz.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp8o18z8cz.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp8o18z8cz.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal\
    \ = int(decimal / 2)\n    binary = binary + \"db\"\n    return binary\n\n\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphvp9p6zj.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphvp9p6zj.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmphvp9p6zj.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal\
    \ = decimal // 2\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert\
    \ candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\n\
    def test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbllc20ne.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbllc20ne.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbllc20ne.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5c4b7qoi.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5c4b7qoi.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp5c4b7qoi.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    if decimal < 0:\n        raise ValueError(\"\
    Decimal number must be positive\")\n    if decimal > 2 ** 31:\n        raise ValueError(\"\
    Decimal number must be less than 2 ** 31\")\n    binary = \"\"\n    binary_digits\
    \ = \"\"\n    while decimal > 0:\n        binary_digits = str(decimal % 2)\n \
    \       binary += binary_digits\n        decimal = decimal // 2\n    binary =\
    \ binary + \"db\"\n    binary = binary + binary_digits\n    return binary\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptxnezoki.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptxnezoki.py\", line 35,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmptxnezoki.py\"\
    , line 29, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    if decimal < 0:\n        raise ValueError(\"\
    Negative decimal number not allowed\")\n    if decimal >= 2:\n        raise ValueError(\"\
    Decimal number too big\")\n    binary = \"\"\n    while decimal > 0:\n       \
    \ binary = str(decimal % 2) + binary\n        decimal = int(decimal // 2)\n  \
    \  return binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjepjr0pj.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpjepjr0pj.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpjepjr0pj.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    binary_count\
    \ = 0\n    while decimal > 0:\n        binary_count += 1\n        decimal = decimal\
    \ // 2\n        if decimal > 0:\n            binary += \"1\"\n        else:\n\
    \            binary += \"0\"\n    return binary + f\"db{binary_count}db\"\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpty7aldc1.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpty7aldc1.py\", line 32,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpty7aldc1.py\"\
    , line 27, in check\n    assert candidate(32) == 'db100000db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplvy8osqx.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmplvy8osqx.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmplvy8osqx.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary += \"0\"\n        decimal -= 1\n    while decimal < 0:\n\
    \        binary += \"1\"\n        decimal += 1\n    binary = binary[::-1]\n  \
    \  binary = binary[:len(binary) - 1] + \"db\" + binary[len(binary) - 1:]\n   \
    \ return binary\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ha4kghu.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5ha4kghu.py\", line 32,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp5ha4kghu.py\"\
    , line 26, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzedjf9jg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpzedjf9jg.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpzedjf9jg.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    while\
    \ decimal > 0:\n        binary_string += \"0\"\n        decimal -= 1\n    while\
    \ decimal < 0:\n        binary_string += \"1\"\n        decimal += 1\n    binary_string\
    \ += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8i7ju95.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpi8i7ju95.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpi8i7ju95.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    if decimal < 0:\n        raise ValueError(\"\
    decimal cannot be negative\")\n\n    binary = \"\"\n    while decimal != 0:\n\
    \        decimal, remainder = divmod(decimal, 2)\n        binary += \"01\" if\
    \ remainder else \"00\"\n\n    return binary\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert\
    \ candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\n\
    def test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj2qmnjrv.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpj2qmnjrv.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpj2qmnjrv.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal\
    \ = int(decimal / 2)\n    binary = binary + \"db\"\n    return binary\n\n\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4e5_42sq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4e5_42sq.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp4e5_42sq.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        binary = str(decimal % 2) + binary\n       \
    \ decimal = decimal // 2\n    if binary == \"0\":\n        binary = \"db\"\n \
    \   return binary + binary[::-1]\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3azoncej.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3azoncej.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp3azoncej.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    binary_string += bin(decimal)[2:]\n    binary_string += \"db\"\
    \n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    binary_string += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg69d90b5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg69d90b5.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpg69d90b5.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp3cs65q_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpp3cs65q_.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpp3cs65q_.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    binary_string\
    \ = \"\"\n    binary_string = \"db\"\n    binary_string += str(decimal)\n    binary_string\
    \ += \"db\"\n    binary_string += str(decimal)\n    binary_string += \"db\"\n\
    \    binary_string += str(decimal)\n    binary_string += \"db\"\n    binary_string\
    \ += str(decimal)\n    binary_string += \"db\"\n    binary_string += str(decimal)\n\
    \    binary_string += \"db\"\n    binary_string += str(decimal)\n    binary_string\
    \ += \"db\"\n    binary_string += str(decimal)\n    binary_string += \"db\"\n\
    \    binary_string += str(decimal)\n    binary_string += \"db\"\n    binary_string\
    \ += str(decimal)\n    binary_string += \"db\"\n    binary_string += str(decimal)\n\
    \    binary_string += \"db\"\n    binary_string += str(decimal)\n    binary_string\
    \ += \"db\"\n    binary_string += str(decimal)\n    binary_string += \"db\"\n\
    \    binary_string += str(decimal)\n    binary_string += \"db\"\n    binary_string\
    \ += str(decimal)\n    binary_string += \"db\"\n    binary_string += str(decimal)\n\
    \    binary_string += \"db\"\n    binary_string += str(decimal)\n    binary_string\
    \ += \"db\"\n    binary_string += str(decimal)\n    binary_string += \"db\"\n\
    \    binary_string += str(decimal)\n    binary_string += \"db\"\n    binary_string\
    \ += str(decimal)\n    binary_string += \"db\"\n    binary_string += str(decimal)\n\
    \    binary_string += \"db\"\n    binary_string += str(decimal)\n    binary_string\
    \ += \"db\"\n    binary_string += str(decimal)\n    binary_string += \"db\"\n\
    \    binary_string += str(decimal)\n    binary_string += \"db\"\n    binary_string\
    \ += str(decimal)\n    binary_string += \"db\"\n    binary_string += str(decimal)\n\
    \    binary_string += \"db\"\n    binary_string += str(decimal)\n    binary_string\
    \ += \"db\"\n    binary_string += str(decimal)\n    binary_string += \"db\"\n\
    \    binary_string += str(decimal)\n    binary_string += \"db\"\n    binary_string\
    \ += str(decimal)\n    binary_string += \"db\"\n    binary_string += str(decimal)\n\
    \    binary_string += \"db\"\n    binary_string += str(decimal)\n    binary_string\
    \ += \"db\"\n    binary_string += str(decimal)\n    binary_string += \"db\"\n\
    \    binary_string += str(decimal)\n    binary_string += \"db\"\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpysn6ghsn.py\", line\
    \ 92, in <module>\n    test_check()\n  File \"/tmp/tmpysn6ghsn.py\", line 90,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpysn6ghsn.py\"\
    , line 84, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    binary_count\
    \ = 0\n    while decimal > 0:\n        binary_count += 1\n        decimal //=\
    \ 2\n        binary += \"0\"\n    binary += \"1\" * binary_count\n    return binary\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpftop0uwo.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpftop0uwo.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpftop0uwo.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2g8_gnp9.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp2g8_gnp9.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp2g8_gnp9.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpohwrvqpu.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpohwrvqpu.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpohwrvqpu.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgboglbe0.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpgboglbe0.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpgboglbe0.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppgg4bxnp.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmppgg4bxnp.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmppgg4bxnp.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ != 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal\
    \ // 2\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ld5z08g.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7ld5z08g.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp7ld5z08g.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5c9d_jay.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5c9d_jay.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp5c9d_jay.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        decimal = decimal // 2\n        binary += \"\
    0\"\n    binary += \"1\"\n    binary = binary[::-1]\n    return \"db\" + binary\
    \ + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n  \
    \  assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyish5rhp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpyish5rhp.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpyish5rhp.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    if decimal < 0:\n        raise ValueError(\"\
    decimal must be non-negative\")\n    if decimal > 2 ** 31 - 1:\n        raise\
    \ ValueError(\"decimal must be less than 2 ** 31 - 1\")\n    binary = \"\"\n \
    \   while decimal != 0:\n        binary = str(decimal % 2) + binary\n        decimal\
    \ = int(decimal // 2)\n    return binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_jya9m5f.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp_jya9m5f.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp_jya9m5f.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        binary = str(decimal % 2) + binary\n       \
    \ decimal = decimal // 2\n    binary = binary[::-1]\n    binary = binary[:len(binary)\
    \ - 1] + \"db\" + binary[len(binary) - 1:]\n    return binary\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7srwys_m.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp7srwys_m.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp7srwys_m.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    if decimal < 0:\n        raise ValueError(\"\
    Negative numbers are not allowed\")\n    if decimal < 2:\n        return \"0\"\
    \n    binary = \"\"\n    while decimal > 0:\n        decimal, remainder = divmod(decimal,\
    \ 2)\n        binary += \"1\" * remainder\n    return binary\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphiointc4.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmphiointc4.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmphiointc4.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        binary = str(decimal % 2) + binary\n       \
    \ decimal = decimal // 2\n    return binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbp47s_3p.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbp47s_3p.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbp47s_3p.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary += \"0\"\n        decimal -= 1\n    while decimal < 0:\n\
    \        binary += \"1\"\n        decimal += 1\n    return binary\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxsnjdr1u.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpxsnjdr1u.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpxsnjdr1u.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4virt29g.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp4virt29g.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp4virt29g.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    binary_count\
    \ = 0\n    while decimal > 0:\n        binary_count += 1\n        decimal = decimal\
    \ >> 1\n        if decimal > 0:\n            binary += \"1\"\n        else:\n\
    \            binary += \"0\"\n    return binary + \"db\" + str(binary_count) +\
    \ \"db\"\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1w8y_4wk.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp1w8y_4wk.py\", line 32,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp1w8y_4wk.py\"\
    , line 27, in check\n    assert candidate(32) == 'db100000db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    binary = str(decimal) + binary\n    binary = binary + \"db\"\n   \
    \ return binary\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsabw0hqg.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpsabw0hqg.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpsabw0hqg.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    while\
    \ decimal > 0:\n        binary_string += \"0\"\n        decimal -= 1\n    while\
    \ decimal < 0:\n        binary_string += \"1\"\n        decimal += 1\n    binary_string\
    \ = \"db\" + binary_string\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnbzvtal3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpnbzvtal3.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpnbzvtal3.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    while\
    \ decimal > 0:\n        binary_string += \"0\"\n        decimal -= 1\n    while\
    \ decimal < 0:\n        binary_string += \"1\"\n        decimal += 1\n    return\
    \ binary_string\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx0vc1r_k.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpx0vc1r_k.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpx0vc1r_k.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprtk6w12e.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmprtk6w12e.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmprtk6w12e.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpilzsgu9b.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpilzsgu9b.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpilzsgu9b.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpllx12yv_.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpllx12yv_.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpllx12yv_.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    if decimal < 0:\n        raise ValueError(\"\
    decimal cannot be negative\")\n    if decimal > 2 ** 31 - 1:\n        raise ValueError(\"\
    decimal cannot be greater than 2 ** 31 - 1\")\n    binary_string = \"\"\n    while\
    \ decimal != 0:\n        binary_string = str(decimal % 2) + binary_string\n  \
    \      decimal = decimal // 2\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptpo8v6ew.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmptpo8v6ew.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmptpo8v6ew.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphwn52jqi.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmphwn52jqi.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmphwn52jqi.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = int(decimal)\n\
    \    while decimal != 0:\n        binary = str(decimal % 2) + binary\n       \
    \ decimal = int(decimal // 2)\n    return \"db\" + binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2osc5j_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq2osc5j_.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpq2osc5j_.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfu30er48.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpfu30er48.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpfu30er48.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    binary_string += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmj47fl2q.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpmj47fl2q.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpmj47fl2q.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        binary = str(decimal % 2) + binary\n       \
    \ decimal = decimal // 2\n    return binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfk1m1bat.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfk1m1bat.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpfk1m1bat.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    binary = binary + \"db\"\n    return binary\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdj8ek4hc.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpdj8ek4hc.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpdj8ek4hc.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    if decimal < 0:\n        raise ValueError(\"\
    decimal cannot be negative\")\n    if decimal < 2:\n        raise ValueError(\"\
    decimal cannot be less than 2\")\n    if decimal > 2 ** 31 - 1:\n        raise\
    \ ValueError(\"decimal cannot be greater than 2 ** 31 - 1\")\n    binary = \"\"\
    \n    while decimal != 0:\n        decimal, remainder = divmod(decimal, 2)\n \
    \       binary += \"01\" if remainder else \"00\"\n    return binary\n\n\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4zjx8nuj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4zjx8nuj.py\", line 33,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp4zjx8nuj.py\"\
    , line 27, in check\n    assert candidate(0) == 'db0db'\n  File \"/tmp/tmp4zjx8nuj.py\"\
    , line 16, in decimal_to_binary\n    raise ValueError(\"decimal cannot be less\
    \ than 2\")\nValueError: decimal cannot be less than 2\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    while\
    \ decimal > 0:\n        binary_string += \"0\"\n        decimal -= 1\n    while\
    \ decimal < 0:\n        binary_string += \"1\"\n        decimal += 1\n    binary_string\
    \ += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph1wqlukq.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmph1wqlukq.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmph1wqlukq.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjgcm_g28.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpjgcm_g28.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpjgcm_g28.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal\
    \ = int(decimal / 2)\n    binary = binary + \"db\"\n    return binary\n\n\ndef\
    \ check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0z_0n30p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0z_0n30p.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp0z_0n30p.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpajbd08_1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpajbd08_1.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpajbd08_1.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaptbivy0.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpaptbivy0.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpaptbivy0.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5fw9sity.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp5fw9sity.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp5fw9sity.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    binary_string += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprkmt_v32.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmprkmt_v32.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmprkmt_v32.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = int(decimal)\n\
    \    while decimal != 0:\n        binary = str(decimal % 2) + binary\n       \
    \ decimal = int(decimal // 2)\n    return \"db\" + binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp64p3j5rx.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp64p3j5rx.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp64p3j5rx.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    binary_string += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1jhp4nme.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1jhp4nme.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp1jhp4nme.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    if decimal < 0:\n        raise ValueError(\"\
    decimal must be non-negative\")\n    if decimal < 2:\n        raise ValueError(\"\
    decimal must be greater than 2\")\n    if decimal % 2 == 0:\n        raise ValueError(\"\
    decimal must be even\")\n    binary = \"\"\n    while decimal > 0:\n        decimal,\
    \ remainder = divmod(decimal, 2)\n        binary += \"0\"\n    if binary == \"\
    0\":\n        binary = \"1\"\n    return binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2wk0wl2y.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp2wk0wl2y.py\", line 35,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp2wk0wl2y.py\"\
    , line 29, in check\n    assert candidate(0) == 'db0db'\n  File \"/tmp/tmp2wk0wl2y.py\"\
    , line 16, in decimal_to_binary\n    raise ValueError(\"decimal must be greater\
    \ than 2\")\nValueError: decimal must be greater than 2\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        binary = str(decimal % 2) + binary\n       \
    \ decimal = decimal // 2\n    if decimal == 0:\n        binary = str(decimal)\n\
    \        binary = binary + \"0\"\n        binary = binary + \"b\"\n    else:\n\
    \        binary = str(decimal)\n        binary = binary + \"b\"\n    return binary\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6275xak.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpm6275xak.py\", line 35,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpm6275xak.py\"\
    , line 29, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    binary_string += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8qauu38x.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8qauu38x.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp8qauu38x.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        decimal, remainder = divmod(decimal, 2)\n  \
    \      binary += \"0\"\n    if decimal < 0:\n        binary += \"1\"\n    return\
    \ binary\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt0mh9ctn.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpt0mh9ctn.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpt0mh9ctn.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxu46hx3n.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpxu46hx3n.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpxu46hx3n.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    while\
    \ decimal > 0:\n        binary_string += \"0\"\n        decimal -= 1\n    while\
    \ decimal < 0:\n        binary_string += \"1\"\n        decimal += 1\n    binary_string\
    \ += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppcuuyolo.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmppcuuyolo.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmppcuuyolo.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        decimal, remainder = divmod(decimal, 2)\n  \
    \      binary += \"01\" if remainder else \"00\"\n    return binary\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvmtm8wom.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpvmtm8wom.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpvmtm8wom.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    binary_digits\
    \ = \"0000\"\n    decimal_digits = \"0000\"\n    decimal_places = -1\n    binary_places\
    \ = -1\n\n    while decimal != 0:\n        decimal = decimal // 2\n        decimal_places\
    \ += 1\n        decimal_digits = decimal_digits + \"0\"\n        binary_places\
    \ += 1\n        binary_digits = binary_digits + \"0\"\n\n    binary_digits = binary_digits[:binary_places]\n\
    \    decimal_digits = decimal_digits[:decimal_places]\n\n    binary_digits = binary_digits\
    \ + decimal_digits\n    binary_digits = binary_digits[::-1]\n\n    binary_places\
    \ = binary_places + decimal_places\n    binary_places = binary_places[::-1]\n\n\
    \    binary = binary_digits + binary_places\n    binary = binary[::-1]\n\n   \
    \ binary = binary + \"db\"\n\n    return binary\n\n\ndef check(candidate):\n \
    \   assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpajszuyn6.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpajszuyn6.py\", line 50,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpajszuyn6.py\"\
    , line 44, in check\n    assert candidate(0) == 'db0db'\n  File \"/tmp/tmpajszuyn6.py\"\
    , line 33, in decimal_to_binary\n    binary_places = binary_places[::-1]\nTypeError:\
    \ 'int' object is not subscriptable\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        binary = str(decimal % 2) + binary\n       \
    \ decimal = decimal // 2\n    if decimal > 0:\n        binary = str(decimal) +\
    \ binary\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpszywfmvg.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpszywfmvg.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpszywfmvg.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal > 0:\n        binary += \"1\" if decimal % 2 == 0 else \"0\"\
    \n        decimal //= 2\n    return binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp49y5k29j.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp49y5k29j.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp49y5k29j.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        decimal, remainder = divmod(decimal, 2)\n  \
    \      binary += \"0\"\n    if decimal > 0:\n        binary += \"1\"\n    return\
    \ binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0swi18bi.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0swi18bi.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp0swi18bi.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvdtahspb.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpvdtahspb.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpvdtahspb.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc8r38yn5.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpc8r38yn5.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpc8r38yn5.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    binary_string += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp51ar10t9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp51ar10t9.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp51ar10t9.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        binary = str(decimal % 2) + binary\n       \
    \ decimal = decimal // 2\n    if decimal > 0:\n        binary = str(decimal) +\
    \ binary\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf1jpnmju.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpf1jpnmju.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpf1jpnmju.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpncnyvho8.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpncnyvho8.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpncnyvho8.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1f360kmn.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp1f360kmn.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp1f360kmn.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf1eg8wa6.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpf1eg8wa6.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpf1eg8wa6.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ != 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpejm0pev4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpejm0pev4.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpejm0pev4.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpltzqunhs.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpltzqunhs.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpltzqunhs.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ != 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal\
    \ // 2\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoiqxhfgi.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpoiqxhfgi.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpoiqxhfgi.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary += \"0\"\n        decimal -= 1\n    while decimal < 0:\n\
    \        binary += \"1\"\n        decimal += 1\n    binary = binary[::-1]\n  \
    \  return \"db\" + binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmtm4tbqy.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpmtm4tbqy.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpmtm4tbqy.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    while\
    \ decimal > 0:\n        binary_string += \"0\"\n        decimal -= 1\n    while\
    \ decimal < 0:\n        binary_string += \"1\"\n        decimal += 1\n    return\
    \ binary_string\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ii8l27k.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6ii8l27k.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp6ii8l27k.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        binary = str(decimal % 2) + binary\n       \
    \ decimal = int(decimal // 2)\n    return binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4gljvumz.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4gljvumz.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp4gljvumz.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjh8t4s2y.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpjh8t4s2y.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpjh8t4s2y.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        decimal, remainder = divmod(decimal, 2)\n  \
    \      binary += \"1\" if remainder else \"0\"\n    return binary\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjapbd5k3.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpjapbd5k3.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpjapbd5k3.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8abjw216.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp8abjw216.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp8abjw216.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdd60xoyx.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpdd60xoyx.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpdd60xoyx.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_fif00iy.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp_fif00iy.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp_fif00iy.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    binary_digits\
    \ = \"01\"\n    decimal_digits = \"0123456789\"\n    while decimal > 0:\n    \
    \    binary_digit = decimal_digits[decimal % 2]\n        decimal //= 2\n     \
    \   binary += binary_digit\n    return binary + \"db\" + binary + binary_digits\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvc0m6hau.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvc0m6hau.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpvc0m6hau.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7w221s8z.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7w221s8z.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp7w221s8z.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzfa57mb4.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzfa57mb4.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpzfa57mb4.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal\
    \ = int(decimal / 2)\n    binary = str(len(binary)) + binary\n    binary = binary\
    \ + \"db\"\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpix4v5hhl.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpix4v5hhl.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpix4v5hhl.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal > 0:\n        decimal, remainder = divmod(decimal, 2)\n   \
    \     binary += \"1\" if remainder else \"0\"\n    return binary + \"db\"\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzegfwc54.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzegfwc54.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpzegfwc54.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        decimal, remainder = divmod(decimal, 2)\n  \
    \      binary += \"0\"\n    binary += \"1\"\n    binary = binary[::-1]\n    binary\
    \ = binary[:len(binary) - 1] + \"db\" + binary[len(binary) - 1:]\n    return binary\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplgf5xxix.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmplgf5xxix.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmplgf5xxix.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyetxwp33.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpyetxwp33.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpyetxwp33.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = str(decimal)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.z\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaiwv_9jb.py\", line\
    \ 80, in <module>\n    test_check()\n  File \"/tmp/tmpaiwv_9jb.py\", line 78,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpaiwv_9jb.py\"\
    , line 72, in check\n    assert candidate(0) == 'db0db'\n  File \"/tmp/tmpaiwv_9jb.py\"\
    , line 70, in decimal_to_binary\n    decimal = decimal.z\nAttributeError: 'str'\
    \ object has no attribute 'z'\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wu8l6hu.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp8wu8l6hu.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp8wu8l6hu.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnyx7ipsh.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnyx7ipsh.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpnyx7ipsh.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpej6b8crm.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpej6b8crm.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpej6b8crm.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    while\
    \ decimal > 0:\n        binary_string += \"0\"\n        decimal -= 1\n    while\
    \ decimal < 0:\n        binary_string += \"1\"\n        decimal += 1\n    binary_string\
    \ += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpih5q2iye.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpih5q2iye.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpih5q2iye.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqe4c3wt.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpuqe4c3wt.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpuqe4c3wt.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3xlgs4yo.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp3xlgs4yo.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp3xlgs4yo.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    while\
    \ decimal > 0:\n        binary_string += \"0\"\n        decimal -= 1\n    while\
    \ decimal < 0:\n        binary_string += \"1\"\n        decimal += 1\n    return\
    \ binary_string\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpew8t71p6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpew8t71p6.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpew8t71p6.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        binary = str(decimal % 2) + binary\n       \
    \ decimal = decimal // 2\n    binary = binary[::-1]\n    binary = binary[:len(binary)\
    \ - 1] + \"db\" + binary[len(binary) - 1:]\n    return binary\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1k27i8uz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1k27i8uz.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp1k27i8uz.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeitvtge2.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpeitvtge2.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpeitvtge2.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnzntdwn1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnzntdwn1.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpnzntdwn1.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    binary_string += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphqry_y48.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphqry_y48.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmphqry_y48.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = str(decimal)\n\
    \    decimal = decimal.zfill(2)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal =\
    \ decimal.zfill(8)\n    decimal = decimal.zfill(8)\n    decimal = decimal.zfill(8)\n\
    \    decimal = decimal.z\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdgl0k05m.py\", line\
    \ 80, in <module>\n    test_check()\n  File \"/tmp/tmpdgl0k05m.py\", line 78,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpdgl0k05m.py\"\
    , line 72, in check\n    assert candidate(0) == 'db0db'\n  File \"/tmp/tmpdgl0k05m.py\"\
    , line 70, in decimal_to_binary\n    decimal = decimal.z\nAttributeError: 'str'\
    \ object has no attribute 'z'\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    binary_string += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0r1rjpvg.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0r1rjpvg.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp0r1rjpvg.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    while\
    \ decimal > 0:\n        binary_string += \"0\"\n        decimal -= 1\n    while\
    \ decimal < 0:\n        binary_string += \"1\"\n        decimal += 1\n    binary_string\
    \ += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppoj13ep1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmppoj13ep1.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmppoj13ep1.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    while\
    \ decimal > 0:\n        binary_string += \"0\"\n        decimal -= 1\n    while\
    \ decimal < 0:\n        binary_string += \"1\"\n        decimal += 1\n    binary_string\
    \ = \"db\" + binary_string\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvdtzk9x4.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpvdtzk9x4.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpvdtzk9x4.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        binary = str(decimal % 2) + binary\n       \
    \ decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptg3biarl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmptg3biarl.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmptg3biarl.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    if decimal < 0:\n        raise ValueError(\"\
    Decimal cannot be negative\")\n    if decimal > 2 ** 31 - 1:\n        raise ValueError(\"\
    Decimal cannot be greater than 2 ** 31 - 1\")\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq3sw1d0a.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpq3sw1d0a.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpq3sw1d0a.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsvaziayo.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpsvaziayo.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpsvaziayo.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    if decimal < 0:\n        raise ValueError(\"\
    Negative decimal number not allowed\")\n    if decimal > 2 ** 64 - 1:\n      \
    \  raise ValueError(\"Decimal number too large\")\n    binary_string = \"\"\n\
    \    binary_string += \"0\" * (64 - len(binary_string))\n    while decimal !=\
    \ 0:\n        binary_string += \"1\"\n        decimal -= 1\n    return binary_string\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyd2dyljk.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpyd2dyljk.py\", line 32,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpyd2dyljk.py\"\
    , line 26, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp76n8hhrp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp76n8hhrp.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp76n8hhrp.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    binary_string += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqr967cwb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqr967cwb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpqr967cwb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = int(decimal)\n\
    \    while decimal != 0:\n        binary = str(decimal % 2) + binary\n       \
    \ decimal = int(decimal // 2)\n    return \"db\" + binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3zhhx1i2.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3zhhx1i2.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp3zhhx1i2.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal > 0:\n        decimal, remainder = divmod(decimal, 2)\n   \
    \     binary += str(remainder)\n    return binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz7csrv6a.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpz7csrv6a.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpz7csrv6a.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    binary_string += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk0t6ced4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpk0t6ced4.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpk0t6ced4.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2km6l4e0.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp2km6l4e0.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp2km6l4e0.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    if decimal < 0:\n        raise ValueError(\"\
    Negative decimal number not allowed\")\n\n    binary_string = \"\"\n    while\
    \ decimal != 0:\n        binary_string += \"0\"\n        decimal -= 1\n\n    binary_string\
    \ += \"1\"\n    binary_string += \"db\"\n    binary_string += \"0\"\n    binary_string\
    \ += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp59fgsr4s.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp59fgsr4s.py\", line 35,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp59fgsr4s.py\"\
    , line 29, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        decimal, remainder = divmod(decimal, 2)\n  \
    \      binary += \"01\"\n        if remainder == 1:\n            binary += \"\
    0\"\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkmbr2tr3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpkmbr2tr3.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpkmbr2tr3.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp11m_a926.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp11m_a926.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp11m_a926.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary += \"0\"\n        decimal -= 1\n    while decimal < 0:\n\
    \        binary += \"1\"\n        decimal += 1\n    return binary\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7rgmjl9g.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp7rgmjl9g.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp7rgmjl9g.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = str(decimal)\n\
    \    decimal = decimal[::-1]\n    decimal = decimal.lstrip(\"0\")\n    decimal\
    \ = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\")\n    decimal =\
    \ decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"\
    0\")\n    decimal = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\"\
    )\n    decimal = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\")\n\
    \    decimal = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\")\n  \
    \  decimal = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\")\n    decimal\
    \ = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\")\n    decimal =\
    \ decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"\
    0\")\n    decimal = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\"\
    )\n    decimal = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\")\n\
    \    decimal = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\")\n  \
    \  decimal = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\")\n    decimal\
    \ = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\")\n    decimal =\
    \ decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"\
    0\")\n    decimal = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\"\
    )\n    decimal = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\")\n\
    \    decimal = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\")\n  \
    \  decimal = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\")\n    decimal\
    \ = decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\")\n    decimal =\
    \ decimal.lstrip(\"0\")\n    decimal = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"\
    0\")\n    decimal = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\"\
    )\n    decimal = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\")\n\
    \    decimal = decimal.rstrip(\"0\")\n    decimal = decimal.lstrip(\"0\")\n  \
    \  decimal = decimal.rstrip(\"0\")\n    \ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpej7pna7r.py\", line\
    \ 78, in <module>\n    test_check()\n  File \"/tmp/tmpej7pna7r.py\", line 76,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpej7pna7r.py\"\
    , line 70, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    if decimal < 0:\n        raise ValueError(\"\
    decimal cannot be negative\")\n    if decimal < 2:\n        return \"0\"\n   \
    \ if decimal < 16:\n        return \"db\" + decimal_to_binary(decimal - 2)\n \
    \   binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) +\
    \ binary\n        decimal = int(decimal // 2)\n    return \"db\" + binary + \"\
    db\"\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_bqqusx1.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp_bqqusx1.py\", line 33,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp_bqqusx1.py\"\
    , line 27, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    while\
    \ decimal > 0:\n        binary_string += \"0\"\n        decimal -= 1\n    while\
    \ decimal < 0:\n        binary_string += \"1\"\n        decimal += 1\n    binary_string\
    \ += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphm21a7lj.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmphm21a7lj.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmphm21a7lj.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplappp17m.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmplappp17m.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmplappp17m.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    while\
    \ decimal > 0:\n        binary_string += \"0\"\n        decimal -= 1\n    while\
    \ decimal < 0:\n        binary_string += \"1\"\n        decimal += 1\n    return\
    \ binary_string\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpifjne8p8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpifjne8p8.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpifjne8p8.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal\
    \ = decimal // 2\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert\
    \ candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\n\
    def test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc12n1nsl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpc12n1nsl.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpc12n1nsl.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    binary_string += bin(decimal)[2:]\n    binary_string += \"db\"\
    \n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy1jqinev.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpy1jqinev.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpy1jqinev.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    while\
    \ decimal > 0:\n        binary_string += \"0\"\n        decimal -= 1\n    while\
    \ decimal < 0:\n        binary_string += \"1\"\n        decimal += 1\n    return\
    \ binary_string\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph55947jk.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmph55947jk.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmph55947jk.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    if decimal < 0:\n        raise ValueError(\"\
    decimal must be non-negative\")\n    if decimal < 2:\n        raise ValueError(\"\
    decimal must be greater than 1\")\n    binary = \"\"\n    while decimal > 0:\n\
    \        binary += \"0\"\n        decimal -= 1\n    while decimal < 0:\n     \
    \   binary += \"1\"\n        decimal += 1\n    binary = binary[::-1]\n    binary\
    \ = binary[:len(binary) - 2] + \"db\" + binary[len(binary) - 2:]\n    return binary\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9v0q2ivu.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp9v0q2ivu.py\", line 36,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp9v0q2ivu.py\"\
    , line 30, in check\n    assert candidate(0) == 'db0db'\n  File \"/tmp/tmp9v0q2ivu.py\"\
    , line 16, in decimal_to_binary\n    raise ValueError(\"decimal must be greater\
    \ than 1\")\nValueError: decimal must be greater than 1\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ // 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa_upvzn2.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpa_upvzn2.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpa_upvzn2.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        decimal, remainder = divmod(decimal, 2)\n  \
    \      binary += str(remainder)\n    return binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwzyymzop.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwzyymzop.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpwzyymzop.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi7ulxdgp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpi7ulxdgp.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpi7ulxdgp.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ = \"db\"\n    binary_string += bin(decimal)[2:]\n    binary_string += \"db\"\
    \n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    binary_string += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpguxznmh8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpguxznmh8.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpguxznmh8.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    while\
    \ decimal > 0:\n        binary_string += \"0\"\n        decimal -= 1\n    while\
    \ decimal < 0:\n        binary_string += \"1\"\n        decimal += 1\n    binary_string\
    \ += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7kobwkrt.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp7kobwkrt.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp7kobwkrt.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8gm3wlzn.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp8gm3wlzn.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp8gm3wlzn.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        decimal, remainder = divmod(decimal, 2)\n  \
    \      binary += \"1\" if remainder else \"0\"\n    return binary\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph1qf1ujw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmph1qf1ujw.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmph1qf1ujw.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = str(decimal)\n\
    \    decimal = decimal.zfill(8)\n    decimal = decimal.ljust(8, \"0\")\n    decimal\
    \ = decimal.rstrip(\"0\")\n    decimal = decimal.rstrip(\"b\")\n    decimal =\
    \ decimal.rstrip(\"B\")\n    decimal = decimal.rstrip(\"b\")\n    decimal = decimal.rstrip(\"\
    B\")\n    decimal = decimal.rstrip(\"b\")\n    decimal = decimal.rstrip(\"B\"\
    )\n    decimal = decimal.rstrip(\"b\")\n    decimal = decimal.rstrip(\"B\")\n\
    \    decimal = decimal.rstrip(\"b\")\n    decimal = decimal.rstrip(\"B\")\n  \
    \  decimal = decimal.rstrip(\"b\")\n    decimal = decimal.rstrip(\"B\")\n    decimal\
    \ = decimal.rstrip(\"b\")\n    decimal = decimal.rstrip(\"B\")\n    decimal =\
    \ decimal.rstrip(\"b\")\n    decimal = decimal.rstrip(\"B\")\n    decimal = decimal.rstrip(\"\
    b\")\n    decimal = decimal.rstrip(\"B\")\n    decimal = decimal.rstrip(\"b\"\
    )\n    decimal = decimal.rstrip(\"B\")\n    decimal = decimal.rstrip(\"b\")\n\
    \    decimal = decimal.rstrip(\"B\")\n    decimal = decimal.rstrip(\"b\")\n  \
    \  decimal = decimal.rstrip(\"B\")\n    decimal = decimal.rstrip(\"b\")\n    decimal\
    \ = decimal.rstrip(\"B\")\n    decimal = decimal.rstrip(\"b\")\n    decimal =\
    \ decimal.rstrip(\"B\")\n    decimal = decimal.rstrip(\"b\")\n    decimal = decimal.rstrip(\"\
    B\")\n    decimal = decimal.rstrip(\"b\")\n    decimal = decimal.rstrip(\"B\"\
    )\n    decimal = decimal.rstrip(\"b\")\n    decimal = decimal.rstrip(\"B\")\n\
    \    decimal = decimal.rstrip(\"b\")\n    decimal = decimal.rstrip(\"B\")\n  \
    \  decimal = decimal.rstrip(\"b\")\n    decimal = decimal.rstrip(\"B\")\n    decimal\
    \ = decimal.rstrip(\"b\")\n    decimal = decimal.rstrip(\"B\")\n    decimal =\
    \ decimal.rstrip(\"b\")\n    decimal = decimal.rstrip(\"B\")\n    decimal = decimal.rstrip(\"\
    b\")\n    decimal = decimal.rstrip(\"B\")\n    decimal = decimal.rstrip(\"b\"\
    )\n    decimal = decimal.rstrip(\"B\")\n    decimal = decimal.rstrip(\"b\")\n\
    \    decimal = decimal.rstrip(\"B\")\n    decimal = decimal.rstrip(\"b\")\n  \
    \  decimal = decimal.rstrip(\"\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmps1bizbzl.py\", line 67\n    decimal = decimal.rstrip(\"\
    \n                             ^\nSyntaxError: EOL while scanning string literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        binary = str(decimal % 2) + binary\n       \
    \ decimal = decimal // 2\n    if decimal > 0:\n        binary = str(decimal) +\
    \ binary\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxiwueu4d.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpxiwueu4d.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpxiwueu4d.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4zb_14xj.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp4zb_14xj.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp4zb_14xj.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    binary = binary + \"db\"\n    return binary\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1_bx_b9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpo1_bx_b9.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpo1_bx_b9.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp14197rdy.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp14197rdy.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp14197rdy.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxt3v4ek.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpwxt3v4ek.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpwxt3v4ek.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    while decimal < 0:\n        binary_string += \"1\"\n        decimal\
    \ += 1\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjebvqayy.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpjebvqayy.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpjebvqayy.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqet6lm_c.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqet6lm_c.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpqet6lm_c.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    if decimal < 0:\n        raise ValueError(\"\
    Negative decimal number not allowed\")\n    if decimal < 2:\n        return str(decimal)\n\
    \    binary = \"\"\n    while decimal > 0:\n        decimal, remainder = divmod(decimal,\
    \ 2)\n        binary += str(remainder)\n    return binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp70btbs2g.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp70btbs2g.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp70btbs2g.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal\
    \ = int(decimal / 2)\n    return binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprn14mp6v.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprn14mp6v.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmprn14mp6v.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    while\
    \ decimal > 0:\n        binary_string += \"0\"\n        decimal -= 1\n    while\
    \ decimal < 0:\n        binary_string += \"1\"\n        decimal += 1\n    binary_string\
    \ += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwp_03f6m.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpwp_03f6m.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpwp_03f6m.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzgk24wei.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpzgk24wei.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpzgk24wei.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    binary_count\
    \ = 0\n    while decimal > 0:\n        binary_count += 1\n        decimal = decimal\
    \ // 2\n        binary += str(decimal % 2)\n    return binary + binary_count *\
    \ \"db\"\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptpcqbb4l.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptpcqbb4l.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmptpcqbb4l.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary += \"0\"\n        decimal -= 1\n    while decimal < 0:\n\
    \        binary += \"1\"\n        decimal += 1\n    binary = binary[::-1]\n  \
    \  return \"db\" + binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpttnsqxry.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpttnsqxry.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpttnsqxry.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        decimal = decimal // 2\n        binary = \"\
    0\" + binary\n    return binary + \"db\"\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert\
    \ candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\n\
    def test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3tb37tst.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3tb37tst.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp3tb37tst.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    binary_string\
    \ += \"db\"\n    while decimal > 0:\n        binary_string += \"0\"\n        decimal\
    \ -= 1\n    binary_string += \"db\"\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplo4t1t2a.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmplo4t1t2a.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmplo4t1t2a.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal\
    \ > 0:\n        binary = str(decimal % 2) + binary\n        decimal = int(decimal\
    \ / 2)\n    return binary\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3wvvt41o.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp3wvvt41o.py\", line 27,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp3wvvt41o.py\"\
    , line 21, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    while\
    \ decimal > 0:\n        binary_string += \"0\"\n        decimal -= 1\n    while\
    \ decimal < 0:\n        binary_string += \"1\"\n        decimal += 1\n    binary_string\
    \ = \"db\" + binary_string\n    return binary_string\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmpv73bbf.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpmpv73bbf.py\", line 31,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpmpv73bbf.py\"\
    , line 25, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given\
    \ a number in decimal form and your task is to convert it to\n    binary format.\
    \ The function should return a string, with each character representing a binary\n\
    \    number. Each character in the string will be '0' or '1'.\n\n    There will\
    \ be an extra couple of characters 'db' at the beginning and at the end of the\
    \ string.\n    The extra characters are there to help with the format.\n\n   \
    \ Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    decimal = abs(decimal)\n\
    \    while decimal != 0:\n        binary = str(decimal % 2) + binary\n       \
    \ decimal = decimal // 2\n    return binary + \"db\"\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8rei4q99.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8rei4q99.py\", line 28,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp8rei4q99.py\"\
    , line 22, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  exit_code: -1
  status: Exception
