name: HumanEval_25_factorize
language: python
results:
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            n //= i\n\
    \        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n\
    \    factorization = [x for x in factors if x not in factorization]\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpajnqgxhh.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpajnqgxhh.py\", line 39,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpajnqgxhh.py\", line 30,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i\
    \ == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpihsslfan.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpihsslfan.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpihsslfan.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i\
    \ == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfr4qctr.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfr4qctr.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmptfr4qctr.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiew7urkx.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpiew7urkx.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpiew7urkx.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdgkrh5g9.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpdgkrh5g9.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpdgkrh5g9.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp81pdipfr.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp81pdipfr.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmp81pdipfr.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            n //= i\n\
    \        else:\n            factors.append(i)\n            factors.append(n //\
    \ i)\n            factors.append(i)\n            factors.append(n // i)\n    \
    \        factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n \ndef check(candidate):\n    assert candidate(2)\
    \ == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2,\
    \ 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3,\
    \ 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpctubq1zb.py\", line 102\n    def check(candidate):\n \
    \   ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps7px3rms.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmps7px3rms.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmps7px3rms.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    if n == 1:\n       \
    \ factors.append(n)\n        factorization.append(n)\n        return factorization\n\
    \    \n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n\
    \            factorization.append(i)\n            factorization.append(n // i)\n\
    \            factors.append(n // i)\n    \n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt58l38ch.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpt58l38ch.py\", line 42,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpt58l38ch.py\", line 32,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i\
    \ == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    factorization = [i for\
    \ i in range(1, n+1)]\n    \n    factors = [i for i in range(1, n+1) if n % i\
    \ == 0]\n    \n    factorization = [i for i in factorization if i not in factors]\n\
    \    \n    factorization = [i for i in factorization if i not in factors]\n  \
    \  \n    factorization = [i for i in factorization if i not in factors]\n    \n\
    \    factorization = [i for i in factorization if i not in factors]\n    \n  \
    \  factorization = [i for i in factorization if i not in factors]\n    \n    factorization\
    \ = [i for i in factorization if i not in factors]\n    \n    factorization =\
    \ [i for i in factorization if i not in factors]\n    \n    factorization = [i\
    \ for i in factorization if i not in factors]\n    \n    factorization = [i for\
    \ i in factorization if i not in factors]\n    \n    factorization = [i for i\
    \ in factorization if i not in factors]\n    \n    factorization = [i for i in\
    \ factorization if i not in factors]\n    \n    factorization = [i for i in factorization\
    \ if i not in factors]\n    \n    factorization = [i for i in factorization if\
    \ i not in factors]\n    \n    factorization = [i for i in factorization if i\
    \ not in factors]\n    \n    factorization = [i for i in factorization if i not\
    \ in factors]\n    \n    factorization = [i for i in factorization if i not in\
    \ factors]\n    \n    factorization = [i for i in factorization if i not in factors]\n\
    \    \n    factorization = [i for i in factorization if i not in factors]\n  \
    \  \n    factorization = [i for i in factorization if i not in factors]\n    \n\
    \    factorization = [i for i in factorization if i not in factors]\n    \n  \
    \  factorization = [i for i in factorization if i not in factors]\n    \n    factorization\
    \ = [i for i in factorization if i not in factors]\n    \n    factorization =\
    \ [i for i in factorization if i not in factors]\n    \n    factorization = [i\
    \ for i in factorization if i not in factors]\n    \n    factorization = [i for\
    \ i in factorization if i not in factors]\n    \n    factorization = [i for i\
    \ in factorization if i not in factors]\n    \n    factorization = [i for i in\
    \ factorization if i not in factors]\n    \n    factorization = [i for i in factorization\
    \ if i not in factors]\n    \n    factorization = [i for i in factorization if\
    \ i not in factors]\n    \n    factorization = [i for i in factorization if i\
    \ not in factors]\n    \n    factorization = [i for i in factorization if i not\
    \ in factors]\n    \n    factorization = [i for i in factorization if i not in\
    \ \ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpikwq7e35.py\", line 84\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    for i in range(2, n+1):\n\
    \        if n % i == 0:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \    \n    return factorization\n\ndef check(candidate):\n    assert candidate(2)\
    \ == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2,\
    \ 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3,\
    \ 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvjyhuqrq.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpvjyhuqrq.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpvjyhuqrq.py\", line 27,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            n //= i\n\
    \        else:\n            factors.append(i)\n            factors.append(n //\
    \ i)\n            factors.append(i)\n            factors.append(n // i)\n    \
    \        factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n \ndef check(candidate):\n    assert candidate(2)\
    \ == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2,\
    \ 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3,\
    \ 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpt31txtix.py\", line 102\n    def check(candidate):\n \
    \   ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factor = 1\n    while n > 1:\n        while\
    \ n % factor == 0:\n            factorization.append(factor)\n            n //=\
    \ factor\n        factor += 1\n    if n > 1:\n        factorization.append(n)\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n = n // i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp46_zagg7.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp46_zagg7.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmp46_zagg7.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8k1__sb2.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp8k1__sb2.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmp8k1__sb2.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        i += 1\n    if factors:\n        factors.append(n)\n        factorization.append(factors)\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqlox9pbr.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpqlox9pbr.py\", line 40,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpqlox9pbr.py\", line 30,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp0kmh170.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpp0kmh170.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpp0kmh170.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    for i in range(2, n+1):\n\
    \        if n % i == 0:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \    \n    if factors:\n        factors.append(n)\n        factorization.append(factors)\n\
    \    \n    return factorization\n\ndef check(candidate):\n    assert candidate(2)\
    \ == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2,\
    \ 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3,\
    \ 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsw9vkat3.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpsw9vkat3.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpsw9vkat3.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    i = 2\n    while i *\
    \ i <= n:\n        if n % i:\n            factors.append(i)\n            n //=\
    \ i\n        else:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factor\ndef check(candidate):\n    assert candidate(2)\
    \ == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2,\
    \ 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3,\
    \ 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqzsugv4l.py\", line\
    \ 116, in <module>\n    test_check()\n  File \"/tmp/tmpqzsugv4l.py\", line 114,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpqzsugv4l.py\", line 104,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factor = 1\n    while factor <= n:\n       \
    \ if n % factor == 0:\n            factorization.append(factor)\n            n\
    \ = n // factor\n        else:\n            factor += 1\n    factorization.append(n)\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp1vhemx8.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpp1vhemx8.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpp1vhemx8.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            n = n // i\n\
    \        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n\
    \    factorization.extend(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwbxjbd2m.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpwbxjbd2m.py\", line 39,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpwbxjbd2m.py\", line 30,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factor = 2\n    while factor <= n:\n       \
    \ if n % factor == 0:\n            factorization.append(factor)\n            n\
    \ = n // factor\n        else:\n            factor += 1\n    factorization.append(n)\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0klkpm1l.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp0klkpm1l.py\", line 36,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmp0klkpm1l.py\", line 26,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpstfyy8c6.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpstfyy8c6.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpstfyy8c6.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp2eckdj8.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpp2eckdj8.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpp2eckdj8.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factor = 1\n    while factor <= n:\n       \
    \ if n % factor == 0:\n            factorization.append(factor)\n            n\
    \ = n // factor\n        else:\n            factor += 1\n    factorization.append(n)\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i\
    \ == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(n)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n            factorization.append(n // i)\n            factorization.append(n\
    \ // i)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq024jl4z.py\", line\
    \ 95, in <module>\n    test_check()\n  File \"/tmp/tmpq024jl4z.py\", line 93,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpq024jl4z.py\", line 83,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxbnij4o_.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpxbnij4o_.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpxbnij4o_.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5cnmsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpq5cnmsdk.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpq5cnmsdk.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmxg6q1uq.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpmxg6q1uq.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpmxg6q1uq.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    for i in range(2, n):\n\
    \        if n % i == 0:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsqyic93n.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpsqyic93n.py\", line 36,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpsqyic93n.py\", line 26,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    i = 2\n    while i *\
    \ i <= n:\n        if n % i:\n            factors.append(i)\n            n //=\
    \ i\n        else:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factor\ndef check(candidate):\n    assert candidate(2)\
    \ == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2,\
    \ 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3,\
    \ 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmsjr0yvi.py\", line\
    \ 116, in <module>\n    test_check()\n  File \"/tmp/tmpmsjr0yvi.py\", line 114,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpmsjr0yvi.py\", line 104,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmi4z9xjw.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpmi4z9xjw.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpmi4z9xjw.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factor = 1\n    while factor <= n:\n       \
    \ if n % factor == 0:\n            factorization.append(factor)\n            n\
    \ = n // factor\n        else:\n            factor += 1\n    factorization.append(n)\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n        i += 1\n    factors.append(n)\n    factorization.extend(factors)\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkszmo5yn.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpkszmo5yn.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpkszmo5yn.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        i += 1\n    if factors:\n        factors.append(n)\n        factorization.append(factors)\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa074oiq5.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpa074oiq5.py\", line 40,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpa074oiq5.py\", line 30,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirkynd9a.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpirkynd9a.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpirkynd9a.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsmu4wb1u.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpsmu4wb1u.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpsmu4wb1u.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuvy53scg.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpuvy53scg.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpuvy53scg.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factor = 1\n    while factor <= n:\n       \
    \ if n % factor == 0:\n            factorization.append(factor)\n            n\
    \ //= factor\n        else:\n            factor += 1\n    if n > 1:\n        factorization.append(n)\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgt0mg3u1.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgt0mg3u1.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpgt0mg3u1.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphpqa2k8c.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmphpqa2k8c.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmphpqa2k8c.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            n //= i\n\
    \        else:\n            factors.append(i)\n            factors.append(n //\
    \ i)\n            factors.append(i)\n            factors.append(n // i)\n    \
    \        factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n \ndef check(candidate):\n    assert candidate(2)\
    \ == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2,\
    \ 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3,\
    \ 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmput_c5r4n.py\", line 102\n    def check(candidate):\n \
    \   ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    for i in range(2, n+1):\n\
    \        if n % i == 0:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \    \n    return factorization\n\ndef check(candidate):\n    assert candidate(2)\
    \ == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2,\
    \ 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3,\
    \ 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp33ikms_k.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp33ikms_k.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmp33ikms_k.py\", line 27,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpunb4oaxd.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpunb4oaxd.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpunb4oaxd.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n        i += 1\n    factors.append(n)\n    factorization.append(factors)\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7x6wni15.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp7x6wni15.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmp7x6wni15.py\", line 27,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_q2cpn_r.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp_q2cpn_r.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmp_q2cpn_r.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factor = 2\n    while factor <= n:\n       \
    \ if n % factor == 0:\n            factorization.append(factor)\n            n\
    \ = n // factor\n        else:\n            factor += 1\n    factorization.append(n)\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzdp6h8j8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzdp6h8j8.py\", line 36,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpzdp6h8j8.py\", line 26,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ewl9rqk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9ewl9rqk.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmp9ewl9rqk.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprwvptci1.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmprwvptci1.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmprwvptci1.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factor = 1\n    while factor <= n:\n       \
    \ if n % factor == 0:\n            factorization.append(factor)\n            n\
    \ = n // factor\n        else:\n            factor += 1\n    if n > 1:\n     \
    \   factorization.append(n)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphyjnatcc.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmphyjnatcc.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmphyjnatcc.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpekshaypg.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpekshaypg.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpekshaypg.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2rsmn7je.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp2rsmn7je.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmp2rsmn7je.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv1udc72w.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpv1udc72w.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpv1udc72w.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf7zkjrpd.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpf7zkjrpd.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpf7zkjrpd.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmdgrfr07.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpmdgrfr07.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpmdgrfr07.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    for i in range(2, n+1):\n\
    \        if n % i == 0:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp50rit3m4.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp50rit3m4.py\", line 36,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmp50rit3m4.py\", line 26,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factor = 1\n    while factor <= n:\n       \
    \ if n % factor == 0:\n            factorization.append(factor)\n            n\
    \ = n // factor\n        else:\n            factor += 1\n    if n > 1:\n     \
    \   factorization.append(n)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            n //= i\n\
    \        else:\n            factors.append(i)\n            factors.append(n //\
    \ i)\n            factors.append(i)\n            factors.append(n // i)\n    \
    \        factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n \ndef check(candidate):\n    assert candidate(2)\
    \ == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2,\
    \ 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3,\
    \ 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpqur8dpih.py\", line 102\n    def check(candidate):\n \
    \   ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1f3z4b_.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpo1f3z4b_.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpo1f3z4b_.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpccbyn8rf.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpccbyn8rf.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpccbyn8rf.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
