name: HumanEval_47_median
language: python
results:
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmputweholk.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmputweholk.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmputweholk.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkqbukzii.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpkqbukzii.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpkqbukzii.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5heqgldj.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5heqgldj.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp5heqgldj.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l)/2)-1]\n    else:\n\
    \        mid = len(l)/2\n        return (l[mid-1] + l[mid])/2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfov6anv3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfov6anv3.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpfov6anv3.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpfov6anv3.py\"\
    , line 15, in median\n    return (l[mid-1] + l[mid])/2\nTypeError: list indices\
    \ must be integers or slices, not float\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyqdy063f.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpyqdy063f.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpyqdy063f.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuf7qqfdx.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpuf7qqfdx.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpuf7qqfdx.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpak9woqkj.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpak9woqkj.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpak9woqkj.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3se925se.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp3se925se.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp3se925se.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_s1kgmnr.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp_s1kgmnr.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp_s1kgmnr.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8q8cq6jg.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp8q8cq6jg.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp8q8cq6jg.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfg6bwr0j.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpfg6bwr0j.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpfg6bwr0j.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk228zcvx.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpk228zcvx.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpk228zcvx.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) + 1) / 2) -\
    \ 1]\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo6dnlma_.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpo6dnlma_.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpo6dnlma_.py\", line 18, in\
    \ check\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  File \"/tmp/tmpo6dnlma_.py\"\
    , line 12, in median\n    return l[((len(l) + 1) / 2) - 1]\nTypeError: list indices\
    \ must be integers or slices, not float\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp77052t4k.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp77052t4k.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp77052t4k.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) - 1) // 2) -\
    \ 1]\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxs6huj2n.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxs6huj2n.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpxs6huj2n.py\", line 18, in\
    \ check\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu1_6768o.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpu1_6768o.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpu1_6768o.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l)/2) - 1]\n   \
    \ else:\n        return l[len(l)/2]\n\ndef check(candidate):\n    assert candidate([3,\
    \ 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n\
    \    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert\
    \ candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpud39geyb.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpud39geyb.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpud39geyb.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpud39geyb.py\"\
    , line 14, in median\n    return l[len(l)/2]\nTypeError: list indices must be\
    \ integers or slices, not float\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) - 1) // 2)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxee20ax.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwxee20ax.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpwxee20ax.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvo1qai6s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpvo1qai6s.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpvo1qai6s.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjtub_1x8.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpjtub_1x8.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpjtub_1x8.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l)/2) - 1]\n   \
    \ else:\n        mid = len(l) // 2\n        return (l[mid-1] + l[mid]) / 2\n\n\
    def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc3ycutej.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpc3ycutej.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpc3ycutej.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0mfol7lr.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp0mfol7lr.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp0mfol7lr.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc6ecp3io.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpc6ecp3io.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpc6ecp3io.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps2uurvyk.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmps2uurvyk.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmps2uurvyk.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) + 1) / 2) -\
    \ 1]\n    else:\n        return l[len(l) / 2]\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9qf9fnlk.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9qf9fnlk.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp9qf9fnlk.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmp9qf9fnlk.py\"\
    , line 14, in median\n    return l[len(l) / 2]\nTypeError: list indices must be\
    \ integers or slices, not float\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5zdzmf_c.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5zdzmf_c.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp5zdzmf_c.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) + 1) / 2) -\
    \ 1]\n    else:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n\ndef\
    \ check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe5n0pe5s.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpe5n0pe5s.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpe5n0pe5s.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpe5n0pe5s.py\"\
    , line 14, in median\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\nTypeError:\
    \ list indices must be integers or slices, not float\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpahru0whb.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpahru0whb.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpahru0whb.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk4adj36o.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpk4adj36o.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpk4adj36o.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) + 1) / 2) -\
    \ 1]\n    else:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n\ndef\
    \ check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn3msx1s1.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpn3msx1s1.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpn3msx1s1.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpn3msx1s1.py\"\
    , line 14, in median\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\nTypeError:\
    \ list indices must be integers or slices, not float\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkbks66yk.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpkbks66yk.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpkbks66yk.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5y4xzts.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpg5y4xzts.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpg5y4xzts.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l)/2) - 1]\n   \
    \ else:\n        return (l[len(l)/2] + l[len(l)/2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl60vb37q.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpl60vb37q.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpl60vb37q.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpl60vb37q.py\"\
    , line 14, in median\n    return (l[len(l)/2] + l[len(l)/2 - 1]) / 2\nTypeError:\
    \ list indices must be integers or slices, not float\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp78zp9ptv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp78zp9ptv.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp78zp9ptv.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplwbtcgz4.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmplwbtcgz4.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmplwbtcgz4.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7h537sr0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7h537sr0.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp7h537sr0.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjsqxc70v.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpjsqxc70v.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpjsqxc70v.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplmoon4fx.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmplmoon4fx.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmplmoon4fx.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph8_yfy_9.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmph8_yfy_9.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmph8_yfy_9.py\", line 18, in\
    \ check\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcvosscwl.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpcvosscwl.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpcvosscwl.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7jtg6b8s.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7jtg6b8s.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp7jtg6b8s.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcuftez46.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpcuftez46.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpcuftez46.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn61m9riv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpn61m9riv.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpn61m9riv.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l)/2) - 1]\n   \
    \ else:\n        return (l[len(l)/2] + l[len(l)/2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgr42xnaq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpgr42xnaq.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpgr42xnaq.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpgr42xnaq.py\"\
    , line 14, in median\n    return (l[len(l)/2] + l[len(l)/2 - 1]) / 2\nTypeError:\
    \ list indices must be integers or slices, not float\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkuq3n5u7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkuq3n5u7.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpkuq3n5u7.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdnc90nfl.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpdnc90nfl.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpdnc90nfl.py\", line 18, in\
    \ check\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) + 1) / 2) -\
    \ 1]\n    else:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n\ndef\
    \ check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4ww3i963.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp4ww3i963.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp4ww3i963.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmp4ww3i963.py\"\
    , line 14, in median\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\nTypeError:\
    \ list indices must be integers or slices, not float\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkpiptm3.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpgkpiptm3.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpgkpiptm3.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp543ddn7s.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp543ddn7s.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp543ddn7s.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9conp512.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9conp512.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp9conp512.py\", line 18, in\
    \ check\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprruaq1an.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmprruaq1an.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmprruaq1an.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv380vfh6.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpv380vfh6.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpv380vfh6.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1a1qedu5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp1a1qedu5.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp1a1qedu5.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)//2]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphmeyfxg4.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmphmeyfxg4.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmphmeyfxg4.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmio3hdff.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpmio3hdff.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpmio3hdff.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) - 1) // 2) -\
    \ 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n\
    def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp722q5669.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp722q5669.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp722q5669.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjony3ka6.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpjony3ka6.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpjony3ka6.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0jpy2gs5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp0jpy2gs5.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp0jpy2gs5.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmporkvr4ta.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmporkvr4ta.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmporkvr4ta.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmowrm7op.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmowrm7op.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpmowrm7op.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) - 1) // 2) -\
    \ 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n\
    def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4p8p9s5m.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp4p8p9s5m.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp4p8p9s5m.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprbcygw65.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmprbcygw65.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmprbcygw65.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l)/2) - 1]\n   \
    \ else:\n        return (l[len(l)/2] + l[len(l)/2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1i0wjzmg.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp1i0wjzmg.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp1i0wjzmg.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmp1i0wjzmg.py\"\
    , line 14, in median\n    return (l[len(l)/2] + l[len(l)/2 - 1]) / 2\nTypeError:\
    \ list indices must be integers or slices, not float\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplkgkciaa.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmplkgkciaa.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmplkgkciaa.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfmcf58w8.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpfmcf58w8.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpfmcf58w8.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l)/2) - 1]\n   \
    \ else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\n\
    def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_qw_gd46.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_qw_gd46.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp_qw_gd46.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppfwnnmj_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppfwnnmj_.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmppfwnnmj_.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxtg_kofd.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxtg_kofd.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpxtg_kofd.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp06bg2mld.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp06bg2mld.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp06bg2mld.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l)/2) - 1]\n   \
    \ else:\n        return (l[len(l)/2] + l[len(l)/2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprbdpyw66.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmprbdpyw66.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmprbdpyw66.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmprbdpyw66.py\"\
    , line 14, in median\n    return (l[len(l)/2] + l[len(l)/2 - 1]) / 2\nTypeError:\
    \ list indices must be integers or slices, not float\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0vz7_5hf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp0vz7_5hf.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp0vz7_5hf.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) + 1) // 2) -\
    \ 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n\
    def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprl7yx9kf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmprl7yx9kf.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmprl7yx9kf.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5iixkonl.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5iixkonl.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp5iixkonl.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkh68peit.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpkh68peit.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpkh68peit.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkg2i9jr1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkg2i9jr1.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpkg2i9jr1.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3y9qxygd.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp3y9qxygd.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp3y9qxygd.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99bjedps.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp99bjedps.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp99bjedps.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) - 1) // 2) -\
    \ 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n\
    def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpctqm26cn.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpctqm26cn.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpctqm26cn.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg7zmnnl8.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpg7zmnnl8.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpg7zmnnl8.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp368qj9pc.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp368qj9pc.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp368qj9pc.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnqcpgpk5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpnqcpgpk5.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpnqcpgpk5.py\", line 18, in\
    \ check\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3v9phaen.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp3v9phaen.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp3v9phaen.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcvfjy2kn.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpcvfjy2kn.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpcvfjy2kn.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfpyeczg7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfpyeczg7.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpfpyeczg7.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l)/2)-1]\n    else:\n\
    \        mid = len(l) // 2\n        return (l[mid-1] + l[mid]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyu9kvdzl.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyu9kvdzl.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpyu9kvdzl.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyg5vj1be.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpyg5vj1be.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpyg5vj1be.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) + 1) // 2) -\
    \ 1]\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaqe9rsp7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpaqe9rsp7.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpaqe9rsp7.py\", line 18, in\
    \ check\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp60i2wfu8.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp60i2wfu8.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp60i2wfu8.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplfedl9wx.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmplfedl9wx.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmplfedl9wx.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfs9ujq7_.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpfs9ujq7_.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpfs9ujq7_.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwmsoimuj.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwmsoimuj.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpwmsoimuj.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_9zmywlb.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_9zmywlb.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp_9zmywlb.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzmdz1s5a.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpzmdz1s5a.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpzmdz1s5a.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdkky56s9.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpdkky56s9.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpdkky56s9.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4n19d2tc.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp4n19d2tc.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp4n19d2tc.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu4xja7qo.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpu4xja7qo.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpu4xja7qo.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo3wxbjxk.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpo3wxbjxk.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpo3wxbjxk.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy_rg5d2j.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpy_rg5d2j.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpy_rg5d2j.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfqzhe5z2.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpfqzhe5z2.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpfqzhe5z2.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) + 1) / 2) -\
    \ 1]\n    else:\n        return l[((len(l) + 1) / 2)]\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6o3o4pnc.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp6o3o4pnc.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp6o3o4pnc.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmp6o3o4pnc.py\"\
    , line 14, in median\n    return l[((len(l) + 1) / 2)]\nTypeError: list indices\
    \ must be integers or slices, not float\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) + 1) / 2) -\
    \ 1]\n    else:\n        return l[len(l) / 2]\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprao73gg5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmprao73gg5.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmprao73gg5.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmprao73gg5.py\"\
    , line 14, in median\n    return l[len(l) / 2]\nTypeError: list indices must be\
    \ integers or slices, not float\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpffktu6uk.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpffktu6uk.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpffktu6uk.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcgwx2_m3.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpcgwx2_m3.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpcgwx2_m3.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_ov0myx.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmps_ov0myx.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmps_ov0myx.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_2670jc.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpi_2670jc.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpi_2670jc.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) + 1) // 2) -\
    \ 1]\n    else:\n        return l[((len(l) + 1) / 2) - 1]\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8t0jfbu4.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp8t0jfbu4.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp8t0jfbu4.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmp8t0jfbu4.py\"\
    , line 14, in median\n    return l[((len(l) + 1) / 2) - 1]\nTypeError: list indices\
    \ must be integers or slices, not float\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxre02d_h.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxre02d_h.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpxre02d_h.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcolcfxv2.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpcolcfxv2.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpcolcfxv2.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4ztg41w_.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp4ztg41w_.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp4ztg41w_.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) - 1) // 2) -\
    \ 1]\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9soxc3jx.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9soxc3jx.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp9soxc3jx.py\", line 18, in\
    \ check\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4iq1f0_e.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4iq1f0_e.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp4iq1f0_e.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l)/2) - 1]\n   \
    \ else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\n\
    def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdypijwhu.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpdypijwhu.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpdypijwhu.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) - 1) // 2) -\
    \ 1]\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp937lju_z.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp937lju_z.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp937lju_z.py\", line 18, in\
    \ check\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsame8awi.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpsame8awi.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpsame8awi.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpppfglhfb.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpppfglhfb.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpppfglhfb.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9z32bxwz.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9z32bxwz.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp9z32bxwz.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpay1o86ij.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpay1o86ij.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpay1o86ij.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqgwku_m.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmplqgwku_m.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmplqgwku_m.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpscjvxjas.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpscjvxjas.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpscjvxjas.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2q5g1en.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmph2q5g1en.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmph2q5g1en.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm1mc9mw4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpm1mc9mw4.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpm1mc9mw4.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7vr_2vac.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7vr_2vac.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp7vr_2vac.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp70x2ob27.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp70x2ob27.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp70x2ob27.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqzkh1i7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpuqzkh1i7.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpuqzkh1i7.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyv92uvij.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpyv92uvij.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpyv92uvij.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5seg63qh.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5seg63qh.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp5seg63qh.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf4xlfy1y.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf4xlfy1y.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpf4xlfy1y.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6pjbs86j.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp6pjbs86j.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp6pjbs86j.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1pvbs679.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp1pvbs679.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp1pvbs679.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmdsdei1p.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpmdsdei1p.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpmdsdei1p.py\", line 18, in\
    \ check\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptbatmckv.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmptbatmckv.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmptbatmckv.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l)/2) - 1]\n   \
    \ else:\n        mid = len(l) // 2\n        return (l[mid-1] + l[mid]) / 2\n\n\
    def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp373ypzu6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp373ypzu6.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp373ypzu6.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8er6xrxr.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp8er6xrxr.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp8er6xrxr.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_dnkoum1.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp_dnkoum1.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp_dnkoum1.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe1e8t3hx.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpe1e8t3hx.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpe1e8t3hx.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6q5qc8s8.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp6q5qc8s8.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp6q5qc8s8.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmputj1h3fg.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmputj1h3fg.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmputj1h3fg.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvafrhowz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpvafrhowz.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpvafrhowz.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1_bf0eq2.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp1_bf0eq2.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp1_bf0eq2.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88ervoqr.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp88ervoqr.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp88ervoqr.py\", line 18, in\
    \ check\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxl8irc4v.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxl8irc4v.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpxl8irc4v.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy677iikb.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpy677iikb.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpy677iikb.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_qdfhjaw.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp_qdfhjaw.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp_qdfhjaw.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu4tcmoh5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpu4tcmoh5.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpu4tcmoh5.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l)/2)-1]\n    else:\n\
    \        mid = len(l) // 2\n        return (l[mid-1] + l[mid]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphplbjtmx.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphplbjtmx.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmphplbjtmx.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwbofoo7p.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwbofoo7p.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpwbofoo7p.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzqd2ln3j.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpzqd2ln3j.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpzqd2ln3j.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) - 1) // 2) -\
    \ 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n\
    def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiwncf7fy.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpiwncf7fy.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpiwncf7fy.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) - 1) // 2) -\
    \ 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n\
    def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgorvfhgo.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpgorvfhgo.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpgorvfhgo.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf3i2neyt.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpf3i2neyt.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpf3i2neyt.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nvbewhc.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5nvbewhc.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp5nvbewhc.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0wvsjrwx.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp0wvsjrwx.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp0wvsjrwx.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoaapk8hk.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpoaapk8hk.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpoaapk8hk.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwal5cyu4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwal5cyu4.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpwal5cyu4.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkndu0euz.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpkndu0euz.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpkndu0euz.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpinh82u8u.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpinh82u8u.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpinh82u8u.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2y9627cz.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp2y9627cz.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp2y9627cz.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaf3tqadc.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpaf3tqadc.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpaf3tqadc.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)//2]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp74o2xrfw.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp74o2xrfw.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp74o2xrfw.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn_idzkp0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpn_idzkp0.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpn_idzkp0.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjuecvs9b.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpjuecvs9b.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpjuecvs9b.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvmumyv7i.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpvmumyv7i.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpvmumyv7i.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l)/2) - 1]\n   \
    \ else:\n        return (l[len(l)/2] + l[len(l)/2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp90koi7o0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp90koi7o0.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp90koi7o0.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmp90koi7o0.py\"\
    , line 14, in median\n    return (l[len(l)/2] + l[len(l)/2 - 1]) / 2\nTypeError:\
    \ list indices must be integers or slices, not float\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjqo39pzn.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpjqo39pzn.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpjqo39pzn.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe_he6uit.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpe_he6uit.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpe_he6uit.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2dqyo3x9.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp2dqyo3x9.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp2dqyo3x9.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_fvhm_4.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmph_fvhm_4.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmph_fvhm_4.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) + 1) // 2) -\
    \ 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n\
    def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphi86nwf2.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmphi86nwf2.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmphi86nwf2.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxgvi0qqi.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxgvi0qqi.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpxgvi0qqi.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmpltavz6.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpmpltavz6.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpmpltavz6.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdohhac3c.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpdohhac3c.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpdohhac3c.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) + 1) / 2) -\
    \ 1]\n    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1])\
    \ / 2\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n \
    \   assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5])\
    \ == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9,\
    \ 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprcj9c63t.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmprcj9c63t.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmprcj9c63t.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp91q5ypu4.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp91q5ypu4.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp91q5ypu4.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzdudk4c7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpzdudk4c7.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpzdudk4c7.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp68m1guim.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp68m1guim.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp68m1guim.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l)/2) - 1]\n   \
    \ else:\n        return (l[len(l)/2] + l[len(l)/2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprxit5mhr.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmprxit5mhr.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmprxit5mhr.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmprxit5mhr.py\"\
    , line 14, in median\n    return (l[len(l)/2] + l[len(l)/2 - 1]) / 2\nTypeError:\
    \ list indices must be integers or slices, not float\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9od3kz4c.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9od3kz4c.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp9od3kz4c.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2uj15rjr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2uj15rjr.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp2uj15rjr.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnfd303fz.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpnfd303fz.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpnfd303fz.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) - 1) // 2) -\
    \ 1]\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpplz0cpw1.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpplz0cpw1.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpplz0cpw1.py\", line 18, in\
    \ check\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptf71af5e.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmptf71af5e.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmptf71af5e.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxv32iwuy.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxv32iwuy.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpxv32iwuy.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk6qg9mdi.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpk6qg9mdi.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpk6qg9mdi.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) - 1) // 2) -\
    \ 1]\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3jrupdua.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp3jrupdua.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp3jrupdua.py\", line 18, in\
    \ check\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_33gjm6j.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp_33gjm6j.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp_33gjm6j.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)//2]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeuhd3_ij.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpeuhd3_ij.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpeuhd3_ij.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp12b94176.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp12b94176.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp12b94176.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb36j1wks.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpb36j1wks.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpb36j1wks.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) - 1) // 2) -\
    \ 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n\
    def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyb34dh38.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpyb34dh38.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpyb34dh38.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyamczf2g.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpyamczf2g.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpyamczf2g.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyr1ofeq3.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpyr1ofeq3.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpyr1ofeq3.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpds1ft7n4.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpds1ft7n4.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpds1ft7n4.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3qyo20ip.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp3qyo20ip.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp3qyo20ip.py\", line 18, in\
    \ check\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) + 1) / 2) -\
    \ 1]\n    else:\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n\ndef\
    \ check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg45p5clu.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpg45p5clu.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpg45p5clu.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpg45p5clu.py\"\
    , line 14, in median\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\nTypeError:\
    \ list indices must be integers or slices, not float\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppgllrfyb.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmppgllrfyb.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmppgllrfyb.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l)/2) - 1]\n   \
    \ else:\n        mid = len(l) // 2\n        return (l[mid-1] + l[mid]) / 2\n\n\
    def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyw_gw_eq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyw_gw_eq.py\", line 25,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpyw_gw_eq.py\", line 18, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpthyyvdq5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpthyyvdq5.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpthyyvdq5.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) - 1) // 2) -\
    \ 1]\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphiadfhmh.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmphiadfhmh.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmphiadfhmh.py\", line 18, in\
    \ check\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) - 1) // 2) -\
    \ 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n\
    def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkvclst7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpkkvclst7.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmpkkvclst7.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 0:\n        return l[((len(l) // 2) - 1)]\n\
    \    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) // 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6sak629n.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp6sak629n.py\", line 24,\
    \ in test_check\n    check(median)\n  File \"/tmp/tmp6sak629n.py\", line 17, in\
    \ check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
