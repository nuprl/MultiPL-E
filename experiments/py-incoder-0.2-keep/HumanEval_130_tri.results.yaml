name: HumanEval_130_tri
language: python
results:
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxz1az0fi.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpxz1az0fi.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxz1az0fi.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpxz1az0fi.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmpxz1az0fi.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpxz1az0fi.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpxz1az0fi.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpxz1az0fi.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpxz1az0fi.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpxz1az0fi.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpxz1az0fi.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpxz1az0fi.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpxz1az0fi.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpxz1az0fi.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpxz1az0fi.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpxz1az0fi.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpxz1az0fi.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpxz1az0fi.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpxz1az0fi.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpxz1az0fi.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpxz1az0fi.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n    else:\n        return [tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 3)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpicz2wczx.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpicz2wczx.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpicz2wczx.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpicz2wczx.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3)]\n  File \"/tmp/tmpicz2wczx.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpicz2wczx.py\", line 27, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n -\
    \ 3)]\n  File \"/tmp/tmpicz2wczx.py\", line 25, in tri\n    return [tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpicz2wczx.py\", line 27, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 3)]\n\
    \  File \"/tmp/tmpicz2wczx.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1)]\n  File \"/tmp/tmpicz2wczx.py\", line 27, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"\
    /tmp/tmpicz2wczx.py\", line 25, in tri\n    return [tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1)]\n  File \"/tmp/tmpicz2wczx.py\", line 27, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"/tmp/tmpicz2wczx.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"\
    /tmp/tmpicz2wczx.py\", line 27, in tri\n    return [tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"/tmp/tmpicz2wczx.py\", line\
    \ 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpicz2wczx.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n -\
    \ 2) + tri(n - 3)]\n  File \"/tmp/tmpicz2wczx.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpicz2wczx.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3)]\n  File \"/tmp/tmpicz2wczx.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpicz2wczx.py\", line 27, in\
    \ tri"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpix44vy1u.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpix44vy1u.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpix44vy1u.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpix44vy1u.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n \
    \ File \"/tmp/tmpix44vy1u.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpix44vy1u.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmpix44vy1u.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpix44vy1u.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmpix44vy1u.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpix44vy1u.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File\
    \ \"/tmp/tmpix44vy1u.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpix44vy1u.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmpix44vy1u.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpix44vy1u.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmpix44vy1u.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpix44vy1u.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File\
    \ \"/tmp/tmpix44vy1u.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpix44vy1u.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmpix44vy1u.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpix44vy1u.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmpix44vy1u.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n\
    \    else:\n        mid = (n-1) // 2\n        left = tri(mid)\n        right =\
    \ tri(mid+1)\n        return left + [mid] + right\n\ndef check(candidate):\n \
    \   assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyd0lbt9b.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpyd0lbt9b.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpyd0lbt9b.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1,3]\n\
    \    else:\n        tri_1 = tri(n-1)\n        tri_2 = tri(n-2)\n        tri_3\
    \ = tri(n+2)\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2qdqocag.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp2qdqocag.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp2qdqocag.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp2qdqocag.py\", line\
    \ 29, in tri\n    tri_3 = tri(n+2)\n  File \"/tmp/tmp2qdqocag.py\", line 27, in\
    \ tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmp2qdqocag.py\", line 27, in tri\n\
    \    tri_1 = tri(n-1)\n  File \"/tmp/tmp2qdqocag.py\", line 29, in tri\n    tri_3\
    \ = tri(n+2)\n  File \"/tmp/tmp2qdqocag.py\", line 27, in tri\n    tri_1 = tri(n-1)\n\
    \  File \"/tmp/tmp2qdqocag.py\", line 27, in tri\n    tri_1 = tri(n-1)\n  File\
    \ \"/tmp/tmp2qdqocag.py\", line 29, in tri\n    tri_3 = tri(n+2)\n  File \"/tmp/tmp2qdqocag.py\"\
    , line 27, in tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmp2qdqocag.py\", line\
    \ 27, in tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmp2qdqocag.py\", line 29, in\
    \ tri\n    tri_3 = tri(n+2)\n  File \"/tmp/tmp2qdqocag.py\", line 27, in tri\n\
    \    tri_1 = tri(n-1)\n  File \"/tmp/tmp2qdqocag.py\", line 27, in tri\n    tri_1\
    \ = tri(n-1)\n  File \"/tmp/tmp2qdqocag.py\", line 29, in tri\n    tri_3 = tri(n+2)\n\
    \  File \"/tmp/tmp2qdqocag.py\", line 27, in tri\n    tri_1 = tri(n-1)\n  File\
    \ \"/tmp/tmp2qdqocag.py\", line 27, in tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmp2qdqocag.py\"\
    , line 29, in tri\n    tri_3 = tri(n+2)\n  File \"/tmp/tmp2qdqocag.py\", line\
    \ 27, in tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmp2qdqocag.py\", line 27, in\
    \ tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmp2qdqocag.py\", line 29, in tri\n\
    \    tri_3 = tri(n+2)\n  File \"/tmp/tmp2qdqocag.py\", line 27, in tri\n    tri_1\
    \ = tri(n-1)\n  File \"/tmp/tmp2qdqocag.py\", line 27, in tri\n    tri_1 = tri(n-1)\n\
    \  File \"/tmp/tmp2qdqocag.py\", line 29, in tri\n    tri_3 = tri(n+2)\n  File\
    \ \"/tmp/tmp2qdqocag.py\", line 27, in tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmp2qdqocag.py\"\
    , line 27, in tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmp2qdqocag.py\", line\
    \ 29, in tri\n    tri_3 = tri(n+2)\n  File \"/tmp/tmp2qdqocag.py\", line 27, in\
    \ tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmp2qdqocag.py\", line 27, in tri\n\
    \ "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp28evwi5l.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp28evwi5l.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp28evwi5l.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp28evwi5l.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmp28evwi5l.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp28evwi5l.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp28evwi5l.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp28evwi5l.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp28evwi5l.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp28evwi5l.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp28evwi5l.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp28evwi5l.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp28evwi5l.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp28evwi5l.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp28evwi5l.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp28evwi5l.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp28evwi5l.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp28evwi5l.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp28evwi5l.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp28evwi5l.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp28evwi5l.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_twjq1qd.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp_twjq1qd.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp_twjq1qd.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp_twjq1qd.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n \
    \ File \"/tmp/tmp_twjq1qd.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp_twjq1qd.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmp_twjq1qd.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp_twjq1qd.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmp_twjq1qd.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp_twjq1qd.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File\
    \ \"/tmp/tmp_twjq1qd.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp_twjq1qd.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmp_twjq1qd.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp_twjq1qd.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmp_twjq1qd.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp_twjq1qd.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File\
    \ \"/tmp/tmp_twjq1qd.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp_twjq1qd.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmp_twjq1qd.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp_twjq1qd.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmp_twjq1qd.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdlgrgn32.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpdlgrgn32.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdlgrgn32.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpdlgrgn32.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmpdlgrgn32.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpdlgrgn32.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpdlgrgn32.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpdlgrgn32.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpdlgrgn32.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpdlgrgn32.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpdlgrgn32.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpdlgrgn32.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpdlgrgn32.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpdlgrgn32.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpdlgrgn32.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpdlgrgn32.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpdlgrgn32.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpdlgrgn32.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpdlgrgn32.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpdlgrgn32.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpdlgrgn32.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  \
    \  else:\n        return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)]\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpedu8o326.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpedu8o326.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpedu8o326.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpedu8o326.py\", line\
    \ 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)]\n  File \"/tmp/tmpedu8o326.py\", line 23, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpedu8o326.py\", line 23, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpedu8o326.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)]\n  File \"/tmp/tmpedu8o326.py\", line 23, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpedu8o326.py\", line\
    \ 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)]\n  File \"/tmp/tmpedu8o326.py\", line 23, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpedu8o326.py\", line 25, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)]\n  File \"/tmp/tmpedu8o326.py\", line 23, in tri\n    return [tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpedu8o326.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \  File \"/tmp/tmpedu8o326.py\", line 23, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)]\n  File \"/tmp/tmpedu8o326.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"\
    /tmp/tmpedu8o326.py\", line 23, in tri\n    return [tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)]\n  File \"/tmp/tmpedu8o326.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpedu8o326.py\"\
    , line 23, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"\
    /tmp/tmpedu8o326.py\", line 25, in tri\n    return [tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpedu8o326.py\", line\
    \ 23, in tri"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [3]\n    else:\n        tri_1 = tri(n - 1)\n\
    \        tri_2 = tri(n - 2)\n        tri_3 = tri(n + 1)\n        return tri_1\
    \ + tri_2 + tri_3\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2q_900ty.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp2q_900ty.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp2q_900ty.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp2q_900ty.py\", line\
    \ 25, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp2q_900ty.py\", line 27,\
    \ in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp2q_900ty.py\", line 25, in\
    \ tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp2q_900ty.py\", line 27, in tri\n\
    \    tri_3 = tri(n + 1)\n  File \"/tmp/tmp2q_900ty.py\", line 25, in tri\n   \
    \ tri_1 = tri(n - 1)\n  File \"/tmp/tmp2q_900ty.py\", line 27, in tri\n    tri_3\
    \ = tri(n + 1)\n  File \"/tmp/tmp2q_900ty.py\", line 25, in tri\n    tri_1 = tri(n\
    \ - 1)\n  File \"/tmp/tmp2q_900ty.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n\
    \  File \"/tmp/tmp2q_900ty.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n  File\
    \ \"/tmp/tmp2q_900ty.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n  File \"\
    /tmp/tmp2q_900ty.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp2q_900ty.py\"\
    , line 27, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp2q_900ty.py\", line\
    \ 25, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp2q_900ty.py\", line 27,\
    \ in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp2q_900ty.py\", line 25, in\
    \ tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp2q_900ty.py\", line 27, in tri\n\
    \    tri_3 = tri(n + 1)\n  File \"/tmp/tmp2q_900ty.py\", line 25, in tri\n   \
    \ tri_1 = tri(n - 1)\n  File \"/tmp/tmp2q_900ty.py\", line 27, in tri\n    tri_3\
    \ = tri(n + 1)\n  File \"/tmp/tmp2q_900ty.py\", line 25, in tri\n    tri_1 = tri(n\
    \ - 1)\n  File \"/tmp/tmp2q_900ty.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n\
    \  File \"/tmp/tmp2q_900ty.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n  File\
    \ \"/tmp/tmp2q_900ty.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n  File \"\
    /tmp/tmp2q_900ty.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp2q_900ty.py\"\
    , line 27, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp2q_900ty.py\", line\
    \ 25, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp2q_900ty.py\", line 27,\
    \ in tri\n    tri_3 = tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n == 3:\n        return [1,2,3]\n\
    \    else:\n        tri_1 = tri(n-1)\n        tri_2 = tri(n-2)\n        tri_3\
    \ = tri(n-3)\n        tri_4 = tri(n-4)\n        tri_5 = tri(n-5)\n        tri_6\
    \ = tri(n-6)\n        tri_7 = tri(n-7)\n        tri_8 = tri(n-8)\n        tri_9\
    \ = tri(n-9)\n        tri_10 = tri(n-10)\n        tri_11 = tri(n-11)\n       \
    \ tri_12 = tri(n-12)\n        tri_13 = tri(n-13)\n        tri_14 = tri(n-14)\n\
    \        tri_15 = tri(n-15)\n        tri_16 = tri(n-16)\n        tri_17 = tri(n-17)\n\
    \        tri_18 = tri(n-18)\n        tri_19 = tri(n-19)\n        tri_20 = tri(n-20)\n\
    \        tri_21 = tri(n-21)\n        tri_22 = tri(n-22)\n        tri_23 = tri(n-23)\n\
    \        tri_24 = tri(n-24)\n        tri_25 = tri(n-25)\n        tri_26 = tri(n-26)\n\
    \        tri_27 = tri(n-27)\n        tri_28 = tri(n-28)\n        tri_29 = tri(n-29)\n\
    \        tri_30 = tri(n-30)\n        tri_31 = tri(n-31)\n        tri_32 = tri(n-32)\n\
    \        tri_33 = tri(n-33)\n        tri_34 = tri(n-34)\n        tri_35 = tri(n-35)\n\
    \        tri_36 = tri(n-36)\n        tri_37 = tri(n-37)\n        tri_38 = tri(n-38)\n\
    \        tri_39 = tri(n-39)\n        tri_40 = tri(n-40)\n        tri_41 = tri(n-41)\n\
    \        tri_42 = tri(n-42)\n        tri_43 = tri(n-43)\n        tri_44 = tri(n-44)\n\
    \        tri_45 = tri(n-45)\n        tri_46 = tri(n-46)\n        tri_47 = tri(n-47)\n\
    \        tri_48 = tri(n-48)\n        tri_49 = tri(n-\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpa3cj1lq1.py\", line 76\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n    else:\n\
    \        return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn_4msejh.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpn_4msejh.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpn_4msejh.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpn_4msejh.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpn_4msejh.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpn_4msejh.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpn_4msejh.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpn_4msejh.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpn_4msejh.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpn_4msejh.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpn_4msejh.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpn_4msejh.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpn_4msejh.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpn_4msejh.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpn_4msejh.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpn_4msejh.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpn_4msejh.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpn_4msejh.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) +"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa7a7ejii.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpa7a7ejii.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpa7a7ejii.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpa7a7ejii.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpa7a7ejii.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpa7a7ejii.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpa7a7ejii.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpa7a7ejii.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpa7a7ejii.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpa7a7ejii.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpa7a7ejii.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpa7a7ejii.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpa7a7ejii.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpa7a7ejii.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpa7a7ejii.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpa7a7ejii.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpa7a7ejii.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpa7a7ejii.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpa7a7ejii.py\", line 25, in tri\n    return\
    \ tri(n - 1)"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz88lpsa8.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpz88lpsa8.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpz88lpsa8.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpz88lpsa8.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpz88lpsa8.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpz88lpsa8.py\", line 27, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpz88lpsa8.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpz88lpsa8.py\", line 27, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpz88lpsa8.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpz88lpsa8.py\", line 27, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpz88lpsa8.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpz88lpsa8.py\", line 27, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpz88lpsa8.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpz88lpsa8.py\", line 27, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpz88lpsa8.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2nmzaxfp.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp2nmzaxfp.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp2nmzaxfp.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp2nmzaxfp.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmp2nmzaxfp.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp2nmzaxfp.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmp2nmzaxfp.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp2nmzaxfp.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmp2nmzaxfp.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp2nmzaxfp.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmp2nmzaxfp.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp2nmzaxfp.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmp2nmzaxfp.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp2nmzaxfp.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmp2nmzaxfp.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp2nmzaxfp.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmp2nmzaxfp.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp2nmzaxfp.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmp2nmzaxfp.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp2nmzaxfp.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmp2nmzaxfp.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n == 3:\n        return [1,3,5]\n\
    \    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \   else:\n        return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprarrm1re.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmprarrm1re.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmprarrm1re.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1,\
    \ 2, 3]\n    else:\n        tri_1 = tri(n-1)\n        tri_2 = tri(n-2)\n     \
    \   tri_3 = tri(n+2)\n        return tri_1 + tri_2 + tri_3\n</code>\n<|/ a tags=python,python-3.x\
    \ |>\n<| a dscore=0 |>\n<code>\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpw7o0imd6.py\", line 31\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp95pdq9j7.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp95pdq9j7.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp95pdq9j7.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp95pdq9j7.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  File \"/tmp/tmp95pdq9j7.py\", line 25, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp95pdq9j7.py\", line 27, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n \
    \ File \"/tmp/tmp95pdq9j7.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp95pdq9j7.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmp95pdq9j7.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp95pdq9j7.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmp95pdq9j7.py\", line 25, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp95pdq9j7.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 4)\n  File \"/tmp/tmp95pdq9j7.py\", line 25, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp95pdq9j7.py\", line 27, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  File \"/tmp/tmp95pdq9j7.py\", line 25, in tri\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp95pdq9j7.py\", line 27, in tri\n \
    \   return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File\
    \ \"/tmp/tmp95pdq9j7.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp95pdq9j7.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmp95pdq9j7.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp95pdq9j7.py\", line 27, in tri\n    return tri(n - 1) + tri(n -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1,3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5jtqx92v.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5jtqx92v.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5jtqx92v.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp5jtqx92v.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmp5jtqx92v.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp5jtqx92v.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp5jtqx92v.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp5jtqx92v.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp5jtqx92v.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp5jtqx92v.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp5jtqx92v.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp5jtqx92v.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp5jtqx92v.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp5jtqx92v.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp5jtqx92v.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp5jtqx92v.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp5jtqx92v.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp5jtqx92v.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp5jtqx92v.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp5jtqx92v.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp5jtqx92v.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    if n == 2:\n        return [1,3]\n    if n % 2 == 0:\n        return tri(n-1)\
    \ + tri(n-2)\n    else:\n        return tri(n-1) + tri(n-2) + tri(n+1)\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdq3jhlq8.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpdq3jhlq8.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdq3jhlq8.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpdq3jhlq8.py\", line\
    \ 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpdq3jhlq8.py\"\
    , line 25, in tri\n    r"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1)\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp06nisbzb.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp06nisbzb.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp06nisbzb.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp06nisbzb.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp06nisbzb.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp06nisbzb.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp06nisbzb.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmp06nisbzb.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmp06nisbzb.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmp06nisbzb.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmp06nisbzb.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmp06nisbzb.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmp06nisbzb.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmp06nisbzb.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp06nisbzb.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp06nisbzb.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp06nisbzb.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp06nisbzb.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp06nisbzb.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmp06nisbzb.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmp06nisbzb.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmp06nisbzb.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmp06nisbzb.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmp06nisbzb.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmp06nisbzb.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmp06nisbzb.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp06nisbzb.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp06nisbzb.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp06nisbzb.py\", line 27,\
    \ in tri\n    tri_1 = tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzsy7hyxe.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpzsy7hyxe.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzsy7hyxe.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzsy7hyxe.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  File \"/tmp/tmpzsy7hyxe.py\", line 25, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpzsy7hyxe.py\", line 27, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n \
    \ File \"/tmp/tmpzsy7hyxe.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpzsy7hyxe.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpzsy7hyxe.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpzsy7hyxe.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpzsy7hyxe.py\", line 25, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpzsy7hyxe.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 4)\n  File \"/tmp/tmpzsy7hyxe.py\", line 25, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpzsy7hyxe.py\", line 27, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  File \"/tmp/tmpzsy7hyxe.py\", line 25, in tri\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpzsy7hyxe.py\", line 27, in tri\n \
    \   return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File\
    \ \"/tmp/tmpzsy7hyxe.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpzsy7hyxe.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpzsy7hyxe.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpzsy7hyxe.py\", line 27, in tri\n    return tri(n - 1) + tri(n -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0, 0,\
    \ 0]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1,\
    \ 3]\n    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwf5e66nc.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpwf5e66nc.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwf5e66nc.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwf5e66nc.py\", line\
    \ 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmpwf5e66nc.py\", line 27, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpwf5e66nc.py\", line 29, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpwf5e66nc.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpwf5e66nc.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpwf5e66nc.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpwf5e66nc.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpwf5e66nc.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpwf5e66nc.py\", line 29, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpwf5e66nc.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpwf5e66nc.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpwf5e66nc.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpwf5e66nc.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpwf5e66nc.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpwf5e66nc.py\", line 29, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpwf5e66nc.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpwf5e66nc.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpwf5e66nc.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbrktkm52.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpbrktkm52.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpbrktkm52.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpbrktkm52.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmpbrktkm52.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpbrktkm52.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpbrktkm52.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpbrktkm52.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpbrktkm52.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpbrktkm52.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpbrktkm52.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpbrktkm52.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpbrktkm52.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpbrktkm52.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpbrktkm52.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpbrktkm52.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpbrktkm52.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpbrktkm52.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpbrktkm52.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpbrktkm52.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpbrktkm52.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    if n == 2:\n        return [1,3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplt78oshn.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmplt78oshn.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmplt78oshn.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmplt78oshn.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmplt78oshn.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmplt78oshn.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmplt78oshn.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmplt78oshn.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmplt78oshn.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmplt78oshn.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmplt78oshn.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmplt78oshn.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmplt78oshn.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmplt78oshn.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmplt78oshn.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmplt78oshn.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmplt78oshn.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmplt78oshn.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmplt78oshn.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmplt78oshn.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmplt78oshn.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcg6lpii4.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpcg6lpii4.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpcg6lpii4.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpcg6lpii4.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmpcg6lpii4.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpcg6lpii4.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpcg6lpii4.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpcg6lpii4.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpcg6lpii4.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpcg6lpii4.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpcg6lpii4.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpcg6lpii4.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpcg6lpii4.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpcg6lpii4.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpcg6lpii4.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpcg6lpii4.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpcg6lpii4.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpcg6lpii4.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpcg6lpii4.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpcg6lpii4.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpcg6lpii4.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n    else:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp27jgzzl8.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp27jgzzl8.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp27jgzzl8.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp27jgzzl8.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp27jgzzl8.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp27jgzzl8.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp27jgzzl8.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp27jgzzl8.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp27jgzzl8.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp27jgzzl8.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp27jgzzl8.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp27jgzzl8.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp27jgzzl8.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp27jgzzl8.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp27jgzzl8.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp27jgzzl8.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp27jgzzl8.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp27jgzzl8.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp27jgzzl8.py\", line 25, in tri\n    return [tri(n -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ru3rf6g.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp2ru3rf6g.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp2ru3rf6g.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp2ru3rf6g.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n \
    \ File \"/tmp/tmp2ru3rf6g.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp2ru3rf6g.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmp2ru3rf6g.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp2ru3rf6g.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmp2ru3rf6g.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp2ru3rf6g.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File\
    \ \"/tmp/tmp2ru3rf6g.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp2ru3rf6g.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmp2ru3rf6g.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp2ru3rf6g.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmp2ru3rf6g.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp2ru3rf6g.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File\
    \ \"/tmp/tmp2ru3rf6g.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp2ru3rf6g.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmp2ru3rf6g.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp2ru3rf6g.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmp2ru3rf6g.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpemxvrch6.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpemxvrch6.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpemxvrch6.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpemxvrch6.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmpemxvrch6.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpemxvrch6.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpemxvrch6.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpemxvrch6.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpemxvrch6.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpemxvrch6.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpemxvrch6.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpemxvrch6.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpemxvrch6.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpemxvrch6.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpemxvrch6.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpemxvrch6.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpemxvrch6.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpemxvrch6.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpemxvrch6.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpemxvrch6.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpemxvrch6.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n == 3:\n        return [1,3,5]\n\
    \    else:\n        tri_1 = tri(n-1)\n        tri_2 = tri(n-2)\n        tri_3\
    \ = tri(n-3)\n        tri_4 = tri(n-4)\n        tri_5 = tri(n-5)\n        tri_6\
    \ = tri(n-6)\n        tri_7 = tri(n-7)\n        tri_8 = tri(n-8)\n        tri_9\
    \ = tri(n-9)\n        tri_10 = tri(n-10)\n        tri_11 = tri(n-11)\n       \
    \ tri_12 = tri(n-12)\n        tri_13 = tri(n-13)\n        tri_14 = tri(n-14)\n\
    \        tri_15 = tri(n-15)\n        tri_16 = tri(n-16)\n        tri_17 = tri(n-17)\n\
    \        tri_18 = tri(n-18)\n        tri_19 = tri(n-19)\n        tri_20 = tri(n-20)\n\
    \        tri_21 = tri(n-21)\n        tri_22 = tri(n-22)\n        tri_23 = tri(n-23)\n\
    \        tri_24 = tri(n-24)\n        tri_25 = tri(n-25)\n        tri_26 = tri(n-26)\n\
    \        tri_27 = tri(n-27)\n        tri_28 = tri(n-28)\n        tri_29 = tri(n-29)\n\
    \        tri_30 = tri(n-30)\n        tri_31 = tri(n-31)\n        tri_32 = tri(n-32)\n\
    \        tri_33 = tri(n-33)\n        tri_34 = tri(n-34)\n        tri_35 = tri(n-35)\n\
    \        tri_36 = tri(n-36)\n        tri_37 = tri(n-37)\n        tri_38 = tri(n-38)\n\
    \        tri_39 = tri(n-39)\n        tri_40 = tri(n-40)\n        tri_41 = tri(n-41)\n\
    \        tri_42 = tri(n-42)\n        tri_43 = tri(n-43)\n        tri_44 = tri(n-44)\n\
    \        tri_45 = tri(n-45)\n        tri_46 = tri(n-46)\n        tri_47 = tri(n-47)\n\
    \        tri_48 = tri(n-48)\n        tri_49 = tri(n\ndef check(candidate):\n \
    \   assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpavdbffww.py\", line 76\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 3]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1)\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1bpkr4fo.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp1bpkr4fo.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp1bpkr4fo.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp1bpkr4fo.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1bpkr4fo.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp1bpkr4fo.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1bpkr4fo.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmp1bpkr4fo.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmp1bpkr4fo.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmp1bpkr4fo.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmp1bpkr4fo.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmp1bpkr4fo.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmp1bpkr4fo.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmp1bpkr4fo.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1bpkr4fo.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp1bpkr4fo.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1bpkr4fo.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp1bpkr4fo.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1bpkr4fo.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmp1bpkr4fo.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmp1bpkr4fo.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmp1bpkr4fo.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmp1bpkr4fo.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmp1bpkr4fo.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmp1bpkr4fo.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmp1bpkr4fo.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1bpkr4fo.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp1bpkr4fo.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1bpkr4fo.py\", line 27,\
    \ in tri\n    tri_1 = tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0, 0,\
    \ 0]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1,\
    \ 3]\n    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else:\n        return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps5gf39k8.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmps5gf39k8.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmps5gf39k8.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmps5gf39k8.py\", line\
    \ 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmps5gf39k8.py\", line 27, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmps5gf39k8.py\", line 29, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmps5gf39k8.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmps5gf39k8.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmps5gf39k8.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmps5gf39k8.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmps5gf39k8.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmps5gf39k8.py\", line 29, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmps5gf39k8.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmps5gf39k8.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmps5gf39k8.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmps5gf39k8.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmps5gf39k8.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmps5gf39k8.py\", line 29, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmps5gf39k8.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmps5gf39k8.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmps5gf39k8.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg3z3f2mk.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpg3z3f2mk.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpg3z3f2mk.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpg3z3f2mk.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmpg3z3f2mk.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpg3z3f2mk.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpg3z3f2mk.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpg3z3f2mk.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpg3z3f2mk.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpg3z3f2mk.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpg3z3f2mk.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpg3z3f2mk.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpg3z3f2mk.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpg3z3f2mk.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpg3z3f2mk.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpg3z3f2mk.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpg3z3f2mk.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpg3z3f2mk.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpg3z3f2mk.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpg3z3f2mk.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpg3z3f2mk.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n    else:\n\
    \        return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1), tri(n - 2)\
    \ + tri(n + 1)]\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2,\
    \ 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1,\
    \ 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu70oq3pj.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpu70oq3pj.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpu70oq3pj.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpu70oq3pj.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1), tri(n\
    \ - 2) + tri(n + 1)]\n  File \"/tmp/tmpu70oq3pj.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpu70oq3pj.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1),\
    \ tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpu70oq3pj.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \  File \"/tmp/tmpu70oq3pj.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2), tri(n - 2) + tri(n - 1), tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpu70oq3pj.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpu70oq3pj.py\", line 27, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2), tri(n - 2) + tri(n - 1), tri(n - 2) + tri(n + 1)]\n  File\
    \ \"/tmp/tmpu70oq3pj.py\", line 25, in tri\n    return [tri(n - 1) + tri(n - 2),\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpu70oq3pj.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1), tri(n\
    \ - 2) + tri(n + 1)]\n  File \"/tmp/tmpu70oq3pj.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpu70oq3pj.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1),\
    \ tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpu70oq3pj.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \  File \"/tmp/tmpu70oq3pj.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2), tri(n - 2) + tri(n - 1), tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpu70oq3pj.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tm"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   if n == 1:\n        return [3]\n    if n == 2:\n        return [3, 3]\n  \
    \  if n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n + 1) + tri(n - 2)]\n    else:\n        return [tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2)]\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp15ly06_p.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp15ly06_p.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp15ly06_p.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp15ly06_p.py\", line\
    \ 29, in tri\n    return [tri(n - 1) + tri(n + 1) + tri(n - 2), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmp15ly06_p.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmp15ly06_p.py\", line 29, in tri\n\
    \    return [tri(n - 1) + tri(n + 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmp15ly06_p.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmp15ly06_p.py\", line 29, in tri\n\
    \    return [tri(n - 1) + tri(n + 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmp15ly06_p.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmp15ly06_p.py\", line 29, in tri\n\
    \    return [tri(n - 1) + tri(n + 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmp15ly06_p.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmp15ly06_p.py\", line 29, in tri\n\
    \    return [tri(n - 1) + tri(n + 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmp15ly06_p.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmp15ly06_p.py\", line 29, in tri\n\
    \    return [tri(n - 1) + tri(n + 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmp15ly06_p.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsvajyu71.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpsvajyu71.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpsvajyu71.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpsvajyu71.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmpsvajyu71.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpsvajyu71.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpsvajyu71.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpsvajyu71.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpsvajyu71.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpsvajyu71.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpsvajyu71.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpsvajyu71.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpsvajyu71.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpsvajyu71.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpsvajyu71.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpsvajyu71.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpsvajyu71.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpsvajyu71.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpsvajyu71.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpsvajyu71.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpsvajyu71.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n    else:\n\
    \        return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoy34du_m.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpoy34du_m.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpoy34du_m.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpoy34du_m.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpoy34du_m.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File\
    \ \"/tmp/tmpoy34du_m.py\", line 27, in tri\n    return [tri(n - 1) + tri(n - 2),\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpoy34du_m.py\", line\
    \ 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)]\n  File \"/tmp/tmpoy34du_m.py\", line 27, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpoy34du_m.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpoy34du_m.py\", line 27, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \  File \"/tmp/tmpoy34du_m.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpoy34du_m.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpoy34du_m.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File\
    \ \"/tmp/tmpoy34du_m.py\", line 27, in tri\n    return [tri(n - 1) + tri(n - 2),\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpoy34du_m.py\", line\
    \ 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)]\n  File \"/tmp/tmpoy34du_m.py\", line 27, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpoy34du_m.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  Fi"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n    else:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrrz6q8d.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpgrrz6q8d.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpgrrz6q8d.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpgrrz6q8d.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpgrrz6q8d.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpgrrz6q8d.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpgrrz6q8d.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpgrrz6q8d.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpgrrz6q8d.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpgrrz6q8d.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpgrrz6q8d.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpgrrz6q8d.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpgrrz6q8d.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpgrrz6q8d.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpgrrz6q8d.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpgrrz6q8d.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpgrrz6q8d.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpgrrz6q8d.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpgrrz6q8d.py\", line 25, in tri\n    return [tri(n -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n    else:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxf24uf72.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpxf24uf72.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxf24uf72.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n    else:\n        return [tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n + 1) + tri(n - 2)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp81x9pnzh.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp81x9pnzh.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp81x9pnzh.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp81x9pnzh.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2)]\n  File \"/tmp/tmp81x9pnzh.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp81x9pnzh.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2)]\n  File \"/tmp/tmp81x9pnzh.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp81x9pnzh.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2)]\n  File \"/tmp/tmp81x9pnzh.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp81x9pnzh.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2)]\n  File \"/tmp/tmp81x9pnzh.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp81x9pnzh.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2)]\n  File \"/tmp/tmp81x9pnzh.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp81x9pnzh.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2)]\n  File \"/tmp/tmp81x9pnzh.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp81x9pnzh.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2)]\n  File \"/tmp/tmp81x9pnzh.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp81x9pnzh.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2)]\n  File \"/tmp/tmp81x9pnzh.py\", line 25, in tri"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpio3fq2l1.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpio3fq2l1.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpio3fq2l1.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpio3fq2l1.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  File \"/tmp/tmpio3fq2l1.py\", line 25, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpio3fq2l1.py\", line 27, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n \
    \ File \"/tmp/tmpio3fq2l1.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpio3fq2l1.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpio3fq2l1.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpio3fq2l1.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpio3fq2l1.py\", line 25, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpio3fq2l1.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 4)\n  File \"/tmp/tmpio3fq2l1.py\", line 25, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpio3fq2l1.py\", line 27, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  File \"/tmp/tmpio3fq2l1.py\", line 25, in tri\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpio3fq2l1.py\", line 27, in tri\n \
    \   return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File\
    \ \"/tmp/tmpio3fq2l1.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpio3fq2l1.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpio3fq2l1.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpio3fq2l1.py\", line 27, in tri\n    return tri(n - 1) + tri(n -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n    else:\n\
    \        return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv3pmhsqz.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpv3pmhsqz.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpv3pmhsqz.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpv3pmhsqz.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpv3pmhsqz.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpv3pmhsqz.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpv3pmhsqz.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpv3pmhsqz.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpv3pmhsqz.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpv3pmhsqz.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpv3pmhsqz.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpv3pmhsqz.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpv3pmhsqz.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpv3pmhsqz.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpv3pmhsqz.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpv3pmhsqz.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpv3pmhsqz.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpv3pmhsqz.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) +"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n - 2)]\n    else:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n - 2), tri(n + 1) + tri(n + 2)]\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq_1biioy.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpq_1biioy.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpq_1biioy.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpq_1biioy.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n - 2), tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpq_1biioy.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmpq_1biioy.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n - 2),\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpq_1biioy.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmpq_1biioy.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n - 2),\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpq_1biioy.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmpq_1biioy.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n - 2),\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpq_1biioy.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmpq_1biioy.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n - 2),\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpq_1biioy.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmpq_1biioy.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n - 2),\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpq_1biioy.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmpq_1biioy.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n - 2),\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpq_1biioy.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmpq_1biioy.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n == 3:\n        return [1,2,3]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1)\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb91d8_gx.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpb91d8_gx.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpb91d8_gx.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n == 3:\n        return [1,3,5]\n\
    \    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 2)\n \
    \   else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp02j_insh.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp02j_insh.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp02j_insh.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1,3]\n    if n % 2 == 0:\n        return [tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1)]\n    else:\n        return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n + 1) + tri(n + 2)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkapnhsda.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpkapnhsda.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkapnhsda.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkapnhsda.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpkapnhsda.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpkapnhsda.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpkapnhsda.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpkapnhsda.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpkapnhsda.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpkapnhsda.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpkapnhsda.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpkapnhsda.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpkapnhsda.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpkapnhsda.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpkapnhsda.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpkapnhsda.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpkapnhsda.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpkapnhsda.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpkapnhsda.py\", line 25, in tri"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptpzvvfo8.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmptpzvvfo8.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmptpzvvfo8.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmptpzvvfo8.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmptpzvvfo8.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmptpzvvfo8.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmptpzvvfo8.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmptpzvvfo8.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmptpzvvfo8.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmptpzvvfo8.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmptpzvvfo8.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmptpzvvfo8.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmptpzvvfo8.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmptpzvvfo8.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmptpzvvfo8.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmptpzvvfo8.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmptpzvvfo8.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmptpzvvfo8.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmptpzvvfo8.py\", line 25, in tri\n    return\
    \ tri(n - 1)"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_l92hvt0.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp_l92hvt0.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp_l92hvt0.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp_l92hvt0.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmp_l92hvt0.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp_l92hvt0.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp_l92hvt0.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp_l92hvt0.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp_l92hvt0.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp_l92hvt0.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp_l92hvt0.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp_l92hvt0.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp_l92hvt0.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp_l92hvt0.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp_l92hvt0.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp_l92hvt0.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp_l92hvt0.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp_l92hvt0.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp_l92hvt0.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp_l92hvt0.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp_l92hvt0.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1,3,2]\n\
    \    if n == 1:\n        return [3]\n    if n == 2:\n        return [1,3]\n  \
    \  if n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2)]\n    else:\n        return [tri(n - 1) + tri(n - 2), tri(n\
    \ - 1) + tri(n + 1)]\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu8577gtw.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpu8577gtw.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpu8577gtw.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpu8577gtw.py\", line\
    \ 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpu8577gtw.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpu8577gtw.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpu8577gtw.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpu8577gtw.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpu8577gtw.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpu8577gtw.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpu8577gtw.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpu8577gtw.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpu8577gtw.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpu8577gtw.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpu8577gtw.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpu8577gtw.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpu8577gtw.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpu8577gtw.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpu8577gtw.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt9r5fqla.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpt9r5fqla.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpt9r5fqla.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpt9r5fqla.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  File \"/tmp/tmpt9r5fqla.py\", line 25, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpt9r5fqla.py\", line 27, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n \
    \ File \"/tmp/tmpt9r5fqla.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpt9r5fqla.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpt9r5fqla.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpt9r5fqla.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpt9r5fqla.py\", line 25, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpt9r5fqla.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 4)\n  File \"/tmp/tmpt9r5fqla.py\", line 25, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpt9r5fqla.py\", line 27, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  File \"/tmp/tmpt9r5fqla.py\", line 25, in tri\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpt9r5fqla.py\", line 27, in tri\n \
    \   return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File\
    \ \"/tmp/tmpt9r5fqla.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpt9r5fqla.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpt9r5fqla.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpt9r5fqla.py\", line 27, in tri\n    return tri(n - 1) + tri(n -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt4pdqcez.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpt4pdqcez.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpt4pdqcez.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpt4pdqcez.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n \
    \ File \"/tmp/tmpt4pdqcez.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpt4pdqcez.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmpt4pdqcez.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpt4pdqcez.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmpt4pdqcez.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpt4pdqcez.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File\
    \ \"/tmp/tmpt4pdqcez.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpt4pdqcez.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmpt4pdqcez.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpt4pdqcez.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmpt4pdqcez.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpt4pdqcez.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File\
    \ \"/tmp/tmpt4pdqcez.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpt4pdqcez.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmpt4pdqcez.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpt4pdqcez.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmpt4pdqcez.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n == 3:\n        return [1,3,5]\n\
    \    else:\n        tri_1 = tri(n-1)\n        tri_2 = tri(n-2)\n        tri_3\
    \ = tri(n+2)\n        tri_4 = tri(n+3)\n        tri_5 = tri(n+4)\n        tri_6\
    \ = tri(n+5)\n        tri_7 = tri(n+6)\n        tri_8 = tri(n+7)\n        tri_9\
    \ = tri(n+8)\n        tri_10 = tri(n+9)\n        tri_11 = tri(n+10)\n        tri_12\
    \ = tri(n+11)\n        tri_13 = tri(n+12)\n        tri_14 = tri(n+13)\n      \
    \  tri_15 = tri(n+14)\n        tri_16 = tri(n+15)\n        tri_17 = tri(n+16)\n\
    \        tri_18 = tri(n+17)\n        tri_19 = tri(n+18)\n        tri_20 = tri(n+19)\n\
    \        tri_21 = tri(n+20)\n        tri_22 = tri(n+21)\n        tri_23 = tri(n+22)\n\
    \        tri_24 = tri(n+23)\n        tri_25 = tri(n+24)\n        tri_26 = tri(n+25)\n\
    \        tri_27 = tri(n+26)\n        tri_28 = tri(n+27)\n        tri_29 = tri(n+28)\n\
    \        tri_30 = tri(n+29)\n        tri_31 = tri(n+30)\n        tri_32 = tri(n+31)\n\
    \        tri_33 = tri(n+32)\n        tri_34 = tri(n+33)\n        tri_35 = tri(n+34)\n\
    \        tri_36 = tri(n+35)\n        tri_37 = tri(n+36)\n        tri_38 = tri(n+37)\n\
    \        tri_39 = tri(n+38)\n        tri_40 = tri(n+39)\n        tri_41 = tri(n+40)\n\
    \        tri_42 = tri(n+41)\n        tri_43 = tri(n+42)\n        tri_44 = tri(n+43)\n\
    \        tri_45 = tri(n+44)\n        tri_46 = tri(n+45)\n        tri_47 = tri(n+46)\n\
    \        tri_48 = tri(n+47)\n        tri_49\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf_7eybed.py\", line\
    \ 91, in <module>\n    test_check()\n  File \"/tmp/tmpf_7eybed.py\", line 89,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpf_7eybed.py\", line 77, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpslnd3eek.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpslnd3eek.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpslnd3eek.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpslnd3eek.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  File \"/tmp/tmpslnd3eek.py\", line 25, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpslnd3eek.py\", line 27, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n \
    \ File \"/tmp/tmpslnd3eek.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpslnd3eek.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpslnd3eek.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpslnd3eek.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpslnd3eek.py\", line 25, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpslnd3eek.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 4)\n  File \"/tmp/tmpslnd3eek.py\", line 25, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpslnd3eek.py\", line 27, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  File \"/tmp/tmpslnd3eek.py\", line 25, in tri\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpslnd3eek.py\", line 27, in tri\n \
    \   return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File\
    \ \"/tmp/tmpslnd3eek.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpslnd3eek.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpslnd3eek.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpslnd3eek.py\", line 27, in tri\n    return tri(n - 1) + tri(n -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    if n == 1:\n        return [3]\n\
    \    if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n    else:\n      \
    \  return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n    \ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzi48m8bw.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpzi48m8bw.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzi48m8bw.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzi48m8bw.py\", line\
    \ 28, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpzi48m8bw.py\", line 26, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpzi48m8bw.py\"\
    , line 28, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpzi48m8bw.py\", line 26, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpzi48m8bw.py\"\
    , line 28, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpzi48m8bw.py\", line 26, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpzi48m8bw.py\"\
    , line 28, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpzi48m8bw.py\", line 26, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpzi48m8bw.py\"\
    , line 28, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpzi48m8bw.py\", line 26, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpzi48m8bw.py\"\
    , line 28, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpzi48m8bw.py\", line 26, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpzi48m8bw.py\"\
    , line 28, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpzi48m8bw.py\", line 26, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpzi48m8bw.py\"\
    , line 28, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpzi48m8bw.py\", line 26, in tri\n    return [tri(n - 1) + tri(n\
    \ -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppv4ffr26.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmppv4ffr26.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmppv4ffr26.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmppv4ffr26.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmppv4ffr26.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmppv4ffr26.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmppv4ffr26.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmppv4ffr26.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmppv4ffr26.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmppv4ffr26.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmppv4ffr26.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmppv4ffr26.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmppv4ffr26.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmppv4ffr26.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmppv4ffr26.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmppv4ffr26.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmppv4ffr26.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmppv4ffr26.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmppv4ffr26.py\", line 25, in tri\n    return\
    \ tri(n - 1)"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n    else:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxt735g1t.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpxt735g1t.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxt735g1t.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6yk97lv0.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp6yk97lv0.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp6yk97lv0.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n    else:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdwrx11ub.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpdwrx11ub.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdwrx11ub.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwbbe9ld4.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpwbbe9ld4.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwbbe9ld4.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwbbe9ld4.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpwbbe9ld4.py\", line 25, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpwbbe9ld4.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpwbbe9ld4.py\", line\
    \ 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpwbbe9ld4.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpwbbe9ld4.py\", line\
    \ 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpwbbe9ld4.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpwbbe9ld4.py\", line\
    \ 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpwbbe9ld4.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpwbbe9ld4.py\", line\
    \ 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpwbbe9ld4.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpwbbe9ld4.py\", line\
    \ 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpwbbe9ld4.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpwbbe9ld4.py\", line\
    \ 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpwbbe9ld4.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1)\
    \ + "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 3]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1)\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg3thfhmw.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpg3thfhmw.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpg3thfhmw.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpg3thfhmw.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpg3thfhmw.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpg3thfhmw.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpg3thfhmw.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmpg3thfhmw.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmpg3thfhmw.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmpg3thfhmw.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmpg3thfhmw.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmpg3thfhmw.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmpg3thfhmw.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmpg3thfhmw.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpg3thfhmw.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpg3thfhmw.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpg3thfhmw.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpg3thfhmw.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpg3thfhmw.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmpg3thfhmw.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmpg3thfhmw.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmpg3thfhmw.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmpg3thfhmw.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmpg3thfhmw.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmpg3thfhmw.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmpg3thfhmw.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpg3thfhmw.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpg3thfhmw.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpg3thfhmw.py\", line 27,\
    \ in tri\n    tri_1 = tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplo4bsl0e.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmplo4bsl0e.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmplo4bsl0e.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmplo4bsl0e.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmplo4bsl0e.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmplo4bsl0e.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmplo4bsl0e.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmplo4bsl0e.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmplo4bsl0e.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmplo4bsl0e.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmplo4bsl0e.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmplo4bsl0e.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmplo4bsl0e.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmplo4bsl0e.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmplo4bsl0e.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmplo4bsl0e.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmplo4bsl0e.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmplo4bsl0e.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmplo4bsl0e.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmplo4bsl0e.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmplo4bsl0e.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n    else:\n        return [tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1), tri(n - 1) + tri(n - 2) + tri(n - 2)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_fsnfr5r.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp_fsnfr5r.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp_fsnfr5r.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    else:\n        tri_1 = tri(n - 1)\n\
    \        tri_2 = tri(n - 2)\n        tri_3 = tri(n + 1)\n        return tri_1\
    \ + tri_2 + tri_3\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7n46ka1w.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp7n46ka1w.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp7n46ka1w.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp7n46ka1w.py\", line\
    \ 27, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp7n46ka1w.py\", line 25,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp7n46ka1w.py\", line 27, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp7n46ka1w.py\", line 25, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmp7n46ka1w.py\", line 27, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmp7n46ka1w.py\", line 25, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmp7n46ka1w.py\", line 27, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmp7n46ka1w.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmp7n46ka1w.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmp7n46ka1w.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmp7n46ka1w.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp7n46ka1w.py\"\
    , line 25, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp7n46ka1w.py\", line\
    \ 27, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp7n46ka1w.py\", line 25,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp7n46ka1w.py\", line 27, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp7n46ka1w.py\", line 25, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmp7n46ka1w.py\", line 27, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmp7n46ka1w.py\", line 25, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmp7n46ka1w.py\", line 27, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmp7n46ka1w.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmp7n46ka1w.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmp7n46ka1w.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmp7n46ka1w.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp7n46ka1w.py\"\
    , line 25, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp7n46ka1w.py\", line\
    \ 27, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp7n46ka1w.py\", line 25,\
    \ in tri\n    tri_1 = tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphyy171xh.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmphyy171xh.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmphyy171xh.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmphyy171xh.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmphyy171xh.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmphyy171xh.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmphyy171xh.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmphyy171xh.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmphyy171xh.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmphyy171xh.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmphyy171xh.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmphyy171xh.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmphyy171xh.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmphyy171xh.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmphyy171xh.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmphyy171xh.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmphyy171xh.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmphyy171xh.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmphyy171xh.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmphyy171xh.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmphyy171xh.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n    else:\n        return [tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n + 1) + tri(n + 2)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_aenwsg.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpv_aenwsg.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpv_aenwsg.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpv_aenwsg.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpv_aenwsg.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpv_aenwsg.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpv_aenwsg.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpv_aenwsg.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpv_aenwsg.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpv_aenwsg.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpv_aenwsg.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpv_aenwsg.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpv_aenwsg.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpv_aenwsg.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpv_aenwsg.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpv_aenwsg.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpv_aenwsg.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpv_aenwsg.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpv_aenwsg.py\", line 25, in tri"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1,3,2]\n\
    \    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1,3]\n\
    \    else:\n        tri_1 = tri(n-1)\n        tri_2 = tri(n-2)\n        tri_3\
    \ = tri(n+2)\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb0sppe22.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpb0sppe22.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpb0sppe22.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpb0sppe22.py\", line\
    \ 29, in tri\n    tri_3 = tri(n+2)\n  File \"/tmp/tmpb0sppe22.py\", line 27, in\
    \ tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmpb0sppe22.py\", line 27, in tri\n\
    \    tri_1 = tri(n-1)\n  File \"/tmp/tmpb0sppe22.py\", line 29, in tri\n    tri_3\
    \ = tri(n+2)\n  File \"/tmp/tmpb0sppe22.py\", line 27, in tri\n    tri_1 = tri(n-1)\n\
    \  File \"/tmp/tmpb0sppe22.py\", line 27, in tri\n    tri_1 = tri(n-1)\n  File\
    \ \"/tmp/tmpb0sppe22.py\", line 29, in tri\n    tri_3 = tri(n+2)\n  File \"/tmp/tmpb0sppe22.py\"\
    , line 27, in tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmpb0sppe22.py\", line\
    \ 27, in tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmpb0sppe22.py\", line 29, in\
    \ tri\n    tri_3 = tri(n+2)\n  File \"/tmp/tmpb0sppe22.py\", line 27, in tri\n\
    \    tri_1 = tri(n-1)\n  File \"/tmp/tmpb0sppe22.py\", line 27, in tri\n    tri_1\
    \ = tri(n-1)\n  File \"/tmp/tmpb0sppe22.py\", line 29, in tri\n    tri_3 = tri(n+2)\n\
    \  File \"/tmp/tmpb0sppe22.py\", line 27, in tri\n    tri_1 = tri(n-1)\n  File\
    \ \"/tmp/tmpb0sppe22.py\", line 27, in tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmpb0sppe22.py\"\
    , line 29, in tri\n    tri_3 = tri(n+2)\n  File \"/tmp/tmpb0sppe22.py\", line\
    \ 27, in tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmpb0sppe22.py\", line 27, in\
    \ tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmpb0sppe22.py\", line 29, in tri\n\
    \    tri_3 = tri(n+2)\n  File \"/tmp/tmpb0sppe22.py\", line 27, in tri\n    tri_1\
    \ = tri(n-1)\n  File \"/tmp/tmpb0sppe22.py\", line 27, in tri\n    tri_1 = tri(n-1)\n\
    \  File \"/tmp/tmpb0sppe22.py\", line 29, in tri\n    tri_3 = tri(n+2)\n  File\
    \ \"/tmp/tmpb0sppe22.py\", line 27, in tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmpb0sppe22.py\"\
    , line 27, in tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmpb0sppe22.py\", line\
    \ 29, in tri\n    tri_3 = tri(n+2)\n  File \"/tmp/tmpb0sppe22.py\", line 27, in\
    \ tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmpb0sppe22.py\", line 27, in tri\n\
    \ "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1)\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptxz3vnsy.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmptxz3vnsy.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmptxz3vnsy.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmptxz3vnsy.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmptxz3vnsy.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmptxz3vnsy.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmptxz3vnsy.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmptxz3vnsy.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmptxz3vnsy.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmptxz3vnsy.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmptxz3vnsy.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmptxz3vnsy.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmptxz3vnsy.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmptxz3vnsy.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmptxz3vnsy.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmptxz3vnsy.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmptxz3vnsy.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmptxz3vnsy.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmptxz3vnsy.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmptxz3vnsy.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmptxz3vnsy.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmptxz3vnsy.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmptxz3vnsy.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmptxz3vnsy.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmptxz3vnsy.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmptxz3vnsy.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmptxz3vnsy.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmptxz3vnsy.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmptxz3vnsy.py\", line 27,\
    \ in tri\n    tri_1 = tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphvdou74v.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmphvdou74v.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmphvdou74v.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmphvdou74v.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmphvdou74v.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmphvdou74v.py\", line 27, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmphvdou74v.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmphvdou74v.py\", line 27, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmphvdou74v.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmphvdou74v.py\", line 27, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmphvdou74v.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmphvdou74v.py\", line 27, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmphvdou74v.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmphvdou74v.py\", line 27, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmphvdou74v.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    else:\n        tri_1 = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n        tri_2 = tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n        tri_3 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        return [tri_1,\
    \ tri_2, tri_3]\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2,\
    \ 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1,\
    \ 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy5durmt9.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpy5durmt9.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpy5durmt9.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpy5durmt9.py\", line\
    \ 25, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpy5durmt9.py\"\
    , line 25, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpy5durmt9.py\", line 25, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n  [Previous line repeated 993 more times]\n  File \"/tmp/tmpy5durmt9.py\"\
    , line 20, in tri\n    if n == 1:\nRecursionError: maximum recursion depth exceeded\
    \ in comparison\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    if n == 2:\n        return [1,3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpep0u13ra.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpep0u13ra.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpep0u13ra.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpep0u13ra.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmpep0u13ra.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpep0u13ra.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpep0u13ra.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpep0u13ra.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpep0u13ra.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpep0u13ra.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpep0u13ra.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpep0u13ra.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpep0u13ra.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpep0u13ra.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpep0u13ra.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpep0u13ra.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpep0u13ra.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpep0u13ra.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpep0u13ra.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpep0u13ra.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpep0u13ra.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 1) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwee1leb_.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpwee1leb_.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwee1leb_.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwee1leb_.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n \
    \ File \"/tmp/tmpwee1leb_.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpwee1leb_.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmpwee1leb_.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpwee1leb_.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmpwee1leb_.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpwee1leb_.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File\
    \ \"/tmp/tmpwee1leb_.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpwee1leb_.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmpwee1leb_.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpwee1leb_.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmpwee1leb_.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpwee1leb_.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File\
    \ \"/tmp/tmpwee1leb_.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpwee1leb_.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmpwee1leb_.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpwee1leb_.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmpwee1leb_.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1)\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpunjloyvp.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpunjloyvp.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpunjloyvp.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpunjloyvp.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpunjloyvp.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpunjloyvp.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpunjloyvp.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmpunjloyvp.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmpunjloyvp.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmpunjloyvp.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmpunjloyvp.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmpunjloyvp.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmpunjloyvp.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmpunjloyvp.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpunjloyvp.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpunjloyvp.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpunjloyvp.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpunjloyvp.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpunjloyvp.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmpunjloyvp.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmpunjloyvp.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmpunjloyvp.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmpunjloyvp.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmpunjloyvp.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmpunjloyvp.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmpunjloyvp.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpunjloyvp.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpunjloyvp.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpunjloyvp.py\", line 27,\
    \ in tri\n    tri_1 = tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1zcvc1ed.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp1zcvc1ed.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp1zcvc1ed.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp1zcvc1ed.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmp1zcvc1ed.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp1zcvc1ed.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp1zcvc1ed.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp1zcvc1ed.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp1zcvc1ed.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp1zcvc1ed.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp1zcvc1ed.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp1zcvc1ed.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp1zcvc1ed.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp1zcvc1ed.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp1zcvc1ed.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp1zcvc1ed.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp1zcvc1ed.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp1zcvc1ed.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp1zcvc1ed.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp1zcvc1ed.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp1zcvc1ed.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n\
    \    else:\n        tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        tri_2\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        tri_3 = tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n        return [tri_1, tri_2, tri_3]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp95zzj7fz.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp95zzj7fz.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp95zzj7fz.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp95zzj7fz.py\", line\
    \ 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp95zzj7fz.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp95zzj7fz.py\", line 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n  [Previous line repeated 993 more times]\n  File \"/tmp/tmp95zzj7fz.py\"\
    , line 20, in tri\n    if n == 0:\nRecursionError: maximum recursion depth exceeded\
    \ in comparison\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl3p3rwl4.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpl3p3rwl4.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpl3p3rwl4.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpl3p3rwl4.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmpl3p3rwl4.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpl3p3rwl4.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpl3p3rwl4.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpl3p3rwl4.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpl3p3rwl4.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpl3p3rwl4.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpl3p3rwl4.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpl3p3rwl4.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpl3p3rwl4.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpl3p3rwl4.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpl3p3rwl4.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpl3p3rwl4.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpl3p3rwl4.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpl3p3rwl4.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpl3p3rwl4.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpl3p3rwl4.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpl3p3rwl4.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [3]\n    if n == 2:\n        return [3, 3]\n   \
    \ if n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)]\n    else:\n        return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)]\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2lnq7kf0.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp2lnq7kf0.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp2lnq7kf0.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp2lnq7kf0.py\", line\
    \ 29, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp2lnq7kf0.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp2lnq7kf0.py\", line 29, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp2lnq7kf0.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp2lnq7kf0.py\", line 29, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp2lnq7kf0.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp2lnq7kf0.py\", line 29, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp2lnq7kf0.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp2lnq7kf0.py\", line 29, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp2lnq7kf0.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp2lnq7kf0.py\", line 29, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp2lnq7kf0.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp17128qh5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp17128qh5.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp17128qh5.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp17128qh5.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  File \"/tmp/tmp17128qh5.py\", line 25, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp17128qh5.py\", line 27, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n \
    \ File \"/tmp/tmp17128qh5.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp17128qh5.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmp17128qh5.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp17128qh5.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmp17128qh5.py\", line 25, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp17128qh5.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 4)\n  File \"/tmp/tmp17128qh5.py\", line 25, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp17128qh5.py\", line 27, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  File \"/tmp/tmp17128qh5.py\", line 25, in tri\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp17128qh5.py\", line 27, in tri\n \
    \   return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File\
    \ \"/tmp/tmp17128qh5.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp17128qh5.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmp17128qh5.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp17128qh5.py\", line 27, in tri\n    return tri(n - 1) + tri(n -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2_r5ky4e.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp2_r5ky4e.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp2_r5ky4e.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp2_r5ky4e.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmp2_r5ky4e.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp2_r5ky4e.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmp2_r5ky4e.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp2_r5ky4e.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmp2_r5ky4e.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp2_r5ky4e.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmp2_r5ky4e.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp2_r5ky4e.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmp2_r5ky4e.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp2_r5ky4e.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmp2_r5ky4e.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp2_r5ky4e.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmp2_r5ky4e.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp2_r5ky4e.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmp2_r5ky4e.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp2_r5ky4e.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmp2_r5ky4e.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp129g_frv.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp129g_frv.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp129g_frv.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp129g_frv.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmp129g_frv.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp129g_frv.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmp129g_frv.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp129g_frv.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmp129g_frv.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp129g_frv.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmp129g_frv.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp129g_frv.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmp129g_frv.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp129g_frv.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmp129g_frv.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp129g_frv.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmp129g_frv.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp129g_frv.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmp129g_frv.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp129g_frv.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmp129g_frv.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n    else:\n\
    \        return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n)]\n\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl61x7flq.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpl61x7flq.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpl61x7flq.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpl61x7flq.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n)]\n  File \"/tmp/tmpl61x7flq.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \  File \"/tmp/tmpl61x7flq.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n)]\n  File \"\
    /tmp/tmpl61x7flq.py\", line 25, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpl61x7flq.py\", line 27, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n)]\n  File \"/tmp/tmpl61x7flq.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \  File \"/tmp/tmpl61x7flq.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n)]\n  File \"\
    /tmp/tmpl61x7flq.py\", line 25, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpl61x7flq.py\", line 27, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n)]\n  File \"/tmp/tmpl61x7flq.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \  File \"/tmp/tmpl61x7flq.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n)]\n  File \"\
    /tmp/tmpl61x7flq.py\", line 25, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpl61x7flq.py\", line 27, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n)]\n  File \"/tmp/tmpl61x7flq.py\", line 25, in tri\n\
    \    return [tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 3]\n\
    \    else:\n        tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        tri_2\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        tri_3 = tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n        return [tri_1, tri_2, tri_3]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdx6vpmhv.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpdx6vpmhv.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdx6vpmhv.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpdx6vpmhv.py\", line\
    \ 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpdx6vpmhv.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpdx6vpmhv.py\", line 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n  [Previous line repeated 993 more times]\n  File \"/tmp/tmpdx6vpmhv.py\"\
    , line 20, in tri\n    if n == 0:\nRecursionError: maximum recursion depth exceeded\
    \ in comparison\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n\
    \    else:\n        tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        tri_2\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        tri_3 = tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n        return [tri_1, tri_2, tri_3]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0nt0il12.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp0nt0il12.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp0nt0il12.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp0nt0il12.py\", line\
    \ 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp0nt0il12.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp0nt0il12.py\", line 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n  [Previous line repeated 993 more times]\n  File \"/tmp/tmp0nt0il12.py\"\
    , line 20, in tri\n    if n == 0:\nRecursionError: maximum recursion depth exceeded\
    \ in comparison\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n    else:\n        return [tri(n - 1)\
    \ + tri(n - 2) + tri(n - 3)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpim6c37zp.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpim6c37zp.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpim6c37zp.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpim6c37zp.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"/tmp/tmpim6c37zp.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"\
    /tmp/tmpim6c37zp.py\", line 27, in tri\n    return [tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3)]\n  File \"/tmp/tmpim6c37zp.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3)]\n  File \"/tmp/tmpim6c37zp.py\", line 27, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"/tmp/tmpim6c37zp.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"\
    /tmp/tmpim6c37zp.py\", line 27, in tri\n    return [tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3)]\n  File \"/tmp/tmpim6c37zp.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3)]\n  File \"/tmp/tmpim6c37zp.py\", line 27, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"/tmp/tmpim6c37zp.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"\
    /tmp/tmpim6c37zp.py\", line 27, in tri\n    return [tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3)]\n  File \"/tmp/tmpim6c37zp.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3)]\n  File \"/tmp/tmpim6c37zp.py\", line 27, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"/tmp/tmpim6c37zp.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"\
    /tmp/tmpim6c37zp.py\", line 27, in tri\n    return [tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3)]\n  File \"/tmp/tmpim6c37zp.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3)]\n  File \"/tmp/tmpim6c37zp.py\", line 27, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"/tmp/tmpim6c37zp.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"\
    /tmp/tmpim6c37zp.py\", line 27, in tri\n    return [tri"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkyy3z0ll.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpkyy3z0ll.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkyy3z0ll.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkyy3z0ll.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpkyy3z0ll.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpkyy3z0ll.py\", line 27, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpkyy3z0ll.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpkyy3z0ll.py\", line 27, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpkyy3z0ll.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpkyy3z0ll.py\", line 27, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpkyy3z0ll.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpkyy3z0ll.py\", line 27, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpkyy3z0ll.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpkyy3z0ll.py\", line 27, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpkyy3z0ll.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [3]\n    if n == 2:\n        return [1, 3]\n   \
    \ if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9wwg71ro.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp9wwg71ro.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9wwg71ro.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9wwg71ro.py\", line\
    \ 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n \
    \ File \"/tmp/tmp9wwg71ro.py\", line 27, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp9wwg71ro.py\", line 29, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmp9wwg71ro.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp9wwg71ro.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmp9wwg71ro.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp9wwg71ro.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File\
    \ \"/tmp/tmp9wwg71ro.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp9wwg71ro.py\", line 29, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmp9wwg71ro.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp9wwg71ro.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmp9wwg71ro.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp9wwg71ro.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File\
    \ \"/tmp/tmp9wwg71ro.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp9wwg71ro.py\", line 29, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmp9wwg71ro.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp9wwg71ro.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmp9wwg71ro.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n    else:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpelxtjkit.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpelxtjkit.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpelxtjkit.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpelxtjkit.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpelxtjkit.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpelxtjkit.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpelxtjkit.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpelxtjkit.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpelxtjkit.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpelxtjkit.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpelxtjkit.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpelxtjkit.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpelxtjkit.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpelxtjkit.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpelxtjkit.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpelxtjkit.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpelxtjkit.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpelxtjkit.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpelxtjkit.py\", line 25, in tri\n    return [tri(n -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n == 3:\n        return [1,3,5]\n\
    \    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \   else:\n        return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) +\
    \ tri(n + 2) + tri(n + 3)\n\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprf02d_52.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmprf02d_52.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmprf02d_52.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n == 3:\n        return [1,3,5]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n        return [tri_1,\
    \ tri_2, tri_3]\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2,\
    \ 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1,\
    \ 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ao1oh7f.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp1ao1oh7f.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp1ao1oh7f.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n    else:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1), tri(n + 1) + tri(n + 2)]\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_mymfg9.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpv_mymfg9.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpv_mymfg9.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpv_mymfg9.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1), tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpv_mymfg9.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpv_mymfg9.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1),\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpv_mymfg9.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpv_mymfg9.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1),\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpv_mymfg9.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpv_mymfg9.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1),\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpv_mymfg9.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpv_mymfg9.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1),\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpv_mymfg9.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpv_mymfg9.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1),\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpv_mymfg9.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpv_mymfg9.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1),\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpv_mymfg9.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpv_mymfg9.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvdifr7za.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpvdifr7za.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpvdifr7za.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpvdifr7za.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmpvdifr7za.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpvdifr7za.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpvdifr7za.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpvdifr7za.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpvdifr7za.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpvdifr7za.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpvdifr7za.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpvdifr7za.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpvdifr7za.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpvdifr7za.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpvdifr7za.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpvdifr7za.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpvdifr7za.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpvdifr7za.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpvdifr7za.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpvdifr7za.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpvdifr7za.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    if n == 1:\n        return [3]\n\
    \    elif n == 2:\n        return [1, 3]\n    else:\n        \n        tri_1 =\
    \ tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3 = tri(n + 1)\n       \
    \ \n        return tri_1 + tri_2 + tri_3\n        \n        \ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp59sax0dm.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp59sax0dm.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp59sax0dm.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp59sax0dm.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp59sax0dm.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp59sax0dm.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp59sax0dm.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmp59sax0dm.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmp59sax0dm.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmp59sax0dm.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmp59sax0dm.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmp59sax0dm.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmp59sax0dm.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmp59sax0dm.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp59sax0dm.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp59sax0dm.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp59sax0dm.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp59sax0dm.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp59sax0dm.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmp59sax0dm.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmp59sax0dm.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmp59sax0dm.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmp59sax0dm.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmp59sax0dm.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmp59sax0dm.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmp59sax0dm.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp59sax0dm.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp59sax0dm.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp59sax0dm.py\", line 27,\
    \ in tri\n    tri_1 = tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 3]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1)\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygdbcuq1.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpygdbcuq1.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygdbcuq1.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygdbcuq1.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpygdbcuq1.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpygdbcuq1.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpygdbcuq1.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmpygdbcuq1.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmpygdbcuq1.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmpygdbcuq1.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmpygdbcuq1.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmpygdbcuq1.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmpygdbcuq1.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmpygdbcuq1.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpygdbcuq1.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpygdbcuq1.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpygdbcuq1.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpygdbcuq1.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpygdbcuq1.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmpygdbcuq1.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmpygdbcuq1.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmpygdbcuq1.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmpygdbcuq1.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmpygdbcuq1.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmpygdbcuq1.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmpygdbcuq1.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpygdbcuq1.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpygdbcuq1.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpygdbcuq1.py\", line 27,\
    \ in tri\n    tri_1 = tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg0426w8h.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpg0426w8h.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpg0426w8h.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpg0426w8h.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmpg0426w8h.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpg0426w8h.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpg0426w8h.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpg0426w8h.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpg0426w8h.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpg0426w8h.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpg0426w8h.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpg0426w8h.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpg0426w8h.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpg0426w8h.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpg0426w8h.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpg0426w8h.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpg0426w8h.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpg0426w8h.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpg0426w8h.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpg0426w8h.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpg0426w8h.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    if n == 0:\n        return [0]\n\
    \    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 3]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1)\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsgyc628y.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpsgyc628y.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpsgyc628y.py\", line 34, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpsgyc628y.py\", line\
    \ 30, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpsgyc628y.py\", line 28,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpsgyc628y.py\", line 30, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpsgyc628y.py\", line 28, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmpsgyc628y.py\", line 30, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmpsgyc628y.py\", line 28, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmpsgyc628y.py\", line 30, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmpsgyc628y.py\", line 28, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmpsgyc628y.py\", line 30, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmpsgyc628y.py\", line 28, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmpsgyc628y.py\", line 30, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpsgyc628y.py\"\
    , line 28, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpsgyc628y.py\", line\
    \ 30, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpsgyc628y.py\", line 28,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpsgyc628y.py\", line 30, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpsgyc628y.py\", line 28, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmpsgyc628y.py\", line 30, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmpsgyc628y.py\", line 28, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmpsgyc628y.py\", line 30, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmpsgyc628y.py\", line 28, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmpsgyc628y.py\", line 30, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmpsgyc628y.py\", line 28, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmpsgyc628y.py\", line 30, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpsgyc628y.py\"\
    , line 28, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpsgyc628y.py\", line\
    \ 30, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpsgyc628y.py\", line 28,\
    \ in tri\n    tri_1 = tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   if n == 1:\n        return [3]\n    if n == 2:\n        return [1,3]\n   \
    \ if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqe0agtw.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqe0agtw.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqe0agtw.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpdqe0agtw.py\", line\
    \ 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmpdqe0agtw.py\", line 27, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpdqe0agtw.py\", line 29, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpdqe0agtw.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpdqe0agtw.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpdqe0agtw.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpdqe0agtw.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpdqe0agtw.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpdqe0agtw.py\", line 29, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpdqe0agtw.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpdqe0agtw.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpdqe0agtw.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpdqe0agtw.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpdqe0agtw.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpdqe0agtw.py\", line 29, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpdqe0agtw.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpdqe0agtw.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpdqe0agtw.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfotouon.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpdfotouon.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdfotouon.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpdfotouon.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n \
    \ File \"/tmp/tmpdfotouon.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpdfotouon.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmpdfotouon.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpdfotouon.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmpdfotouon.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpdfotouon.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File\
    \ \"/tmp/tmpdfotouon.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpdfotouon.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmpdfotouon.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpdfotouon.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmpdfotouon.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpdfotouon.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File\
    \ \"/tmp/tmpdfotouon.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpdfotouon.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmpdfotouon.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpdfotouon.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmpdfotouon.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0, 0,\
    \ 0]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1,\
    \ 3]\n    else:\n        tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n      \
    \  tri_2 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        tri_3 = tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n        return [tri_1, tri_2, tri_3]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp29i7utan.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp29i7utan.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp29i7utan.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp29i7utan.py\", line\
    \ 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp29i7utan.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp29i7utan.py\", line 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n  [Previous line repeated 993 more times]\n  File \"/tmp/tmp29i7utan.py\"\
    , line 20, in tri\n    if n == 0:\nRecursionError: maximum recursion depth exceeded\
    \ in comparison\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    else:\n        tri_1 = tri(n - 1)\n\
    \        tri_2 = tri(n - 2)\n        tri_3 = tri(n + 1)\n        return tri_1\
    \ + tri_2 + tri_3\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1msv1wx1.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp1msv1wx1.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp1msv1wx1.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp1msv1wx1.py\", line\
    \ 27, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1msv1wx1.py\", line 25,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp1msv1wx1.py\", line 27, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1msv1wx1.py\", line 25, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmp1msv1wx1.py\", line 27, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmp1msv1wx1.py\", line 25, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmp1msv1wx1.py\", line 27, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmp1msv1wx1.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmp1msv1wx1.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmp1msv1wx1.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmp1msv1wx1.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1msv1wx1.py\"\
    , line 25, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp1msv1wx1.py\", line\
    \ 27, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1msv1wx1.py\", line 25,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp1msv1wx1.py\", line 27, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1msv1wx1.py\", line 25, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmp1msv1wx1.py\", line 27, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmp1msv1wx1.py\", line 25, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmp1msv1wx1.py\", line 27, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmp1msv1wx1.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmp1msv1wx1.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmp1msv1wx1.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmp1msv1wx1.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1msv1wx1.py\"\
    , line 25, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp1msv1wx1.py\", line\
    \ 27, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1msv1wx1.py\", line 25,\
    \ in tri\n    tri_1 = tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 3]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1)\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpja4xzj9_.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpja4xzj9_.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpja4xzj9_.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpja4xzj9_.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpja4xzj9_.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpja4xzj9_.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpja4xzj9_.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmpja4xzj9_.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmpja4xzj9_.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmpja4xzj9_.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmpja4xzj9_.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmpja4xzj9_.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmpja4xzj9_.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmpja4xzj9_.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpja4xzj9_.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpja4xzj9_.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpja4xzj9_.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpja4xzj9_.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpja4xzj9_.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmpja4xzj9_.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmpja4xzj9_.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmpja4xzj9_.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmpja4xzj9_.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmpja4xzj9_.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmpja4xzj9_.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmpja4xzj9_.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpja4xzj9_.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpja4xzj9_.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpja4xzj9_.py\", line 27,\
    \ in tri\n    tri_1 = tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeu9uez1h.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpeu9uez1h.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpeu9uez1h.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpeu9uez1h.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  File \"/tmp/tmpeu9uez1h.py\", line 25, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpeu9uez1h.py\", line 27, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n \
    \ File \"/tmp/tmpeu9uez1h.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpeu9uez1h.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpeu9uez1h.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpeu9uez1h.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpeu9uez1h.py\", line 25, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpeu9uez1h.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 4)\n  File \"/tmp/tmpeu9uez1h.py\", line 25, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpeu9uez1h.py\", line 27, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  File \"/tmp/tmpeu9uez1h.py\", line 25, in tri\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpeu9uez1h.py\", line 27, in tri\n \
    \   return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File\
    \ \"/tmp/tmpeu9uez1h.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpeu9uez1h.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpeu9uez1h.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpeu9uez1h.py\", line 27, in tri\n    return tri(n - 1) + tri(n -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   if n == 1:\n        return [3]\n    if n == 2:\n        return [1,3]\n   \
    \ if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n + 2)\
    \ + tri(n + 3)\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2,\
    \ 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1,\
    \ 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxmf8fant.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpxmf8fant.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxmf8fant.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpxmf8fant.py\", line\
    \ 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpxmf8fant.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpxmf8fant.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpxmf8fant.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpxmf8fant.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpxmf8fant.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpxmf8fant.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpxmf8fant.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpxmf8fant.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpxmf8fant.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpxmf8fant.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpxmf8fant.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpxmf8fant.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpxmf8fant.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpxmf8fant.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpxmf8fant.py\", line 27, in tri\n    return\
    \ tri(n - 1)"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1,3,2]\n\
    \    elif n == 1:\n        return [1,3]\n    elif n == 2:\n        return [1,3,2]\n\
    \    else:\n        tri_1 = tri(n-1)\n        tri_2 = tri(n-2)\n        tri_3\
    \ = tri(n+2)\n        return [tri_1[i] + tri_2[i] + tri_3[i] for i in range(n)]\n\
    </code>\n<|/ a tags=python,fibonacci,recursion |>\n<| a dscore=1 |>\n<code>\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpy818k8qq.py\", line 31\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n    else:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpakvgrs8g.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpakvgrs8g.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpakvgrs8g.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   if n == 1:\n        return [3]\n    if n == 2:\n        return [3, 3]\n  \
    \  if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1_qb3a1n.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp1_qb3a1n.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp1_qb3a1n.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp1_qb3a1n.py\", line\
    \ 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmp1_qb3a1n.py\", line 27, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp1_qb3a1n.py\", line 29, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp1_qb3a1n.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp1_qb3a1n.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp1_qb3a1n.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp1_qb3a1n.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp1_qb3a1n.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp1_qb3a1n.py\", line 29, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp1_qb3a1n.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp1_qb3a1n.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp1_qb3a1n.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp1_qb3a1n.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp1_qb3a1n.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp1_qb3a1n.py\", line 29, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp1_qb3a1n.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp1_qb3a1n.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp1_qb3a1n.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n\
    \    else:\n        mid = (n-1)//2\n        left = tri(mid)\n        right = tri(mid\
    \ + 1)\n        return left + right\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxjb3xxdn.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpxjb3xxdn.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxjb3xxdn.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1,3,2]\n\
    \    elif n == 1:\n        return [1,3]\n    elif n == 2:\n        return [1,3,2]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1)\n        return [tri_1[0] + tri_2[0] + tri_3[0], tri_1[1] + tri_2[1]\
    \ + tri_3[1], tri_1[2] + tri_2[2] + tri_3[2]]\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp95jw351u.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp95jw351u.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp95jw351u.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp95jw351u.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp95jw351u.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp95jw351u.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp95jw351u.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmp95jw351u.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmp95jw351u.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmp95jw351u.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmp95jw351u.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmp95jw351u.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmp95jw351u.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmp95jw351u.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp95jw351u.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp95jw351u.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp95jw351u.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp95jw351u.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp95jw351u.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmp95jw351u.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmp95jw351u.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmp95jw351u.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmp95jw351u.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmp95jw351u.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmp95jw351u.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmp95jw351u.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp95jw351u.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp95jw351u.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp95jw351u.py\", line 27,\
    \ in tri\n    tri_1 = tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1,3,2]\n\
    \    elif n == 1:\n        return [1,3]\n    elif n == 2:\n        return [1,3,2]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n        return tri_1 +\
    \ tri_2 + tri_3\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2,\
    \ 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1,\
    \ 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ddu_rox.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp2ddu_rox.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp2ddu_rox.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp2ddu_rox.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  File \"/tmp/tmp2ddu_rox.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File\
    \ \"/tmp/tmp2ddu_rox.py\", line 29, in tri\n    tri_3 = tri(n + 1) + tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp2ddu_rox.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmp2ddu_rox.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp2ddu_rox.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp2ddu_rox.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  File \"/tmp/tmp2ddu_rox.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File\
    \ \"/tmp/tmp2ddu_rox.py\", line 29, in tri\n    tri_3 = tri(n + 1) + tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp2ddu_rox.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmp2ddu_rox.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp2ddu_rox.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp2ddu_rox.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  File \"/tmp/tmp2ddu_rox.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File\
    \ \"/tmp/tmp2ddu_rox.py\", line 29, in tri\n    tri_3 = tri(n + 1) + tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp2ddu_rox.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmp2ddu_rox.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp2ddu_rox.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp2ddu_rox.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  File \"/tmp/tmp2ddu_rox.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File\
    \ \"/tmp/tmp2dd"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n == 3:\n        return [1,3,5]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n        return tri_1 +\
    \ tri_2 + tri_3\n</code>\n<|/ a dscore=1 |>\n<| a tags=python,recursion |>\n<code>\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpzz7x93oa.py\", line 31\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvkynckq7.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpvkynckq7.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpvkynckq7.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpvkynckq7.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmpvkynckq7.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpvkynckq7.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpvkynckq7.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpvkynckq7.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpvkynckq7.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpvkynckq7.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpvkynckq7.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpvkynckq7.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpvkynckq7.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpvkynckq7.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpvkynckq7.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpvkynckq7.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpvkynckq7.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpvkynckq7.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpvkynckq7.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpvkynckq7.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpvkynckq7.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplkvbxkl9.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmplkvbxkl9.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmplkvbxkl9.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmplkvbxkl9.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  File \"/tmp/tmplkvbxkl9.py\", line 25, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmplkvbxkl9.py\", line 27, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n \
    \ File \"/tmp/tmplkvbxkl9.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmplkvbxkl9.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmplkvbxkl9.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmplkvbxkl9.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmplkvbxkl9.py\", line 25, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmplkvbxkl9.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 4)\n  File \"/tmp/tmplkvbxkl9.py\", line 25, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmplkvbxkl9.py\", line 27, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  File \"/tmp/tmplkvbxkl9.py\", line 25, in tri\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmplkvbxkl9.py\", line 27, in tri\n \
    \   return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File\
    \ \"/tmp/tmplkvbxkl9.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmplkvbxkl9.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmplkvbxkl9.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmplkvbxkl9.py\", line 27, in tri\n    return tri(n - 1) + tri(n -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn40vk0i_.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpn40vk0i_.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpn40vk0i_.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpn40vk0i_.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmpn40vk0i_.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpn40vk0i_.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpn40vk0i_.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpn40vk0i_.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpn40vk0i_.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpn40vk0i_.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpn40vk0i_.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpn40vk0i_.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpn40vk0i_.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpn40vk0i_.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpn40vk0i_.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpn40vk0i_.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpn40vk0i_.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpn40vk0i_.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpn40vk0i_.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpn40vk0i_.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpn40vk0i_.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n    else:\n      \
    \  return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp3l4hp0z.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpp3l4hp0z.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpp3l4hp0z.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpp3l4hp0z.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpp3l4hp0z.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpp3l4hp0z.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpp3l4hp0z.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpp3l4hp0z.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpp3l4hp0z.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpp3l4hp0z.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpp3l4hp0z.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpp3l4hp0z.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpp3l4hp0z.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpp3l4hp0z.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpp3l4hp0z.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpp3l4hp0z.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpp3l4hp0z.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpp3l4hp0z.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpp3l4hp0z.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    else:\n        tri_1 = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n        tri_2 = tri(n - 1) + tri(n + 1) + tri(n -\
    \ 2)\n        tri_3 = tri(n + 1) + tri(n - 2) + tri(n - 1)\n        return [tri_1,\
    \ tri_2, tri_3]\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2,\
    \ 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1,\
    \ 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv9u9mmp0.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpv9u9mmp0.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpv9u9mmp0.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpv9u9mmp0.py\", line\
    \ 25, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpv9u9mmp0.py\"\
    , line 25, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpv9u9mmp0.py\", line 25, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n  [Previous line repeated 993 more times]\n  File \"/tmp/tmpv9u9mmp0.py\"\
    , line 20, in tri\n    if n == 1:\nRecursionError: maximum recursion depth exceeded\
    \ in comparison\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5fa65g1.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpa5fa65g1.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpa5fa65g1.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpa5fa65g1.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpa5fa65g1.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpa5fa65g1.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpa5fa65g1.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpa5fa65g1.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpa5fa65g1.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpa5fa65g1.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpa5fa65g1.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpa5fa65g1.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpa5fa65g1.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpa5fa65g1.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpa5fa65g1.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpa5fa65g1.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpa5fa65g1.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpa5fa65g1.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpa5fa65g1.py\", line 25, in tri\n    return\
    \ tri(n - 1)"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    else:\n        tri_1 = tri(n - 1)\n\
    \        tri_2 = tri(n - 2)\n        tri_3 = tri(n + 1)\n        return tri_1\
    \ + tri_2 + tri_3\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp12_n73oc.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp12_n73oc.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp12_n73oc.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp12_n73oc.py\", line\
    \ 27, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp12_n73oc.py\", line 25,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp12_n73oc.py\", line 27, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp12_n73oc.py\", line 25, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmp12_n73oc.py\", line 27, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmp12_n73oc.py\", line 25, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmp12_n73oc.py\", line 27, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmp12_n73oc.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmp12_n73oc.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmp12_n73oc.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmp12_n73oc.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp12_n73oc.py\"\
    , line 25, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp12_n73oc.py\", line\
    \ 27, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp12_n73oc.py\", line 25,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp12_n73oc.py\", line 27, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp12_n73oc.py\", line 25, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmp12_n73oc.py\", line 27, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmp12_n73oc.py\", line 25, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmp12_n73oc.py\", line 27, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmp12_n73oc.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmp12_n73oc.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmp12_n73oc.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmp12_n73oc.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp12_n73oc.py\"\
    , line 25, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp12_n73oc.py\", line\
    \ 27, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp12_n73oc.py\", line 25,\
    \ in tri\n    tri_1 = tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    if n == 2:\n        return [1,3]\n    if n == 3:\n        return [1,3,5]\n\
    \    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   \
    \ else:\n        return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmposg153t7.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmposg153t7.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmposg153t7.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  \
    \  else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)]\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1o2se7qo.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp1o2se7qo.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp1o2se7qo.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp1o2se7qo.py\", line\
    \ 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)]\n\
    \  File \"/tmp/tmp1o2se7qo.py\", line 23, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)]\n  File \"/tmp/tmp1o2se7qo.py\", line 23, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp1o2se7qo.py\", line\
    \ 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)]\n\
    \  File \"/tmp/tmp1o2se7qo.py\", line 23, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)]\n  File \"/tmp/tmp1o2se7qo.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmp1o2se7qo.py\"\
    , line 23, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"\
    /tmp/tmp1o2se7qo.py\", line 25, in tri\n    return [tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmp1o2se7qo.py\", line 23, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp1o2se7qo.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n +\
    \ 2)]\n  File \"/tmp/tmp1o2se7qo.py\", line 23, in tri\n    return [tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp1o2se7qo.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmp1o2se7qo.py\"\
    , line 23, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"\
    /tmp/tmp1o2se7qo.py\", line 25, in tri\n    return [tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmp1o2se7qo.py\", line 23, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp1o2se7qo.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n +\
    \ 2)]\n  File \"/tmp/tmp1o2se7qo.py\", line 23, in tri\n    return [tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp1o2se7qo.py\", line 25, in tri\n\
    \    ret"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmm2u430i.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpmm2u430i.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpmm2u430i.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpmm2u430i.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  File \"/tmp/tmpmm2u430i.py\", line 25, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpmm2u430i.py\", line 27, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n \
    \ File \"/tmp/tmpmm2u430i.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpmm2u430i.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpmm2u430i.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpmm2u430i.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpmm2u430i.py\", line 25, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpmm2u430i.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 4)\n  File \"/tmp/tmpmm2u430i.py\", line 25, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpmm2u430i.py\", line 27, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  File \"/tmp/tmpmm2u430i.py\", line 25, in tri\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpmm2u430i.py\", line 27, in tri\n \
    \   return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File\
    \ \"/tmp/tmpmm2u430i.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpmm2u430i.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpmm2u430i.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpmm2u430i.py\", line 27, in tri\n    return tri(n - 1) + tri(n -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu44u26e0.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpu44u26e0.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpu44u26e0.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpu44u26e0.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpu44u26e0.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpu44u26e0.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpu44u26e0.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpu44u26e0.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpu44u26e0.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpu44u26e0.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpu44u26e0.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpu44u26e0.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpu44u26e0.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpu44u26e0.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpu44u26e0.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpu44u26e0.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpu44u26e0.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpu44u26e0.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpu44u26e0.py\", line 25, in tri\n    return\
    \ tri(n - 1)"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwkq9st2c.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpwkq9st2c.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwkq9st2c.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwkq9st2c.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmpwkq9st2c.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpwkq9st2c.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpwkq9st2c.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpwkq9st2c.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpwkq9st2c.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpwkq9st2c.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpwkq9st2c.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpwkq9st2c.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpwkq9st2c.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpwkq9st2c.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpwkq9st2c.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpwkq9st2c.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpwkq9st2c.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpwkq9st2c.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpwkq9st2c.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpwkq9st2c.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpwkq9st2c.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n == 3:\n        return [1,3,5]\n\
    \    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \   else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp923lujqi.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp923lujqi.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp923lujqi.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    if n == 2:\n        return [1,3]\n    if n % 2 == 0:\n        return [tri(n-1)\
    \ + tri(n-2), tri(n-1)]\n    else:\n        return [tri(n-1) + tri(n-2), tri(n-1)\
    \ + tri(n-2)]\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfh09z3cf.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpfh09z3cf.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpfh09z3cf.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n    else:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1), tri(n - 1) + tri(n - 2)]\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeive2m3x.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpeive2m3x.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpeive2m3x.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n    else:\n      \
    \  return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpizwy0p3a.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpizwy0p3a.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpizwy0p3a.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpizwy0p3a.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpizwy0p3a.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpizwy0p3a.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpizwy0p3a.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpizwy0p3a.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpizwy0p3a.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpizwy0p3a.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpizwy0p3a.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpizwy0p3a.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpizwy0p3a.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpizwy0p3a.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpizwy0p3a.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpizwy0p3a.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpizwy0p3a.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpizwy0p3a.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) +"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  \
    \  else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzt6k32pd.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpzt6k32pd.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzt6k32pd.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzt6k32pd.py\", line\
    \ 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpzt6k32pd.py\", line 23, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpzt6k32pd.py\", line\
    \ 23, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpzt6k32pd.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpzt6k32pd.py\", line 23, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpzt6k32pd.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpzt6k32pd.py\", line 23, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpzt6k32pd.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpzt6k32pd.py\", line 23, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpzt6k32pd.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpzt6k32pd.py\", line 23, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpzt6k32pd.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpzt6k32pd.py\", line 23, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpzt6k32pd.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpzt6k32pd.py\", line 23, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpzt6k32pd.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) +"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8d03ub_t.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp8d03ub_t.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp8d03ub_t.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp8d03ub_t.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmp8d03ub_t.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp8d03ub_t.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmp8d03ub_t.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp8d03ub_t.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmp8d03ub_t.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp8d03ub_t.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmp8d03ub_t.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp8d03ub_t.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmp8d03ub_t.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp8d03ub_t.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmp8d03ub_t.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp8d03ub_t.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmp8d03ub_t.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp8d03ub_t.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmp8d03ub_t.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp8d03ub_t.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmp8d03ub_t.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 3]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1) + tri_1 + tri_2\n        return tri_3 + tri_2 + tri_1\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqnjfqunx.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpqnjfqunx.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpqnjfqunx.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpqnjfqunx.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmpqnjfqunx.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpqnjfqunx.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmpqnjfqunx.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpqnjfqunx.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmpqnjfqunx.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpqnjfqunx.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmpqnjfqunx.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpqnjfqunx.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmpqnjfqunx.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpqnjfqunx.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmpqnjfqunx.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpqnjfqunx.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmpqnjfqunx.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpqnjfqunx.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmpqnjfqunx.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpqnjfqunx.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmpqnjfqunx.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpqnjfqunx.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmpqnjfqunx.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpqnjfqunx.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmpqnjfqunx.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpqnjfqunx.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/t"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0, 0,\
    \ 0]\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [3, 3]\n\
    \    if n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2)]\n    else:\n        return [tri(n - 1) + tri(n - 2), tri(n\
    \ - 1) + tri(n + 1)]\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptv6w0id6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmptv6w0id6.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmptv6w0id6.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmptv6w0id6.py\", line\
    \ 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmptv6w0id6.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmptv6w0id6.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmptv6w0id6.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmptv6w0id6.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmptv6w0id6.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmptv6w0id6.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmptv6w0id6.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmptv6w0id6.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmptv6w0id6.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmptv6w0id6.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmptv6w0id6.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmptv6w0id6.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmptv6w0id6.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmptv6w0id6.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmptv6w0id6.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n == 3:\n        return [1,3,5]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1)\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv5gsvxa9.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpv5gsvxa9.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpv5gsvxa9.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    if n == 2:\n        return [1,3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5jaxjcxv.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5jaxjcxv.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5jaxjcxv.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp5jaxjcxv.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  File \"/tmp/tmp5jaxjcxv.py\", line 25, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp5jaxjcxv.py\", line 27, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n \
    \ File \"/tmp/tmp5jaxjcxv.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp5jaxjcxv.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmp5jaxjcxv.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp5jaxjcxv.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmp5jaxjcxv.py\", line 25, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp5jaxjcxv.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 4)\n  File \"/tmp/tmp5jaxjcxv.py\", line 25, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp5jaxjcxv.py\", line 27, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  File \"/tmp/tmp5jaxjcxv.py\", line 25, in tri\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp5jaxjcxv.py\", line 27, in tri\n \
    \   return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File\
    \ \"/tmp/tmp5jaxjcxv.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp5jaxjcxv.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmp5jaxjcxv.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp5jaxjcxv.py\", line 27, in tri\n    return tri(n - 1) + tri(n -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n == 3:\n        return [1,3,5]\n\
    \    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp83q_g5h_.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp83q_g5h_.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp83q_g5h_.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [3]\n    if n == 2:\n        return [1,3]\n    if\
    \ n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyeifdorx.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpyeifdorx.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpyeifdorx.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpyeifdorx.py\", line\
    \ 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  File \"/tmp/tmpyeifdorx.py\", line 27, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpyeifdorx.py\", line 29, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n \
    \ File \"/tmp/tmpyeifdorx.py\", line 27, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpyeifdorx.py\", line 29, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpyeifdorx.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpyeifdorx.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpyeifdorx.py\", line 27, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpyeifdorx.py\"\
    , line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 4)\n  File \"/tmp/tmpyeifdorx.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpyeifdorx.py\", line 29, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  File \"/tmp/tmpyeifdorx.py\", line 27, in tri\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpyeifdorx.py\", line 29, in tri\n \
    \   return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File\
    \ \"/tmp/tmpyeifdorx.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpyeifdorx.py\", line 29, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpyeifdorx.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpyeifdorx.py\", line 29, in tri\n    return tri(n - 1) + tri(n -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuj9whv3f.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuj9whv3f.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpuj9whv3f.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpuj9whv3f.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmpuj9whv3f.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpuj9whv3f.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpuj9whv3f.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpuj9whv3f.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpuj9whv3f.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpuj9whv3f.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpuj9whv3f.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpuj9whv3f.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpuj9whv3f.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpuj9whv3f.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpuj9whv3f.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpuj9whv3f.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpuj9whv3f.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpuj9whv3f.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpuj9whv3f.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpuj9whv3f.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpuj9whv3f.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n    else:\n\
    \        return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu03qtu8l.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpu03qtu8l.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpu03qtu8l.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpu03qtu8l.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpu03qtu8l.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpu03qtu8l.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpu03qtu8l.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpu03qtu8l.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpu03qtu8l.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpu03qtu8l.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpu03qtu8l.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpu03qtu8l.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpu03qtu8l.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpu03qtu8l.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpu03qtu8l.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpu03qtu8l.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpu03qtu8l.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpu03qtu8l.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) +"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n    else:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp85r45b3k.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp85r45b3k.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp85r45b3k.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp85r45b3k.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp85r45b3k.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp85r45b3k.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp85r45b3k.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp85r45b3k.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp85r45b3k.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp85r45b3k.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp85r45b3k.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp85r45b3k.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp85r45b3k.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp85r45b3k.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp85r45b3k.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp85r45b3k.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp85r45b3k.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp85r45b3k.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp85r45b3k.py\", line 25, in tri\n    return [tri(n -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3rupbc_z.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp3rupbc_z.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp3rupbc_z.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp3rupbc_z.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp3rupbc_z.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp3rupbc_z.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp3rupbc_z.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp3rupbc_z.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp3rupbc_z.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp3rupbc_z.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp3rupbc_z.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp3rupbc_z.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp3rupbc_z.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp3rupbc_z.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp3rupbc_z.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp3rupbc_z.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp3rupbc_z.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp3rupbc_z.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp3rupbc_z.py\", line 25, in tri\n    return\
    \ tri(n - 1)"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 3]\n\
    \    else:\n        tri_sum = 0\n        for i in range(1, n+1):\n           \
    \ tri_sum += tri(i - 1) + tri(i - 2) + tri(i + 1) \n        return tri_sum\n\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp114e72pb.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp114e72pb.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp114e72pb.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp114e72pb.py\", line\
    \ 29, in tri\n    tri_sum += tri(i - 1) + tri(i - 2) + tri(i + 1) \nTypeError:\
    \ can only concatenate list (not \"int\") to list\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   if n == 1:\n        return [3]\n    if n == 2:\n        return [1,3]\n   \
    \ if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n</cell>\n<cell>\n\
    tri(10)\n</cell>\n<text>\nProblem 3\nWrite a function that takes a positive integer\
    \ and returns the number of digits in it. \nFor example, digit_count(100) should\
    \ return 3.\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpodsr71e8.py\", line 30\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    if n == 1:\n        return [3]\n\
    \    elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk3ga0ozp.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpk3ga0ozp.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpk3ga0ozp.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpk3ga0ozp.py\", line\
    \ 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n - 4)\n  File \"/tmp/tmpk3ga0ozp.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1)\n  File \"/tmp/tmpk3ga0ozp.py\", line 28,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n - 4)\n  File \"/tmp/tmpk3ga0ozp.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1)\n  File \"/tmp/tmpk3ga0ozp.py\", line 28,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n - 4)\n  File \"/tmp/tmpk3ga0ozp.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1)\n  File \"/tmp/tmpk3ga0ozp.py\", line 28,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n - 4)\n  File \"/tmp/tmpk3ga0ozp.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1)\n  File \"/tmp/tmpk3ga0ozp.py\", line 28,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n - 4)\n  File \"/tmp/tmpk3ga0ozp.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1)\n  File \"/tmp/tmpk3ga0ozp.py\", line 28,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n - 4)\n  File \"/tmp/tmpk3ga0ozp.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1)\n  File \"/tmp/tmpk3ga0ozp.py\", line 28,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n - 4)\n  File \"/tmp/tmpk3ga0ozp.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1)\n  File \"/tmp/tmpk3ga0ozp.py\", line 28,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n - 4)\n  File \"/tmp/tmpk3ga0ozp.py\", line 26, in tri\n    return\
    \ tri(n - 1)"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n    else:\n        return [tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n + 1) + tri(n + 2)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5gz6isqy.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5gz6isqy.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5gz6isqy.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp5gz6isqy.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmp5gz6isqy.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp5gz6isqy.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmp5gz6isqy.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp5gz6isqy.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmp5gz6isqy.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp5gz6isqy.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmp5gz6isqy.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp5gz6isqy.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmp5gz6isqy.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp5gz6isqy.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmp5gz6isqy.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp5gz6isqy.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmp5gz6isqy.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp5gz6isqy.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmp5gz6isqy.py\", line 25, in tri"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,2]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyraezoe6.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpyraezoe6.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpyraezoe6.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpyraezoe6.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  File \"/tmp/tmpyraezoe6.py\", line 25, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpyraezoe6.py\", line 27, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n \
    \ File \"/tmp/tmpyraezoe6.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpyraezoe6.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpyraezoe6.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpyraezoe6.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpyraezoe6.py\", line 25, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpyraezoe6.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 4)\n  File \"/tmp/tmpyraezoe6.py\", line 25, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpyraezoe6.py\", line 27, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  File \"/tmp/tmpyraezoe6.py\", line 25, in tri\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpyraezoe6.py\", line 27, in tri\n \
    \   return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File\
    \ \"/tmp/tmpyraezoe6.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpyraezoe6.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpyraezoe6.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpyraezoe6.py\", line 27, in tri\n    return tri(n - 1) + tri(n -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1,3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqqd90spn.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpqqd90spn.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpqqd90spn.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpqqd90spn.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmpqqd90spn.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpqqd90spn.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpqqd90spn.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpqqd90spn.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpqqd90spn.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpqqd90spn.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpqqd90spn.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpqqd90spn.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpqqd90spn.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpqqd90spn.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpqqd90spn.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpqqd90spn.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpqqd90spn.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpqqd90spn.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpqqd90spn.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpqqd90spn.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpqqd90spn.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n    else:\n\
    \        return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpox0laylq.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpox0laylq.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpox0laylq.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpox0laylq.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpox0laylq.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpox0laylq.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpox0laylq.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpox0laylq.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpox0laylq.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpox0laylq.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpox0laylq.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpox0laylq.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpox0laylq.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpox0laylq.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpox0laylq.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpox0laylq.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpox0laylq.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpox0laylq.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) +"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return [tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3)]\n    else:\n        return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n + 1) + tri(n + 2)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqqas_p_e.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpqqas_p_e.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpqqas_p_e.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpqqas_p_e.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpqqas_p_e.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"/tmp/tmpqqas_p_e.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpqqas_p_e.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"/tmp/tmpqqas_p_e.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpqqas_p_e.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"/tmp/tmpqqas_p_e.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpqqas_p_e.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"/tmp/tmpqqas_p_e.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpqqas_p_e.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"/tmp/tmpqqas_p_e.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpqqas_p_e.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"/tmp/tmpqqas_p_e.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpqqas_p_e.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n  File \"/tmp/tmpqqas_p_e.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpqqas_p_e.py\", line 25, in tri"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6kyla1_m.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp6kyla1_m.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp6kyla1_m.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp6kyla1_m.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmp6kyla1_m.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp6kyla1_m.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmp6kyla1_m.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp6kyla1_m.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmp6kyla1_m.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp6kyla1_m.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmp6kyla1_m.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp6kyla1_m.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmp6kyla1_m.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp6kyla1_m.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmp6kyla1_m.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp6kyla1_m.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmp6kyla1_m.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp6kyla1_m.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmp6kyla1_m.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp6kyla1_m.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmp6kyla1_m.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0, 0,\
    \ 0]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3,\
    \ 3]\n    else:\n        tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n      \
    \  tri_2 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        tri_3 = tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n        return [tri_1, tri_2, tri_3]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp69f7nxxa.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp69f7nxxa.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp69f7nxxa.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp69f7nxxa.py\", line\
    \ 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp69f7nxxa.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp69f7nxxa.py\", line 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n  [Previous line repeated 993 more times]\n  File \"/tmp/tmp69f7nxxa.py\"\
    , line 20, in tri\n    if n == 0:\nRecursionError: maximum recursion depth exceeded\
    \ in comparison\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    if n == 2:\n        return [1,3]\n    if n % 2 == 0:\n        return tri(n-1)\
    \ + tri(n-2)\n    else:\n        return tri(n-1) + tri(n-2) + tri(n+1)\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcyc95kry.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpcyc95kry.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpcyc95kry.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpcyc95kry.py\", line\
    \ 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmpcyc95kry.py\"\
    , line 25, in tri\n    r"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n == 3:\n        return [1,2,3]\n\
    \    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \   else:\n        return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjfrhwlly.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpjfrhwlly.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpjfrhwlly.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 1) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqs5r54x9.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpqs5r54x9.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpqs5r54x9.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpqs5r54x9.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n \
    \ File \"/tmp/tmpqs5r54x9.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpqs5r54x9.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmpqs5r54x9.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpqs5r54x9.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmpqs5r54x9.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpqs5r54x9.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File\
    \ \"/tmp/tmpqs5r54x9.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpqs5r54x9.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmpqs5r54x9.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpqs5r54x9.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmpqs5r54x9.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpqs5r54x9.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File\
    \ \"/tmp/tmpqs5r54x9.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpqs5r54x9.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmpqs5r54x9.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpqs5r54x9.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmpqs5r54x9.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1,\
    \ 2, 3]\n    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n \
    \       tri_3 = tri(n + 1)\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps9hor9c9.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmps9hor9c9.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmps9hor9c9.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n\
    \    else:\n        mid = (n + 1) // 2\n        return tri(mid) + tri(n - mid)\
    \ + tri(mid)\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdwjjtw_4.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpdwjjtw_4.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdwjjtw_4.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd24dexre.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpd24dexre.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpd24dexre.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpd24dexre.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmpd24dexre.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpd24dexre.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpd24dexre.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpd24dexre.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpd24dexre.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpd24dexre.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpd24dexre.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpd24dexre.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpd24dexre.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpd24dexre.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpd24dexre.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpd24dexre.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpd24dexre.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpd24dexre.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpd24dexre.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpd24dexre.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpd24dexre.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb01i2qvm.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpb01i2qvm.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpb01i2qvm.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpb01i2qvm.py\", line\
    \ 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmpb01i2qvm.py\", line 23, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpb01i2qvm.py\", line 23, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpb01i2qvm.py\", line 25,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpb01i2qvm.py\", line 23, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpb01i2qvm.py\", line 25, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpb01i2qvm.py\"\
    , line 23, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpb01i2qvm.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpb01i2qvm.py\", line 23, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpb01i2qvm.py\", line 25,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpb01i2qvm.py\", line 23, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpb01i2qvm.py\", line 25, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpb01i2qvm.py\"\
    , line 23, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpb01i2qvm.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpb01i2qvm.py\", line 23, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpb01i2qvm.py\", line 25,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpb01i2qvm.py\", line 23, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpb01i2qvm.py\", line 25, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_xa6e_qd.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp_xa6e_qd.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp_xa6e_qd.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp_xa6e_qd.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmp_xa6e_qd.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp_xa6e_qd.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp_xa6e_qd.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp_xa6e_qd.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp_xa6e_qd.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp_xa6e_qd.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp_xa6e_qd.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp_xa6e_qd.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp_xa6e_qd.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp_xa6e_qd.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp_xa6e_qd.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp_xa6e_qd.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp_xa6e_qd.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp_xa6e_qd.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp_xa6e_qd.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp_xa6e_qd.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp_xa6e_qd.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 4)]\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2,\
    \ 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1,\
    \ 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpebp9f6qv.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpebp9f6qv.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpebp9f6qv.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpebp9f6qv.py\", line\
    \ 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)]\n  File \"/tmp/tmpebp9f6qv.py\", line 23, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpebp9f6qv.py\", line 23, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpebp9f6qv.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n -\
    \ 3) + tri(n - 4)]\n  File \"/tmp/tmpebp9f6qv.py\", line 23, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpebp9f6qv.py\", line\
    \ 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)]\n  File \"/tmp/tmpebp9f6qv.py\", line 23, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpebp9f6qv.py\", line 25, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)]\n  File \"/tmp/tmpebp9f6qv.py\", line 23, in tri\n    return [tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpebp9f6qv.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)]\n\
    \  File \"/tmp/tmpebp9f6qv.py\", line 23, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)]\n  File \"/tmp/tmpebp9f6qv.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)]\n  File \"\
    /tmp/tmpebp9f6qv.py\", line 23, in tri\n    return [tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)]\n  File \"/tmp/tmpebp9f6qv.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)]\n  File \"/tmp/tmpebp9f6qv.py\"\
    , line 23, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"\
    /tmp/tmpebp9f6qv.py\", line 25, in tri\n    return [tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n - 3) + tri(n - 4)]\n  File \"/tmp/tmpebp9f6qv.py\", line\
    \ 23, in tri"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz3fpslc7.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpz3fpslc7.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpz3fpslc7.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpz3fpslc7.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmpz3fpslc7.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpz3fpslc7.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpz3fpslc7.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpz3fpslc7.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpz3fpslc7.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpz3fpslc7.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpz3fpslc7.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpz3fpslc7.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpz3fpslc7.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpz3fpslc7.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpz3fpslc7.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpz3fpslc7.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpz3fpslc7.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpz3fpslc7.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpz3fpslc7.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpz3fpslc7.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpz3fpslc7.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return [tri(n\
    \ - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n    else:\n      \
    \  return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)]\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1kgk91r6.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp1kgk91r6.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp1kgk91r6.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp1kgk91r6.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmp1kgk91r6.py\", line 25, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)]\n  File \"/tmp/tmp1kgk91r6.py\", line 27, in tri\n    return [tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)]\n\
    \  File \"/tmp/tmp1kgk91r6.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp1kgk91r6.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmp1kgk91r6.py\", line\
    \ 25, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp1kgk91r6.py\", line 27, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n +\
    \ 2)]\n  File \"/tmp/tmp1kgk91r6.py\", line 25, in tri\n    return [tri(n - 1)\
    \ + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp1kgk91r6.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmp1kgk91r6.py\", line\
    \ 25, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp1kgk91r6.py\", line 27, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n +\
    \ 2)]\n  File \"/tmp/tmp1kgk91r6.py\", line 25, in tri\n    return [tri(n - 1)\
    \ + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp1kgk91r6.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmp1kgk91r6.py\", line"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n    else:\n\
    \        return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ekxqne2.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp_ekxqne2.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp_ekxqne2.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp_ekxqne2.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp_ekxqne2.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp_ekxqne2.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmp_ekxqne2.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp_ekxqne2.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmp_ekxqne2.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp_ekxqne2.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmp_ekxqne2.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp_ekxqne2.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmp_ekxqne2.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp_ekxqne2.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmp_ekxqne2.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp_ekxqne2.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmp_ekxqne2.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp_ekxqne2.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) +"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    if n == 2:\n        return [1,3]\n    if n % 2 == 0:\n        return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n    else:\n      \
    \  return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpynbcynwr.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpynbcynwr.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpynbcynwr.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpynbcynwr.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpynbcynwr.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpynbcynwr.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpynbcynwr.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpynbcynwr.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpynbcynwr.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpynbcynwr.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpynbcynwr.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpynbcynwr.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpynbcynwr.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpynbcynwr.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpynbcynwr.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpynbcynwr.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpynbcynwr.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpynbcynwr.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmpynbcynwr.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   if n == 1:\n        return [3]\n    if n == 2:\n        return [1, 3]\n  \
    \  if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu5j10i66.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpu5j10i66.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpu5j10i66.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpu5j10i66.py\", line\
    \ 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmpu5j10i66.py\", line 27, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpu5j10i66.py\", line 29, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpu5j10i66.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpu5j10i66.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpu5j10i66.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpu5j10i66.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpu5j10i66.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpu5j10i66.py\", line 29, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpu5j10i66.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpu5j10i66.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpu5j10i66.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpu5j10i66.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpu5j10i66.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpu5j10i66.py\", line 29, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpu5j10i66.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpu5j10i66.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpu5j10i66.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n    else:\n      \
    \  return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5sirv79b.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5sirv79b.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5sirv79b.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp5sirv79b.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmp5sirv79b.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp5sirv79b.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmp5sirv79b.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp5sirv79b.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmp5sirv79b.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp5sirv79b.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmp5sirv79b.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp5sirv79b.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmp5sirv79b.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp5sirv79b.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmp5sirv79b.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp5sirv79b.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmp5sirv79b.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp5sirv79b.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)]\n\
    \  File \"/tmp/tmp5sirv79b.py\", line 25, in tri\n    return [tri(n - 1) + tri(n\
    \ -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1,3]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1)\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl3v2nghp.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpl3v2nghp.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpl3v2nghp.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpl3v2nghp.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpl3v2nghp.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpl3v2nghp.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpl3v2nghp.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmpl3v2nghp.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmpl3v2nghp.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmpl3v2nghp.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmpl3v2nghp.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmpl3v2nghp.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmpl3v2nghp.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmpl3v2nghp.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpl3v2nghp.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpl3v2nghp.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpl3v2nghp.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpl3v2nghp.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpl3v2nghp.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmpl3v2nghp.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmpl3v2nghp.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmpl3v2nghp.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmpl3v2nghp.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmpl3v2nghp.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmpl3v2nghp.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmpl3v2nghp.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpl3v2nghp.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpl3v2nghp.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpl3v2nghp.py\", line 27,\
    \ in tri\n    tri_1 = tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 3]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1)\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsdjx8x3g.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpsdjx8x3g.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpsdjx8x3g.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpsdjx8x3g.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpsdjx8x3g.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpsdjx8x3g.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpsdjx8x3g.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmpsdjx8x3g.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmpsdjx8x3g.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmpsdjx8x3g.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmpsdjx8x3g.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmpsdjx8x3g.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmpsdjx8x3g.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmpsdjx8x3g.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpsdjx8x3g.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpsdjx8x3g.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpsdjx8x3g.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpsdjx8x3g.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpsdjx8x3g.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmpsdjx8x3g.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmpsdjx8x3g.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmpsdjx8x3g.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmpsdjx8x3g.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmpsdjx8x3g.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmpsdjx8x3g.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmpsdjx8x3g.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpsdjx8x3g.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpsdjx8x3g.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpsdjx8x3g.py\", line 27,\
    \ in tri\n    tri_1 = tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwdx3ivq4.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpwdx3ivq4.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwdx3ivq4.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwdx3ivq4.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmpwdx3ivq4.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpwdx3ivq4.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpwdx3ivq4.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpwdx3ivq4.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpwdx3ivq4.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpwdx3ivq4.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpwdx3ivq4.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpwdx3ivq4.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpwdx3ivq4.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpwdx3ivq4.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpwdx3ivq4.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpwdx3ivq4.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpwdx3ivq4.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpwdx3ivq4.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpwdx3ivq4.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpwdx3ivq4.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpwdx3ivq4.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    tri_seq = []\n    \n    if n\
    \ == 1:\n        tri_seq.append(3)\n    elif n == 2:\n        tri_seq.append(1)\n\
    \        tri_seq.append(3)\n    else:\n        tri_seq.append(1)\n        tri_seq.append(3)\n\
    \        tri_seq.append(1 + n / 2)\n        tri_seq.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    \n    return tri_seq\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmt45bcww.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpmt45bcww.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpmt45bcww.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpmt45bcww.py\", line\
    \ 32, in tri\n    tri_seq.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  File\
    \ \"/tmp/tmpmt45bcww.py\", line 32, in tri\n    tri_seq.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n  File \"/tmp/tmpmt45bcww.py\", line 32, in tri\n    tri_seq.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n  [Previous line repeated 993 more times]\n\
    \  File \"/tmp/tmpmt45bcww.py\", line 23, in tri\n    if n == 1:\nRecursionError:\
    \ maximum recursion depth exceeded in comparison\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1,3,2]\n\
    \    elif n == 1:\n        return [3]\n    else:\n        tri_1 = tri(n - 1)\n\
    \        tri_2 = tri(n - 2)\n        tri_3 = tri(n + 1)\n        return tri_1\
    \ + tri_2 + tri_3\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdkvrm0ii.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpdkvrm0ii.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdkvrm0ii.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpdkvrm0ii.py\", line\
    \ 25, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpdkvrm0ii.py\", line 27,\
    \ in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpdkvrm0ii.py\", line 25, in\
    \ tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpdkvrm0ii.py\", line 27, in tri\n\
    \    tri_3 = tri(n + 1)\n  File \"/tmp/tmpdkvrm0ii.py\", line 25, in tri\n   \
    \ tri_1 = tri(n - 1)\n  File \"/tmp/tmpdkvrm0ii.py\", line 27, in tri\n    tri_3\
    \ = tri(n + 1)\n  File \"/tmp/tmpdkvrm0ii.py\", line 25, in tri\n    tri_1 = tri(n\
    \ - 1)\n  File \"/tmp/tmpdkvrm0ii.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n\
    \  File \"/tmp/tmpdkvrm0ii.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n  File\
    \ \"/tmp/tmpdkvrm0ii.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n  File \"\
    /tmp/tmpdkvrm0ii.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpdkvrm0ii.py\"\
    , line 27, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpdkvrm0ii.py\", line\
    \ 25, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpdkvrm0ii.py\", line 27,\
    \ in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpdkvrm0ii.py\", line 25, in\
    \ tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpdkvrm0ii.py\", line 27, in tri\n\
    \    tri_3 = tri(n + 1)\n  File \"/tmp/tmpdkvrm0ii.py\", line 25, in tri\n   \
    \ tri_1 = tri(n - 1)\n  File \"/tmp/tmpdkvrm0ii.py\", line 27, in tri\n    tri_3\
    \ = tri(n + 1)\n  File \"/tmp/tmpdkvrm0ii.py\", line 25, in tri\n    tri_1 = tri(n\
    \ - 1)\n  File \"/tmp/tmpdkvrm0ii.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n\
    \  File \"/tmp/tmpdkvrm0ii.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n  File\
    \ \"/tmp/tmpdkvrm0ii.py\", line 27, in tri\n    tri_3 = tri(n + 1)\n  File \"\
    /tmp/tmpdkvrm0ii.py\", line 25, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpdkvrm0ii.py\"\
    , line 27, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpdkvrm0ii.py\", line\
    \ 25, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpdkvrm0ii.py\", line 27,\
    \ in tri\n    tri_3 = tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  \
    \  else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n + 1) + tri(n - 2)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3nhzv8k4.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp3nhzv8k4.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp3nhzv8k4.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp3nhzv8k4.py\", line\
    \ 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmp3nhzv8k4.py\"\
    , line 23, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"\
    /tmp/tmp3nhzv8k4.py\", line 23, in tri\n    return [tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1)]\n  File \"/tmp/tmp3nhzv8k4.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmp3nhzv8k4.py\", line 23, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp3nhzv8k4.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n + 1) + tri(n - 2)]\n  File \"\
    /tmp/tmp3nhzv8k4.py\", line 23, in tri\n    return [tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1)]\n  File \"/tmp/tmp3nhzv8k4.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmp3nhzv8k4.py\", line 23, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp3nhzv8k4.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n + 1) + tri(n - 2)]\n  File \"\
    /tmp/tmp3nhzv8k4.py\", line 23, in tri\n    return [tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1)]\n  File \"/tmp/tmp3nhzv8k4.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmp3nhzv8k4.py\", line 23, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp3nhzv8k4.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2) + t"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [3]\n    else:\n        tri_1 = tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n        if n % 2 == 0:\n            return tri_1 +\
    \ [tri_1[n - 1]]\n        else:\n            return tri_1 + [tri_1[n - 2]]\n\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0zrtyfdg.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp0zrtyfdg.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp0zrtyfdg.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp0zrtyfdg.py\", line\
    \ 25, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp0zrtyfdg.py\"\
    , line 25, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp0zrtyfdg.py\", line 25, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n  [Previous line repeated 993 more times]\n  File \"/tmp/tmp0zrtyfdg.py\"\
    , line 20, in tri\n    if n == 0:\nRecursionError: maximum recursion depth exceeded\
    \ in comparison\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp84x5_ayy.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp84x5_ayy.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp84x5_ayy.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp84x5_ayy.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmp84x5_ayy.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp84x5_ayy.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp84x5_ayy.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp84x5_ayy.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp84x5_ayy.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp84x5_ayy.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp84x5_ayy.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp84x5_ayy.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp84x5_ayy.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp84x5_ayy.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp84x5_ayy.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp84x5_ayy.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp84x5_ayy.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp84x5_ayy.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp84x5_ayy.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp84x5_ayy.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp84x5_ayy.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_gsx0yhr.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp_gsx0yhr.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp_gsx0yhr.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp_gsx0yhr.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmp_gsx0yhr.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp_gsx0yhr.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp_gsx0yhr.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp_gsx0yhr.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp_gsx0yhr.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp_gsx0yhr.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp_gsx0yhr.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp_gsx0yhr.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp_gsx0yhr.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp_gsx0yhr.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp_gsx0yhr.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp_gsx0yhr.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp_gsx0yhr.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp_gsx0yhr.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp_gsx0yhr.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp_gsx0yhr.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp_gsx0yhr.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 3]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1)\n        return [tri_1, tri_2, tri_3]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplpd05h42.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmplpd05h42.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmplpd05h42.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmplpd05h42.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmplpd05h42.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmplpd05h42.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmplpd05h42.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmplpd05h42.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmplpd05h42.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmplpd05h42.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmplpd05h42.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmplpd05h42.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmplpd05h42.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmplpd05h42.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmplpd05h42.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmplpd05h42.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmplpd05h42.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmplpd05h42.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmplpd05h42.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmplpd05h42.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmplpd05h42.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmplpd05h42.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmplpd05h42.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmplpd05h42.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmplpd05h42.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmplpd05h42.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmplpd05h42.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmplpd05h42.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmplpd05h42.py\", line 27,\
    \ in tri\n    tri_1 = tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n\
    \    else:\n        tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        tri_2\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        tri_3 = tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n        return [tri_1, tri_2, tri_3]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpanuj8f15.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpanuj8f15.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpanuj8f15.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpanuj8f15.py\", line\
    \ 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpanuj8f15.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpanuj8f15.py\", line 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n  [Previous line repeated 993 more times]\n  File \"/tmp/tmpanuj8f15.py\"\
    , line 20, in tri\n    if n == 0:\nRecursionError: maximum recursion depth exceeded\
    \ in comparison\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0, 0,\
    \ 0]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1,\
    \ 3]\n    else:\n        mid = (n-1) // 2\n        left = tri(mid)\n        right\
    \ = tri(mid+1)\n        return left + [mid] + right\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnghs1ns3.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpnghs1ns3.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpnghs1ns3.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0, 0,\
    \ 0]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1,\
    \ 3]\n    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else:\n        return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbz16orui.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpbz16orui.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpbz16orui.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpbz16orui.py\", line\
    \ 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmpbz16orui.py\", line 27, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpbz16orui.py\", line 29, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpbz16orui.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpbz16orui.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpbz16orui.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpbz16orui.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpbz16orui.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpbz16orui.py\", line 29, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpbz16orui.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpbz16orui.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpbz16orui.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpbz16orui.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpbz16orui.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpbz16orui.py\", line 29, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpbz16orui.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpbz16orui.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpbz16orui.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n + 1)]\n    else:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n + 1), tri(n + 2) + tri(n + 3)]\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp69xlf_48.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp69xlf_48.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp69xlf_48.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp69xlf_48.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n + 1), tri(n\
    \ + 2) + tri(n + 3)]\n  File \"/tmp/tmp69xlf_48.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp69xlf_48.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n + 1),\
    \ tri(n + 2) + tri(n + 3)]\n  File \"/tmp/tmp69xlf_48.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp69xlf_48.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n + 1),\
    \ tri(n + 2) + tri(n + 3)]\n  File \"/tmp/tmp69xlf_48.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp69xlf_48.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n + 1),\
    \ tri(n + 2) + tri(n + 3)]\n  File \"/tmp/tmp69xlf_48.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp69xlf_48.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n + 1),\
    \ tri(n + 2) + tri(n + 3)]\n  File \"/tmp/tmp69xlf_48.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp69xlf_48.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n + 1),\
    \ tri(n + 2) + tri(n + 3)]\n  File \"/tmp/tmp69xlf_48.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp69xlf_48.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n + 1),\
    \ tri(n + 2) + tri(n + 3)]\n  File \"/tmp/tmp69xlf_48.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp69xlf_48.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    if n == 2:\n        return [1,3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_el3ufvw.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp_el3ufvw.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp_el3ufvw.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp_el3ufvw.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmp_el3ufvw.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp_el3ufvw.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp_el3ufvw.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp_el3ufvw.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp_el3ufvw.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp_el3ufvw.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp_el3ufvw.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp_el3ufvw.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp_el3ufvw.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp_el3ufvw.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp_el3ufvw.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp_el3ufvw.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp_el3ufvw.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp_el3ufvw.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp_el3ufvw.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp_el3ufvw.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp_el3ufvw.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return [tri(n\
    \ - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n    else:\n      \
    \  return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)]\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6xx_ckfc.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp6xx_ckfc.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp6xx_ckfc.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp6xx_ckfc.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmp6xx_ckfc.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmp6xx_ckfc.py\", line 27, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmp6xx_ckfc.py\", line 25, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)]\n  File \"/tmp/tmp6xx_ckfc.py\", line 27, in tri\n    return [tri(n - 1)\
    \ + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmp6xx_ckfc.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \  File \"/tmp/tmp6xx_ckfc.py\", line 27, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmp6xx_ckfc.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp6xx_ckfc.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)]\n  File \"\
    /tmp/tmp6xx_ckfc.py\", line 25, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmp6xx_ckfc.py\", line 27, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmp6xx_ckfc.py\"\
    , line 25, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmp6xx_ckfc.py\", l"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n    else:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuifbk1jz.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuifbk1jz.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpuifbk1jz.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    if n == 2:\n        return [1,2]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp398ge5x0.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp398ge5x0.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp398ge5x0.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp398ge5x0.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  File \"/tmp/tmp398ge5x0.py\", line 25, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp398ge5x0.py\", line 27, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n \
    \ File \"/tmp/tmp398ge5x0.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp398ge5x0.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmp398ge5x0.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp398ge5x0.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmp398ge5x0.py\", line 25, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp398ge5x0.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 4)\n  File \"/tmp/tmp398ge5x0.py\", line 25, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp398ge5x0.py\", line 27, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  File \"/tmp/tmp398ge5x0.py\", line 25, in tri\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp398ge5x0.py\", line 27, in tri\n \
    \   return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File\
    \ \"/tmp/tmp398ge5x0.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp398ge5x0.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmp398ge5x0.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp398ge5x0.py\", line 27, in tri\n    return tri(n - 1) + tri(n -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx3i4a6s3.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpx3i4a6s3.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpx3i4a6s3.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpx3i4a6s3.py\", line\
    \ 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  File \"/tmp/tmpx3i4a6s3.py\", line 23, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpx3i4a6s3.py\", line 23, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpx3i4a6s3.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 4)\n  File \"/tmp/tmpx3i4a6s3.py\", line 23, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpx3i4a6s3.py\", line 25, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  File \"/tmp/tmpx3i4a6s3.py\", line 23, in tri\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpx3i4a6s3.py\", line 25, in tri\n \
    \   return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File\
    \ \"/tmp/tmpx3i4a6s3.py\", line 23, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpx3i4a6s3.py\", line 25, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpx3i4a6s3.py\"\
    , line 23, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpx3i4a6s3.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmpx3i4a6s3.py\", line 23, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpx3i4a6s3.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 4)\n  File \"/tmp/tmpx3i4a6s3.py\", line 23, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpx3i4a6s3.py\", line 25, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  File \"/tmp/tmpx3i4a6s3.py\", line 23, in tri\n    return tri(n - 1) +\
    \ tri(n -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [3]\n    if n == 2:\n        return [3, 3]\n   \
    \ if n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2)]\n    else:\n        return [tri(n - 1) + tri(n - 2), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc7itdyeq.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpc7itdyeq.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpc7itdyeq.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpc7itdyeq.py\", line\
    \ 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmpc7itdyeq.py\", line 27, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpc7itdyeq.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpc7itdyeq.py\", line 27, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpc7itdyeq.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpc7itdyeq.py\", line 27, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpc7itdyeq.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpc7itdyeq.py\", line 27, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpc7itdyeq.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpc7itdyeq.py\", line 27, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpc7itdyeq.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpc7itdyeq.py\", line 27, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpc7itdyeq.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmpc7itdyeq.py\", line 27, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmpc7itdyeq.py\"\
    , line 29, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) +"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return [tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1)]\n    else:\n        return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n + 1) + tri(n + 2)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9q9vv07o.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp9q9vv07o.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9q9vv07o.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9q9vv07o.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmp9q9vv07o.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp9q9vv07o.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmp9q9vv07o.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp9q9vv07o.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmp9q9vv07o.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp9q9vv07o.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmp9q9vv07o.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp9q9vv07o.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmp9q9vv07o.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp9q9vv07o.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmp9q9vv07o.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp9q9vv07o.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmp9q9vv07o.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp9q9vv07o.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmp9q9vv07o.py\", line 25, in tri"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [3]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 2, 3]\n\
    \    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   \
    \ else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptvwegxe1.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmptvwegxe1.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmptvwegxe1.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmptvwegxe1.py\", line\
    \ 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmptvwegxe1.py\", line 27, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmptvwegxe1.py\", line 29, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmptvwegxe1.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmptvwegxe1.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmptvwegxe1.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmptvwegxe1.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmptvwegxe1.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmptvwegxe1.py\", line 29, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmptvwegxe1.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmptvwegxe1.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmptvwegxe1.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmptvwegxe1.py\", line 29,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmptvwegxe1.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmptvwegxe1.py\", line 29, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmptvwegxe1.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmptvwegxe1.py\", line 29, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmptvwegxe1.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  elif n == 1:\n        return [1,3]\n    elif n == 2:\n        return [1,3,5]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1) + tri_1 + tri_2\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0_gp6bp8.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp0_gp6bp8.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp0_gp6bp8.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp0_gp6bp8.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmp0_gp6bp8.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp0_gp6bp8.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmp0_gp6bp8.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp0_gp6bp8.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmp0_gp6bp8.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp0_gp6bp8.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmp0_gp6bp8.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp0_gp6bp8.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmp0_gp6bp8.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp0_gp6bp8.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmp0_gp6bp8.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp0_gp6bp8.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmp0_gp6bp8.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp0_gp6bp8.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmp0_gp6bp8.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp0_gp6bp8.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmp0_gp6bp8.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp0_gp6bp8.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmp0_gp6bp8.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp0_gp6bp8.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/tmp/tmp0_gp6bp8.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp0_gp6bp8.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1) + tri_1 + tri_2\n  File \"/t"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdaiz223n.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpdaiz223n.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdaiz223n.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpdaiz223n.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmpdaiz223n.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpdaiz223n.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpdaiz223n.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpdaiz223n.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpdaiz223n.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpdaiz223n.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpdaiz223n.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpdaiz223n.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpdaiz223n.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpdaiz223n.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpdaiz223n.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpdaiz223n.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpdaiz223n.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpdaiz223n.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpdaiz223n.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpdaiz223n.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpdaiz223n.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn_pn5zvr.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpn_pn5zvr.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpn_pn5zvr.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpn_pn5zvr.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmpn_pn5zvr.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpn_pn5zvr.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpn_pn5zvr.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpn_pn5zvr.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpn_pn5zvr.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpn_pn5zvr.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpn_pn5zvr.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpn_pn5zvr.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpn_pn5zvr.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpn_pn5zvr.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpn_pn5zvr.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpn_pn5zvr.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpn_pn5zvr.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpn_pn5zvr.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpn_pn5zvr.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpn_pn5zvr.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpn_pn5zvr.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return [tri(n\
    \ - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n    else:\n        return [tri(n\
    \ - 1) + tri(n - 2), tri(n - 2) + tri(n - 1), tri(n + 1) + tri(n + 2)]\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx2qq6bva.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpx2qq6bva.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpx2qq6bva.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpx2qq6bva.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1), tri(n\
    \ + 1) + tri(n + 2)]\n  File \"/tmp/tmpx2qq6bva.py\", line 25, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpx2qq6bva.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1),\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpx2qq6bva.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpx2qq6bva.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1),\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpx2qq6bva.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpx2qq6bva.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1),\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpx2qq6bva.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpx2qq6bva.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1),\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpx2qq6bva.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpx2qq6bva.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1),\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpx2qq6bva.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpx2qq6bva.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1),\
    \ tri(n + 1) + tri(n + 2)]\n  File \"/tmp/tmpx2qq6bva.py\", line 25, in tri\n\
    \    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmpx2qq6bva.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpss_ysi4v.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpss_ysi4v.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpss_ysi4v.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpss_ysi4v.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpss_ysi4v.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpss_ysi4v.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpss_ysi4v.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpss_ysi4v.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpss_ysi4v.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpss_ysi4v.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpss_ysi4v.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpss_ysi4v.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpss_ysi4v.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpss_ysi4v.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpss_ysi4v.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpss_ysi4v.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpss_ysi4v.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpss_ysi4v.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3)\n  File \"/tmp/tmpss_ysi4v.py\", line 25, in tri\n    return\
    \ tri(n - 1)"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq3ob6dye.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpq3ob6dye.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpq3ob6dye.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpq3ob6dye.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmpq3ob6dye.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpq3ob6dye.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpq3ob6dye.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpq3ob6dye.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpq3ob6dye.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpq3ob6dye.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpq3ob6dye.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpq3ob6dye.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpq3ob6dye.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpq3ob6dye.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpq3ob6dye.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpq3ob6dye.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpq3ob6dye.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpq3ob6dye.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpq3ob6dye.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpq3ob6dye.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpq3ob6dye.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphle84ngj.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmphle84ngj.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmphle84ngj.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmphle84ngj.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  File \"/tmp/tmphle84ngj.py\", line 25, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmphle84ngj.py\", line 27, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n \
    \ File \"/tmp/tmphle84ngj.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmphle84ngj.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmphle84ngj.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmphle84ngj.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmphle84ngj.py\", line 25, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmphle84ngj.py\"\
    , line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\
    \ + tri(n - 4)\n  File \"/tmp/tmphle84ngj.py\", line 25, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmphle84ngj.py\", line 27, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  File \"/tmp/tmphle84ngj.py\", line 25, in tri\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmphle84ngj.py\", line 27, in tri\n \
    \   return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File\
    \ \"/tmp/tmphle84ngj.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmphle84ngj.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  File \"/tmp/tmphle84ngj.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmphle84ngj.py\", line 27, in tri\n    return tri(n - 1) + tri(n -"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n \
    \   if n == 2:\n        return [1,3]\n    if n % 2 == 0:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ansirn7.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp2ansirn7.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp2ansirn7.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp2ansirn7.py\", line\
    \ 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmp2ansirn7.py\", line 25, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp2ansirn7.py\", line 27, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp2ansirn7.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp2ansirn7.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp2ansirn7.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp2ansirn7.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp2ansirn7.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp2ansirn7.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp2ansirn7.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp2ansirn7.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp2ansirn7.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp2ansirn7.py\", line 27,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp2ansirn7.py\", line 25, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp2ansirn7.py\", line 27, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp2ansirn7.py\"\
    , line 25, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp2ansirn7.py\", line 27, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp2ansirn7.py\", line 25, in tri\n    return\
    \ tri(n - 1) + tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    if n == 2:\n        return [1,3]\n    if n % 2 == 0:\n        return tri(n-1)\
    \ + tri(n-2)\n    else:\n        return tri(n-1) + tri(n-2) + tri(n+1)\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp26z88j94.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp26z88j94.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp26z88j94.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp26z88j94.py\", line\
    \ 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 25, in tri\n    return tri(n-1) + tri(n-2)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 27, in tri\n    return tri(n-1) + tri(n-2) + tri(n+1)\n  File \"/tmp/tmp26z88j94.py\"\
    , line 25, in tri\n    r"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n == 3:\n        return [1,3,5]\n\
    \    else:\n        tri_1 = tri(n-1)\n        tri_2 = tri(n-2)\n        tri_3\
    \ = tri(n+2)\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgphhnj2o.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpgphhnj2o.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpgphhnj2o.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n == 3:\n        return [1,3,5]\n\
    \    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \   else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfleau4ox.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpfleau4ox.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpfleau4ox.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 3]\n\
    \    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1)\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnd6ba_97.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpnd6ba_97.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpnd6ba_97.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpnd6ba_97.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpnd6ba_97.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpnd6ba_97.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpnd6ba_97.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmpnd6ba_97.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmpnd6ba_97.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmpnd6ba_97.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmpnd6ba_97.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmpnd6ba_97.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmpnd6ba_97.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmpnd6ba_97.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpnd6ba_97.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpnd6ba_97.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpnd6ba_97.py\", line 27,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpnd6ba_97.py\", line 29, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpnd6ba_97.py\", line 27, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmpnd6ba_97.py\", line 29, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmpnd6ba_97.py\", line 27, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmpnd6ba_97.py\", line 29, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmpnd6ba_97.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmpnd6ba_97.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmpnd6ba_97.py\", line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmpnd6ba_97.py\", line 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpnd6ba_97.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmpnd6ba_97.py\", line\
    \ 29, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmpnd6ba_97.py\", line 27,\
    \ in tri\n    tri_1 = tri(n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n-1) + tri(n-2), tri(n-1)]\n    else:\n        return [tri(n-1) + tri(n-2),\
    \ tri(n-1) + tri(n-1)]\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5w6sq478.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5w6sq478.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5w6sq478.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0, 0,\
    \ 0]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1,\
    \ 3]\n    else:\n        mid = (n-1) // 2\n        left = tri(mid)\n        right\
    \ = tri(mid+1)\n        return left + [mid] + right\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7md89ku8.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp7md89ku8.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp7md89ku8.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0, 0,\
    \ 0]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1,\
    \ 3]\n    else:\n        tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n      \
    \  tri_2 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        tri_3 = tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n        return [tri_1, tri_2, tri_3]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdigi06ps.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpdigi06ps.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdigi06ps.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpdigi06ps.py\", line\
    \ 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpdigi06ps.py\"\
    , line 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpdigi06ps.py\", line 27, in tri\n    tri_1 = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n  [Previous line repeated 993 more times]\n  File \"/tmp/tmpdigi06ps.py\"\
    , line 20, in tri\n    if n == 0:\nRecursionError: maximum recursion depth exceeded\
    \ in comparison\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    if n == 2:\n        return [1,3]\n    if n % 2 == 0:\n        return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n    else:\n      \
    \  return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7v6tsby0.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp7v6tsby0.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp7v6tsby0.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp7v6tsby0.py\", line\
    \ 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n  File \"/tmp/tmp7v6tsby0.py\", line 25, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp7v6tsby0.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmp7v6tsby0.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp7v6tsby0.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmp7v6tsby0.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp7v6tsby0.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmp7v6tsby0.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp7v6tsby0.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmp7v6tsby0.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp7v6tsby0.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmp7v6tsby0.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp7v6tsby0.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n  File \"/tmp/tmp7v6tsby0.py\", line 25, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)]\n  File \"/tmp/tmp7v6tsby0.py\"\
    , line 27, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) +"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1,3]\n\
    \    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n        return\
    \ [tri(n-1) + tri(n-2), tri(n-1)]\n    else:\n        return [tri(n-1) + tri(n-2),\
    \ tri(n-1) + tri(n-2)]\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe9oixr19.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpe9oixr19.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpe9oixr19.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
