name: HumanEval_102_choose_num
language: python
results:
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        smaller\
    \ = x\n    else:\n        smaller = y\n    larger = smaller\n    while smaller\
    \ < larger:\n        smaller = larger\n        larger = smaller * 2\n    if smaller\
    \ > y:\n        smaller = y\n    return smaller\n\n\ndef check(candidate):\n \
    \   assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz_hv_ezk.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpz_hv_ezk.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpz_hv_ezk.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    \n    evens = []\n    for i in range(x, y + 1):\n        if i % 2 ==\
    \ 0:\n            evens.append(i)\n    \n    if len(evens) == 0:\n        return\
    \ -1\n    \n    return max(evens)\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8g59sxiu.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8g59sxiu.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp8g59sxiu.py\", line 31,\
    \ in check\n    assert candidate(546, 546) == 546\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiyh5l5qj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpiyh5l5qj.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpiyh5l5qj.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        return x // 2\n    elif y % 2 == 0:\n       \
    \ return y // 2\n    elif x % 2 == 0 and y % 2 == 0:\n        return x // 2 +\
    \ y // 2\n    elif x % 2 == 0 and y % 2 != 0:\n        return -1\n    elif x %\
    \ 2 != 0 and y % 2 == 0:\n        return -1\n    elif x % 2 != 0 and y % 2 !=\
    \ 0:\n        return x // 2 + y // 2\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp71jigkvr.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp71jigkvr.py\", line 39,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp71jigkvr.py\", line 29,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        x += 1\n    if y % 2 == 0:\n        y += 1\n\
    \    while x < y:\n        if x % 2 == 0:\n            x += 1\n        if y %\
    \ 2 == 0:\n            y += 1\n        if x % 2 == 0 and y % 2 == 0:\n       \
    \     return x\n    return -1\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        if x %\
    \ 2 == 0:\n            return x\n        else:\n            return y\n    else:\n\
    \        if y % 2 == 0:\n            return y\n        else:\n            return\
    \ x\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxbrl0k2r.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpxbrl0k2r.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxbrl0k2r.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        return choose_num(x - 1, y)\n    if x < y:\n\
    \        return choose_num(x, y - 1)\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn6rlepx1.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpn6rlepx1.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpn6rlepx1.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        return choose_num(y - 1, x)\n    if x < y:\n\
    \        return choose_num(y, x - 1)\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_qj9avb6.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_qj9avb6.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_qj9avb6.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        x, y = y, x\n    if x % 2 == 0 and y % 2 == 0:\n\
    \        return x // 2 + y // 2\n    if x % 2 == 0 and y % 2 != 0:\n        return\
    \ x // 2\n    if x % 2 != 0 and y % 2 == 0:\n        return y // 2\n    if x %\
    \ 2 != 0 and y % 2 != 0:\n        return x // 2 + y // 2\n    return -1\n\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk3q2dqdq.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpk3q2dqdq.py\", line 40,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpk3q2dqdq.py\", line 30,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        x, y = y,\
    \ x\n    \n    even = x % 2 == 0\n    \n    if even:\n        even = y % 2 ==\
    \ 0\n        \n        if even:\n            return x\n        else:\n       \
    \     return y\n    else:\n        even = y % 2 == 0\n        \n        if even:\n\
    \            return y\n        else:\n            return x\n    \ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjs30ga81.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpjs30ga81.py\", line 41,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpjs30ga81.py\", line 31,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        return choose_num(y - 1, x)\n    if x < y:\n\
    \        return choose_num(y, x - 1)\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgr17hnsn.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpgr17hnsn.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpgr17hnsn.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    if x >= y:\n        return\
    \ -1\n    \n    evens = []\n    \n    for i in range(x, y + 1):\n        if i\
    \ % 2 == 0:\n            evens.append(i)\n    \n    if len(evens) == 0:\n    \
    \    return -1\n    \n    return max(evens)\n\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprentdm47.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmprentdm47.py\", line 37,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprentdm47.py\", line 34,\
    \ in check\n    assert candidate(546, 546) == 546\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\ndef check(candidate):\n  \
    \  assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoj9lebue.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpoj9lebue.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpoj9lebue.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = x % 2 == 0\n    \n    if even:\n        even = y % 2 ==\
    \ 0\n    \n    if even and x > y:\n        return -1\n    elif not even and x\
    \ < y:\n        return -1\n    elif even and x > y:\n        return y\n    elif\
    \ not even and x < y:\n        return x\n    else:\n        return -1\n\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8nguwtit.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp8nguwtit.py\", line 41,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp8nguwtit.py\", line 31,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        return choose_num(x - 1, y)\n    if y > x:\n\
    \        return choose_num(x, y - 1)\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3zejf_ek.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3zejf_ek.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3zejf_ek.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        x += 1\n    if y % 2 == 0:\n        y += 1\n\
    \    while x != y:\n        if x % 2 == 0:\n            x += 1\n        elif y\
    \ % 2 == 0:\n            y += 1\n        else:\n            x -= 1\n         \
    \   y -= 1\n    return x if x != -1 else -1\n\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\ndef check(candidate):\n  \
    \  assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqu_h5a0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpuqu_h5a0.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpuqu_h5a0.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp63vpfg64.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp63vpfg64.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp63vpfg64.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    if x > y:\n        x,\
    \ y = y, x\n    \n    if x % 2 == 0:\n        if y % 2 == 0:\n            return\
    \ x\n        else:\n            return y\n    else:\n        if y % 2 == 0:\n\
    \            return y\n        else:\n            return x\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc3tbkcio.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpc3tbkcio.py\", line 36,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpc3tbkcio.py\", line 26,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        smaller\
    \ = x\n    else:\n        smaller = y\n\n    if smaller%2 == 0:\n        smaller\
    \ = smaller+1\n\n    bigger = smaller\n\n    while bigger <= y:\n        if bigger%2\
    \ == 0:\n            bigger = bigger+1\n        else:\n            bigger = bigger+1\n\
    \            if bigger > y:\n                return -1\n    return bigger\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp79yhwg8o.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp79yhwg8o.py\", line 40,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp79yhwg8o.py\", line 30,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x == y:\n        return -1\n    \n    even = x % 2 == 0\n    \n  \
    \  if even:\n        x += 1\n    \n    even = y % 2 == 0\n    \n    if even:\n\
    \        y += 1\n    \n    even = x % 2 == 0\n    \n    if even:\n        x +=\
    \ 1\n    \n    even = y % 2 == 0\n    \n    if even:\n        y += 1\n    \n \
    \   even = x % 2 == 0\n    \n    if even:\n        x += 1\n    \n    even = y\
    \ % 2 == 0\n    \n    if even:\n        y += 1\n    \n    even = x % 2 == 0\n\
    \    \n    if even:\n        x += 1\n    \n    even = y % 2 == 0\n    \n    if\
    \ even:\n        y += 1\n    \n    even = x % 2 == 0\n    \n    if even:\n   \
    \     x += 1\n    \n    even = y % 2 == 0\n    \n    if even:\n        y += 1\n\
    \    \n    even = x % 2 == 0\n    \n    if even:\n        x += 1\n    \n    even\
    \ = y % 2 == 0\n    \n    if even:\n        y += 1\n    \n    even = x % 2 ==\
    \ 0\n    \n    if even:\n        x += 1\n    \n    even = y % 2 == 0\n    \n \
    \   if even:\n        y += 1\n    \n    even = x % 2 == 0\n    \n    if even:\n\
    \        x += 1\n    \n    even = y % 2 == 0\n    \n    if even:\n        y +=\
    \ 1\n    \n    even = x % 2 == 0\n    \n    if even:\n        x += 1\n    \n \
    \   even = y % 2 == 0\n    \n    if even:\n        y += 1\n    \n    even = x\
    \ % 2 == 0\n    \n    if even:\n        x += 1\n    \n    even = y % 2 == 0\n\
    \    \n    if even:\n        y += 1\n    \n    even = x % 2 == 0\n    \n    if\
    \ even:\n        x += 1\n    \n    even = y % 2 == 0\n    \n    if even:\n   \
    \     y += 1\n    \n    even = x % 2 == 0\n    \n    if even:\n        x += 1\n\
    \    \n    even = y % 2 == 0\n    \n    if even:\n        y += 1\n    \n    even\
    \ = x % 2 == 0\n    \n    if even:\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmprwngaqu9.py\", line 139\n    def check(candidate):\n \
    \   ^\nIndentationError: expected an indented block\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        if x % 2\
    \ == 0:\n            return x\n        else:\n            return y\n    else:\n\
    \        if y % 2 == 0:\n            return y\n        else:\n            return\
    \ x\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6p2cve3g.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6p2cve3g.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp6p2cve3g.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6x8wjrzu.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp6x8wjrzu.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp6x8wjrzu.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        x, y = y,\
    \ x\n    \n    even = x % 2 == 0\n    \n    if even:\n        x, y = y, x\n  \
    \  \n    if x % 2 == 0 and y % 2 == 0:\n        return x // 2\n    elif x % 2\
    \ == 0 and y % 2 != 0:\n        return -1\n    elif x % 2 != 0 and y % 2 == 0:\n\
    \        return -1\n    elif x % 2 != 0 and y % 2 != 0:\n        return x // 2\n\
    \    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvvmp6l55.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpvvmp6l55.py\", line 41,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpvvmp6l55.py\", line 31,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        if x %\
    \ 2 == 0:\n            return x\n        else:\n            return y\n    else:\n\
    \        if y % 2 == 0:\n            return y\n        else:\n            return\
    \ x\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3a9l8pya.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3a9l8pya.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3a9l8pya.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = True\n    \n    while even and x != y:\n        if x % 2\
    \ == 0:\n            even = False\n        x += 1\n    \n    if even:\n      \
    \  return x\n    else:\n        return -1\n</cell>\n<cell>\nchoose_num(12, 15)\n\
    </cell>\n<cell>\nchoose_num(13, 12)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes a positive integer number x and returns the number of digits in x.\
    \ If x is negative, then it should return -1.\n\nFor example:\ncount_digits(123)\
    \ = 123\ncount_digits(-123) = -1\ncount_digits(0) = 0\ncount_digits(-0) = -1\n\
    count_digits(-10) = -10\ncount_digits(-100) = -1\ncount_digits(-1000) = -1\ncount_digits(-1000000000)\
    \ = -1\ncount_digits(-1000000000000) = -1\ncount_digits(-1000000000000000) = -1\n\
    count_digits(-1000000000000000000) = -1\ncount_digits(-100000000000000000000)\
    \ = -1\ncount_digits(-1000000000000000000000000) = -1\ncount_digits(-10000000000000000000000000000)\
    \ = -1\ncount_digits(-10000000000000000000000000000000) = -1\ncount_digits(-1000000000000000000000000000000000)\
    \ = -1\ncount_digits(-10000000000000000000000000000000001) = -1\ncount_digits(-100000000000000000000000000000000010000000000000000)\
    \ = -1\ncount_digits(-1000000000000000000000000000000000100000000000000000100000000000000000)\
    \ = -1\ncount_digits(-100000000000000000000000000000000010000000000000000010000000000000000010000000000000000)\
    \ = -1\ncount_digits(-1000000000000000000000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100000000000000000)\
    \ = -1\ncount_digits(-100000000000000000000000000000000010000000000000000010000000000000000010000000000000000010000000000000000010000000000000000010000000000000000)\
    \ = -1\ncount_digits(-1000000000000000000000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100000000000000000)\
    \ = -1\ncount_digits(-100000000000000000000000000000000010000000000000000010000000000000000010000000000000000010000000000000000010000000000000000010000000000000000010000000000000000010000000000000000010000000000000000)\
    \ = -1\ncount_digits(-1000000000000000000000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100000000000000000)\
    \ = -1\ncount_digits(-1000000000000000000000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100000000000000000100\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpkx_zrcds.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        x, y = y,\
    \ x\n    \n    even = x % 2 == 0\n    \n    if even:\n        even = y % 2 ==\
    \ 0\n    \n    if even:\n        return y\n    else:\n        return -1\n</cell>\n\
    <cell>\nchoose_num(12, 15)\n</cell>\n<cell>\nchoose_num(13, 12)\n</cell>\n<text>\n\
    Problem 3\nWrite a function that takes a positive integer number and returns its\
    \ \nfactorial number.\n\nFor example:\nfactorial(5) = 5 * 5 * 4 * 3 = 120\nfactorial(10)\
    \ = 5040\nfactorial(12) = 720\nfactorial(13) = 104050\nfactorial(14) = 15120\n\
    factorial(15) = 15120\nfactorial(16) = 2432902008176640000\nfactorial(17) = 479001600\n\
    factorial(18) = 72057594037927936\nfactorial(19) = 9223372036854775808\nfactorial(20)\
    \ = 1887436328120\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpumaian0q.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        x += 1\n    if y % 2 == 0:\n        y += 1\n\
    \    while x != y:\n        if x % 2 == 0:\n            x += 1\n        elif y\
    \ % 2 == 0:\n            y += 1\n        else:\n            return x\n    return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnsf2hprx.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnsf2hprx.py\", line 37,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpnsf2hprx.py\", line 27,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        return\
    \ -1\n    \n    evens = []\n    \n    for i in range(x, y + 1):\n        if i\
    \ % 2 == 0:\n            evens.append(i)\n    \n    if len(evens) == 0:\n    \
    \    return -1\n    \n    return max(evens)\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprjb47kke.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmprjb47kke.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprjb47kke.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpft0pdyb9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpft0pdyb9.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpft0pdyb9.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        return x // 2\n    \n    if y % 2 == 0:\n\
    \        return y // 2\n    \n    if x > y:\n        return -1\n    \n    return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmporkng03o.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmporkng03o.py\", line 36,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmporkng03o.py\", line 26,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        return -1\n    if y % 2 == 0:\n        return\
    \ -1\n    if x > y:\n        x, y = y, x\n    if x % 2 == 0 and y % 2 == 0:\n\
    \        return x // 2\n    if x % 2 == 1 and y % 2 == 1:\n        return x //\
    \ 2 + 1\n    return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplhspl9qu.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplhspl9qu.py\", line 36,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmplhspl9qu.py\", line 26,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    \n    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo4pjff3b.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpo4pjff3b.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpo4pjff3b.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    if x >= y:\n        return\
    \ -1\n    \n    even = True\n    \n    while even and x <= y:\n        if x %\
    \ 2 == 0:\n            even = False\n        x += 1\n    \n    if even:\n    \
    \    return x\n    else:\n        return -1\n</cell>\n<cell>\nchoose_num(12, 15)\n\
    </cell>\n<cell>\nchoose_num(13, 12)\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that takes a positive integer number x and returns the number of \ntimes it\
    \ appears in the list [x, x + 1, ..., x + n] where n can be any positive integer.\n\
    \nFor example:\n    count_num(10) = 3\n    count_num(10) = 3\n    count_num(10)\
    \ = 3\n    count_num(10) = 3\n    count_num(10) = 3\n    count_num(10) = 3\n \
    \   count_num(10) = 3\n    count_num(10) = 3\n    count_num(10) = 3\n    count_num(10)\
    \ = 3\n    count_num(10) = 3\n    count_num(10) = 3\n    count_num(10) = 3\n \
    \   count_num(10) = 3\n    count_num(10) = 3\n    count_num(10) = 3\n    count_num(10)\
    \ = 3\n    count_num(10) = 3\n    count_num(10) = 3\n    count_num(10) = 3\n \
    \   count_num(10) = 3\n    count_num(10) = 3\n    count_num(10) = 3\n    count_num(10)\
    \ = 3\n    count_num(10) = 3\n    count_num(10) = 3\n    count_num(10) = 3\n \
    \   count_num(10) = 3\n    count_num(10) = 3\n    count_num(10) = 3\n    count_num(10)\
    \ = 3\n    count_num(10) = 3\n    count_num(10) = 3\n    count_num(10) = 3\n \
    \   count_num(10) = 3\n    count_num(10) = 3\n    count_num(10) = 3\n    count_num(10)\
    \ = 3\n    count_num(10) = 3\n    count_num(10) = 3\n    count_num(10) = 3\n \
    \   count_num(10) = 3\n    count_num(10) = 3\n    count_num(10) = 3\n    count_num(10)\
    \ = 3\n    count_num(10) = 3\n    count_num(10) = 3\n    count_num(10) = 3\n \
    \   count_num(10) = 3\n    count_num(10) = 3\n    count_num(10) = 3\n    count_num(10)\
    \ = 3\n    count_num(10) = 3\n    count_num(10) = 3\n    count_num(10) = 3\n \
    \   count_num(10)\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpwdiwm35s.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        x, y = y,\
    \ x\n    if x == y:\n        return -1\n    if x % 2 == 0:\n        return x //\
    \ 2\n    else:\n        return x + 1\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6_glczc.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpq6_glczc.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpq6_glczc.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        if x %\
    \ 2 == 0:\n            return x\n        else:\n            return y\n    else:\n\
    \        if y % 2 == 0:\n            return y\n        else:\n            return\
    \ x\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbmnmuwrt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbmnmuwrt.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpbmnmuwrt.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1lggy12h.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1lggy12h.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp1lggy12h.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x == y:\n        return -1\n    \n    even = x % 2 == 0\n    \n  \
    \  if even:\n        lower = x\n        upper = y\n    else:\n        lower =\
    \ y\n        upper = x\n    \n    lower = lower // 2\n    upper = upper // 2\n\
    \    \n    while lower <= upper:\n        mid = (lower + upper) // 2\n       \
    \ if mid * mid == x:\n            return mid\n        elif mid * mid == y:\n \
    \           return mid\n        elif mid * mid > x:\n            upper = mid -\
    \ 1\n        else:\n            lower = mid + 1\n    \n    return -1\n\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp82dshb6b.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp82dshb6b.py\", line 52,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp82dshb6b.py\", line 42,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n\
    \        else:\n            return y\n    else:\n        if y % 2 == 0:\n    \
    \        return y\n        else:\n            return x\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuaeuxt5j.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpuaeuxt5j.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpuaeuxt5j.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\ndef check(candidate):\n  \
    \  assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxd43vyb.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpwxd43vyb.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpwxd43vyb.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        return -1\n\
    \    if x == y:\n        return x\n    if x % 2 == 0:\n        return x // 2\n\
    \    if y % 2 == 0:\n        return y // 2\n    if x > y:\n        return choose_num(y\
    \ - 1, x)\n    return choose_num(x - 1, y)\n\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2v58v5v.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpq2v58v5v.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpq2v58v5v.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = x % 2 == 0\n    \n    if even:\n        even = y % 2 ==\
    \ 0\n        \n    if even:\n        \n        if x > y:\n            x, y = y,\
    \ x\n        \n        even = x % 2 == 0\n        \n        if even:\n       \
    \     even = y % 2 == 0\n            \n        if even:\n            \n      \
    \      if x > y:\n                x, y = y, x\n            \n            even\
    \ = x % 2 == 0\n            \n            if even:\n                even = y %\
    \ 2 == 0\n                \n            if even:\n                \n         \
    \       if x > y:\n                    x, y = y, x\n                \n       \
    \         even = x % 2 == 0\n                \n                if even:\n    \
    \                even = y % 2 == 0\n                    \n                if even:\n\
    \                    \n                    if x > y:\n                       \
    \ x, y = y, x\n                    \n                    even = x % 2 == 0\n \
    \                   \n                    if even:\n                        even\
    \ = y % 2 == 0\n                        \n                    if even:\n     \
    \                   \n                        if x > y:\n                    \
    \        x, y = y, x\n                        \n                        even =\
    \ x % 2 == 0\n                        \n                        if even:\n   \
    \                         even = y % 2 == 0\n                            \n  \
    \                      if even:\n                            \n              \
    \              if x > y:\n                                x, y = y, x\n      \
    \                      \n                            even = x % 2 == 0\n     \
    \                       \n                            if even:\n             \
    \                   even = y % 2 == 0\n                                \n    \
    \                        if even:\n                                \n        \
    \                        if x > y:\n                                    x, y =\
    \ y, x\n                                \n                                even\
    \ = x % 2 == 0\n                                \n                           \
    \     if even:\n                                    even = y % 2 == 0\n      \
    \                              \n                                if even:\n  \
    \                                  \n                                    if x\
    \ > y:\n                                        x, y = y, x\n                \
    \                    \n                                    even = x % 2 == 0\n\
    \                                    \n                                    if\
    \ even:\n                                        even = y % 2 == 0\n         \
    \                               \n                                    if even:\n\
    \                                        \n                                  \
    \      if x > y:\n                                            x, y = y, x\n  \
    \                                      \n                                    \
    \    even = x % 2 == 0\n                                        \n           \
    \                             if even:\n                                     \
    \       even = y % 2 == 0\n                                            \n    \
    \                                    if even:\n                              \
    \              return x\n                                        \n          \
    \                          else:\n                                        return\
    \ -1\n                                \n                            else:\n  \
    \                              return -1\n                        \n         \
    \           else:\n                        return -1\n                \n     \
    \           else:\n                    return -1\n            \n            else:\n\
    \                return -1\n        \n        else:\n            return -1\n \
    \   \n    else:\n        return -1\n    \n    \ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv34ic7gi.py\", line\
    \ 146, in <module>\n    test_check()\n  File \"/tmp/tmpv34ic7gi.py\", line 144,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpv34ic7gi.py\", line 134,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        return choose_num(y - 1, x)\n    if y > x:\n\
    \        return choose_num(x, y - 1)\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm34kilc2.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpm34kilc2.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpm34kilc2.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n\
    \        else:\n            return y\n    else:\n        if y % 2 == 0:\n    \
    \        return y\n        else:\n            return x\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa47d17bn.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpa47d17bn.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpa47d17bn.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    \n    even = x % 2 == 0\n    \n    if even:\n        even = y % 2 ==\
    \ 0\n    \n    if even:\n        return x if x > y else y\n    else:\n       \
    \ return x if x < y else y\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfu7_6mge.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpfu7_6mge.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpfu7_6mge.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = True\n    \n    while even and x != y:\n        if x % 2\
    \ == 0:\n            even = False\n            x = x // 2\n        else:\n   \
    \         x = x + 1\n    \n    if even:\n        return x\n    else:\n       \
    \ return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n   \
    \ assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n \
    \   assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n  \
    \  assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptnwl0gka.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmptnwl0gka.py\", line 38,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmptnwl0gka.py\", line 28,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        if x %\
    \ 2 == 0:\n            return x\n        else:\n            return y\n    else:\n\
    \        if y % 2 == 0:\n            return y\n        else:\n            return\
    \ x\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3yjyp_69.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp3yjyp_69.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3yjyp_69.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        if x %\
    \ 2 == 0:\n            return x\n        else:\n            return y\n    else:\n\
    \        if y % 2 == 0:\n            return y\n        else:\n            return\
    \ x\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn_q912y4.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpn_q912y4.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpn_q912y4.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0 and y % 2 == 0:\n        if x % 2 == 0 and y % 2\
    \ != 0:\n            return x\n        elif x % 2 != 0 and y % 2 == 0:\n     \
    \       return y\n        else:\n            return -1\n    elif x % 2 != 0 and\
    \ y % 2 != 0:\n        return -1\n    elif x % 2 == 0 and y % 2 != 0:\n      \
    \  return y\n    else:\n        return x\n</cell>\n<cell>\nchoose_num(12, 15)\n\
    </cell>\n<cell>\nchoose_num(13, 12)\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that takes a positive integer number n and returns the number of digits in n.\
    \ \nFor example, choose_num(12) should return 2.\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpjzwp4fxk.py\", line 26\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        if x % 2\
    \ == 0:\n            return x\n        else:\n            return y\n    else:\n\
    \        if y % 2 == 0:\n            return y\n        else:\n            return\
    \ x\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqs9vi5vq.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqs9vi5vq.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpqs9vi5vq.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return -1\n    else:\n        if y % 2 == 0:\n         \
    \   return -1\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeoob5ar0.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpeoob5ar0.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpeoob5ar0.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0 and y % 2 == 0:\n        return x // 2\n    elif x % 2\
    \ == 0 and y % 2 != 0:\n        return -1\n    elif x % 2 != 0 and y % 2 == 0:\n\
    \        return -1\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfdry9zys.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfdry9zys.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpfdry9zys.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        if x %\
    \ 2 == 0:\n            return x\n        else:\n            return y\n    else:\n\
    \        if y % 2 == 0:\n            return y\n        else:\n            return\
    \ x\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuvj57xxr.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuvj57xxr.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpuvj57xxr.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7qpfhrt.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpw7qpfhrt.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpw7qpfhrt.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = x % 2 == 0\n    \n    if even:\n        even = y % 2 ==\
    \ 0\n    \n    if even and x > y:\n        return -1\n    \n    if even and x\
    \ == y:\n        return x\n    \n    if even and x > y:\n        return y\n  \
    \  \n    if even and x == y:\n        return x\n    \n    if even:\n        even\
    \ = y % 2 == 0\n    \n    if even and x > y:\n        return -1\n    \n    if\
    \ even and x == y:\n        return x\n    \n    if even and x > y:\n        return\
    \ y\n    \n    if even and x == y:\n        return x\n    \n    if even:\n   \
    \     even = y % 2 == 0\n    \n    if even and x > y:\n        return -1\n   \
    \ \n    if even and x == y:\n        return x\n    \n    if even and x > y:\n\
    \        return y\n    \n    if even and x == y:\n        return x\n    \n   \
    \ if even:\n        even = y % 2 == 0\n    \n    if even and x > y:\n        return\
    \ -1\n    \n    if even and x == y:\n        return x\n    \n    if even and x\
    \ > y:\n        return y\n    \n    if even and x == y:\n        return x\n  \
    \  \n    if even:\n        even = y % 2 == 0\n    \n    if even and x > y:\n \
    \       return -1\n    \n    if even and x == y:\n        return x\n    \n   \
    \ if even and x > y:\n        return y\n    \n    if even and x == y:\n      \
    \  return x\n    \n    if even:\n        even = y % 2 == 0\n    \n    if even\
    \ and x > y:\n        return -1\n    \n    if even and x == y:\n        return\
    \ x\n    \n    if even and x > y:\n        return y\n    \n    if even and x ==\
    \ y:\n        return x\n    \n    if even:\n        even = y % 2 == 0\n    \n\
    \    if even and x > y:\n        return -1\n    \n    if even and x == y:\n  \
    \      return x\n    \n    if even and x > y:\n        return y\n    \n    if\
    \ even and x == y:\n        return x\n    \n    if even:\n        even = y % 2\
    \ == 0\n    \n    if even and x > y:\n        return -1\n    \n    if even and\
    \ x == y:\n        return x\n    \n    if even and x > y:\n        return y\n\
    \    \n    if even and x == y:\n        return x\n    \n    if even:\n       \
    \ even = y % 2 == 0\n    \n    if even and x > y:\n        return -1\n    \n \
    \   if even and x == y:\n        return x\n    \n    if even and x > y:\n    \
    \    return y\ndef check(candidate):\n    assert candidate(12, 15) == 14\n   \
    \ assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n \
    \   assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n  \
    \  assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplv4nk4t1.py\", line\
    \ 159, in <module>\n    test_check()\n  File \"/tmp/tmplv4nk4t1.py\", line 157,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmplv4nk4t1.py\", line 147,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\ndef check(candidate):\n  \
    \  assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo0j2tmfz.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpo0j2tmfz.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpo0j2tmfz.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if y > x:\n        return -1\n    if x == y:\n        return x\n    if\
    \ x % 2 == 0:\n        if y % 2 == 0:\n            return x\n        else:\n \
    \           return y\n    else:\n        if y % 2 == 0:\n            return y\n\
    \        else:\n            return x\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv3b0ypix.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpv3b0ypix.py\", line 39,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpv3b0ypix.py\", line 29,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x <= y:\n        return -1\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x <= x:\n        return -1\n    return x // 2\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp20obdqx8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp20obdqx8.py\", line 36,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp20obdqx8.py\", line 26,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        small =\
    \ y\n        big = x\n    else:\n        small = x\n        big = y\n    \n  \
    \  while big - small > 1:\n        mid = (big + small) // 2\n        if mid *\
    \ mid > big * big:\n            big = mid\n        else:\n            small =\
    \ mid\n    \n    return big\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnfe8rh59.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpnfe8rh59.py\", line 38,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpnfe8rh59.py\", line 28,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    elif x % 2 == 0:\n        return x // 2\n    elif y % 2 == 0:\n    \
    \    return y // 2\n    else:\n        mid = (x + y) // 2\n        if mid % 2\
    \ == 0:\n            return mid\n        else:\n            return choose_num(mid,\
    \ y)\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp36x7p71i.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp36x7p71i.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp36x7p71i.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        return choose_num(y, x)\n    if y > x:\n    \
    \    return choose_num(x, y)\n    if x == y:\n        return -1\n    if x == y\
    \ + 1:\n        return x + 1\n    if y == x + 1:\n        return y + 1\n    if\
    \ x == y - 1:\n        return x - 1\n    if y == x - 1:\n        return y - 1\n\
    \    if x == y - 1:\n        return choose_num(y - 1, x)\n    if y == x - 1:\n\
    \        return choose_num(y - 1, x)\n    if x == y - 1:\n        return choose_num(y\
    \ - 1, x)\n    if y == x - 1:\n        return choose_num(y - 1, x)\n    if x ==\
    \ y - 1:\n        return choose_num(y - 1, x)\n    if y == x - 1:\n        return\
    \ choose_num(y - 1, x)\n    if x == y - 1:\n        return choose_num(y - 1, x)\n\
    \    if y == x - 1:\n        return choose_num(y - 1, x)\n    if x == y - 1:\n\
    \        return choose_num(y - 1, x)\n    if y == x - 1:\n        return choose_num(y\
    \ - 1, x)\n    if x == y - 1:\n        return choose_num(y - 1, x)\n    if y ==\
    \ x - 1:\n        return choose_num(y - 1, x)\n    if x == y - 1:\n        return\
    \ choose_num(y - 1, x)\n    if y == x - 1:\n        return choose_num(y - 1, x)\n\
    \    if x == y - 1:\n        return choose_num(y - 1, x)\n    if y == x - 1:\n\
    \        return choose_num(y - 1, x)\n    if x == y - 1:\n        return choose_num(y\
    \ - 1, x)\n    if y == x - 1:\n        return choose_num(y - 1, x)\n    if x ==\
    \ y - 1:\n        return choose_num(y - 1, x)\n    if y == x - 1:\n        return\
    \ choose_num(y - 1, x)\n    if x == y - 1:\n        return choose_num(y - 1, x)\n\
    \    if y == x - 1:\n        return choose_num(y - 1, x)\n    if x == y - 1:\n\
    \        return choose_num(y - 1, x)\n    if y == x - 1:\n        return choose_num(y\
    \ - 1, x)\n    if x == y - 1:\n        return choose_num(y - 1, x)\n    if y ==\
    \ x - 1:\n        return choose_num(y - 1, x)\n    if x == y - 1:\n        return\
    \ choose_num(y - 1, x)\n    if y == x - 1:\n        return choose_num(y - 1, x)\n\
    \    if x == y - 1:\n        return choose_num(y - 1, x)\n    if y == x - 1:\n\
    \        return choose_num(y - 1, x)\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnez6lenn.py\", line\
    \ 104, in <module>\n    test_check()\n  File \"/tmp/tmpnez6lenn.py\", line 102,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpnez6lenn.py\", line 92,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0 and y % 2 == 0:\n        return x // 2\n    elif\
    \ x % 2 == 0 and y % 2 != 0:\n        return -1\n    elif x % 2 != 0 and y % 2\
    \ == 0:\n        return -1\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqt79tjwv.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpqt79tjwv.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpqt79tjwv.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    evens = []\n    for i in range(x, y + 1):\n        if i % 2 ==\
    \ 0:\n            evens.append(i)\n    \n    if len(evens) == 0:\n        return\
    \ -1\n    \n    return max(evens)\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwh00kml6.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpwh00kml6.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpwh00kml6.py\", line 25,\
    \ in check\n    assert candidate(13, 12) == -1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppjif4e87.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmppjif4e87.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmppjif4e87.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x <= y:\n        return -1\n\n    mid = (x + y) // 2\n    if\
    \ mid % 2 == 0:\n        return mid\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl2h9xk4h.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpl2h9xk4h.py\", line 37,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpl2h9xk4h.py\", line 27,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        return choose_num(y - 1, x)\n    if y > x:\n\
    \        return choose_num(y, x - 1)\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa6v0eof6.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpa6v0eof6.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpa6v0eof6.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x % 2 == 0 and y % 2 == 0:\n        return x // 2 + y // 2\n\
    \    if x % 2 == 0 and y % 2 != 0:\n        return x // 2 + 1\n    if x % 2 !=\
    \ 0 and y % 2 == 0:\n        return y // 2 + 1\n    if x % 2 != 0 and y % 2 !=\
    \ 0:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4e4pyjue.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp4e4pyjue.py\", line 37,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp4e4pyjue.py\", line 27,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        return x // 2\n    else:\n        return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmput3o2w7r.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmput3o2w7r.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmput3o2w7r.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = True\n    \n    while even and x <= y:\n        if x % 2\
    \ == 0:\n            even = False\n        x += 1\n    \n    if even:\n      \
    \  return x\n    else:\n        return -1\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy_323y1m.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpy_323y1m.py\", line 36,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpy_323y1m.py\", line 26,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        return -1\n\
    \    \n    even = x % 2 == 0\n    \n    if even:\n        even = y % 2 == 0\n\
    \    \n    if even:\n        return x if x > y else y\n    \n    return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu0h25p64.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpu0h25p64.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpu0h25p64.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        x += 1\n    if y % 2 == 0:\n        y += 1\n\
    \    while x < y:\n        if x % 2 == 0:\n            x += 1\n        elif y\
    \ % 2 == 0:\n            y += 1\n        else:\n            return x\n    return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpga07we8i.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpga07we8i.py\", line 37,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpga07we8i.py\", line 27,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        x += 1\n    if y % 2 == 0:\n        y += 1\n\
    \    while x < y:\n        if x % 2 == 0:\n            x += 1\n        elif y\
    \ % 2 == 0:\n            y += 1\n        else:\n            return x\n    return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpemn2r7pz.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpemn2r7pz.py\", line 37,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpemn2r7pz.py\", line 27,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = x % 2 == 0\n    \n    if even:\n        x //= 2\n    \n\
    \    if y > x:\n        return -1\n    \n    if even:\n        return y\n    \n\
    \    if y % 2 == 0:\n        return y\n    \n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe0zlo1ul.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpe0zlo1ul.py\", line 40,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpe0zlo1ul.py\", line 30,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\ndef check(candidate):\n  \
    \  assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpanvb2b6m.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpanvb2b6m.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpanvb2b6m.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    \n    even = x % 2 == 0\n    \n    if even:\n        even = y % 2 ==\
    \ 0\n    \n    if even:\n        return y\n    else:\n        return x - 1\n\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa9luynsg.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpa9luynsg.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpa9luynsg.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        smaller\
    \ = x\n        greater = y\n    else:\n        smaller = y\n        greater =\
    \ x\n    \n    even = smaller\n    \n    while even <= greater:\n        if even\
    \ % 2 == 0:\n            even = even + 1\n        else:\n            even = even\
    \ - 1\n    \n    return even\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n\
    \        else:\n            return y\n    else:\n        if y % 2 == 0:\n    \
    \        return y\n        else:\n            return x\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp36h1g9hi.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp36h1g9hi.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp36h1g9hi.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    \n    even = 0\n    odd = 0\n    \n    while x <= y:\n        if x %\
    \ 2 == 0:\n            even += x\n        else:\n            odd += x\n      \
    \  x += 1\n    \n    if even > odd:\n        return even\n    else:\n        return\
    \ odd\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp42o3k3m9.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp42o3k3m9.py\", line 39,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp42o3k3m9.py\", line 29,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        return x // 2\n    else:\n        return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzptvdkmu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpzptvdkmu.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzptvdkmu.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        biggest_even\
    \ = x if x % 2 == 0 else y\n    else:\n        biggest_even = y if y % 2 == 0\
    \ else x\n    return biggest_even\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0j7xrl1f.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp0j7xrl1f.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp0j7xrl1f.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        smaller\
    \ = x\n        larger = y\n    else:\n        smaller = y\n        larger = x\n\
    \    \n    even = larger\n    \n    while even % 2 == 0:\n        even -= 1\n\
    \    \n    while even > 0:\n        if even % 2 == 0:\n            even -= 1\n\
    \        else:\n            even += smaller\n    \n    return even\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        small =\
    \ y\n        big = x\n    else:\n        small = x\n        big = y\n    \n  \
    \  even = big % 2 == 0\n    \n    if even:\n        big = big // 2\n    \n   \
    \ while big > small:\n        if big % 2 == 0:\n            big = big // 2\n \
    \       else:\n            big = big - 1\n    \n    return big\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2sm_itwv.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp2sm_itwv.py\", line 42,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp2sm_itwv.py\", line 32,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = x % 2 == 0\n    \n    if even:\n        if y % 2 == 0:\n\
    \            return y\n        else:\n            return -1\n    else:\n     \
    \   if y % 2 == 0:\n            return -1\n        else:\n            return y\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5tz93rgv.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp5tz93rgv.py\", line 37,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp5tz93rgv.py\", line 27,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = x % 2 == 0\n    \n    if even:\n        \n        even =\
    \ y % 2 == 0\n        \n        if even:\n            \n            if x > y:\n\
    \                x, y = y, x\n            \n            even = x % 2 == 0\n  \
    \          \n            if even:\n                \n                if x > y:\n\
    \                    x, y = y, x\n                \n                even = x %\
    \ 2 == 0\n                \n                if even:\n                    \n \
    \                   if x > y:\n                        x, y = y, x\n         \
    \           \n                    even = x % 2 == 0\n                    \n  \
    \                  if even:\n                        \n                      \
    \  if x > y:\n                            x, y = y, x\n                      \
    \  \n                        even = x % 2 == 0\n                        \n   \
    \                     if even:\n                            \n               \
    \             if x > y:\n                                x, y = y, x\n       \
    \                     \n                            even = x % 2 == 0\n      \
    \                      \n                            if even:\n              \
    \                  \n                                if x > y:\n             \
    \                       x, y = y, x\n                                \n      \
    \                          even = x % 2 == 0\n                               \
    \ \n                                if even:\n                               \
    \     \n                                    if x > y:\n                      \
    \                  x, y = y, x\n                                    \n       \
    \                             even = x % 2 == 0\n                            \
    \        \n                                    if even:\n                    \
    \                    \n                                        if x > y:\n   \
    \                                         x, y = y, x\n                      \
    \                  \n                                        even = x % 2 == 0\n\
    \                                        \n                                  \
    \      if even:\n                                            \n              \
    \                              if x > y:\n                                   \
    \             x, y = y, x\n                                            \n    \
    \                                        even = x % 2 == 0\n                 \
    \                           \n                                            if even:\n\
    \                                                \n                          \
    \                      if x > y:\n                                           \
    \         x, y = y, x\n                                                \n    \
    \                                            even = x % 2 == 0\n             \
    \                                   \n                                       \
    \         if even:\n                                                    \n   \
    \                                                 if x > y:\n                \
    \                                        x, y = y, x\n                       \
    \                             \n                                             \
    \       even = x % 2 == 0\n                                                  \
    \  \n                                                    if even:\n          \
    \                                              \n                            \
    \                            if x > y:\n                                     \
    \                       x, y = y, x\n                                        \
    \                \n                                                        even\
    \ = x % 2 == 0\n                                                        \n   \
    \                                                     if even:\n             \
    \                                               \n                           \
    \                                 if x > y:\n                                \
    \                                x, y = y, x\n                               \
    \                             \n                                             \
    \               even = x % 2 == 0\n                                          \
    \                  \n                                                        \
    \    if even:\n                                                              \
    \  \n                                                                if x > y:\n\
    \                                                                    x, y = y,\
    \ x\n                                                                \n      \
    \                                                          even = x % 2 == 0\n\
    \                                                                \n          \
    \                                                      if even:\n            \
    \                                                        \n                  \
    \                                                  if x > y:\n               \
    \                                                         x, y = y, x\n      \
    \                                                              \n            \
    \                                                        even = x % 2 == 0\n \
    \                                                                   \n       \
    \                                                             if even:\n     \
    \                                                                   \n       \
    \                                                                 if x > y:\n\
    \                                                                            x,\
    \ y = y, x\n                                                                 \
    \       \n                                                                   \
    \     even = x % 2 == 0\n                                                    \
    \                    \n                                                      \
    \                  if even:\n                                                \
    \                            \n                                              \
    \                  \ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpyrckd6ck.py\", line 134\n    def check(candidate):\n \
    \   ^\nIndentationError: expected an indented block\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = True\n    \n    while even and x != y:\n        if x % 2\
    \ == 0:\n            even = False\n            x //= 2\n        else:\n      \
    \      y //= 2\n    \n    if even:\n        return x\n    else:\n        return\
    \ -1\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpy_r9c8z3.py\", line 26\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x % 2 == 0 and y % 2 == 0:\n        return x // 2 + y // 2\n\
    \    if x % 2 == 0 and y % 2 != 0:\n        return x // 2\n    if x % 2 != 0 and\
    \ y % 2 == 0:\n        return y // 2\n    if x % 2 != 0 and y % 2 != 0:\n    \
    \    return x // 2 + y // 2\n    return -1\n\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2z6lnnzs.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp2z6lnnzs.py\", line 38,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp2z6lnnzs.py\", line 28,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        return choose_num(y - 1, x)\n    if y > x:\n\
    \        return choose_num(y, x - 1)\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppahg85f7.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppahg85f7.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmppahg85f7.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n\
    \        else:\n            return y\n    else:\n        if y % 2 == 0:\n    \
    \        return y\n        else:\n            return x\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp3a1afhk.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpp3a1afhk.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpp3a1afhk.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    if x < y:\n        smaller\
    \ = x\n    else:\n        smaller = y\n    \n    larger = smaller\n    \n    while\
    \ smaller < larger:\n        \n        smaller = smaller + 1\n        \n     \
    \   if smaller > larger:\n            larger = smaller\n            \n       \
    \ if smaller % 2 == 0:\n            return smaller\n        \n    return -1\n\
    </cell>\n<cell>\nchoose_num(12, 15)\n</cell>\n<cell>\nchoose_num(13, 12)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes a positive integer number x and\
    \ returns the number of digits in x. \nFor example, choose_num(12) should return\
    \ 3.\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmphljck90i.py\", line 29\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n\
    \        else:\n            return y\n    else:\n        if y % 2 == 0:\n    \
    \        return y\n        else:\n            return x\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmty72tc7.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpmty72tc7.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpmty72tc7.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpubqg0ebl.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpubqg0ebl.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpubqg0ebl.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = True\n    \n    while even and x != y:\n        if x % 2\
    \ == 0:\n            even = False\n            x = x // 2\n        else:\n   \
    \         x = x + 1\n    \n    return x if even else -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg7nb0yux.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpg7nb0yux.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpg7nb0yux.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = True\n    \n    while even and x != y:\n        if x % 2\
    \ == 0:\n            even = False\n        x += 1\n    \n    if even:\n      \
    \  return x\n    else:\n        return -1\n</cell>\n<cell>\nchoose_num(12, 15)\n\
    </cell>\n<cell>\nchoose_num(13, 12)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes a positive integer number x and returns the number of digits in x.\
    \ \nIf the number is negative, return -1.\n\nFor example:\ncount_digits(123) =\
    \ 4\ncount_digits(-123) = -1\ncount_digits(0) = 0\ncount_digits(-0) = -1\ncount_digits(-10)\
    \ = -10\ncount_digits(-100) = -1\ncount_digits(-1000) = -1\ncount_digits(1234567890)\
    \ = 12\ncount_digits(-1234567890) = -1\ncount_digits(12345678901234) = 12\ncount_digits(-12345678901234)\
    \ = -1\ncount_digits(123456789012345) = 12\ncount_digits(-123456789012345) = -1\n\
    count_digits(1234567890123456) = 12\ncount_digits(-1234567890123456) = -1\ncount_digits(1234567890123456789)\
    \ = 12\ncount_digits(-1234567890123456789) = -1\ncount_digits(12345678901234567890)\
    \ = 12\ncount_digits(-12345678901234567890) = -1\ncount_digits(123456789012345678901)\
    \ = 12\ncount_digits(-123456789012345678901) = -1\ncount_digits(1234567890123456789012)\
    \ = 12\ncount_digits(-1234567890123456789012) = -1\ncount_digits(12345678901234567890123)\
    \ = 12\ncount_digits(-12345678901234567890123) = -1\ncount_digits(123456789012345678901234)\
    \ = 12\ncount_digits(-123456789012345678901234) = -1\ncount_digits(1234567890123456789012345)\
    \ = 12\ncount_digits(-1234567890123456789012345) = -1\ncount_digits(12345678901234567890123456)\
    \ = 12\ncount_digits(-12345678901234567890123456) = -1\ncount_digits(12345678901234567890123456789)\
    \ = 12\ncount_digits(-12345678901234567890123456789) = -1\ncount_digits(123456789012345678901234567890)\
    \ = 12\ncount_digits(-123456789012345678901234567890) = -1\ncount_digits(1234567890123456789012345678901)\
    \ = 12\ncount_digits(-1234567890123456789012345678901) = -1\ncount_digits(12345678901234567890123456789012)\
    \ = 12\ncount_digits(-12345678901234567890123456789012) = -1\ncount_digits(123456789012345678901234567890123)\
    \ = 12\ncount_\ndef check(candidate):\n    assert candidate(12, 15) == 14\n  \
    \  assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpbq8a5wed.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return -1\n    else:\n        if y % 2 == 0:\n         \
    \   return -1\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdk5pgseq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpdk5pgseq.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpdk5pgseq.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    \n    even = x % 2 == 0\n    \n    if even:\n        even = y % 2 ==\
    \ 0\n    \n    if even:\n        return x if x > y else y\n    else:\n       \
    \ return y\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n  \
    \  assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmzunv66.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmppmzunv66.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmppmzunv66.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0 and y % 2 == 0:\n        return x // 2\n    elif\
    \ x % 2 == 0 and y % 2 != 0:\n        return -1\n    elif x % 2 != 0 and y % 2\
    \ == 0:\n        return -1\n    elif x % 2 != 0 and y % 2 != 0:\n        return\
    \ x // 2\n    else:\n        return -1\n</cell>\n<cell>\nchoose_num(12, 15)\n\
    </cell>\n<cell>\nchoose_num(13, 12)\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that takes a positive integer number and returns its factorial. \nThe factorial\
    \ of a number is the product of all the numbers from 1 to that number.\n\nFor\
    \ example:\nfactorial(5) = 5 * 5 * 4 * 3 = 120\nfactorial(10) = 10 x 10 x 10 x\
    \ 10 x 10 = 10000000\nfactorial(5) = factorial(5) * factorial(4) = factorial(5)\
    \ * 4 = 120\nfactorial(3) = factorial(3) * factorial(2) = factorial(3) * 2 = 6\n\
    factorial(0) = 1\nfactorial(-1) = -1\nfactorial(-5) = factorial(-5) * factorial(-4)\
    \ = factorial(-5) * 4 = -36\nfactorial(-10) = factorial(-10) * factorial(-9) =\
    \ factorial(-10) * 9 = -436\nfactorial(-15) = factorial(-15) * factorial(-14)\
    \ = factorial(-15) * 14 = -1440\nfactorial(-20) = factorial(-20) * factorial(-19)\
    \ = factorial(-20) * 19 = -1440\nfactorial(-25) = factorial(-25) * factorial(-24)\
    \ = factorial(-25) * 24 = -1440\nfactorial(-30) = factorial(-30) * factorial(-29)\
    \ = factorial(-30) * 29 = -1440\nfactorial(-35) = factorial(-35) * factorial(-34)\
    \ = factorial(-35) * 34 = -1440\nfactorial(-40) = factorial(-40) * factorial(-39)\
    \ = factorial(-40) * 39 = -1440\nfactorial(-45) = factorial(-45) * factorial(-44)\
    \ = factorial(-45) * 44 = -1440\nfactorial(-50) = factorial(-50) * factorial(-49)\
    \ = factorial(-50) * 49 = -1440\nfactorial(-55) = factorial(-55) * factorial(-54)\
    \ = factorial(-55) * 54 = -1440\nfactorial(-60) = factorial(-60) * factorial(-59)\
    \ = factorial(-60) * 59 = -1440\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpjfrwydet.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        return -1\n    if y % 2 == 0:\n        return\
    \ -1\n    if x > y:\n        x, y = y, x\n    while x != y:\n        if x % 2\
    \ == 0:\n            x = x // 2\n        else:\n            y = y // 2\n    return\
    \ x if x % 2 == 0 else -1\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_zah3odt.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp_zah3odt.py\", line 37,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_zah3odt.py\", line 27,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    elif y > x:\n        return -1\n    elif x % 2 == 0:\n        return\
    \ x // 2\n    elif y % 2 == 0:\n        return y // 2\n    else:\n        even\
    \ = choose_num(x // 2, y // 2)\n        if even % 2 == 0:\n            return\
    \ even\n        else:\n            return -1\n\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3850ea8m.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp3850ea8m.py\", line 37,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3850ea8m.py\", line 27,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        return -1\n    \n    if y % 2 == 0:\n \
    \       return -1\n    \n    if x % 2 == 0 and y % 2 == 0:\n        return x //\
    \ 2\n    \n    if x % 2 == 0 and y % 2 != 0:\n        return y // 2\n    \n  \
    \  if x % 2 != 0 and y % 2 == 0:\n        return x // 2 + 1\n    \n    if x %\
    \ 2 != 0 and y % 2 != 0:\n        return y // 2 + 1\n    \n    return -1\n\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplajx8xvj.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmplajx8xvj.py\", line 45,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmplajx8xvj.py\", line 35,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    \n    even = x % 2 == 0\n    \n    if even:\n        if y % 2 == 0:\n\
    \            return y\n        else:\n            return y-1\n    else:\n    \
    \    if y % 2 == 0:\n            return y-1\n        else:\n            return\
    \ y\n    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc8qjbzyx.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpc8qjbzyx.py\", line 37,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpc8qjbzyx.py\", line 29,\
    \ in check\n    assert candidate(33, 12354) == 12354\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        if x %\
    \ 2 == 0:\n            return x\n        else:\n            return y\n    else:\n\
    \        if y % 2 == 0:\n            return y\n        else:\n            return\
    \ x\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5seg4fsl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp5seg4fsl.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp5seg4fsl.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    \n    even = x % 2 == 0\n    \n    if even:\n        even = y % 2 ==\
    \ 0\n    \n    if even and x != y:\n        return y\n    \n    if even and x\
    \ == y:\n        return x\n    \n    if even:\n        return -1\n    \n    return\
    \ y\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv4vynzo4.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpv4vynzo4.py\", line 41,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpv4vynzo4.py\", line 31,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if y > x:\n        return -1\n    if x % 2 == 0:\n        return y\n\
    \    if y % 2 == 0:\n        return x\n    if x > y:\n        return choose_num(y,\
    \ x)\n    if y > x:\n        return choose_num(x, y)\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqmaoy2tz.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpqmaoy2tz.py\", line 36,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpqmaoy2tz.py\", line 26,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        if x % 2\
    \ == 0:\n            return x\n        else:\n            return y\n    else:\n\
    \        if y % 2 == 0:\n            return y\n        else:\n            return\
    \ x\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa55f1n2f.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpa55f1n2f.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpa55f1n2f.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        x += 1\n    if y % 2 == 0:\n        y += 1\n\
    \    \n    while x <= y:\n        if x % 2 == 0:\n            x += 1\n       \
    \ elif y % 2 == 0:\n            y -= 1\n        else:\n            return x\n\
    \    return -1\n</cell>\n<cell>\nchoose_num(12, 15)\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that takes a positive integer and returns the next power\
    \ of 2 greater than or equal to that integer.\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpp2d8ekb7.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    elif x % 2 == 0:\n        return x // 2\n    else:\n        return x\
    \ + y // 2\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n  \
    \  assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiqyotzvt.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpiqyotzvt.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpiqyotzvt.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        return choose_num(y - 1, x)\n    if y > x:\n\
    \        return choose_num(y, x - 1)\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3yncnfxd.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3yncnfxd.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3yncnfxd.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0 and y % 2 == 0:\n        return x // 2\n    elif x % 2\
    \ == 0 and y % 2 != 0:\n        return -1\n    elif x % 2 != 0 and y % 2 == 0:\n\
    \        return -1\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprb0unmo4.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmprb0unmo4.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprb0unmo4.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x == y:\n        return x\n    if x % 2 == 0:\n        if y % 2 ==\
    \ 0:\n            return x\n        else:\n            return y\n    else:\n \
    \       if y % 2 == 0:\n            return y\n        else:\n            return\
    \ x\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe3oyu2p2.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpe3oyu2p2.py\", line 37,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpe3oyu2p2.py\", line 27,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = True\n    \n    while even and x != y:\n        if x % 2\
    \ == 0:\n            even = False\n            x //= 2\n        else:\n      \
    \      y //= 2\n    \n    if even:\n        return x\n    else:\n        return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvj6m9xep.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpvj6m9xep.py\", line 38,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpvj6m9xep.py\", line 28,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x <= y:\n        return -1\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp64hcqtga.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp64hcqtga.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp64hcqtga.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    if x >= y:\n        return\
    \ -1\n    \n    if x % 2 == 0:\n        return x // 2\n    \n    if y % 2 == 0:\n\
    \        return y // 2\n    \n    \n    \n    \ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpekpqvmdq.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpekpqvmdq.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpekpqvmdq.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        x, y = y,\
    \ x\n    \n    even = True\n    \n    while even and x <= y:\n        if x % 2\
    \ == 0:\n            even = False\n        x += 1\n    \n    if even:\n      \
    \  return x\n    else:\n        return -1\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5bex4o3e.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp5bex4o3e.py\", line 36,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp5bex4o3e.py\", line 26,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y or y <= x:\n    \
    \    return -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n\
    \        return y // 2\n    if x > y:\n        return choose_num(x - y, y)\n \
    \   return choose_num(x, y - x)\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph7x5ix3y.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmph7x5ix3y.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmph7x5ix3y.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\ndef check(candidate):\n  \
    \  assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpad8khulj.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpad8khulj.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpad8khulj.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        smaller\
    \ = x\n        larger = y\n    else:\n        smaller = y\n        larger = x\n\
    \n    if smaller % 2 == 0:\n        smaller = smaller // 2\n    else:\n      \
    \  smaller = smaller // 2 + 1\n\n    if larger % 2 == 0:\n        larger = larger\
    \ // 2\n    else:\n        larger = larger // 2 + 1\n\n    while smaller <= larger:\n\
    \        if smaller % 2 == 0 and larger % 2 == 0:\n            if smaller + larger\
    \ == x:\n                return smaller\n            elif smaller + larger ==\
    \ y:\n                return larger\n            else:\n                return\
    \ smaller + larger\n        elif smaller % 2 == 0 and larger % 2 != 0:\n     \
    \       if smaller + larger == x:\n                return smaller\n          \
    \  elif smaller + larger == y:\n                return larger\n            else:\n\
    \                return smaller + larger\n        elif smaller % 2 != 0 and larger\
    \ % 2 == 0:\n            if smaller + larger == x:\n                return smaller\n\
    \            elif smaller + larger == y:\n                return larger\n    \
    \        else:\n                return smaller + larger\n        elif smaller\
    \ % 2 != 0 and larger % 2 != 0:\n            if smaller + larger == x:\n     \
    \           return smaller\n            elif smaller + larger == y:\n        \
    \        return larger\n            else:\n                return smaller + larger\n\
    \        smaller += 1\n        larger += 1\n\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa_ur78g8.py\", line\
    \ 75, in <module>\n    test_check()\n  File \"/tmp/tmpa_ur78g8.py\", line 73,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpa_ur78g8.py\", line 64,\
    \ in check\n    assert candidate(13, 12) == -1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    \n    even = x % 2 == 0\n    \n    if even:\n        even = y % 2 ==\
    \ 0\n    \n    if even and x != y:\n        return y\n    elif not even and x\
    \ != y:\n        return x\n    elif even and y != x:\n        return y\n    elif\
    \ not even and y != x:\n        return x\n    else:\n        return -1\n\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx28aprwz.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpx28aprwz.py\", line 41,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpx28aprwz.py\", line 31,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0j71fg9j.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp0j71fg9j.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp0j71fg9j.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        smaller\
    \ = x\n        greater = y\n    else:\n        smaller = y\n        greater =\
    \ x\n\n    while smaller != greater:\n        if smaller % 2 == 0:\n         \
    \   smaller += 1\n        else:\n            smaller -= 1\n        if greater\
    \ % 2 == 0:\n            greater -= 1\n        else:\n            greater += 1\n\
    \n    return smaller\n\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpflh55gwx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpflh55gwx.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpflh55gwx.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpofd1cjyv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpofd1cjyv.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpofd1cjyv.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n\
    \        else:\n            return y\n    else:\n        if y % 2 == 0:\n    \
    \        return y\n        else:\n            return x\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp41161kap.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp41161kap.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp41161kap.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = x % 2 == 0\n    \n    if even:\n        x -= 1\n    \n \
    \   even = y % 2 == 0\n    \n    if even:\n        y -= 1\n    \n    if x > y:\n\
    \        x, y = y, x\n    \n    if x == y:\n        return -1\n    \n    even\
    \ = x % 2 == 0\n    \n    if even:\n        x -= 1\n    \n    even = y % 2 ==\
    \ 0\n    \n    if even:\n        y -= 1\n    \n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x == y:\n        return -1\n    \n    even = x % 2 == 0\n  \
    \  \n    if even:\n        x -= 1\n    \n    even = y % 2 == 0\n    \n    if even:\n\
    \        y -= 1\n    \n    if x > y:\n        x, y = y, x\n    \n    if x == y:\n\
    \        return -1\n    \n    even = x % 2 == 0\n    \n    if even:\n        x\
    \ -= 1\n    \n    even = y % 2 == 0\n    \n    if even:\n        y -= 1\n    \n\
    \    if x > y:\n        x, y = y, x\n    \n    if x == y:\n        return -1\n\
    \    \n    even = x % 2 == 0\n    \n    if even:\n        x -= 1\n    \n    even\
    \ = y % 2 == 0\n    \n    if even:\n        y -= 1\n    \n    if x > y:\n    \
    \    x, y = y, x\n    \n    if x == y:\n        return -1\n    \n    even = x\
    \ % 2 == 0\n    \n    if even:\n        x -= 1\n    \n    even = y % 2 == 0\n\
    \    \n    if even:\n        y -= 1\n    \n    if x > y:\n        x, y = y, x\n\
    \    \n    if x == y:\n        return -1\n    \n    even = x % 2 == 0\n    \n\
    \    if even:\n        x -= 1\n    \n    even = y % 2 == 0\n    \n    if even:\n\
    \        y -= 1\n    \n    if x > y:\n        x, y = y, x\n    \n    if x == y:\n\
    \        return -1\n    \n    even = x % 2 == 0\n    \n    if even:\n        x\
    \ -= 1\n    \n    even = y % 2 == 0\n    \n    if even:\n        y -= 1\n    \n\
    \    if x > y:\n        x, y = y, x\n    \n    if x == y:\n        return -1\n\
    \    \n    even = x % 2 == 0\n    \n    if even:\n        x -= 1\n    \n    \n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpstt87y6q.py\", line\
    \ 160, in <module>\n    test_check()\n  File \"/tmp/tmpstt87y6q.py\", line 158,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpstt87y6q.py\", line 148,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    \n    even = x % 2 == 0\n    \n    if even:\n        \n        if y\
    \ % 2 == 0:\n            return y\n        else:\n            return y-1\n   \
    \ else:\n        \n        if y % 2 == 0:\n            return y-1\n        else:\n\
    \            return y\n\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdkeldk4r.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpdkeldk4r.py\", line 39,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpdkeldk4r.py\", line 31,\
    \ in check\n    assert candidate(33, 12354) == 12354\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x <= y:\n        return -1\n    if x % 2 == 0 and y % 2 == 0:\n\
    \        return x // 2 + y // 2\n    if x % 2 == 0 and y % 2 != 0:\n        return\
    \ x // 2 + 1\n    if x % 2 != 0 and y % 2 == 0:\n        return x // 2 + 1\n \
    \   if x % 2 != 0 and y % 2 != 0:\n        return x // 2 + y // 2\n    return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzogxoi4o.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpzogxoi4o.py\", line 40,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzogxoi4o.py\", line 30,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        smaller\
    \ = x\n    else:\n        smaller = y\n    bigger = x\n    while bigger < smaller:\n\
    \        bigger += 2\n    while bigger > smaller:\n        bigger -= 2\n    if\
    \ bigger == smaller:\n        return bigger\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4_hv50n_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4_hv50n_.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp4_hv50n_.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        even = x // 2\n    else:\n        even\
    \ = x // 2 + 1\n    \n    if y % 2 == 0:\n        odd = y // 2\n    else:\n  \
    \      odd = y // 2 + 1\n    \n    if even > odd:\n        return even\n    else:\n\
    \        return odd\n\n\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyz_xps18.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpyz_xps18.py\", line 40,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpyz_xps18.py\", line 30,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        return choose_num(y - 1, x)\n    if y > x:\n\
    \        return choose_num(y, x - 1)\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv2ziz9qs.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpv2ziz9qs.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpv2ziz9qs.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\ndef check(candidate):\n  \
    \  assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_n9sl66b.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_n9sl66b.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_n9sl66b.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    \n    even = choose_num(x // 2, y // 2)\n    if even % 2 == 0:\n\
    \        return even\n    else:\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx0cqm5cb.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpx0cqm5cb.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpx0cqm5cb.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    \n    even = x % 2 == 0\n    \n    if even:\n        even = y % 2 ==\
    \ 0\n    \n    if even and x != y:\n        return y\n    \n    if even and x\
    \ == y:\n        return x\n    \n    if even:\n        return -1\n    \n    return\
    \ y\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7_nzilkm.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp7_nzilkm.py\", line 41,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7_nzilkm.py\", line 31,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    evens = [i for i in range(x, y) if i % 2 == 0]\n    if len(evens)\
    \ == 0:\n        return -1\n    \n    return max(evens)\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpie8cs00y.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpie8cs00y.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpie8cs00y.py\", line 22,\
    \ in check\n    assert candidate(13, 12) == -1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprlu27aq7.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmprlu27aq7.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprlu27aq7.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    \n    even = x % 2 == 0\n    \n    if even:\n        lower = x\n   \
    \     upper = y\n    else:\n        lower = y\n        upper = x\n    \n    count\
    \ = 0\n    \n    while lower <= upper:\n        count += 1\n        \n       \
    \ if lower % 2 == 0:\n            lower += 1\n        else:\n            lower\
    \ -= 1\n    \n    return count\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\ndef check(candidate):\n  \
    \  assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi7jc_xqv.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpi7jc_xqv.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpi7jc_xqv.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbu6tvrvn.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpbu6tvrvn.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpbu6tvrvn.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt9q4xikj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpt9q4xikj.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpt9q4xikj.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        x, y = y, x\n    \n    even = x // 2\n    odd\
    \ = y // 2\n    \n    while even > odd:\n        even = even // 2\n        odd\
    \ *= 2\n    \n    return even\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu0z1pvm4.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpu0z1pvm4.py\", line 40,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpu0z1pvm4.py\", line 30,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n\
    \        else:\n            return y\n    else:\n        if y % 2 == 0:\n    \
    \        return y\n        else:\n            return x\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp176q5kac.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    evens = []\n    for i in range(x, y + 1):\n        if i % 2 ==\
    \ 0:\n            evens.append(i)\n    \n    if len(evens) == 0:\n        return\
    \ -1\n    \n    return max(evens)\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp75ygdoyb.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp75ygdoyb.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp75ygdoyb.py\", line 26,\
    \ in check\n    assert candidate(13, 12) == -1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    if x > y:\n        x,\
    \ y = y, x\n    \n    even = True\n    \n    while even and x <= y:\n        if\
    \ x % 2 == 0:\n            even = False\n        x += 1\n    \n    if even:\n\
    \        return x\n    else:\n        return -1\n</cell>\n<cell>\nchoose_num(12,\
    \ 15)\n</cell>\n<cell>\nchoose_num(13, 12)\n</cell>\n<cell>\nchoose_num(13, 13)\n\
    </cell>\n<cell>\nchoose_num(13, 14)\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that takes a positive integer number x and returns the number of \ntimes it\
    \ appears in the list [x, x + 1, ..., x + n] where n is any positive integer.\n\
    \nFor example:\n    count_num(10) = 10\n    count_num(10) = 11\n    count_num(10)\
    \ = 12\n    count_num(10) = 13\n    count_num(10) = 14\n    count_num(10) = 15\n\
    \    count_num(10) = 16\n    count_num(10) = 17\n    count_num(10) = 18\n    count_num(10)\
    \ = 19\n    count_num(10) = 20\n    count_num(10) = 21\n    count_num(10) = 22\n\
    \    count_num(10) = 23\n    count_num(10) = 24\n    count_num(10) = 25\n    count_num(10)\
    \ = 26\n    count_num(10) = 27\n    count_num(10) = 28\n    count_num(10) = 29\n\
    \    count_num(10) = 30\n    count_num(10) = 31\n    count_num(10) = 32\n    count_num(10)\
    \ = 33\n    count_num(10) = 34\n    count_num(10) = 35\n    count_num(10) = 36\n\
    \    count_num(10) = 37\n    count_num(10) = 38\n    count_num(10) = 39\n    count_num(10)\
    \ = 40\n    count_num(10) = 41\n    count_num(10) = 42\n    count_num(10) = 43\n\
    \    count_num(10) = 44\n    count_num(10) = 45\n    count_num(10) = 46\n    count_num(10)\
    \ = 47\n    count_num(10) = 48\n    count_num(10) = 49\n    count_num(10) = 50\n\
    \    count_num(10) = 51\n    count_num(10) = 52\n    count_num(10) = 53\n    count_num(10)\
    \ = 54\n    count_num(10) = 55\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp3tup9or3.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_663a2ph.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_663a2ph.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_663a2ph.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    \n    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjyzr39v5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjyzr39v5.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpjyzr39v5.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = x % 2 == 0\n    \n    if even:\n        even = y % 2 ==\
    \ 0\n        \n    if even:\n        return y\n    else:\n        return -1\n\
    </cell>\n<cell>\nchoose_num(12, 15)\n</cell>\n<cell>\nchoose_num(13, 12)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes an integer x and returns its factorial.\
    \ \nThe factorial of a number n is the product of all positive integers less than\
    \ or equal to n.\n\nFor example:\nfactorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nfactorial(10)\
    \ = 10 x 9 x 8 x 7 x 6 x 5 x 4 x 3 x 2 x 1 = 5040\nfactorial(100) = 100! x 99!\
    \ x 98! x 97! x 96! x 95! x 94! x 93! x 92! x 91! x 90! x 89! x 88! x 87! x 86!\
    \ x 85! x 84! x 83! x 82! x 81! x 80! x 79! x 78! x 77! x 76! x 75! x 74! x 73!\
    \ x 72! x 71! x 70! x 69! x 68! x 67! x 66! x 65! x 64! x 63! x 62! x 61! x 60!\
    \ x 59! x 58! x 57! x 56! x 55! x 54! x 53! x 52! x 51! x 50! x 49! x 48! x 47!\
    \ x 46! x 45! x 44! x 43! x 42! x 41! x 40! x 39! x 38! x 37! x 36! x 35! x 34!\
    \ x 33! x 32! x 31! x 30! x 29! x 28! x 27! x 26! x 25! x 24! x 23! x 22! x 21!\
    \ x 20! x 19! x 18! x 17! x 16! x 15! x 14! x 13! x 12! x 11! x 10! x 9! x 8!\
    \ x 7! x 6! x 5! x 4! x 3! x 2! x 1!\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpt7u7aeku.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        smaller\
    \ = x\n        larger = y\n    else:\n        smaller = y\n        larger = x\n\
    \    \n    even = smaller\n    while even < larger:\n        if even % 2 == 0:\n\
    \            even += 1\n        else:\n            even -= 1\n    return even\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        if x %\
    \ 2 == 0:\n            return x\n        else:\n            return y\n    else:\n\
    \        if y % 2 == 0:\n            return y\n        else:\n            return\
    \ x\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps0h2brr5.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmps0h2brr5.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmps0h2brr5.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x % 2 == 0 and y % 2 == 0:\n        return x // 2 + y // 2\n\
    \    if x % 2 == 0 and y % 2 != 0:\n        return -1\n    if x % 2 != 0 and y\
    \ % 2 == 0:\n        return -1\n    if x % 2 != 0 and y % 2 != 0:\n        return\
    \ -1\n    return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp80tg0oow.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp80tg0oow.py\", line 38,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp80tg0oow.py\", line 28,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpikxa1z1d.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpikxa1z1d.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpikxa1z1d.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    \n    even = choose_num(x // 2, y // 2)\n    if even % 2 == 0:\n\
    \        return even\n    else:\n        return even + 1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpalnct798.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpalnct798.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpalnct798.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        x, y = y, x\n    while x != y:\n        if x\
    \ % 2 == 0:\n            x //= 2\n        else:\n            y //= 2\n    return\
    \ x if x != y else -1\n\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp68vu4c0l.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp68vu4c0l.py\", line 37,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp68vu4c0l.py\", line 27,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        if x %\
    \ 2 == 0:\n            return x\n        else:\n            return y\n    else:\n\
    \        if y % 2 == 0:\n            return y\n        else:\n            return\
    \ x\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_0_yat8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp8_0_yat8.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp8_0_yat8.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        return choose_num(y - 1, x)\n    if y > x:\n\
    \        return choose_num(y, x - 1)\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplzv7bgfg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmplzv7bgfg.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmplzv7bgfg.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x == y:\n        return x\n    if x % 2 == 0:\n        return x //\
    \ 2\n    if y % 2 == 0:\n        return y // 2\n    if x % 2 == 0 and y % 2 ==\
    \ 0:\n        return x // 2 + y // 2\n    if x % 2 == 0 and y % 2 != 0:\n    \
    \    return y // 2\n    if x % 2 != 0 and y % 2 == 0:\n        return x // 2\n\
    \    if x % 2 != 0 and y % 2 != 0:\n        return x // 2 + y // 2\n    return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdrnt8x4f.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpdrnt8x4f.py\", line 40,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpdrnt8x4f.py\", line 30,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if y > x:\n        return -1\n    if x == y:\n        return x\n    if\
    \ x % 2 == 0:\n        return y\n    if y % 2 == 0:\n        return x\n    if\
    \ x > y:\n        x, y = y, x\n    if y > x:\n        return -1\n    if x == y:\n\
    \        return x\n    if x % 2 == 0:\n        return y\n    if y % 2 == 0:\n\
    \        return x\n    if x > y:\n        x, y = y, x\n    if y > x:\n       \
    \ return -1\n    if x == y:\n        return x\n    if x % 2 == 0:\n        return\
    \ y\n    if y % 2 == 0:\n        return x\n    if x > y:\n        x, y = y, x\n\
    \    if y > x:\n        return -1\n    if x == y:\n        return x\n    if x\
    \ % 2 == 0:\n        return y\n    if y % 2 == 0:\n        return x\n    if x\
    \ > y:\n        x, y = y, x\n    if y > x:\n        return -1\n    if x == y:\n\
    \        return x\n    if x % 2 == 0:\n        return y\n    if y % 2 == 0:\n\
    \        return x\n    if x > y:\n        x, y = y, x\n    if y > x:\n       \
    \ return -1\n    if x == y:\n        return x\n    if x % 2 == 0:\n        return\
    \ y\n    if y % 2 == 0:\n        return x\n    if x > y:\n        x, y = y, x\n\
    \    if y > x:\n        return -1\n    if x == y:\n        return x\n    if x\
    \ % 2 == 0:\n        return y\n    if y % 2 == 0:\n        return x\n    if x\
    \ > y:\n        x, y = y, x\n    if y > x:\n        return -1\n    if x == y:\n\
    \        return x\n    if x % 2 == 0:\n        return y\n    if y % 2 == 0:\n\
    \        return x\n    if x > y:\n        x, y = y, x\n    if y > x:\n       \
    \ return -1\n    if x == y:\n        return x\n    if x % 2 == 0:\n        return\
    \ y\n    if y % 2 == 0:\n        return x\n    if x > y:\n        x, y = y, x\n\
    \    if y > x:\n        return -1\n    if x == y:\n        return x\n    if x\
    \ % 2 == 0:\n        return y\n    if y % 2 == 0:\n        return x\n    if x\
    \ > y:\n        x, y = y, x\n    if y > x:\n        return -1\n    if x == y:\n\
    \        return x\n    if x % 2 == 0:\n        return y\n    if y % 2 == 0:\n\
    \        return x\n    if x > y:\n        x, y = y, x\n    if y > x:\n       \
    \ return -1\n    if x == y:\n        return x\n    if x % 2 == 0:\n        return\
    \ y\n    if y % 2 == 0:\n        return x\n    if x > y:\n        x, y = y, x\n\
    \    if y > x:\n        return -1\n    if x == y:\n        return x\n    if x\
    \ % 2 == 0:\n        return y\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpohg0p0tz.py\", line\
    \ 152, in <module>\n    test_check()\n  File \"/tmp/tmpohg0p0tz.py\", line 150,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpohg0p0tz.py\", line 140,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    \n    even = x % 2 == 0\n    \n    if even:\n        lower = x\n   \
    \     upper = y\n    else:\n        lower = y\n        upper = x\n    \n    while\
    \ lower <= upper:\n        mid = (lower + upper) // 2\n        if mid * mid ==\
    \ x:\n            return mid\n        elif mid * mid == y:\n            return\
    \ mid\n        elif mid * mid > x:\n            upper = mid - 1\n        elif\
    \ mid * mid < y:\n            lower = mid + 1\n    \n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfmavbdob.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpfmavbdob.py\", line 47,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpfmavbdob.py\", line 37,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\ndef check(candidate):\n  \
    \  assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqnk1r6bv.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpqnk1r6bv.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpqnk1r6bv.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x <= y:\n        return -1\n    if x % 2 == 0 and y % 2 == 0:\n\
    \        return x // 2 + y // 2\n    if x % 2 == 0 and y % 2 != 0:\n        return\
    \ x // 2 + 1\n    if x % 2 != 0 and y % 2 == 0:\n        return x // 2 + 1\n \
    \   if x % 2 != 0 and y % 2 != 0:\n        return x // 2 + y // 2\n    return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmegvijlv.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpmegvijlv.py\", line 40,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpmegvijlv.py\", line 30,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        return choose_num(y - 1, x)\n    return choose_num(x\
    \ - 1, y)\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n   \
    \ assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n \
    \   assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n  \
    \  assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzpuz4cay.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpzpuz4cay.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzpuz4cay.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = x % 2 == 0\n    \n    if even:\n        if y % 2 == 0:\n\
    \            return y\n        else:\n            return x\n    else:\n      \
    \  if y % 2 == 0:\n            return x\n        else:\n            return y\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp8xgvc2i.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpp8xgvc2i.py\", line 38,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpp8xgvc2i.py\", line 28,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x == y:\n        return x\n    if x % 2 == 0:\n        return choose_num(x\
    \ - 1, y)\n    else:\n        return choose_num(x - 2, y)\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph5mv3kcp.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmph5mv3kcp.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmph5mv3kcp.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmph5mv3kcp.py\"\
    , line 15, in choose_num\n    return choose_num(x - 1, y)\n  File \"/tmp/tmph5mv3kcp.py\"\
    , line 17, in choose_num\n    return choose_num(x - 2, y)\n  File \"/tmp/tmph5mv3kcp.py\"\
    , line 17, in choose_num\n    return choose_num(x - 2, y)\n  File \"/tmp/tmph5mv3kcp.py\"\
    , line 17, in choose_num\n    return choose_num(x - 2, y)\n  [Previous line repeated\
    \ 992 more times]\n  File \"/tmp/tmph5mv3kcp.py\", line 10, in choose_num\n  \
    \  if x >= y:\nRecursionError: maximum recursion depth exceeded in comparison\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0 and y % 2 == 0:\n        if x % 2 == 0 and y % 2 == 0:\n\
    \            return x\n        elif x % 2 != 0:\n            return y\n      \
    \  else:\n            return x\n    elif x % 2 != 0:\n        return y\n    else:\n\
    \        return x\n\n\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcrhfzfyu.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpcrhfzfyu.py\", line 36,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpcrhfzfyu.py\", line 26,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if y > x:\n        return -1\n    \n    even = x % 2 == 0\n    \n   \
    \ if even:\n        return y\n    \n    even = y % 2 == 0\n    \n    if even:\n\
    \        return x\n    \n    even = x % 2 == 0\n    \n    if even:\n        return\
    \ y\n    \n    even = y % 2 == 0\n    \n    if even:\n        return x\n    \n\
    \    even = x % 2 == 0\n    \n    if even:\n        return y\n    \n    even =\
    \ y % 2 == 0\n    \n    if even:\n        return x\n    \n    even = x % 2 ==\
    \ 0\n    \n    if even:\n        return y\n    \n    even = y % 2 == 0\n    \n\
    \    if even:\n        return x\n    \n    even = x % 2 == 0\n    \n    if even:\n\
    \        return y\n    \n    even = y % 2 == 0\n    \n    if even:\n        return\
    \ x\n    \n    even = x % 2 == 0\n    \n    if even:\n        return y\n    \n\
    \    even = y % 2 == 0\n    \n    if even:\n        return x\n    \n    even =\
    \ x % 2 == 0\n    \n    if even:\n        return y\n    \n    even = y % 2 ==\
    \ 0\n    \n    if even:\n        return x\n    \n    even = x % 2 == 0\n    \n\
    \    if even:\n        return y\n    \n    even = y % 2 == 0\n    \n    if even:\n\
    \        return x\n    \n    even = x % 2 == 0\n    \n    if even:\n        return\
    \ y\n    \n    even = y % 2 == 0\n    \n    if even:\n        return x\n    \n\
    \    even = x % 2 == 0\n    \n    if even:\n        return y\n    \n    even =\
    \ y % 2 == 0\n    \n    if even:\n        return x\n    \n    even = x % 2 ==\
    \ 0\n    \n    if even:\n        return y\n    \n    even = y % 2 == 0\n    \n\
    \    if even:\n        return x\n    \n    even = x % 2 == 0\n    \n    if even:\n\
    \        return y\n    \n    even = y % 2 == 0\n    \n    if even:\n        return\
    \ x\n    \n    even = x % 2 == 0\n    \n    if even:\n        return y\n    \n\
    \    even = y % 2 == 0\n    \n    if even:\n        return x\n    \n    even =\
    \ x % 2 == 0\n    \n    if even\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpx31gbr1z.py\", line 147\n    if even\n          ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnjug9_br.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpnjug9_br.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpnjug9_br.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        return choose_num(y - 1, x)\n    if y > x:\n\
    \        return choose_num(y, x - 1)\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5rpuxrb0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp5rpuxrb0.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp5rpuxrb0.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = x % 2 == 0\n    \n    if even:\n        x //= 2\n    \n\
    \    if y > x:\n        return -1\n    \n    while x <= y:\n        if even:\n\
    \            x += 1\n            even ^= True\n        else:\n            x +=\
    \ 1\n            even ^= False\n        \n        if x % 2 == 0:\n           \
    \ return x\n        \n    return -1\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd8uspruc.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpd8uspruc.py\", line 46,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpd8uspruc.py\", line 36,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    \n    evens = []\n    \n    for i in range(x, y + 1):\n        if i\
    \ % 2 == 0:\n            evens.append(i)\n    \n    if len(evens) == 0:\n    \
    \    return -1\n    \n    return max(evens)\n\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeh7lg1l5.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpeh7lg1l5.py\", line 36,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpeh7lg1l5.py\", line 33,\
    \ in check\n    assert candidate(546, 546) == 546\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n\
    \        else:\n            return y\n    else:\n        if y % 2 == 0:\n    \
    \        return y\n        else:\n            return x\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoqyhsfp3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpoqyhsfp3.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpoqyhsfp3.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x == y:\n        return x\n    if x % 2 == 0:\n        return choose_num(x\
    \ // 2, y)\n    else:\n        return choose_num(x // 2 + 1, y)\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp195ccb9l.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp195ccb9l.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp195ccb9l.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmp195ccb9l.py\"\
    , line 15, in choose_num\n    return choose_num(x // 2, y)\n  File \"/tmp/tmp195ccb9l.py\"\
    , line 15, in choose_num\n    return choose_num(x // 2, y)\n  File \"/tmp/tmp195ccb9l.py\"\
    , line 17, in choose_num\n    return choose_num(x // 2 + 1, y)\n  File \"/tmp/tmp195ccb9l.py\"\
    , line 15, in choose_num\n    return choose_num(x // 2, y)\n  File \"/tmp/tmp195ccb9l.py\"\
    , line 17, in choose_num\n    return choose_num(x // 2 + 1, y)\n  File \"/tmp/tmp195ccb9l.py\"\
    , line 17, in choose_num\n    return choose_num(x // 2 + 1, y)\n  File \"/tmp/tmp195ccb9l.py\"\
    , line 17, in choose_num\n    return choose_num(x // 2 + 1, y)\n  [Previous line\
    \ repeated 989 more times]\n  File \"/tmp/tmp195ccb9l.py\", line 10, in choose_num\n\
    \    if x >= y:\nRecursionError: maximum recursion depth exceeded in comparison\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    \n    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxt9_yoz_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxt9_yoz_.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxt9_yoz_.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplp3p5rsj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmplp3p5rsj.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmplp3p5rsj.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        return -1\n    \n    if y % 2 == 0:\n \
    \       return -1\n    \n    even = x // 2\n    odd = y // 2\n    \n    if even\
    \ > odd:\n        return even\n    else:\n        return odd\n</cell>\n<cell>\n\
    choose_num(12, 15)\n</cell>\n<text>\nProblem 7\nWrite a function that takes in\
    \ a list of integers and returns the sum of all the integers in the list.\n\n\
    For example:\nsum([1, 2, 3]) returns 6\nsum([1, 3, 5]) returns 8\nsum([1, 5])\
    \ returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns\
    \ 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1,\
    \ 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns\
    \ 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1,\
    \ 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns\
    \ 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1,\
    \ 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns\
    \ 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1,\
    \ 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns\
    \ 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1,\
    \ 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns\
    \ 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1,\
    \ 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns\
    \ 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1,\
    \ 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns\
    \ 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1, 5]) returns 5\nsum([1,\
    \ 5]) \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpmv9mxezq.py\", line 26\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = True\n    \n    while even and x <= y:\n        if x % 2\
    \ == 0:\n            even = False\n            x += 1\n        else:\n       \
    \     x += 1\n    \n    if even:\n        return x\n    else:\n        return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeujmgcqb.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpeujmgcqb.py\", line 39,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpeujmgcqb.py\", line 29,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n\
    \        else:\n            return y\n    else:\n        if y % 2 == 0:\n    \
    \        return y\n        else:\n            return x\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxcrp4vqx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxcrp4vqx.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxcrp4vqx.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    evens = []\n    \n    for i in range(x, y + 1):\n        if i %\
    \ 2 == 0:\n            evens.append(i)\n    \n    if len(evens) == 0:\n      \
    \  return -1\n    \n    return max(evens)\n\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvktg_9g8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvktg_9g8.py\", line 36,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpvktg_9g8.py\", line 27,\
    \ in check\n    assert candidate(13, 12) == -1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = x % 2 == 0\n    \n    if even:\n        \n        if y >\
    \ x:\n            \n            return y\n        else:\n            \n      \
    \      return x\n    else:\n        \n        if y > x:\n            \n      \
    \      return x\n        else:\n            \n            return y\n    \ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1bw1b1b.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmps1bw1b1b.py\", line 43,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmps1bw1b1b.py\", line 33,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        x += 1\n    if y % 2 == 0:\n        y += 1\n\
    \    while x < y:\n        if x % 2 == 0:\n            x += 1\n        elif y\
    \ % 2 == 0:\n            y += 1\n        else:\n            return x\n    return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0g5mt_q7.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp0g5mt_q7.py\", line 37,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp0g5mt_q7.py\", line 27,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    if x > y:\n        x,\
    \ y = y, x\n    \n    even = x % 2 == 0\n    \n    if even:\n        \n      \
    \  if y % 2 == 0:\n            return y\n        else:\n            return -1\n\
    \    \n    else:\n        \n        if y % 2 == 0:\n            return -1\n  \
    \      else:\n            return y\n    \n    \ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdajp597q.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpdajp597q.py\", line 42,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpdajp597q.py\", line 32,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu756qkrp.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpu756qkrp.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpu756qkrp.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp945opa26.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp945opa26.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp945opa26.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        return choose_num(y - 1, x)\n    return choose_num(x\
    \ - 1, y)\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n   \
    \ assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n \
    \   assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n  \
    \  assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgb1w5pvp.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpgb1w5pvp.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpgb1w5pvp.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x == y:\n        return -1\n    if x % 2 == 0:\n        return x //\
    \ 2\n    if y % 2 == 0:\n        return y // 2\n    if x % 2 == 0 and y % 2 ==\
    \ 0:\n        return x // 2 + y // 2\n    if x % 2 == 0 and y % 2 != 0:\n    \
    \    return x // 2 + 1\n    if x % 2 != 0 and y % 2 == 0:\n        return x //\
    \ 2 + 1\n    if x % 2 != 0 and y % 2 != 0:\n        return x // 2 + y // 2\n \
    \   return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp01_g9tdg.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp01_g9tdg.py\", line 40,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp01_g9tdg.py\", line 30,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    \n    even = x % 2 == 0\n    \n    if even:\n        even = y % 2 ==\
    \ 0\n    \n    if even:\n        even = x % 2 == 0\n    \n    if even:\n     \
    \   even = y % 2 == 0\n    \n    if even:\n        even = x % 2 == 0\n    \n \
    \   if even:\n        even = y % 2 == 0\n    \n    if even:\n        even = x\
    \ % 2 == 0\n    \n    if even:\n        even = y % 2 == 0\n    \n    if even:\n\
    \        even = x % 2 == 0\n    \n    if even:\n        even = y % 2 == 0\n  \
    \  \n    if even:\n        even = x % 2 == 0\n    \n    if even:\n        even\
    \ = y % 2 == 0\n    \n    if even:\n        even = x % 2 == 0\n    \n    if even:\n\
    \        even = y % 2 == 0\n    \n    if even:\n        even = x % 2 == 0\n  \
    \  \n    if even:\n        even = y % 2 == 0\n    \n    if even:\n        even\
    \ = x % 2 == 0\n    \n    if even:\n        even = y % 2 == 0\n    \n    if even:\n\
    \        even = x % 2 == 0\n    \n    if even:\n        even = y % 2 == 0\n  \
    \  \n    if even:\n        even = x % 2 == 0\n    \n    if even:\n        even\
    \ = y % 2 == 0\n    \n    if even:\n        even = x % 2 == 0\n    \n    if even:\n\
    \        even = y % 2 == 0\n    \n    if even:\n        even = x % 2 == 0\n  \
    \  \n    if even:\n        even = y % 2 == 0\n    \n    if even:\n        even\
    \ = x % 2 == 0\n    \n    if even:\n        even = y % 2 == 0\n    \n    if even:\n\
    \        even = x % 2 == 0\n    \n    if even:\n        even = y % 2 == 0\n  \
    \  \n    if even:\n        even = x % 2 == 0\n    \n    if even:\n        even\
    \ = y % 2 == 0\n    \n    if even:\n        even = x % 2 == 0\n    \n    if even:\n\
    \        even = y % 2 == 0\n    \n    if even:\n        even = x % 2 == 0\n  \
    \  \n    if even:\n        even = y % 2 == 0\n    \n    if even:\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmppnqval4o.py\", line 121\n    def check(candidate):\n \
    \   ^\nIndentationError: expected an indented block\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    if x > y:\n        x,\
    \ y = y, x\n    \n    if x % 2 == 0:\n        if y % 2 == 0:\n            return\
    \ x\n        else:\n            return y\n    else:\n        if y % 2 == 0:\n\
    \            return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpebmt9i_2.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpebmt9i_2.py\", line 37,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpebmt9i_2.py\", line 27,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0 and y % 2 == 0:\n        return x // 2\n    elif x % 2\
    \ == 0 and y % 2 != 0:\n        return -1\n    elif x % 2 != 0 and y % 2 == 0:\n\
    \        return -1\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6eo9uex3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp6eo9uex3.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp6eo9uex3.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    evens = []\n    for i in range(x, y + 1):\n        if i % 2 ==\
    \ 0:\n            evens.append(i)\n    \n    if len(evens) == 0:\n        return\
    \ -1\n    else:\n        return max(evens)\n\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp85oqa1n3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp85oqa1n3.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp85oqa1n3.py\", line 26,\
    \ in check\n    assert candidate(13, 12) == -1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = True\n    \n    while even and x <= y:\n        if x % 2\
    \ == 0:\n            even = False\n        x += 1\n    \n    if even:\n      \
    \  return x\n    else:\n        return -1\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplnqz0z_e.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplnqz0z_e.py\", line 36,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmplnqz0z_e.py\", line 26,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        return choose_num(y, x)\n    if x == y:\n   \
    \     return x\n    if x % 2 == 0 and y % 2 == 0:\n        return x // 2 + y //\
    \ 2\n    if x % 2 == 0 and y % 2 != 0:\n        return x // 2 + 1\n    if x %\
    \ 2 != 0 and y % 2 == 0:\n        return x // 2 + 1\n    if x % 2 != 0 and y %\
    \ 2 != 0:\n        return x // 2\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptvo4f271.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptvo4f271.py\", line 41,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmptvo4f271.py\", line 31,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    if x >= y:\n        return\
    \ -1\n    \n    even = x % 2 == 0\n    \n    if even:\n        even = y % 2 ==\
    \ 0\n        \n    if even and x != y:\n        return y\n    elif not even and\
    \ x != y:\n        return x\n    elif even:\n        return y\n    else:\n   \
    \     return x\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp7zqnlj1k.py\", line 27\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n\
    \        else:\n            return y\n    else:\n        if y % 2 == 0:\n    \
    \        return y\n        else:\n            return x\n</cell>\n<cell>\nchoose_num(12,\
    \ 15)\n</cell>\n<cell>\nchoose_num(13, 12)\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that takes a positive integer number and returns its \nfactorial.\
    \ Factorial of a number is the product of all the numbers from \n1 to that number.\
    \ For example, 6! = 1, 3! = 6, 2! = 24, etc.\n\nFor example:\nfactorial(6) = 1\
    \ * 2 * 3 * 4 * 5 = 120\nfactorial(5) = 2 * 3 * 4 * 5 = 720\nfactorial(4) = 3\
    \ * 4 * 5 = 720\nfactorial(3) = 2 * 3 * 4 = 24\nfactorial(2) = 2 * 3 = 6\nfactorial(1)\
    \ = 1 = 1\nfactorial(0) = 1\nWrite a function that takes a positive integer number\
    \ and returns its \nfactorial. Factorial of a number is the product of all the\
    \ numbers from \n1 to that number. For example, 6! = 1, 3! = 6, 2! = 24, etc.\n\
    \nFor example:\nfactorial(6) = 1 * 2 * 3 * 4 * 5 = 120\nfactorial(5) = 2 * 3 *\
    \ 4 * 5 = 720\nfactorial(4) = 3 * 4 * 5 = 720\nfactorial(3) = 2 * 3 * 4 = 24\n\
    factorial(2) = 2 * 3 = 6\nfactorial(1) = 1 = 1\nfactorial(0) = 1\nWrite a function\
    \ that takes a positive integer number and returns its \nfactorial. Factorial\
    \ of a number is the product of all the numbers from \n1 to that number. For example,\
    \ 6! = 1, 3! = 6, 2! = 24, etc.\n\nFor example:\nfactorial(6) = 1 * 2 * 3 * 4\
    \ * 5 = 120\nfactorial(5) = 2 * 3 * 4 * 5 = 720\nfactorial(4) = 3 * 4 * 5 = 720\n\
    factorial(3) = 2 * 3 * 4 = 24\nfactorial(2) = 2 * 3 = 6\nfactorial(1) = 1 = 1\n\
    factorial(0) = 1\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpdl22o2z2.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        return x // 2\n    \n    if y % 2 == 0:\n\
    \        return y // 2\n    \n    if x > y:\n        return -1\n    \n    return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwq8z3bc1.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpwq8z3bc1.py\", line 36,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpwq8z3bc1.py\", line 26,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        return choose_num(y - 1, x)\n    return choose_num(x\
    \ - 1, y)\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n   \
    \ assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n \
    \   assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n  \
    \  assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkfi7kc3.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpgkfi7kc3.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpgkfi7kc3.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n\
    \        else:\n            return y\n    else:\n        if y % 2 == 0:\n    \
    \        return y\n        else:\n            return x\n    \ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfba7faci.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfba7faci.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpfba7faci.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x <= y:\n        return -1\n    if x % 2 == 0 and y % 2 == 0:\n\
    \        return x // 2 + y // 2\n    if x % 2 == 0 and y % 2 != 0:\n        return\
    \ x // 2 + 1\n    if x % 2 != 0 and y % 2 == 0:\n        return x // 2 + 1\n \
    \   if x % 2 != 0 and y % 2 != 0:\n        return x // 2 + y // 2\n    return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr64mrpxr.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpr64mrpxr.py\", line 40,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpr64mrpxr.py\", line 30,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        return choose_num(x - 1, y)\n    return choose_num(x,\
    \ y - 1)\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzz5k3gn9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpzz5k3gn9.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzz5k3gn9.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    \n    even = x % 2 == 0\n    \n    if even:\n        even = y % 2 ==\
    \ 0\n    \n    if even:\n        return y\n    \n    odd = x % 2 != 0\n    \n\
    \    if odd:\n        odd = y % 2 != 0\n    \n    if odd:\n        return y\n\
    \    \n    if even:\n        return y\n    \n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbmo0jxte.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpbmo0jxte.py\", line 46,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpbmo0jxte.py\", line 36,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n      \
    \  else:\n            return y\n    else:\n        if y % 2 == 0:\n          \
    \  return y\n        else:\n            return x\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpghfs_mxx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpghfs_mxx.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpghfs_mxx.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    if x % 2 == 0:\n        x += 1\n    \n    if y % 2 == 0:\n    \
    \    y += 1\n    \n    while x < y:\n        if x % 2 == 0:\n            x +=\
    \ 1\n        elif y % 2 == 0:\n            y += 1\n        else:\n           \
    \ return x\n    \n    return -1\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpstaw8xss.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpstaw8xss.py\", line 41,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpstaw8xss.py\", line 31,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        x, y = y,\
    \ x\n    \n    even = 0\n    odd = 0\n    \n    while even < x and odd < y:\n\
    \        if x % 2 == 0:\n            even += 2\n            x //= 2\n        else:\n\
    \            odd += 2\n            y //= 2\n    \n    if even < x:\n        return\
    \ even\n    else:\n        return odd\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo7qpfsxo.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpo7qpfsxo.py\", line 40,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpo7qpfsxo.py\", line 30,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x >= y:\n        return\
    \ -1\n    if x % 2 == 0:\n        return x // 2\n    if y % 2 == 0:\n        return\
    \ y // 2\n    if x > y:\n        x, y = y, x\n    if x % 2 == 0 and y % 2 == 0:\n\
    \        return x // 2 + y // 2\n    if x % 2 == 0 and y % 2 != 0:\n        return\
    \ x // 2 + 1\n    if x % 2 != 0 and y % 2 == 0:\n        return x // 2 + 1\n \
    \   if x % 2 != 0 and y % 2 != 0:\n        return x // 2 + y // 2\n    return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgopqhnny.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpgopqhnny.py\", line 40,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpgopqhnny.py\", line 30,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y,\
    \ x\n    \n    even = x % 2 == 0\n    \n    if even and y % 2 == 0:\n        return\
    \ y\n    elif not even and y % 2 != 0:\n        return y\n    elif not even and\
    \ y % 2 == 0:\n        return -1\n    elif even and y % 2 != 0:\n        return\
    \ -1\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpocpiy2jf.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpocpiy2jf.py\", line 38,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpocpiy2jf.py\", line 28,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
