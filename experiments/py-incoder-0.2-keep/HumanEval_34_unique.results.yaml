name: HumanEval_34_unique
language: python
results:
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb07l_05c.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpb07l_05c.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpb07l_05c.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptvjg0x9y.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmptvjg0x9y.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmptvjg0x9y.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoc98ueq9.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpoc98ueq9.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpoc98ueq9.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5rso7jen.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp5rso7jen.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp5rso7jen.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu6uh_sbi.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpu6uh_sbi.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpu6uh_sbi.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3mzd3bm4.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp3mzd3bm4.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp3mzd3bm4.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjxre0jpv.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpjxre0jpv.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpjxre0jpv.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp56t88t_k.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp56t88t_k.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp56t88t_k.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1h98unpn.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp1h98unpn.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp1h98unpn.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd0mhl0i2.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpd0mhl0i2.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpd0mhl0i2.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpehtsrxv_.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpehtsrxv_.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpehtsrxv_.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvbmxzsxs.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpvbmxzsxs.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpvbmxzsxs.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ah3mac9.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp_ah3mac9.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp_ah3mac9.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfloypgmb.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpfloypgmb.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpfloypgmb.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdu1q3izf.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpdu1q3izf.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpdu1q3izf.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa9ua_whv.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpa9ua_whv.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpa9ua_whv.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppo15djqk.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmppo15djqk.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmppo15djqk.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3kcwbvqm.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp3kcwbvqm.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp3kcwbvqm.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv47oqa2e.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpv47oqa2e.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpv47oqa2e.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa4tdo19r.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpa4tdo19r.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpa4tdo19r.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyqx0ajp_.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpyqx0ajp_.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpyqx0ajp_.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4ta2c6b2.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp4ta2c6b2.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp4ta2c6b2.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3jp5y70f.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp3jp5y70f.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp3jp5y70f.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7au28sq.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpw7au28sq.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpw7au28sq.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiyv7jvnj.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpiyv7jvnj.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpiyv7jvnj.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5w9j0zub.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp5w9j0zub.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp5w9j0zub.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_v565bv.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpg_v565bv.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpg_v565bv.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpamcacdsk.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpamcacdsk.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpamcacdsk.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpegy_d7x7.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpegy_d7x7.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpegy_d7x7.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn30rw102.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpn30rw102.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpn30rw102.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq29js9_a.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpq29js9_a.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpq29js9_a.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqr8v__3p.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpqr8v__3p.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpqr8v__3p.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm__llw73.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpm__llw73.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpm__llw73.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu58qj9_w.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpu58qj9_w.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpu58qj9_w.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5u8uceg4.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp5u8uceg4.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp5u8uceg4.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmputa2g3ul.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmputa2g3ul.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmputa2g3ul.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi3r9yle5.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpi3r9yle5.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpi3r9yle5.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpodyzn07r.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpodyzn07r.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpodyzn07r.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvg0_lenc.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpvg0_lenc.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpvg0_lenc.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3jp6bfyn.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp3jp6bfyn.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp3jp6bfyn.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy3y07ctw.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpy3y07ctw.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpy3y07ctw.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpssj32jg9.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpssj32jg9.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpssj32jg9.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp67775fr0.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp67775fr0.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp67775fr0.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2b30jdb_.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp2b30jdb_.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp2b30jdb_.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx9jzspjb.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpx9jzspjb.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpx9jzspjb.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjfhq9al.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpwjfhq9al.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpwjfhq9al.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7rcu57m5.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp7rcu57m5.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp7rcu57m5.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpht8j8ml_.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpht8j8ml_.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpht8j8ml_.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_rqtdgk0.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp_rqtdgk0.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp_rqtdgk0.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvwtdhrtl.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpvwtdhrtl.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpvwtdhrtl.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4uyn_hto.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp4uyn_hto.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp4uyn_hto.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo7031h11.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpo7031h11.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpo7031h11.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxfxgn22r.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpxfxgn22r.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpxfxgn22r.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz3vpqa35.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpz3vpqa35.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpz3vpqa35.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2l2lhxz.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmph2l2lhxz.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmph2l2lhxz.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpthlqhpm2.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpthlqhpm2.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpthlqhpm2.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7avi6j_.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpw7avi6j_.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpw7avi6j_.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplv2qey_y.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmplv2qey_y.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmplv2qey_y.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5jyt4fx9.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp5jyt4fx9.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp5jyt4fx9.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9f8hjftt.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp9f8hjftt.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp9f8hjftt.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiamrkjc.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmppiamrkjc.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmppiamrkjc.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4_xd13g_.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp4_xd13g_.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp4_xd13g_.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptn2kkgfa.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmptn2kkgfa.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmptn2kkgfa.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqwodre_s.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpqwodre_s.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpqwodre_s.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5as5cua_.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp5as5cua_.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp5as5cua_.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqhaocbhk.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpqhaocbhk.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpqhaocbhk.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_9wtpgfa.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp_9wtpgfa.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp_9wtpgfa.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg9g3t2e7.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpg9g3t2e7.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpg9g3t2e7.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6npne018.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp6npne018.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp6npne018.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpar537mku.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpar537mku.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpar537mku.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpob7hpexw.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpob7hpexw.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpob7hpexw.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpabktihm8.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpabktihm8.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpabktihm8.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn_22ivjn.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpn_22ivjn.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpn_22ivjn.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy2gog31d.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpy2gog31d.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpy2gog31d.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa7u2wuoa.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpa7u2wuoa.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpa7u2wuoa.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp__sirzow.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp__sirzow.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp__sirzow.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl97ukhbm.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpl97ukhbm.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpl97ukhbm.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg959xaos.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpg959xaos.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpg959xaos.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw8tm4ghk.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpw8tm4ghk.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpw8tm4ghk.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2f7d98xf.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp2f7d98xf.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp2f7d98xf.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpabcvtgh1.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpabcvtgh1.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpabcvtgh1.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzunkzerh.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpzunkzerh.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpzunkzerh.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2rzq62ga.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp2rzq62ga.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp2rzq62ga.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5ot04z1.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpa5ot04z1.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpa5ot04z1.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaarztdz1.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpaarztdz1.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpaarztdz1.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptysrud4i.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmptysrud4i.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmptysrud4i.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp7aih644.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpp7aih644.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpp7aih644.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6fm50na.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpt6fm50na.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpt6fm50na.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe11qwlj4.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpe11qwlj4.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpe11qwlj4.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuluez5em.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpuluez5em.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpuluez5em.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0bpd10v4.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp0bpd10v4.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp0bpd10v4.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa_418qln.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpa_418qln.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpa_418qln.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvfiup78t.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpvfiup78t.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpvfiup78t.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpllp92k9g.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpllp92k9g.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpllp92k9g.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp13ywd__7.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp13ywd__7.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp13ywd__7.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxyvoyy67.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpxyvoyy67.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpxyvoyy67.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb1q6057r.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpb1q6057r.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpb1q6057r.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwefwzmv0.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpwefwzmv0.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpwefwzmv0.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3lv5rpv1.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp3lv5rpv1.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp3lv5rpv1.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprf9enwyc.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmprf9enwyc.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmprf9enwyc.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi7jv24vp.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpi7jv24vp.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpi7jv24vp.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpndb5a3op.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpndb5a3op.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpndb5a3op.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoionije5.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpoionije5.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpoionije5.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk6vh3y1g.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpk6vh3y1g.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpk6vh3y1g.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpggb6xpej.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpggb6xpej.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpggb6xpej.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1m4zhih3.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp1m4zhih3.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp1m4zhih3.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpneq0kcm0.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpneq0kcm0.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpneq0kcm0.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7n0ef9r3.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp7n0ef9r3.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp7n0ef9r3.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8v4hf3w9.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp8v4hf3w9.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp8v4hf3w9.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3m9dnsrm.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp3m9dnsrm.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp3m9dnsrm.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfht22h53.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpfht22h53.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpfht22h53.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf_3y8_63.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpf_3y8_63.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpf_3y8_63.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1e586e00.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp1e586e00.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp1e586e00.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpua4jrlp2.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpua4jrlp2.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpua4jrlp2.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ns0f_mg.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp1ns0f_mg.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp1ns0f_mg.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprnnc5bm_.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmprnnc5bm_.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmprnnc5bm_.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmasx9dv6.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpmasx9dv6.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpmasx9dv6.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2pn_sm3o.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp2pn_sm3o.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp2pn_sm3o.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt79yvris.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpt79yvris.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpt79yvris.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ucldd_g.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp1ucldd_g.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp1ucldd_g.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpplt_1z5m.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpplt_1z5m.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpplt_1z5m.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplaf6_lqg.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmplaf6_lqg.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmplaf6_lqg.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6kvk1n9k.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp6kvk1n9k.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp6kvk1n9k.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wmtvd2r.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp8wmtvd2r.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp8wmtvd2r.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5kuj8r93.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp5kuj8r93.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp5kuj8r93.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6zrt2fm.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpq6zrt2fm.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpq6zrt2fm.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsbqfk2d8.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpsbqfk2d8.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpsbqfk2d8.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8s8jbjjc.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp8s8jbjjc.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp8s8jbjjc.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp94fj8gio.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp94fj8gio.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp94fj8gio.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvrkk0ozj.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpvrkk0ozj.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpvrkk0ozj.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nucal_r.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp5nucal_r.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp5nucal_r.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqmcw627f.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpqmcw627f.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpqmcw627f.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt_alppa_.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpt_alppa_.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpt_alppa_.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp14sb1_n2.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp14sb1_n2.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp14sb1_n2.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcc4x8ett.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpcc4x8ett.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpcc4x8ett.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_qydtimp.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp_qydtimp.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp_qydtimp.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnk2wbfxh.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpnk2wbfxh.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpnk2wbfxh.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpui6be_6t.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpui6be_6t.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpui6be_6t.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9l112yed.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp9l112yed.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp9l112yed.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk90yvp5p.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpk90yvp5p.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpk90yvp5p.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpna4cqswb.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpna4cqswb.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpna4cqswb.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8_rj0ff.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpi8_rj0ff.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpi8_rj0ff.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvolpoikd.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpvolpoikd.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpvolpoikd.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxbnkpok.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpwxbnkpok.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpwxbnkpok.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoas9hnli.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpoas9hnli.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpoas9hnli.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsp62sbts.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpsp62sbts.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpsp62sbts.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4opgoe2k.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp4opgoe2k.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp4opgoe2k.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpotz64x62.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpotz64x62.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpotz64x62.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6f7om627.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp6f7om627.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp6f7om627.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqlrovu45.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpqlrovu45.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpqlrovu45.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzcx2t00j.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpzcx2t00j.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpzcx2t00j.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprp2vpjzl.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmprp2vpjzl.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmprp2vpjzl.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0yqtivwk.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp0yqtivwk.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp0yqtivwk.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpydemk_kp.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpydemk_kp.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpydemk_kp.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsi1x81id.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpsi1x81id.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpsi1x81id.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp71eiqz84.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp71eiqz84.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp71eiqz84.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpom5qdp56.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpom5qdp56.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpom5qdp56.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp39yqmp4.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpp39yqmp4.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpp39yqmp4.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpib7niivk.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpib7niivk.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpib7niivk.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl7f30eox.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpl7f30eox.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpl7f30eox.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz75opf2c.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpz75opf2c.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpz75opf2c.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnj8c_3sq.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpnj8c_3sq.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpnj8c_3sq.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i8ygsz3.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp2i8ygsz3.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp2i8ygsz3.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptmt9xjjp.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmptmt9xjjp.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmptmt9xjjp.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_zoss1ah.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp_zoss1ah.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp_zoss1ah.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9flwcehv.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp9flwcehv.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp9flwcehv.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp1v3qion.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpp1v3qion.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpp1v3qion.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa2exhja2.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpa2exhja2.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpa2exhja2.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplr2k_y4z.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmplr2k_y4z.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmplr2k_y4z.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7pamu2i6.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp7pamu2i6.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp7pamu2i6.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe7gftksy.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpe7gftksy.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpe7gftksy.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl9wrgyjd.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpl9wrgyjd.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpl9wrgyjd.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwp58r4ku.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpwp58r4ku.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpwp58r4ku.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hy3idcn.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp9hy3idcn.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp9hy3idcn.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3e0qkjrj.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp3e0qkjrj.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp3e0qkjrj.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz23a7c8k.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpz23a7c8k.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpz23a7c8k.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwe2s4gm3.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpwe2s4gm3.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpwe2s4gm3.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl5735z50.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpl5735z50.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpl5735z50.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3bckaoli.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp3bckaoli.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp3bckaoli.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcl7578d6.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpcl7578d6.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpcl7578d6.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy725coo7.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpy725coo7.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpy725coo7.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9pdsd7vf.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp9pdsd7vf.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp9pdsd7vf.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7q7ihjgx.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp7q7ihjgx.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp7q7ihjgx.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv51qebq4.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpv51qebq4.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpv51qebq4.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprj8uhlqr.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmprj8uhlqr.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmprj8uhlqr.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy0nra68u.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpy0nra68u.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpy0nra68u.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4kuv4s5n.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp4kuv4s5n.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp4kuv4s5n.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptoip0uos.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmptoip0uos.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmptoip0uos.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp2s8z5ft.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpp2s8z5ft.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpp2s8z5ft.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb4elx8_5.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpb4elx8_5.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmpb4elx8_5.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n  \
    \  \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\
    \ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4mkdppaq.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp4mkdppaq.py\", line 16,\
    \ in test_check\n    check(unique)\n  File \"/tmp/tmp4mkdppaq.py\", line 13, in\
    \ check\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123]\nAssertionError\n"
  exit_code: -1
  status: Exception
