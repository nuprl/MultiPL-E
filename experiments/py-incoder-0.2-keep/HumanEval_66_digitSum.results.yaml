name: HumanEval_66_digitSum
language: python
results:
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5xxtel28.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp5xxtel28.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp5xxtel28.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmp5xxtel28.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmp5xxtel28.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzhq9vc1b.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzhq9vc1b.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpzhq9vc1b.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpzhq9vc1b.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpzhq9vc1b.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbutdek_b.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbutdek_b.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpbutdek_b.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpbutdek_b.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpbutdek_b.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeezerhdh.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpeezerhdh.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpeezerhdh.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpeezerhdh.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpeezerhdh.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord('A') for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkzhvdiy6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkzhvdiy6.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpkzhvdiy6.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord('A') for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpas2adg_s.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpas2adg_s.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpas2adg_s.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfajvldnt.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfajvldnt.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpfajvldnt.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpfajvldnt.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpfajvldnt.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcooxofaj.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcooxofaj.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpcooxofaj.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpcooxofaj.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpcooxofaj.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(map(ord, s))\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkec390ji.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkec390ji.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpkec390ji.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(map(ord, s))\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnwcas2ur.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpnwcas2ur.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpnwcas2ur.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord('A') for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppux8z1h4.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmppux8z1h4.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmppux8z1h4.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord(\"A\") for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp45djoz42.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp45djoz42.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp45djoz42.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz9tblk1k.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpz9tblk1k.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpz9tblk1k.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpz9tblk1k.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpz9tblk1k.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuospz5vm.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpuospz5vm.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpuospz5vm.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpuospz5vm.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpuospz5vm.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmpd5zx_t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmpd5zx_t.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpmpd5zx_t.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpmpd5zx_t.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpmpd5zx_t.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_r6e8qf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpi_r6e8qf.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpi_r6e8qf.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpi_r6e8qf.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpi_r6e8qf.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprh1rxyll.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprh1rxyll.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmprh1rxyll.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmprh1rxyll.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmprh1rxyll.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord('A') for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsqsgk3vm.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpsqsgk3vm.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpsqsgk3vm.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord(\"A\") for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8x35v_gb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8x35v_gb.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp8x35v_gb.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord('A') for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwcfoio2c.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwcfoio2c.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpwcfoio2c.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord('A') for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptom3_cr9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmptom3_cr9.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmptom3_cr9.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(map(ord, s))\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpttve6kxw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpttve6kxw.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpttve6kxw.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord('A') for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgl1knjzq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgl1knjzq.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpgl1knjzq.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt4mr3pk7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpt4mr3pk7.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpt4mr3pk7.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpt4mr3pk7.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpt4mr3pk7.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord('A') for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnpbfp6_s.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpnpbfp6_s.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpnpbfp6_s.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe4gjz5be.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpe4gjz5be.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpe4gjz5be.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuab3xxgq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpuab3xxgq.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpuab3xxgq.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpuab3xxgq.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpuab3xxgq.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcguj_1ai.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcguj_1ai.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpcguj_1ai.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpcguj_1ai.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpcguj_1ai.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpappcqwz5.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpappcqwz5.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpappcqwz5.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpappcqwz5.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpappcqwz5.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord('A') for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprzh3cj97.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprzh3cj97.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmprzh3cj97.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4z8ieq3x.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4z8ieq3x.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp4z8ieq3x.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmp4z8ieq3x.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmp4z8ieq3x.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord('A') for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpepdsmjdi.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpepdsmjdi.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpepdsmjdi.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvibshylm.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpvibshylm.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpvibshylm.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpvibshylm.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpvibshylm.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpab42t2l0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpab42t2l0.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpab42t2l0.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpab42t2l0.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpab42t2l0.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(map(ord, s))\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_dtonna2.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_dtonna2.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp_dtonna2.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_f6of_88.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_f6of_88.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp_f6of_88.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmp_f6of_88.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmp_f6of_88.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord('A') for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1klfdx3r.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1klfdx3r.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp1klfdx3r.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        sum += ord(char)\n\
    \    return sum\n\n\ndef check(candidate):\n    assert candidate('') == 0\n  \
    \  assert candidate('abAB') == 131\n    assert candidate('abcCd') == 67\n    assert\
    \ candidate('helloE') == 69\n    assert candidate('woArBld') == 131\n    assert\
    \ candidate('aAaaaXa') == 153\n    assert candidate(' How are yOu?') == 151\n\
    \    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n    check(digitSum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmk5n31e1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpmk5n31e1.py\", line 31,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpmk5n31e1.py\", line 22,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_8zfy11y.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_8zfy11y.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp_8zfy11y.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmp_8zfy11y.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmp_8zfy11y.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp63arfg22.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp63arfg22.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp63arfg22.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmp63arfg22.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmp63arfg22.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord('A') for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_m44lp_o.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_m44lp_o.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp_m44lp_o.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord('A') for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj7d7rl27.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpj7d7rl27.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpj7d7rl27.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw14jdi4q.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpw14jdi4q.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpw14jdi4q.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpw14jdi4q.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpw14jdi4q.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord('A') for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoc4gz8wc.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpoc4gz8wc.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpoc4gz8wc.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmploftp7el.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmploftp7el.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmploftp7el.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmploftp7el.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmploftp7el.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnc3zy9sq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpnc3zy9sq.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpnc3zy9sq.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpnc3zy9sq.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpnc3zy9sq.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0q4gbvha.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp0q4gbvha.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp0q4gbvha.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmp0q4gbvha.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmp0q4gbvha.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord('A') for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplcah11d0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplcah11d0.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmplcah11d0.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord('A') for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnvq0lniu.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpnvq0lniu.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpnvq0lniu.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(map(ord, s))\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6qdaly7h.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6qdaly7h.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp6qdaly7h.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf985871t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpf985871t.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpf985871t.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpf985871t.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpf985871t.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord(\"A\") for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjx3lrol7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpjx3lrol7.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpjx3lrol7.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw3kzve4b.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpw3kzve4b.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpw3kzve4b.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpw3kzve4b.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpw3kzve4b.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp75g33pv_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp75g33pv_.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp75g33pv_.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmp75g33pv_.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmp75g33pv_.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf4qao72c.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpf4qao72c.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpf4qao72c.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpf4qao72c.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpf4qao72c.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3lhseqem.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3lhseqem.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp3lhseqem.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmp3lhseqem.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmp3lhseqem.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord('A') for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdob5mh7_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpdob5mh7_.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpdob5mh7_.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppqev5w0y.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmppqev5w0y.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmppqev5w0y.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmppqev5w0y.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmppqev5w0y.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord('A') for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2k92ym7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmph2k92ym7.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmph2k92ym7.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        sum += ord(char)\n\
    \    return sum\n\n\ndef check(candidate):\n    assert candidate('') == 0\n  \
    \  assert candidate('abAB') == 131\n    assert candidate('abcCd') == 67\n    assert\
    \ candidate('helloE') == 69\n    assert candidate('woArBld') == 131\n    assert\
    \ candidate('aAaaaXa') == 153\n    assert candidate(' How are yOu?') == 151\n\
    \    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n    check(digitSum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb__4p3ys.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpb__4p3ys.py\", line 31,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpb__4p3ys.py\", line 22,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg9g_tqdo.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpg9g_tqdo.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpg9g_tqdo.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpg9g_tqdo.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpg9g_tqdo.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq9qh2doi.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq9qh2doi.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpq9qh2doi.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpq9qh2doi.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpq9qh2doi.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbvx8d4rz.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbvx8d4rz.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpbvx8d4rz.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpbvx8d4rz.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpbvx8d4rz.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp12z1x0hd.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp12z1x0hd.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp12z1x0hd.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmp12z1x0hd.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmp12z1x0hd.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppv1l95k8.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmppv1l95k8.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmppv1l95k8.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmppv1l95k8.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmppv1l95k8.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsqyqngrl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpsqyqngrl.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpsqyqngrl.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpsqyqngrl.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpsqyqngrl.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1eynxt8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1eynxt8t.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp1eynxt8t.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmp1eynxt8t.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmp1eynxt8t.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcomym6mt.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcomym6mt.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpcomym6mt.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpcomym6mt.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpcomym6mt.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg8fu9t6e.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpg8fu9t6e.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpg8fu9t6e.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpg8fu9t6e.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpg8fu9t6e.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3bafbmyr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3bafbmyr.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp3bafbmyr.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmp3bafbmyr.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmp3bafbmyr.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(map(ord, s))\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp16w4ma6o.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp16w4ma6o.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp16w4ma6o.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp79jkhgsv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp79jkhgsv.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp79jkhgsv.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmp79jkhgsv.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmp79jkhgsv.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplgdzmpb4.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplgdzmpb4.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmplgdzmpb4.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmplgdzmpb4.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmplgdzmpb4.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(int(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzeiwddar.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzeiwddar.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpzeiwddar.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\n  File \"/tmp/tmpzeiwddar.py\"\
    , line 14, in digitSum\n    return sum(int(c) for c in s if c.isupper())\n  File\
    \ \"/tmp/tmpzeiwddar.py\", line 14, in <genexpr>\n    return sum(int(c) for c\
    \ in s if c.isupper())\nValueError: invalid literal for int() with base 10: 'A'\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) - ord('A') for c in s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpusx1jw09.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpusx1jw09.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmpusx1jw09.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n   \
    \         sum += ord(c)\n    return sum\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abAB') == 131\n    assert candidate('abcCd')\
    \ == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that\
    \ takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
    abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\"\
    ) => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
    \ 153\n    \"\"\"\n    return sum(map(ord, s))\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == 0\n    assert candidate('abAB') == 131\n    assert\
    \ candidate('abcCd') == 67\n    assert candidate('helloE') == 69\n    assert candidate('woArBld')\
    \ == 131\n    assert candidate('aAaaaXa') == 153\n    assert candidate(' How are\
    \ yOu?') == 151\n    assert candidate('You arE Very Smart') == 327\n\ndef test_check():\n\
    \    check(digitSum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8p03wl4w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8p03wl4w.py\", line 28,\
    \ in test_check\n    check(digitSum)\n  File \"/tmp/tmp8p03wl4w.py\", line 19,\
    \ in check\n    assert candidate('abAB') == 131\nAssertionError\n"
  exit_code: -1
  status: Exception
