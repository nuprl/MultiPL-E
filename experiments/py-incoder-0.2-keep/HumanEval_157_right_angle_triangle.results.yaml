name: HumanEval_157_right_angle_triangle
language: python
results:
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprwnm77q2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmprwnm77q2.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmprwnm77q2.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpphrjkb8d.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpphrjkb8d.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpphrjkb8d.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b and b == c:\n        return\
    \ True\n    elif a == b or a == c:\n        return False\n    elif b == c or b\
    \ == a:\n        return False\n    else:\n        return True\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpyk_v2g06.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr5k1__xu.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpr5k1__xu.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpr5k1__xu.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b and b == c:\n        return\
    \ True\n    elif a == b or a == c:\n        return False\n    elif b == c or b\
    \ == a:\n        return False\n    else:\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjmg5jlc8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjmg5jlc8.py\", line 36,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjmg5jlc8.py\"\
    , line 24, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsebpywd7.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsebpywd7.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpsebpywd7.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    if a\
    \ + b > c and b + c > a and c + a > b:\n        return True\n    else:\n     \
    \   return False\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpkcs0bt7c.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk897bv5i.py\", line\
    \ 282, in <module>\n    test_check()\n  File \"/tmp/tmpk897bv5i.py\", line 280,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpk897bv5i.py\"\
    , line 267, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a + b > c and a + c > b and b + c >\
    \ a:\n        return True\n    else:\n        return False\n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy_xihvib.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpy_xihvib.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpy_xihvib.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b and b == c:\n        return\
    \ True\n    elif a == b or a == c:\n        return False\n    elif b == c or b\
    \ == a:\n        return False\n    else:\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg7khjhh8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpg7khjhh8.py\", line 36,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpg7khjhh8.py\"\
    , line 24, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpylcr6dkv.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpylcr6dkv.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpylcr6dkv.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpptybeulz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpptybeulz.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpptybeulz.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcbrkujvh.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpcbrkujvh.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpcbrkujvh.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b and b == c:\n        return\
    \ True\n    elif a != b and b != c and c != a:\n        return False\n    else:\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd3npm5yw.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpd3npm5yw.py\", line 34,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpd3npm5yw.py\"\
    , line 21, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b > c:\n        return False\n    elif a == b or a == c or b ==\
    \ c:\n        return True\n    else:\n        return False\n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptdx37f6o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptdx37f6o.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptdx37f6o.py\"\
    , line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a >= b >= c:\n        return True\n\
    \    else:\n        return False\n    \ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmhrs_gmz.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpmhrs_gmz.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpmhrs_gmz.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a == b or a == c or b == c:\n        return False\n    else:\n     \
    \   angle1 = (a + b + c) / 2\n        angle2 = (a - b - c) / 2\n        angle3\
    \ = (a - b + c) / 2\n        \n        if angle1 == angle2 or angle1 == angle3\
    \ or angle2 == angle3:\n            return True\n        else:\n            return\
    \ False\n    \n    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp22c_c1f.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpp22c_c1f.py\", line 41,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpp22c_c1f.py\"\
    , line 28, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ai5y68n.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp5ai5y68n.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp5ai5y68n.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a + b > c and a + c > b and b + c >\
    \ a:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpicw91q_y.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpicw91q_y.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpicw91q_y.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == 0 and b == 0 and c == 0:\n   \
    \     return True\n    elif a == 0 and b != 0 and c != 0:\n        return False\n\
    \    elif a != 0 and b == 0 and c != 0:\n        return False\n    elif a != 0\
    \ and b != 0 and c == 0:\n        return False\n    elif a != 0 and b != 0 and\
    \ c != 0:\n        if b > c:\n            if a > c:\n                return True\n\
    \            else:\n                return False\n        else:\n            if\
    \ a > c:\n                return False\n            else:\n                return\
    \ True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp5qm8pjh.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpp5qm8pjh.py\", line 48,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpp5qm8pjh.py\"\
    , line 36, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a == b == c:\n        return True\n    elif\
    \ a > b > c:\n        return False\n    else:\n        angle1 = math.acos((a +\
    \ b + c) / 2)\n        angle2 = math.acos((a - b - c) / 2)\n        angle3 = math.acos((a\
    \ - b + c) / 2)\n        if angle1 == angle2 == angle3:\n            return True\n\
    \        else:\n            return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq61qgzmp.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpq61qgzmp.py\", line 39,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpq61qgzmp.py\"\
    , line 26, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpq61qgzmp.py\"\
    , line 16, in right_angle_triangle\n    angle1 = math.acos((a + b + c) / 2)\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeetl1viz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpeetl1viz.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpeetl1viz.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5wvb0n_y.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5wvb0n_y.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp5wvb0n_y.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b > c:\n        return False\n    elif b > c > a:\n        return\
    \ False\n    elif c > a > b:\n        return False\n    else:\n        return\
    \ True\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc5qgp1yr.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpc5qgp1yr.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpc5qgp1yr.py\"\
    , line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b > c:\n        return False\n    else:\n        angle1 = math.degrees(math.atan(b/a))\n\
    \        angle2 = math.degrees(math.atan(c/a))\n        if angle1 < angle2:\n\
    \            return True\n        else:\n            return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp77t3eck0.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp77t3eck0.py\", line 38,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp77t3eck0.py\"\
    , line 25, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmp77t3eck0.py\"\
    , line 17, in right_angle_triangle\n    angle1 = math.degrees(math.atan(b/a))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    if a**2\
    \ + b**2 == c**2:\n        return True\n    else:\n        return False\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmptvr9s6d_.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b > c:\n        return False\n    elif a > c > b:\n        return\
    \ False\n    else:\n        return True\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj2wv5ftx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpj2wv5ftx.py\", line 36,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpj2wv5ftx.py\"\
    , line 24, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b and b == c:\n        return\
    \ True\n    elif a == b or a == c:\n        return False\n    elif b == c or b\
    \ == a:\n        return False\n    else:\n        return True\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5v1bkqc_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5v1bkqc_.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp5v1bkqc_.py\"\
    , line 23, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a == b == c:\n        return True\n    elif\
    \ a > b > c:\n        return False\n    elif b > c > a:\n        return False\n\
    \    elif c > a > b:\n        return False\n    else:\n        return True\n\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8elablwy.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp8elablwy.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp8elablwy.py\"\
    , line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b and a > c:\n        return False\n    elif b > a and b > c:\n\
    \        return False\n    elif c > a and c > b:\n        return False\n    else:\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwytdm0qs.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpwytdm0qs.py\", line 38,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwytdm0qs.py\"\
    , line 25, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_15o16n_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp_15o16n_.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp_15o16n_.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a > b and a > c:\n        return True\n\
    \    elif b > a and b > c:\n        return True\n    elif c > a and c > b:\n \
    \       return True\n    else:\n        return False\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp7t67et0i.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b ==\
    \ c:\n        return True\n    elif a > b and a > c:\n        return False\n \
    \   elif b > c and b > a:\n        return False\n    elif c > a and c > b:\n \
    \       return False\n    else:\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvpn1wg_9.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpvpn1wg_9.py\", line 38,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpvpn1wg_9.py\"\
    , line 25, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    if a\
    \ == b and b == c:\n        return True\n    elif a == b or a == c:\n        return\
    \ True\n    elif b == c or b == a:\n        return True\n    else:\n        return\
    \ False\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmphh0_5c4_.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    \n    if a == b == c:\n        return\
    \ True\n    elif a > b > c:\n        return False\n    elif a < b < c:\n     \
    \   return True\n    else:\n        return False\n    \n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7rjabmpc.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp7rjabmpc.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp7rjabmpc.py\"\
    , line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpizexjki8.py\", line\
    \ 284, in <module>\n    test_check()\n  File \"/tmp/tmpizexjki8.py\", line 282,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpizexjki8.py\"\
    , line 269, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a + b > c and b + c > a and c + a > b:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_8e4_xig.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_8e4_xig.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp_8e4_xig.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == 0 and b == 0 and c == 0:\n   \
    \     return True\n    elif a == 0 and b != 0 and c != 0:\n        return False\n\
    \    elif a != 0 and b == 0 and c != 0:\n        return False\n    elif a != 0\
    \ and b != 0 and c == 0:\n        return False\n    elif a == 0 and b != 0 and\
    \ c == 0:\n        return False\n    elif a != 0 and b != 0 and c == 0:\n    \
    \    return False\n    elif a != 0 and b == 0 and c == 0:\n        return False\n\
    \    elif a != 0 and b != 0 and c != 0:\n        return False\n    elif a == 0\
    \ and b == 0 and c == 0:\n        return False\n    else:\n        return True\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv87jm7lh.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpv87jm7lh.py\", line 47,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpv87jm7lh.py\"\
    , line 34, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b > c:\n        return False\n    else:\n        angle1 = (a + b\
    \ + c) / 2\n        angle2 = (a + b - c) / 2\n        angle3 = (a - b - c) / 2\n\
    \        \n        if angle1 == angle2 == angle3:\n            return True\n \
    \       else:\n            return False\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmplj7gg8u1.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a + b > c and a + c > b and b + c >\
    \ a:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp87p9bsc_.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp87p9bsc_.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp87p9bsc_.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b and a > c:\n        return True\n    elif b > a and b > c:\n \
    \       return True\n    elif c > a and c > b:\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpus9x_q3_.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpus9x_q3_.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpus9x_q3_.py\"\
    , line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b > c:\n        return False\n    elif b > c > a:\n        return\
    \ False\n    elif c > a > b:\n        return False\n    else:\n        return\
    \ True\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n   \
    \ assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcw__if1h.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpcw__if1h.py\", line 38,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpcw__if1h.py\"\
    , line 26, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfzbgz0wr.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpfzbgz0wr.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfzbgz0wr.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3uymbk8t.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp3uymbk8t.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3uymbk8t.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b ==\
    \ c:\n        return True\n    elif a == b or a == c or b == c:\n        return\
    \ False\n    else:\n        angle1 = (a + b + c) / 2\n        angle2 = (a - b\
    \ - c) / 2\n        angle3 = (a - b + c) / 2\n        if angle1 == angle2 == angle3:\n\
    \            return True\n        else:\n            return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0omajqvt.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp0omajqvt.py\", line 40,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp0omajqvt.py\"\
    , line 27, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b and b == c:\n        return\
    \ True\n    elif a == b or a == c:\n        return False\n    elif b == c or b\
    \ == a:\n        return False\n    else:\n        return True\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbmbhz__u.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpbmbhz__u.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpbmbhz__u.py\"\
    , line 23, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a + b > c and a + c > b and b + c >\
    \ a:\n        return True\n    else:\n        return False\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpiw1ru0yg.py\", line 16\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b ==\
    \ c:\n        return True\n    elif a > b and a > c:\n        return True\n  \
    \  elif b > a and b > c:\n        return True\n    elif c > a and c > b:\n   \
    \     return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz_sz143w.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpz_sz143w.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpz_sz143w.py\"\
    , line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    if a**2\
    \ + b**2 == c**2:\n        return True\n    else:\n        return False\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpag10i8cj.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a == b == c:\n        return True\n    elif\
    \ a > b > c:\n        return False\n    else:\n        angle = (a + b + c) / 2\n\
    \        if angle > 180:\n            return False\n        else:\n          \
    \  return True\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5u73qjyf.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp5u73qjyf.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp5u73qjyf.py\"\
    , line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphgmnrm7e.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmphgmnrm7e.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmphgmnrm7e.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    if a\
    \ == b and b == c:\n        return True\n    elif a == b or a == c:\n        return\
    \ True\n    elif b == c or b == a:\n        return True\n    else:\n        return\
    \ False\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpxt043c9x.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzb0htxhq.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzb0htxhq.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpzb0htxhq.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8vw92jzv.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp8vw92jzv.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp8vw92jzv.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a + b > c and a + c > b and b + c >\
    \ a:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpch2kx41i.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpch2kx41i.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpch2kx41i.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b ==\
    \ c:\n        return True\n    elif a == b or a == c or b == c:\n        return\
    \ False\n    else:\n        return right_angle_triangle(b, c) or right_angle_triangle(a,\
    \ c)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm1kvki00.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpm1kvki00.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpm1kvki00.py\"\
    , line 20, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpm1kvki00.py\"\
    , line 17, in right_angle_triangle\n    return right_angle_triangle(b, c) or right_angle_triangle(a,\
    \ c)\nTypeError: right_angle_triangle() missing 1 required positional argument:\
    \ 'c'\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == 0 and b == 0 and c == 0:\n   \
    \     return True\n    elif a == 0 and b != 0 and c != 0:\n        return False\n\
    \    elif a != 0 and b == 0 and c != 0:\n        return False\n    elif a != 0\
    \ and b != 0 and c == 0:\n        return False\n    elif a != 0 and b != 0 and\
    \ c != 0:\n        if b > c:\n            return False\n        elif b < c:\n\
    \            return True\n        elif b == c:\n            return True\n    \
    \    else:\n            return False\n    else:\n        return False\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmposndfx1o.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmposndfx1o.py\", line 47,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmposndfx1o.py\"\
    , line 35, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == 0 and b == 0 and c == 0:\n   \
    \     return True\n    elif a == 0 and b != 0 and c != 0:\n        return False\n\
    \    elif a != 0 and b == 0 and c != 0:\n        return False\n    elif a != 0\
    \ and b != 0 and c == 0:\n        return False\n    elif a != 0 and b != 0 and\
    \ c != 0:\n        if b > c:\n            return False\n        elif b < c:\n\
    \            return True\n        else:\n            if a > c:\n             \
    \   return True\n            elif a < c:\n                return False\n     \
    \       else:\n                if b > c:\n                    return False\n \
    \               elif b < c:\n                    return False\n              \
    \  else:\n                    if a > c:\n                        return False\n\
    \                    elif a < c:\n                        return True\n      \
    \              else:\n                        if b > c:\n                    \
    \        return False\n                        elif b < c:\n                 \
    \           return True\n                        else:\n                     \
    \       if a > c:\n                                return True\n             \
    \               elif a < c:\n                                return False\n  \
    \                          else:\n                                return False\n\
    \    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjwitej9.py\", line\
    \ 69, in <module>\n    test_check()\n  File \"/tmp/tmpqjwitej9.py\", line 67,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpqjwitej9.py\"\
    , line 55, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpldcqswn9.py\", line\
    \ 284, in <module>\n    test_check()\n  File \"/tmp/tmpldcqswn9.py\", line 282,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpldcqswn9.py\"\
    , line 269, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6cp8j77v.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6cp8j77v.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp6cp8j77v.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppm9wnlb_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppm9wnlb_.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppm9wnlb_.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpop50p0dd.py\", line\
    \ 282, in <module>\n    test_check()\n  File \"/tmp/tmpop50p0dd.py\", line 280,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpop50p0dd.py\"\
    , line 267, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b and a > c:\n        return True\n    elif b > c and b > a:\n \
    \       return True\n    else:\n        return False\n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp149e9fkr.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp149e9fkr.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp149e9fkr.py\"\
    , line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpexf9jo7p.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpexf9jo7p.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpexf9jo7p.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a == b == c:\n        return True\n    elif\
    \ a > b > c:\n        return False\n    elif b > c > a:\n        return False\n\
    \    elif c > a > b:\n        return False\n    else:\n        return True\n\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplm1r_8je.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmplm1r_8je.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmplm1r_8je.py\"\
    , line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b > c:\n        return False\n    elif b > c > a:\n        return\
    \ False\n    elif c > a > b:\n        return False\n    else:\n        return\
    \ True\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuseayub6.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpuseayub6.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpuseayub6.py\"\
    , line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkyxrn8o.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgkyxrn8o.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpgkyxrn8o.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    if a\
    \ == b and b == c:\n        return True\n    elif a == b or a == c:\n        return\
    \ True\n    elif b == c or b == a:\n        return True\n    else:\n        return\
    \ False\n    \n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp7notmeda.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt4k5sw27.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpt4k5sw27.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpt4k5sw27.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd8_phtqh.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpd8_phtqh.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpd8_phtqh.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    a, b, c = sorted([a, b, c])\n    \n  \
    \  if a == b == c:\n        return True\n    \n    if a == b or a == c or b ==\
    \ c:\n        return False\n    \n    if a == b and b == c:\n        return True\n\
    \    \n    if a == b or a == c or b == c:\n        return False\n    \n    if\
    \ a == b and a == c:\n        return True\n    \n    if a == b and b == c:\n \
    \       return True\n    \n    if a == b or a == c or b == c:\n        return\
    \ False\n    \n    if a == b and a == c:\n        return True\n    \n    if a\
    \ == b and b == c:\n        return True\n    \n    if a == b or a == c or b ==\
    \ c:\n        return False\n    \n    if a == b and a == c:\n        return True\n\
    \    \n    if a == b and b == c:\n        return True\n    \n    if a == b or\
    \ a == c or b == c:\n        return False\n    \n    if a == b and a == c:\n \
    \       return True\n    \n    if a == b and b == c:\n        return True\n  \
    \  \n    if a == b or a == c or b == c:\n        return False\n    \n    if a\
    \ == b and a == c:\n        return True\n    \n    if a == b and b == c:\n   \
    \     return True\n    \n    if a == b or a == c or b == c:\n        return False\n\
    \    \n    if a == b and a == c:\n        return True\n    \n    if a == b and\
    \ b == c:\n        return True\n    \n    if a == b or a == c or b == c:\n   \
    \     return False\n    \n    if a == b and a == c:\n        return True\n   \
    \ \n    if a == b and b == c:\n        return True\n    \n    if a == b or a ==\
    \ c or b == c:\n        return False\n    \n    if a == b and a == c:\n      \
    \  return True\n    \n    if a == b and b == c:\n        return True\n    \n \
    \   if a == b or a == c or b == c:\n        return False\n    \n    if a == b\
    \ and a == c:\n        return True\n    \n    if a == b and b == c:\n        return\
    \ True\n    \n    if a == b or a == c or b == c:\n        return False\n    \n\
    \    if a == b and a == c:\n        return True\n    \n    if a == b and b ==\
    \ c:\n        return True\n    \n    if a == b or a == c or b == c:\n        return\
    \ False\n    \n    if a == b and a == c:\n        return True\n    \n    if a\
    \ == b and b == c:\n        return True\n    \n    if a == b or a == c or b ==\
    \ c:\n        return False\n    \n    if a == b and a == c:\n        return True\n\
    \    \n    if a == b and b == c:\n        return True\n    \n    if a == b or\
    \ a == c \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpz5h9xjet.py\", line 131\n    if a == b or a == c \n  \
    \                     ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n\
    \        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpteewt0mi.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpteewt0mi.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpteewt0mi.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b > c:\n        return False\n    else:\n        \n        if b\
    \ > c:\n            if a > c:\n                return True\n            else:\n\
    \                return False\n        else:\n            if a > c:\n        \
    \        return False\n            else:\n                return True\n      \
    \      \n            \ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9xhhiln4.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp9xhhiln4.py\", line 44,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9xhhiln4.py\"\
    , line 32, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a >= b >= c:\n        return True\n\
    \    else:\n        return False\n    \ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwp0pep7x.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpwp0pep7x.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwp0pep7x.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhn6et2k.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpfhn6et2k.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfhn6et2k.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    return\
    \ ((b**2) - (4*a*c)) <= 0\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp10mljw8k.py\", line 15\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a == b or a == c or b == c:\n        return False\n    else:\n     \
    \   if b > c:\n            a, b = b, a\n            c, a = c, b\n        if a\
    \ > c:\n            a, c = c, a\n            b, a = b, c\n        if b > c:\n\
    \            a, b = b, a\n            c, a = c, b\n        if a > c:\n       \
    \     a, c = c, a\n            b, a = b, c\n        if b > c:\n            a,\
    \ b = b, a\n            c, a = c, b\n        if a > c:\n            a, c = c,\
    \ a\n            b, a = b, c\n        if b > c:\n            a, b = b, a\n   \
    \         c, a = c, b\n        if a > c:\n            a, c = c, a\n          \
    \  b, a = b, c\n        if b > c:\n            a, b = b, a\n            c, a =\
    \ c, b\n        if a > c:\n            a, c = c, a\n            b, a = b, c\n\
    \        if b > c:\n            a, b = b, a\n            c, a = c, b\n       \
    \ if a > c:\n            a, c = c, a\n            b, a = b, c\n        if b >\
    \ c:\n            a, b = b, a\n            c, a = c, b\n        if a > c:\n  \
    \          a, c = c, a\n            b, a = b, c\n        if b > c:\n         \
    \   a, b = b, a\n            c, a = c, b\n        if a > c:\n            a, c\
    \ = c, a\n            b, a = b, c\n        if b > c:\n            a, b = b, a\n\
    \            c, a = c, b\n        if a > c:\n            a, c = c, a\n       \
    \     b, a = b, c\n        if b > c:\n            a, b = b, a\n            c,\
    \ a = c, b\n        if a > c:\n            a, c = c, a\n            b, a = b,\
    \ c\n        if b > c:\n            a, b = b, a\n            c, a = c, b\n   \
    \     if a > c:\n            a, c = c, a\n            b, a = b, c\n        if\
    \ b > c:\n            a, b = b, a\n            c, a = c, b\n        if a > c:\n\
    \            a, c = c, a\n            b, a = b, c\n        if b > c:\n       \
    \     a, b = b, a\n            c, a = c, b\n        if a > c:\n            a,\
    \ c = c, a\n            b, a = b, c\n        if b > c:\n            a, b = b,\
    \ a\n            c, a = c, b\n        if a > c:\n            a, c = c, a\n   \
    \         b, a = b, c\n        if b > c:\n            a, b = b, a\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdan13sw4.py\", line\
    \ 120, in <module>\n    test_check()\n  File \"/tmp/tmpdan13sw4.py\", line 118,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdan13sw4.py\"\
    , line 105, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a < b and a < c:\n        return True\n\
    \    elif b < c and b < a:\n        return True\n    elif c < a and c < b:\n \
    \       return True\n    else:\n        return False\n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjdm25avf.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpjdm25avf.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjdm25avf.py\"\
    , line 23, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddx5b5eq.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpddx5b5eq.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpddx5b5eq.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdsw8ybz8.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpdsw8ybz8.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdsw8ybz8.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph8u2w3oh.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmph8u2w3oh.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmph8u2w3oh.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsty98bph.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpsty98bph.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpsty98bph.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b ==\
    \ c:\n        return True\n    elif a == b or a == c or b == c:\n        return\
    \ False\n    else:\n        return a > b and a > c\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3mr9omgl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3mr9omgl.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3mr9omgl.py\"\
    , line 20, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a == b == c:\n        return True\n    elif\
    \ a > b and a > c:\n        return True\n    elif b > a and b > c:\n        return\
    \ True\n    elif c > a and c > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5vj4do2g.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp5vj4do2g.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp5vj4do2g.py\"\
    , line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    a, b, c = sorted([a, b, c])\n    \n  \
    \  if a == b == c:\n        return True\n    \n    if a == b or a == c or b ==\
    \ c:\n        return False\n    \n    if a == b and b == c:\n        return True\n\
    \    \n    if a == b or a == c or b == c:\n        return False\n    \n    if\
    \ a == b and b == c:\n        return True\n    \n    if a == b and a == c:\n \
    \       return True\n    \n    if a == b or a == c or b == c:\n        return\
    \ False\n    \n    if a == b and a == c:\n        return True\n    \n    if a\
    \ == b and b == c:\n        return True\n    \n    if a == b and a == c:\n   \
    \     return True\n    \n    if a == b or a == c or b == c:\n        return False\n\
    \    \n    if a == b and a == c:\n        return True\n    \n    if a == b and\
    \ b == c:\n        return True\n    \n    if a == b and a == c:\n        return\
    \ True\n    \n    if a == b or a == c or b == c:\n        return False\n    \n\
    \    if a == b and a == c:\n        return True\n    \n    if a == b and b ==\
    \ c:\n        return True\n    \n    if a == b and a == c:\n        return True\n\
    \    \n    if a == b or a == c or b == c:\n        return False\n    \n    if\
    \ a == b and a == c:\n        return True\n    \n    if a == b and b == c:\n \
    \       return True\n    \n    if a == b and a == c:\n        return True\n  \
    \  \n    if a == b or a == c or b == c:\n        return False\n    \n    if a\
    \ == b and a == c:\n        return True\n    \n    if a == b and b == c:\n   \
    \     return True\n    \n    if a == b and a == c:\n        return True\n    \n\
    \    if a == b or a == c or b == c:\n        return False\n    \n    if a == b\
    \ and a == c:\n        return True\n    \n    if a == b and b == c:\n        return\
    \ True\n    \n    if a == b and a == c:\n        return True\n    \n    if a ==\
    \ b or a == c or b == c:\n        return False\n    \n    if a == b and a == c:\n\
    \        return True\n    \n    if a == b and b == c:\n        return True\n \
    \   \n    if a == b and a == c:\n        return True\n    \n    if a == b or a\
    \ == c or b == c:\n        return False\n    \n    if a == b and a == c:\n   \
    \     return True\n    \n    if a == b and b == c:\n        return True\n    \n\
    \    if a == b and a == c:\n        return True\n    \n    if a == b or a == c\
    \ or b == c:\n        return False\n    \n    if a == b and a == c:\n        return\
    \ True\n    \n    if a == b and b == \ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpsvb1ps9j.py\", line 134\n    if a == b and b == \n   \
    \                   ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphtczwqlo.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmphtczwqlo.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmphtczwqlo.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3zsvb8yy.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3zsvb8yy.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3zsvb8yy.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b > c:\n        return False\n    elif a > c > b:\n        return\
    \ False\n    elif b > c > a:\n        return False\n    else:\n        return\
    \ True\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n   \
    \ assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp15daabpl.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp15daabpl.py\", line 38,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp15daabpl.py\"\
    , line 26, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9udlydgn.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9udlydgn.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9udlydgn.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3s84wjx_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp3s84wjx_.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3s84wjx_.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b > c:\n        return False\n    elif a > c > b:\n        return\
    \ False\n    else:\n        return True\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzwjqcppy.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzwjqcppy.py\", line 36,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpzwjqcppy.py\"\
    , line 24, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b and a > c:\n        return True\n    elif b > a and b > c:\n \
    \       return True\n    elif c > a and c > b:\n        return True\n    else:\n\
    \        return False\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpxje44xd3.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    if a\
    \ + b > c and a + c > b and b + c > a:\n        return True\n    else:\n     \
    \   return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpymre1pge.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpymre1pge.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpymre1pge.py\"\
    , line 23, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b and a > c:\n        return True\n    elif b > c and b > a:\n \
    \       return True\n    elif c > a and c > b:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp28qz2toe.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp28qz2toe.py\", line 38,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp28qz2toe.py\"\
    , line 26, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmc_e5xji.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmc_e5xji.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpmc_e5xji.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b and b == c:\n        return\
    \ True\n    elif a == b or a == c:\n        return False\n    elif b == c or b\
    \ == a:\n        return False\n    else:\n        return True\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmphjswyuja.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a + b > c and b + c > a and c + a >\
    \ b:\n        return True\n    else:\n        return False\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpet68q9ir.py\", line 16\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    a, b, c = sorted([a, b, c])\n    \n  \
    \  if a == b == c:\n        return True\n    \n    if a == b or a == c or b ==\
    \ c:\n        return False\n    \n    if a > b and a > c:\n        return True\n\
    \    \n    if b > a and b > c:\n        return True\n    \n    if c > a and c\
    \ > b:\n        return True\n    \n    return False\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp0yr62n8m.py\", line 30\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b and b == c:\n        return\
    \ True\n    elif a > b and a > c:\n        return True\n    elif b > c and b >\
    \ a:\n        return True\n    else:\n        return False\n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwooiabep.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwooiabep.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwooiabep.py\"\
    , line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    if a\
    \ == b and b == c:\n        return True\n    elif a == b or a == c:\n        return\
    \ True\n    elif b == c or b == a:\n        return True\n    else:\n        return\
    \ False\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp73iugu0z.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b and a > c:\n        return True\n    elif b > a and b > c:\n \
    \       return True\n    elif c > a and c > b:\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphdq3lysz.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmphdq3lysz.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmphdq3lysz.py\"\
    , line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a == b == c:\n        return True\n    elif\
    \ a > b > c:\n        return False\n    else:\n        angle1 = (a + b + c) /\
    \ 2\n        angle2 = (b + c + a) / 2\n        angle3 = (a + b + a) / 2\n    \
    \    if angle1 == angle2 == angle3:\n            return True\n        else:\n\
    \            return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprlr45rqk.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmprlr45rqk.py\", line 39,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmprlr45rqk.py\"\
    , line 26, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpumzx0vpi.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpumzx0vpi.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpumzx0vpi.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a == b or a == c or b == c:\n        return False\n    else:\n     \
    \   if b > c:\n            a, b = b, a\n            c, a = c, a\n        if b\
    \ == c:\n            if a > c:\n                a, b = b, a\n                c,\
    \ a = c, a\n            if a == c:\n                return True\n            else:\n\
    \                return False\n        else:\n            if a > c:\n        \
    \        a, b = b, a\n                c, a = c, a\n            if a == c:\n  \
    \              return True\n            else:\n                return False\n\
    \            \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnmyf046s.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpnmyf046s.py\", line 51,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpnmyf046s.py\"\
    , line 38, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a > b and a > c:\n        return True\n\
    \    elif b > a and b > c:\n        return True\n    elif c > a and c > b:\n \
    \       return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppcxh8rri.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmppcxh8rri.py\", line 36,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppcxh8rri.py\"\
    , line 24, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpomf63fp4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpomf63fp4.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpomf63fp4.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a == b and b == c:\n        return True\n\
    \    elif a == b or a == c:\n        return True\n    elif b == c or b == a:\n\
    \        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp53ktme23.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp53ktme23.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp53ktme23.py\"\
    , line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b > c:\n        return False\n    elif b > c > a:\n        return\
    \ False\n    elif c > a > b:\n        return False\n    else:\n        return\
    \ True\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0czxgt_0.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp0czxgt_0.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp0czxgt_0.py\"\
    , line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b and a > c:\n        return True\n    elif b > c and b > a:\n \
    \       return True\n    else:\n        return False\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp3l4c44nh.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpek68fr6q.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpek68fr6q.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpek68fr6q.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b > c:\n        return False\n    elif b > c > a:\n        return\
    \ False\n    elif c > a > b:\n        return False\n    else:\n        return\
    \ True\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpekbzybb1.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpekbzybb1.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpekbzybb1.py\"\
    , line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphe3e3a0k.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmphe3e3a0k.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmphe3e3a0k.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b > c:\n        return False\n    else:\n        angle1 = math.degrees(math.acos((b\
    \ ** 2 + c ** 2 - a ** 2) / (2 * b * c)))\n        angle2 = math.degrees(math.acos((b\
    \ ** 2 + a ** 2 - c ** 2) / (2 * b * a)))\n        angle3 = math.degrees(math.acos((a\
    \ ** 2 + b ** 2 - c ** 2) / (2 * a * b)))\n        if angle1 < angle2 < angle3:\n\
    \            return True\n        else:\n            return False\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4j4p8aqm.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    return False\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp13wxibr9.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp13wxibr9.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp13wxibr9.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b and a > c:\n        return True\n    elif b > c and b > a:\n \
    \       return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprcazv57l.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmprcazv57l.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmprcazv57l.py\"\
    , line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    a, b, c = sorted([a, b, c])\n    \n  \
    \  if a == b and b == c:\n        return True\n    \n    if a == b or a == c or\
    \ b == c:\n        return False\n    \n    if a > b and a > c:\n        return\
    \ right_angle_triangle(b, c, a)\n    \n    if b > a and b > c:\n        return\
    \ right_angle_triangle(a, c, b)\n    \n    if c > a and c > b:\n        return\
    \ right_angle_triangle(a, b, c)\n    \n    return False\n</cell>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmphwlc6rwe.py\", line 30\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b and b == c:\n        return\
    \ True\n    elif a > b and a > c:\n        return True\n    elif b > a and b >\
    \ c:\n        return True\n    elif c > a and c > b:\n        return True\n  \
    \  else:\n        return False\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp3mi2xp3w.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    a, b, c = sorted([a, b, c])\n    if a\
    \ + b > c and b + c > a and c + a > b:\n        return True\n    else:\n     \
    \   return False\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpllr8mejq.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b and b == c:\n        return\
    \ True\n    elif a == b or a == c:\n        return False\n    elif b == c or b\
    \ == a:\n        return False\n    else:\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzecz36gx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzecz36gx.py\", line 36,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpzecz36gx.py\"\
    , line 24, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    return False\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzsbzfzbx.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzsbzfzbx.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpzsbzfzbx.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx208iawb.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpx208iawb.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpx208iawb.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9u26aplr.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp9u26aplr.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9u26aplr.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b > c:\n        return False\n    else:\n        if b > c:\n   \
    \         if a > c:\n                return True\n            else:\n        \
    \        return False\n        else:\n            if a > c:\n                return\
    \ False\n            else:\n                return True\n</cell>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpioox4eom.py\", line 27\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a == b and b == c:\n        return True\n\
    \    elif a == b or a == c:\n        return False\n    elif b == c or b == a:\n\
    \        return False\n    else:\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmvbhwp8x.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpmvbhwp8x.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpmvbhwp8x.py\"\
    , line 23, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    a, b, c = sorted([a, b, c])\n    \n  \
    \  if a == b == c:\n        return True\n    \n    if a == b or a == c or b ==\
    \ c:\n        return False\n    \n    if a == b and b == c:\n        return True\n\
    \    \n    if a == b or a == c or b == c:\n        return False\n    \n    if\
    \ a == b and a == c:\n        return True\n    \n    if a == b or a == c or b\
    \ == c:\n        return False\n    \n    if a == b and a == c:\n        return\
    \ True\n    \n    if a == b or a == c or b == c:\n        return False\n    \n\
    \    if a == b and a == c:\n        return True\n    \n    if a == b or a == c\
    \ or b == c:\n        return False\n    \n    if a == b and a == c:\n        return\
    \ True\n    \n    if a == b or a == c or b == c:\n        return False\n    \n\
    \    if a == b and a == c:\n        return True\n    \n    if a == b or a == c\
    \ or b == c:\n        return False\n    \n    if a == b and a == c:\n        return\
    \ True\n    \n    if a == b or a == c or b == c:\n        return False\n    \n\
    \    if a == b and a == c:\n        return True\n    \n    if a == b or a == c\
    \ or b == c:\n        return False\n    \n    if a == b and a == c:\n        return\
    \ True\n    \n    if a == b or a == c or b == c:\n        return False\n    \n\
    \    if a == b and a == c:\n        return True\n    \n    if a == b or a == c\
    \ or b == c:\n        return False\n    \n    if a == b and a == c:\n        return\
    \ True\n    \n    if a == b or a == c or b == c:\n        return False\n    \n\
    \    if a == b and a == c:\n        return True\n    \n    if a == b or a == c\
    \ or b == c:\n        return False\n    \n    if a == b and a == c:\n        return\
    \ True\n    \n    if a == b or a == c or b == c:\n        return False\n    \n\
    \    if a == b and a == c:\n        return True\n    \n    if a == b or a == c\
    \ or b == c:\n        return False\n    \n    if a == b and a == c:\n        return\
    \ True\n    \n    if a == b or a == c or b == c:\n        return False\n    \n\
    \    if a == b and a == c:\n        return True\n    \n    if a == b or a == c\
    \ or b == c:\n        return False\n    \n    if a == b and a == c:\n        return\
    \ True\n    \n    if a == b or a == c or b == c:\n        return False\n    \n\
    \    if a == b and a == c:\n        return True\n    \n    if a == b or a == c\
    \ or b == c:\n        return False\n    \n    if a == b and a == \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpl11ckw10.py\", line 128\n    if a == b and a == \n   \
    \                   ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpta3tzurp.py\", line\
    \ 284, in <module>\n    test_check()\n  File \"/tmp/tmpta3tzurp.py\", line 282,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpta3tzurp.py\"\
    , line 269, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoodm34x3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpoodm34x3.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpoodm34x3.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxz95wzm.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpwxz95wzm.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwxz95wzm.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b > c:\n        return False\n    else:\n        angle1 = (a + b\
    \ + c) / 2\n        angle2 = (a - b - c) / 2\n        angle3 = (a - b + c) / 2\n\
    \        \n        if angle1 == angle2 == angle3:\n            return True\n \
    \       else:\n            return False\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpjhc4hcx0.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    return False\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_j563m6c.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp_j563m6c.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp_j563m6c.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b > c:\n        return False\n    elif b > c > a:\n        return\
    \ False\n    else:\n        return True\n    \ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4zgkhwrj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4zgkhwrj.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp4zgkhwrj.py\"\
    , line 23, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    return False\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7twsse0h.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp7twsse0h.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp7twsse0h.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a + b > c and a + c > b and b + c >\
    \ a:\n        return True\n    else:\n        return False\n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt9ybc2mi.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpt9ybc2mi.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpt9ybc2mi.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    if a\
    \ == b and b == c:\n        return True\n    elif a > b and a > c:\n        return\
    \ True\n    elif b > a and b > c:\n        return True\n    else:\n        return\
    \ False\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpehm5_mhm.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    if a\
    \ * b > c * b:\n        return False\n    elif a * c > b * c:\n        return\
    \ False\n    else:\n        return True\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpmvqm8w77.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a == b or a == c or b == c:\n        return False\n    else:\n     \
    \   angle1 = (a + b + c) / 2\n        angle2 = (a + b) * (b + c) * (a + c) / 6\n\
    \        angle3 = (a + b) * (b + c) * (a + c) * (a + b + c) / 24\n        \n \
    \       if angle1 == angle2 or angle1 == angle3 or angle2 == angle3:\n       \
    \     return True\n        else:\n            return False\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpnskxfx1y.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    return False\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphc1_favh.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmphc1_favh.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmphc1_favh.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    if a**2\
    \ + b**2 == c**2:\n        return True\n    else:\n        return False\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpmnveqyix.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwr1tf5uy.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwr1tf5uy.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwr1tf5uy.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b and b == c:\n        return\
    \ True\n    elif a == b or a == c:\n        return False\n    elif b == c or b\
    \ == a:\n        return False\n    else:\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmbtso8_s.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpmbtso8_s.py\", line 36,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpmbtso8_s.py\"\
    , line 24, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvr2w4br.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmppvr2w4br.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppvr2w4br.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvd0t4747.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpvd0t4747.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpvd0t4747.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7h1uvl1.py\", line\
    \ 282, in <module>\n    test_check()\n  File \"/tmp/tmpk7h1uvl1.py\", line 280,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpk7h1uvl1.py\"\
    , line 267, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxt6p923n.py\", line\
    \ 282, in <module>\n    test_check()\n  File \"/tmp/tmpxt6p923n.py\", line 280,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpxt6p923n.py\"\
    , line 267, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa9gii_jq.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpa9gii_jq.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpa9gii_jq.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3g_9nxfb.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp3g_9nxfb.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3g_9nxfb.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    a, b, c = sorted([a, b, c])\n    if a\
    \ + b > c and b + c > a and c + a > b:\n        return True\n    else:\n     \
    \   return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0bp3emh4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0bp3emh4.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp0bp3emh4.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbj0ttb8j.py\", line\
    \ 282, in <module>\n    test_check()\n  File \"/tmp/tmpbj0ttb8j.py\", line 280,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpbj0ttb8j.py\"\
    , line 267, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcpada4c4.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpcpada4c4.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpcpada4c4.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == 0 and b == 0 and c == 0:\n   \
    \     return True\n    elif a == 0 and b != 0 and c != 0:\n        return False\n\
    \    elif a != 0 and b == 0 and c != 0:\n        return False\n    elif a != 0\
    \ and b != 0 and c == 0:\n        return False\n    elif a == 0 and b != 0 and\
    \ c != 0:\n        return False\n    elif a != 0 and b == 0 and c == 0:\n    \
    \    return False\n    elif a != 0 and b != 0 and c != 0:\n        return True\n\
    \    else:\n        return False\n</cell>\n<cell>\ndef check(candidate):\n   \
    \ assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmph58t2ypr.py\", line 28\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj0w3zx72.py\", line\
    \ 282, in <module>\n    test_check()\n  File \"/tmp/tmpj0w3zx72.py\", line 280,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpj0w3zx72.py\"\
    , line 267, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a + b > c and b + c > a and c + a >\
    \ b:\n        return True\n    else:\n        return False\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp1klek4_h.py\", line 16\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnvqjgmcs.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpnvqjgmcs.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpnvqjgmcs.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    return False\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxawlmhsl.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpxawlmhsl.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpxawlmhsl.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b and b == c:\n        return\
    \ True\n    elif a == b or a == c:\n        return False\n    elif b == c or b\
    \ == a:\n        return False\n    else:\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpex74vpcb.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpex74vpcb.py\", line 36,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpex74vpcb.py\"\
    , line 24, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    if a\
    \ + b > c and a + c > b and b + c > a:\n        return True\n    else:\n     \
    \   return False\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpjelw3lon.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a + b > c and b + c > a and c + a >\
    \ b:\n        return True\n    else:\n        return False\n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphs2oi3h4.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmphs2oi3h4.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmphs2oi3h4.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    return\
    \ ((a + b > c) and (a + c > b) and (a + b > c))\n\ndef check(candidate):\n   \
    \ assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjfkwigqs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpjfkwigqs.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjfkwigqs.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp94kl36m.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpp94kl36m.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpp94kl36m.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    return False\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl478v6x4.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpl478v6x4.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpl478v6x4.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    a, b, c = sorted([a, b, c])\n    if a\
    \ == b == c:\n        return True\n    elif a == b or a == c or b == c:\n    \
    \    return False\n    elif a > b and a > c:\n        return True\n    elif b\
    \ > a and b > c:\n        return True\n    elif c > a and c > b:\n        return\
    \ True\n    else:\n        return False\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpq7w7e11r.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a + b > c and b + c > a and c + a >\
    \ b:\n        return True\n    else:\n        return False\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp7k6am8pi.py\", line 16\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1jm1hz4g.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp1jm1hz4g.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp1jm1hz4g.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a == b == c:\n        return True\n    elif\
    \ a > b > c:\n        return False\n    else:\n        angle1 = (a + b + c) /\
    \ 2\n        angle2 = (b + c + a) / 2\n        angle3 = (a + b + a) / 2\n    \
    \    return angle1 == angle2 == angle3\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqeezl3n6.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpqeezl3n6.py\", line 36,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpqeezl3n6.py\"\
    , line 23, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n\
    \        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzi2kprk8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzi2kprk8.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpzi2kprk8.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    \n    if a == b and b == c:\n        return\
    \ True\n    elif a == b or a == c:\n        return False\n    elif b == c:\n \
    \       return True\n    else:\n        return False\n    \n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmndt8y22.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpmndt8y22.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpmndt8y22.py\"\
    , line 24, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp23_rwwk3.py\", line\
    \ 282, in <module>\n    test_check()\n  File \"/tmp/tmp23_rwwk3.py\", line 280,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp23_rwwk3.py\"\
    , line 267, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7cvxjfz.py\", line\
    \ 284, in <module>\n    test_check()\n  File \"/tmp/tmpw7cvxjfz.py\", line 282,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpw7cvxjfz.py\"\
    , line 269, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == 0 and b == 0 and c == 0:\n   \
    \     return True\n    elif a == 0 and b != 0 and c != 0:\n        return False\n\
    \    elif a != 0 and b == 0 and c != 0:\n        return False\n    elif a != 0\
    \ and b != 0 and c == 0:\n        return False\n    elif a != 0 and b != 0 and\
    \ c != 0:\n        if b > c:\n            return False\n        elif b < c:\n\
    \            return True\n        elif b == c:\n            return True\n    \
    \    else:\n            return False\n    else:\n        return False\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3d98vmle.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp3d98vmle.py\", line 47,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3d98vmle.py\"\
    , line 35, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2_cojy17.py\", line\
    \ 284, in <module>\n    test_check()\n  File \"/tmp/tmp2_cojy17.py\", line 282,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp2_cojy17.py\"\
    , line 269, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt_28hk3c.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpt_28hk3c.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpt_28hk3c.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    \n    if a == b == c:\n        return\
    \ True\n    elif a > b > c:\n        return False\n    elif b > a > c:\n     \
    \   return False\n    elif c > a > b:\n        return False\n    else:\n     \
    \   return True\n    \n    \ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjc7z07so.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpjc7z07so.py\", line 39,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjc7z07so.py\"\
    , line 27, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b ==\
    \ c:\n        return True\n    elif a == b or a == c or b == c:\n        return\
    \ False\n    else:\n        return a + b > c and a + c > b and b + c > a\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpei627zw1.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpei627zw1.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpei627zw1.py\"\
    , line 23, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a + b > c and b + c > a and c + a >\
    \ b:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi26p3qni.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpi26p3qni.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpi26p3qni.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == 0 and b == 0 and c == 0:\n   \
    \     return True\n    elif a == 0 and b != 0 and c != 0:\n        return False\n\
    \    elif a != 0 and b == 0 and c != 0:\n        return False\n    elif a != 0\
    \ and b != 0 and c == 0:\n        return False\n    elif a != 0 and b != 0 and\
    \ c != 0:\n        if b > c:\n            return False\n        elif b < c:\n\
    \            return True\n        elif a > c:\n            return True\n     \
    \   elif a < c:\n            return False\n        else:\n            return True\n\
    \    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp815k7i61.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp815k7i61.py\", line 49,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp815k7i61.py\"\
    , line 37, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b and a > c:\n        return False\n    elif b > c and b > a:\n\
    \        return False\n    elif c > a and c > b:\n        return False\n    else:\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzd960926.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpzd960926.py\", line 38,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpzd960926.py\"\
    , line 25, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == 0 and b == 0 and c == 0:\n   \
    \     return True\n    elif a == 0 and b != 0 and c != 0:\n        return False\n\
    \    elif a != 0 and b == 0 and c != 0:\n        return False\n    elif a != 0\
    \ and b != 0 and c == 0:\n        return False\n    elif a != 0 and b != 0 and\
    \ c != 0:\n        if b > c:\n            return False\n        elif b < c:\n\
    \            return True\n        elif b == c:\n            return True\n    \
    \    elif b > c:\n            return True\n        else:\n            return False\n\
    \    else:\n        return False\n    \ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4yje5pe8.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp4yje5pe8.py\", line 48,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp4yje5pe8.py\"\
    , line 36, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpef40lq6g.py\", line\
    \ 282, in <module>\n    test_check()\n  File \"/tmp/tmpef40lq6g.py\", line 280,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpef40lq6g.py\"\
    , line 267, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    if a\
    \ + b > c and a + c > b and b + c > a:\n        return True\n    else:\n     \
    \   return False\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmphwo09vwq.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    if a\
    \ == b and b == c:\n        return True\n    elif a == b or a == c:\n        return\
    \ True\n    elif b == c or b == a:\n        return True\n    else:\n        return\
    \ False\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpyhi2452h.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    if a\
    \ > b and a > c:\n        return True\n    elif b > a and b > c:\n        return\
    \ True\n    elif c > a and c > b:\n        return True\n    else:\n        return\
    \ False\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmplwn5754y.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a + b > c and a + c > b and b + c >\
    \ a:\n        return True\n    else:\n        return False\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp9_7qahsh.py\", line 16\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b ==\
    \ c:\n        return True\n    elif a == b or a == c or b == c:\n        return\
    \ False\n    else:\n        angle = (a + b + c) / 2\n        if angle > 180:\n\
    \            return False\n        elif angle < 180:\n            return True\n\
    \        else:\n            if a > b and a > c:\n                return True\n\
    \            elif b > a and b > c:\n                return True\n            elif\
    \ c > a and c > b:\n                return True\n            else:\n         \
    \       return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphc85uk84.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmphc85uk84.py\", line 47,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmphc85uk84.py\"\
    , line 35, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b > c:\n        return False\n    elif a > c > b:\n        return\
    \ True\n    else:\n        return False\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpb6skvq5t.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcsfchqrx.py\", line\
    \ 284, in <module>\n    test_check()\n  File \"/tmp/tmpcsfchqrx.py\", line 282,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpcsfchqrx.py\"\
    , line 269, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b and b == c:\n        return\
    \ True\n    elif a == b or a == c:\n        return True\n    elif b == c or b\
    \ == a:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9edissbj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp9edissbj.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9edissbj.py\"\
    , line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        return True\n    else:\n        return\
    \ False\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpwvxjmuz6.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == 0 and b == 0 and c == 0:\n   \
    \     return True\n    elif a == 0 and b != 0 and c != 0:\n        return False\n\
    \    elif a != 0 and b == 0 and c != 0:\n        return False\n    elif a != 0\
    \ and b != 0 and c == 0:\n        return False\n    elif a == 0 and b == 0 and\
    \ c == 0:\n        return True\n    else:\n        \n        if b * b - 4 * a\
    \ * c < 0:\n            return False\n        else:\n            return True\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkmfef7ku.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpkmfef7ku.py\", line 43,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpkmfef7ku.py\"\
    , line 30, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a > b and a > c:\n        return False\n    elif b > c and b > a:\n\
    \        return False\n    elif c > a and c > b:\n        return False\n    else:\n\
    \        return True\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpquu60lo6.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3f5q8mf5.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp3f5q8mf5.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3f5q8mf5.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3o_m2mha.py\", line\
    \ 284, in <module>\n    test_check()\n  File \"/tmp/tmp3o_m2mha.py\", line 282,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3o_m2mha.py\"\
    , line 269, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \    elif a == b or a == c or b == c:\n        return False\n    else:\n     \
    \   angle1 = math.acos((a + b + c) / 2)\n        angle2 = math.acos((a - b - c)\
    \ / 2)\n        angle3 = math.acos((a - b + c) / 2)\n        \n        if angle1\
    \ < angle2 and angle1 < angle3:\n            return True\n        elif angle2\
    \ < angle1 and angle2 < angle3:\n            return True\n        elif angle3\
    \ < angle1 and angle3 < angle2:\n            return True\n        else:\n    \
    \        return False\n    \ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv6vgki3_.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpv6vgki3_.py\", line 44,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpv6vgki3_.py\"\
    , line 31, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpv6vgki3_.py\"\
    , line 17, in right_angle_triangle\n    angle1 = math.acos((a + b + c) / 2)\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5c_t_ih7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp5c_t_ih7.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp5c_t_ih7.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b >\
    \ c and b + c > a and c + a > b:\n        return True\n    return False\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6_v5pzis.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp6_v5pzis.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp6_v5pzis.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    # Write your code here\n    \n    if a\
    \ + b > c and a + c > b and b + c > a:\n        return True\n    else:\n     \
    \   return False\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp0muszh9w.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    a, b, c = sorted([a, b, c])\n    \n  \
    \  if a == b == c:\n        return True\n    \n    if a == b or a == c or b ==\
    \ c:\n        return False\n    \n    if a > b > c:\n        return False\n  \
    \  \n    if a == b and b == c:\n        return True\n    \n    if a == b or a\
    \ == c or b == c:\n        return False\n    \n    if a > b and b > c:\n     \
    \   return True\n    \n    if a > b or a == c or b == c:\n        return False\n\
    \    \n    if a > b and b > c:\n        return True\n    \n    if a == b and b\
    \ > c:\n        return True\n    \n    if a == b or a == c or b == c:\n      \
    \  return False\n    \n    if a > b and b > c:\n        return True\n    \n  \
    \  if a > b or a == c or b == c:\n        return False\n    \n    if a > b and\
    \ b > c:\n        return True\n    \n    if a == b and b > c:\n        return\
    \ True\n    \n    if a == b or a == c or b == c:\n        return False\n    \n\
    \    if a > b and b > c:\n        return True\n    \n    if a > b or a == c or\
    \ b == c:\n        return False\n    \n    if a > b and b > c:\n        return\
    \ True\n    \n    if a == b and b > c:\n        return True\n    \n    if a ==\
    \ b or a == c or b == c:\n        return False\n    \n    if a > b and b > c:\n\
    \        return True\n    \n    if a > b or a == c or b == c:\n        return\
    \ False\n    \n    if a > b and b > c:\n        return True\n    \n    if a ==\
    \ b and b > c:\n        return True\n    \n    if a == b or a == c or b == c:\n\
    \        return False\n    \n    if a > b and b > c:\n        return True\n  \
    \  \n    if a > b or a == c or b == c:\n        return False\n    \n    if a >\
    \ b and b > c:\n        return True\n    \n    if a == b and b > c:\n        return\
    \ True\n    \n    if a == b or a == c or b == c:\n        return False\n    \n\
    \    if a > b and b > c:\n        return True\n    \n    if a > b or a == c or\
    \ b == c:\n        return False\n    \n    if a > b and b > c:\n        return\
    \ True\n    \n    if a == b and b > c:\n        return True\n    \n    if a ==\
    \ b or a == c or b == c:\n        return False\n    \n    if a > b and b > c:\n\
    \        return True\n    \n    if a > b or a == c or b\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpb_ur_lej.py\", line 122\n    if a > b or a == c or b\n\
    \                          ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    \n    a, b, c = sorted([a, b, c])\n    if a\
    \ == b == c:\n        return True\n    elif a == b or a == c or b == c:\n    \
    \    return False\n    else:\n        angle = (a + b + c) / 2\n        if angle\
    \ > 180:\n            angle = angle - 360\n        elif angle < -180:\n      \
    \      angle = angle + 360\n        if angle > 90:\n            angle = angle\
    \ - 180\n        elif angle < -90:\n            angle = angle + 180\n        if\
    \ angle == 90:\n            return True\n        elif angle == -90:\n        \
    \    return False\n        else:\n            return False\n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_04j9as.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp8_04j9as.py\", line 48,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp8_04j9as.py\"\
    , line 35, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplpnudmcq.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmplpnudmcq.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmplpnudmcq.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6cbvzolb.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6cbvzolb.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp6cbvzolb.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b ==\
    \ c:\n        return True\n    elif a == b or a == c or b == c:\n        return\
    \ False\n    else:\n        angle = (a + b + c) / 2\n        if angle > 180:\n\
    \            angle -= 360\n        elif angle < -180:\n            angle += 360\n\
    \        return angle == 90 or angle == -90\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8eheziw9.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp8eheziw9.py\", line 39,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp8eheziw9.py\"\
    , line 26, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
