name: HumanEval_99_closest_integer
language: python
results:
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr7357_l7.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr7357_l7.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpr7357_l7.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    closest_integer\
    \ = int(round(number))\n    if closest_integer == number:\n        closest_integer\
    \ = int(round(number - 1))\n    return closest_integer\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyutblldk.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpyutblldk.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpyutblldk.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe_c1x2mm.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpe_c1x2mm.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpe_c1x2mm.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    if number % 1\
    \ == 0:\n        return int(number)\n    else:\n        return round(number)\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppv5p79bw.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppv5p79bw.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmppv5p79bw.py\", line\
    \ 28, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference <= 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv0yvd31i.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpv0yvd31i.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpv0yvd31i.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzriggruc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpzriggruc.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpzriggruc.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyqrg9bbr.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpyqrg9bbr.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpyqrg9bbr.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9rawksaf.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp9rawksaf.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp9rawksaf.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    diffs = [abs(number\
    \ - int(number)) for number in str(number)]\n    return int(diffs.index(min(diffs)))\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj4mcur5w.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpj4mcur5w.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpj4mcur5w.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmpj4mcur5w.py\"\
    , line 20, in closest_integer\n    diffs = [abs(number - int(number)) for number\
    \ in str(number)]\n  File \"/tmp/tmpj4mcur5w.py\", line 20, in <listcomp>\n  \
    \  diffs = [abs(number - int(number)) for number in str(number)]\nTypeError: unsupported\
    \ operand type(s) for -: 'str' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxxa84nur.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxxa84nur.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpxxa84nur.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    diff1 = abs(number\
    \ - int(number))\n    diff2 = abs(number - int(-number))\n    if diff1 < diff2:\n\
    \        return int(number)\n    else:\n        return int(-number)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3sye19rm.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp3sye19rm.py\", line 36,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp3sye19rm.py\", line\
    \ 30, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvp38waz.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpgvp38waz.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpgvp38waz.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ []\n    for x in range(1, int(number) + 1):\n        differences.append(abs(x\
    \ - number))\n    return min(differences)\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1i2nga8g.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1i2nga8g.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1i2nga8g.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpztii09o0.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpztii09o0.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpztii09o0.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqa6xo6gl.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqa6xo6gl.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpqa6xo6gl.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuxz4dbal.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpuxz4dbal.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpuxz4dbal.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ [abs(number - int(number)) for number in sorted([int(number) for number in str(number)])]\n\
    \    return differences.index(max(differences)) if differences else None\n\n\n\
    def check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgpbbpkb9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpgpbbpkb9.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpgpbbpkb9.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmpgpbbpkb9.py\"\
    , line 20, in closest_integer\n    differences = [abs(number - int(number)) for\
    \ number in sorted([int(number) for number in str(number)])]\n  File \"/tmp/tmpgpbbpkb9.py\"\
    , line 20, in <listcomp>\n    differences = [abs(number - int(number)) for number\
    \ in sorted([int(number) for number in str(number)])]\nValueError: invalid literal\
    \ for int() with base 10: '.'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyalg2d8c.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpyalg2d8c.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpyalg2d8c.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo77vb0cc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpo77vb0cc.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpo77vb0cc.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ [abs(number - i) for i in [10, 15, 20, 25, 30]]\n    return min(differences)\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphe1l3oem.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmphe1l3oem.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmphe1l3oem.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    closest_integer\
    \ = int(round(number))\n    if closest_integer == number:\n        closest_integer\
    \ = int(round(number - 1))\n    return closest_integer\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm_b1lo22.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpm_b1lo22.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpm_b1lo22.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpix3v9zd9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpix3v9zd9.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpix3v9zd9.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo_bhl6jr.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpo_bhl6jr.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpo_bhl6jr.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ [abs(number - int(number)) for number in str(number)]\n    return int(max(differences))\
    \ if differences == sorted(differences) else 0\n\n\ndef check(candidate):\n  \
    \  assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1uf69fwm.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp1uf69fwm.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1uf69fwm.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmp1uf69fwm.py\"\
    , line 20, in closest_integer\n    differences = [abs(number - int(number)) for\
    \ number in str(number)]\n  File \"/tmp/tmp1uf69fwm.py\", line 20, in <listcomp>\n\
    \    differences = [abs(number - int(number)) for number in str(number)]\nTypeError:\
    \ unsupported operand type(s) for -: 'str' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppn2_p9en.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmppn2_p9en.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmppn2_p9en.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    closest_integer\
    \ = int(round(number))\n    if closest_integer == number:\n        closest_integer\
    \ = int(round(number + 1))\n    return closest_integer\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhhbq74n.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpfhhbq74n.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpfhhbq74n.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9xilndbf.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp9xilndbf.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp9xilndbf.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa6ly3sjv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpa6ly3sjv.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpa6ly3sjv.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpijh0a81f.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpijh0a81f.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpijh0a81f.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    closest_integer\
    \ = int(round(number))\n    if closest_integer == number:\n        return closest_integer\n\
    \    else:\n        return closest_integer\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdk2f5nni.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpdk2f5nni.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpdk2f5nni.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbzwm5ol8.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpbzwm5ol8.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpbzwm5ol8.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxv8x0j23.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxv8x0j23.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpxv8x0j23.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmzce92e4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpmzce92e4.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpmzce92e4.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ [abs(number - int(number)) for number in sorted([int(number) for number in str(number)])]\n\
    \    return differences.index(min(differences))\n\n\ndef check(candidate):\n \
    \   assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv6axdy6u.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpv6axdy6u.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpv6axdy6u.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmpv6axdy6u.py\"\
    , line 20, in closest_integer\n    differences = [abs(number - int(number)) for\
    \ number in sorted([int(number) for number in str(number)])]\n  File \"/tmp/tmpv6axdy6u.py\"\
    , line 20, in <listcomp>\n    differences = [abs(number - int(number)) for number\
    \ in sorted([int(number) for number in str(number)])]\nValueError: invalid literal\
    \ for int() with base 10: '.'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphoikcy7i.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmphoikcy7i.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmphoikcy7i.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe_v90_su.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpe_v90_su.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpe_v90_su.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    closest_integer\
    \ = int(round(number))\n    if closest_integer == number:\n        closest_integer\
    \ = int(round(number - 1))\n    return closest_integer\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_0zxn_nn.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_0zxn_nn.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_0zxn_nn.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92qxbx9r.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp92qxbx9r.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp92qxbx9r.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpist_8vjp.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpist_8vjp.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpist_8vjp.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyw5of508.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpyw5of508.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpyw5of508.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ [abs(number - i) for i in [10, 15, 20, 25, 30, 35, 40]]\n    return min(differences)\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvcm_qej.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpzvcm_qej.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpzvcm_qej.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    closest_integer\
    \ = int(round(number))\n    if closest_integer == number:\n        closest_integer\
    \ = int(round(number - 1))\n    return closest_integer\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvx8k999s.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpvx8k999s.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpvx8k999s.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppb8uqs25.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmppb8uqs25.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmppb8uqs25.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_zovm_u8.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_zovm_u8.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_zovm_u8.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1avczgy5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1avczgy5.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1avczgy5.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp97vfepss.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp97vfepss.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp97vfepss.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0kj4vwx1.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp0kj4vwx1.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp0kj4vwx1.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ [abs(number - int(number)) for number in sorted([int(number) for number in str(number)])]\n\
    \    return differences.index(min(differences))\n\n\ndef check(candidate):\n \
    \   assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3u40_0f_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp3u40_0f_.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp3u40_0f_.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmp3u40_0f_.py\"\
    , line 20, in closest_integer\n    differences = [abs(number - int(number)) for\
    \ number in sorted([int(number) for number in str(number)])]\n  File \"/tmp/tmp3u40_0f_.py\"\
    , line 20, in <listcomp>\n    differences = [abs(number - int(number)) for number\
    \ in sorted([int(number) for number in str(number)])]\nValueError: invalid literal\
    \ for int() with base 10: '.'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx50e95m9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpx50e95m9.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpx50e95m9.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference <= 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6eaabfz1.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp6eaabfz1.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp6eaabfz1.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference <= 0.5:\n        return int(number)\n\
    \    else:\n        return int(round(number))\n\n\ndef check(candidate):\n   \
    \ assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqx_6usk1.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqx_6usk1.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpqx_6usk1.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ [abs(number - i) for i in [10, 15, 20, 25, 30, 35, 40]]\n    return min(differences)\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwbm_j2y0.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpwbm_j2y0.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwbm_j2y0.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy3kj22cl.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpy3kj22cl.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpy3kj22cl.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphwcohlwl.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmphwcohlwl.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmphwcohlwl.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ [abs(round(number - int(number), 0)), abs(round(number - int(number), 1))]\n\
    \    return differences.index(min(differences))\n\n\ndef check(candidate):\n \
    \   assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2870lsrp.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2870lsrp.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2870lsrp.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxj4619qa.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxj4619qa.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpxj4619qa.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpguh3flrz.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpguh3flrz.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpguh3flrz.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwl2luht6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwl2luht6.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwl2luht6.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiqx_sxpu.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpiqx_sxpu.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpiqx_sxpu.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ []\n    for _ in range(10):\n        differences.append(abs(number - int(number)))\n\
    \        number = round(number, 1)\n    return min(differences)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt37rmhys.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpt37rmhys.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpt37rmhys.py\", line\
    \ 28, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1_87njqn.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1_87njqn.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1_87njqn.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsg89dc9i.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpsg89dc9i.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpsg89dc9i.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp87b9zlyl.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp87b9zlyl.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp87b9zlyl.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ []\n    for x in [10, 15, 20, 25]:\n        differences.append(abs(x - number))\n\
    \    return min(differences)\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcs6c1te3.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpcs6c1te3.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpcs6c1te3.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppsuevufr.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmppsuevufr.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmppsuevufr.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaw5ziw5h.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpaw5ziw5h.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpaw5ziw5h.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ []\n    for value in range(-10, 10):\n        differences.append(abs(value -\
    \ number))\n    return min(differences)\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2kks7iot.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp2kks7iot.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2kks7iot.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptmdncg1c.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptmdncg1c.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmptmdncg1c.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8v6mstlb.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp8v6mstlb.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp8v6mstlb.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ef5w7xq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5ef5w7xq.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp5ef5w7xq.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    closest_integer\
    \ = int(round(number))\n    if abs(closest_integer - number) < abs(closest_integer\
    \ - number + 1):\n        closest_integer -= 1\n    return closest_integer\n\n\
    \ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88qkcyil.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp88qkcyil.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp88qkcyil.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_cp_t0l0.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_cp_t0l0.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_cp_t0l0.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    closest_integer\
    \ = int(round(number))\n    if closest_integer == number:\n        closest_integer\
    \ = int(round(number - 1))\n    return closest_integer\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4xovaj64.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp4xovaj64.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp4xovaj64.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpew881qdv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpew881qdv.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpew881qdv.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    if number ==\
    \ int(number):\n        return int(number)\n    differences = [abs(number - int(number))\
    \ for number in str(number)]\n    return int(min(differences, key=lambda difference:\
    \ difference))\n\n\ndef check(candidate):\n    assert candidate('10') == 10\n\
    \    assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n  \
    \  assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n\
    \    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqrrvegls.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpqrrvegls.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpqrrvegls.py\", line\
    \ 28, in check\n    assert candidate('14.5') == 15\n  File \"/tmp/tmpqrrvegls.py\"\
    , line 22, in closest_integer\n    differences = [abs(number - int(number)) for\
    \ number in str(number)]\n  File \"/tmp/tmpqrrvegls.py\", line 22, in <listcomp>\n\
    \    differences = [abs(number - int(number)) for number in str(number)]\nTypeError:\
    \ unsupported operand type(s) for -: 'str' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference <= 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpof0sai0v.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpof0sai0v.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpof0sai0v.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ []\n    for x in range(-10, 10):\n        differences.append(abs(x - number))\n\
    \    return min(differences)\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzdv6f3wn.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzdv6f3wn.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpzdv6f3wn.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpheezlk3w.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpheezlk3w.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpheezlk3w.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppzpfbktx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmppzpfbktx.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmppzpfbktx.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptv83peom.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptv83peom.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmptv83peom.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    if number % 1\
    \ == 0:\n        return int(number)\n    else:\n        return int(round(number))\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2dd0579l.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp2dd0579l.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2dd0579l.py\", line\
    \ 28, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu2mhivsy.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpu2mhivsy.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpu2mhivsy.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6pu7_9pe.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp6pu7_9pe.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp6pu7_9pe.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference <= 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw_9q1v6v.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpw_9q1v6v.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpw_9q1v6v.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ []\n    for x in range(-10, 10):\n        differences.append(abs(x - number))\n\
    \    return min(differences)\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwcelwuo1.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpwcelwuo1.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwcelwuo1.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    if number % 1\
    \ == 0:\n        return int(number)\n    else:\n        return round(number)\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3p6rmzdd.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3p6rmzdd.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp3p6rmzdd.py\", line\
    \ 28, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwcb8ja7l.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwcb8ja7l.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwcb8ja7l.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    closest_integer\
    \ = int(number)\n    if closest_integer == number:\n        return int(number)\n\
    \    elif closest_integer > number:\n        return closest_integer\n    else:\n\
    \        return closest_integer - 1\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxathtic7.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpxathtic7.py\", line 37,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpxathtic7.py\", line\
    \ 31, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_79v181c.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_79v181c.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_79v181c.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu3uanu9b.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpu3uanu9b.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpu3uanu9b.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5xvfnrj5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5xvfnrj5.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp5xvfnrj5.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ []\n    for x in range(-10, 10):\n        differences.append(abs(x - number))\n\
    \    return min(differences)\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ss2rja9.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp6ss2rja9.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp6ss2rja9.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnh_vc4ib.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpnh_vc4ib.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpnh_vc4ib.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ []\n    for n in range(1, 10):\n        differences.append(abs(number - n))\n\
    \    return max(differences)\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6qzyo63b.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp6qzyo63b.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp6qzyo63b.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4g6fqhq_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4g6fqhq_.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp4g6fqhq_.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoghnuiun.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpoghnuiun.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpoghnuiun.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp01_c15p4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp01_c15p4.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp01_c15p4.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    closest_integer\
    \ = int(round(number))\n    if abs(number - closest_integer) < abs(number - number\
    \ % 1):\n        closest_integer = int(round(closest_integer))\n    return closest_integer\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfq4gzcnm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpfq4gzcnm.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpfq4gzcnm.py\", line\
    \ 28, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbcw7aoif.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpbcw7aoif.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpbcw7aoif.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    if number % 1\
    \ != 0:\n        raise ValueError(\"Value must be a whole number\")\n    if number\
    \ == int(number):\n        return int(number)\n    differences = [abs(number -\
    \ int(number)) for number in str(number)]\n    return int(min(differences)) if\
    \ differences.count(min(differences)) == 1 else int(max(differences))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1364cy46.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp1364cy46.py\", line 36,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1364cy46.py\", line\
    \ 30, in check\n    assert candidate('14.5') == 15\n  File \"/tmp/tmp1364cy46.py\"\
    , line 21, in closest_integer\n    raise ValueError(\"Value must be a whole number\"\
    )\nValueError: Value must be a whole number\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    if number % 1\
    \ != 0:\n        raise ValueError(\"The given value is not a number.\")\n\n  \
    \  differences = []\n    for x in range(1, 10):\n        differences.append(abs(x\
    \ - number))\n\n    return min(differences)\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp85xxgk_e.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp85xxgk_e.py\", line 38,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp85xxgk_e.py\", line\
    \ 31, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplsb5u_71.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmplsb5u_71.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmplsb5u_71.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpizgx28dk.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpizgx28dk.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpizgx28dk.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference <= 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa3p0ezww.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpa3p0ezww.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpa3p0ezww.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3gga86tq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3gga86tq.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp3gga86tq.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbojal24k.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpbojal24k.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpbojal24k.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppo9_hqof.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmppo9_hqof.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmppo9_hqof.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ []\n    for x in range(1, 10):\n        differences.append(abs(x - number))\n\
    \    return min(differences)\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp35mfvwkk.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp35mfvwkk.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp35mfvwkk.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ [abs(number - int(number)) for number in map(int, value.split(\".\"))]\n   \
    \ return max(differences)\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgxs5y1zy.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpgxs5y1zy.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpgxs5y1zy.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    if number ==\
    \ int(number):\n        return int(number)\n    difference = abs(number - int(number))\n\
    \    if difference <= 0.5:\n        return int(number)\n    else:\n        return\
    \ int(number) + 1\n\n\ndef check(candidate):\n    assert candidate('10') == 10\n\
    \    assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n  \
    \  assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n\
    \    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkgai53r6.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpkgai53r6.py\", line 37,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpkgai53r6.py\", line\
    \ 31, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjr1ckwpy.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpjr1ckwpy.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpjr1ckwpy.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps590vh0f.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmps590vh0f.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmps590vh0f.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppd15dcph.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmppd15dcph.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmppd15dcph.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpppi0d6mr.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpppi0d6mr.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpppi0d6mr.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxvg1ocp5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxvg1ocp5.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpxvg1ocp5.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcj6ewa8l.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpcj6ewa8l.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpcj6ewa8l.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphpdnk2wc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmphpdnk2wc.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmphpdnk2wc.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    diff1 = abs(number\
    \ - int(number))\n    diff2 = abs(number - int(-number))\n    if diff1 < diff2:\n\
    \        return int(number)\n    else:\n        return int(-number)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88cnjokj.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp88cnjokj.py\", line 36,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp88cnjokj.py\", line\
    \ 30, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyeyw7tk9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpyeyw7tk9.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpyeyw7tk9.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoi5wbazo.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpoi5wbazo.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpoi5wbazo.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphj9coi67.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmphj9coi67.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmphj9coi67.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    closest_integer\
    \ = int(number + 0.5)\n    if abs(closest_integer - number) < abs(closest_integer\
    \ - number + 0.5):\n        closest_integer = int(number - 0.5)\n    return closest_integer\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv0jp5b_p.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpv0jp5b_p.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpv0jp5b_p.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfauoja99.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfauoja99.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpfauoja99.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7fywwyth.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7fywwyth.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp7fywwyth.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ []\n    for x in range(1, 10):\n        differences.append(abs(x - number))\n\
    \    return differences.index(min(differences)) + 1\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv9wp9axd.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpv9wp9axd.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpv9wp9axd.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaegj3wo.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpbaegj3wo.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpbaegj3wo.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpof3l6_hj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpof3l6_hj.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpof3l6_hj.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    closest_integer\
    \ = int(round(number))\n    if closest_integer == number:\n        return closest_integer\n\
    \    return closest_integer\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphhzwiq2p.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphhzwiq2p.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmphhzwiq2p.py\", line\
    \ 28, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp33p4yfk9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp33p4yfk9.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp33p4yfk9.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    if number ==\
    \ int(number):\n        return int(number)\n    if number % 1 == 0:\n        return\
    \ int(number)\n    closest_integer = int(number)\n    difference = abs(closest_integer\
    \ - number)\n    if difference < 0.5:\n        return closest_integer\n    else:\n\
    \        return closest_integer - 1\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprxdyk4iz.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmprxdyk4iz.py\", line 40,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmprxdyk4iz.py\", line\
    \ 34, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp40hf0msn.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp40hf0msn.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp40hf0msn.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3z5jx4ck.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3z5jx4ck.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp3z5jx4ck.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoxhj5veh.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpoxhj5veh.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpoxhj5veh.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ []\n    for x in range(1, 10):\n        differences.append(abs(x - number))\n\
    \    return min(differences)\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd3k42ttm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpd3k42ttm.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpd3k42ttm.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    if number ==\
    \ int(number):\n        return int(number)\n    differences = [abs(number - int(number))\
    \ for number in str(number)]\n    return int(min(differences)) if differences\
    \ else None\n\n\ndef check(candidate):\n    assert candidate('10') == 10\n   \
    \ assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n    assert\
    \ candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n\
    \    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvt7lbw5j.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpvt7lbw5j.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpvt7lbw5j.py\", line\
    \ 28, in check\n    assert candidate('14.5') == 15\n  File \"/tmp/tmpvt7lbw5j.py\"\
    , line 22, in closest_integer\n    differences = [abs(number - int(number)) for\
    \ number in str(number)]\n  File \"/tmp/tmpvt7lbw5j.py\", line 22, in <listcomp>\n\
    \    differences = [abs(number - int(number)) for number in str(number)]\nTypeError:\
    \ unsupported operand type(s) for -: 'str' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ [abs(number - int(number)) for number in str(number)]\n    return int(min(differences))\
    \ if differences else None\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6h0etoeh.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6h0etoeh.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp6h0etoeh.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmp6h0etoeh.py\"\
    , line 20, in closest_integer\n    differences = [abs(number - int(number)) for\
    \ number in str(number)]\n  File \"/tmp/tmp6h0etoeh.py\", line 20, in <listcomp>\n\
    \    differences = [abs(number - int(number)) for number in str(number)]\nTypeError:\
    \ unsupported operand type(s) for -: 'str' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxk1ky1r8.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxk1ky1r8.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpxk1ky1r8.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ [abs(number - int(number)) for number in sorted([int(number) for number in str(number)])]\n\
    \    return differences.index(min(differences))\n\n\ndef check(candidate):\n \
    \   assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprwmqvabn.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmprwmqvabn.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmprwmqvabn.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmprwmqvabn.py\"\
    , line 20, in closest_integer\n    differences = [abs(number - int(number)) for\
    \ number in sorted([int(number) for number in str(number)])]\n  File \"/tmp/tmprwmqvabn.py\"\
    , line 20, in <listcomp>\n    differences = [abs(number - int(number)) for number\
    \ in sorted([int(number) for number in str(number)])]\nValueError: invalid literal\
    \ for int() with base 10: '.'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf95cg7fg.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpf95cg7fg.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpf95cg7fg.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa2nnhd_7.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpa2nnhd_7.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpa2nnhd_7.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyj9stci6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpyj9stci6.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpyj9stci6.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp49ucudm6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp49ucudm6.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp49ucudm6.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9v3zc6qj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp9v3zc6qj.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp9v3zc6qj.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxuzhdqd1.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxuzhdqd1.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpxuzhdqd1.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp41xuz2wt.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp41xuz2wt.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp41xuz2wt.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    closest_integer\
    \ = int(round(number))\n    if abs(number - closest_integer) < abs(number - number\
    \ % 1):\n        closest_integer = int(round(closest_integer))\n    return closest_integer\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1y9o3841.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1y9o3841.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1y9o3841.py\", line\
    \ 28, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvxo7af14.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpvxo7af14.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpvxo7af14.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp263pnhm6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp263pnhm6.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp263pnhm6.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wtn5_0d.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4wtn5_0d.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp4wtn5_0d.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ []\n    for n in range(1, 10):\n        differences.append(abs(number - n))\n\
    \    return max(differences)\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1apou53n.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1apou53n.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1apou53n.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ [abs(number - int(number)) for number in sorted([int(number) for number in str(number)])]\n\
    \    return differences.index(max(differences)) if differences else None\n\n\n\
    def check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsem_1r5j.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpsem_1r5j.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpsem_1r5j.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmpsem_1r5j.py\"\
    , line 20, in closest_integer\n    differences = [abs(number - int(number)) for\
    \ number in sorted([int(number) for number in str(number)])]\n  File \"/tmp/tmpsem_1r5j.py\"\
    , line 20, in <listcomp>\n    differences = [abs(number - int(number)) for number\
    \ in sorted([int(number) for number in str(number)])]\nValueError: invalid literal\
    \ for int() with base 10: '.'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ [abs(number - int(number)) for number in str(number)]\n    return int(min(differences))\
    \ if differences else None\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx190jzq_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpx190jzq_.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpx190jzq_.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmpx190jzq_.py\"\
    , line 20, in closest_integer\n    differences = [abs(number - int(number)) for\
    \ number in str(number)]\n  File \"/tmp/tmpx190jzq_.py\", line 20, in <listcomp>\n\
    \    differences = [abs(number - int(number)) for number in str(number)]\nTypeError:\
    \ unsupported operand type(s) for -: 'str' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    if number ==\
    \ int(number):\n        return int(number)\n    difference = abs(number - int(number))\n\
    \    if difference < 0.5:\n        return int(number)\n    else:\n        return\
    \ int(number) + 1\n\n\ndef check(candidate):\n    assert candidate('10') == 10\n\
    \    assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n  \
    \  assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n\
    \    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp030swi75.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp030swi75.py\", line 37,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp030swi75.py\", line\
    \ 32, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyzenkg64.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpyzenkg64.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpyzenkg64.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3yehtcso.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3yehtcso.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp3yehtcso.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ [abs(number - int(number)) for number in numbers]\n    return min(differences)\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxn1_cfyk.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpxn1_cfyk.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpxn1_cfyk.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmpxn1_cfyk.py\"\
    , line 20, in closest_integer\n    differences = [abs(number - int(number)) for\
    \ number in numbers]\nNameError: name 'numbers' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference <= 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzx2cultn.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpzx2cultn.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpzx2cultn.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb3pqkzgy.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpb3pqkzgy.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpb3pqkzgy.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0t14jayc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp0t14jayc.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp0t14jayc.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ [abs(number - int(number)) for number in [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\"]]\n    return differences.index(min(differences))\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsumfpzes.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpsumfpzes.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpsumfpzes.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmpsumfpzes.py\"\
    , line 20, in closest_integer\n    differences = [abs(number - int(number)) for\
    \ number in [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    10\"]]\n  File \"/tmp/tmpsumfpzes.py\", line 20, in <listcomp>\n    differences\
    \ = [abs(number - int(number)) for number in [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\"]]\nTypeError: unsupported operand type(s)\
    \ for -: 'str' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    diff = (number\
    \ - int(number))\n    if diff > 0:\n        return int(number)\n    else:\n  \
    \      return int(number) + 1\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp78rq0apa.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp78rq0apa.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp78rq0apa.py\", line\
    \ 28, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7kahr50e.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7kahr50e.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp7kahr50e.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    closest_integer\
    \ = int(round(number))\n    if closest_integer == number:\n        return closest_integer\n\
    \    else:\n        return closest_integer\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1cburd1h.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1cburd1h.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1cburd1h.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ []\n    for x in range(1, int(number) + 1):\n        differences.append(abs(x\
    \ - number))\n    return min(differences)\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8u218quz.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8u218quz.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp8u218quz.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference <= 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprkz7hmhg.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmprkz7hmhg.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmprkz7hmhg.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj4vly3ne.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpj4vly3ne.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpj4vly3ne.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3hd40v6k.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3hd40v6k.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp3hd40v6k.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe20vlsqj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpe20vlsqj.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpe20vlsqj.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ []\n    for x in range(1, int(number) + 1):\n        differences.append(abs(x\
    \ - number))\n    return min(differences)\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuhrmwgaa.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpuhrmwgaa.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpuhrmwgaa.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rwyl9oh.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp6rwyl9oh.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp6rwyl9oh.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ [abs(round(number - int(number))) for number in values]\n    return min(differences)\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnen4aw4x.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpnen4aw4x.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpnen4aw4x.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmpnen4aw4x.py\"\
    , line 20, in closest_integer\n    differences = [abs(round(number - int(number)))\
    \ for number in values]\nNameError: name 'values' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference <= 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjyy7zp_f.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpjyy7zp_f.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpjyy7zp_f.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ []\n    for x in range(-10, 10):\n        differences.append(abs(x - number))\n\
    \    differences.sort()\n    return differences[-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp52dz_z3l.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp52dz_z3l.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp52dz_z3l.py\", line\
    \ 28, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0rqnu1wn.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp0rqnu1wn.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp0rqnu1wn.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7lnw6aw1.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7lnw6aw1.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp7lnw6aw1.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvuu1yf05.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpvuu1yf05.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpvuu1yf05.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ []\n    for x in range(-10, 10):\n        differences.append(abs(x - number))\n\
    \    differences.sort()\n    return differences[-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzv9tpfmm.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpzv9tpfmm.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpzv9tpfmm.py\", line\
    \ 28, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    if number < 0:\n\
    \        number = -number\n        direction = -1\n    else:\n        direction\
    \ = 1\n    difference = abs(number - int(number))\n    if difference == 0:\n \
    \       return int(number)\n    elif difference < 0.5:\n        return int(number\
    \ + direction)\n    else:\n        return int(number - direction)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk_r1ib3j.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpk_r1ib3j.py\", line 42,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpk_r1ib3j.py\", line\
    \ 36, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl7ja7huk.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpl7ja7huk.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpl7ja7huk.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9plqnbia.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp9plqnbia.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp9plqnbia.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    if number ==\
    \ int(number):\n        return int(number)\n    if number % 1 == 0:\n        return\
    \ int(number)\n    if number % 1 == 1:\n        return int(number - 0.5)\n   \
    \ return int(number - 0.5)\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3hwmcddc.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp3hwmcddc.py\", line 37,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp3hwmcddc.py\", line\
    \ 31, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ [abs(number - int(number)) for number in map(int, value.split(\".\"))]\n   \
    \ return int(min(differences)) if differences else None\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2n6tbt37.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2n6tbt37.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2n6tbt37.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp22oia628.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp22oia628.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp22oia628.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpta9iiorf.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpta9iiorf.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpta9iiorf.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9i66n_z5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp9i66n_z5.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp9i66n_z5.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv96tugca.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpv96tugca.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpv96tugca.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2sic85y.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpo2sic85y.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpo2sic85y.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0m9gje73.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp0m9gje73.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp0m9gje73.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    closest_integer\
    \ = int(number)\n    if abs(closest_integer - number) < abs(closest_integer -\
    \ number + 1):\n        closest_integer -= 1\n    return closest_integer\n\n\n\
    def check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpojy1mnwa.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpojy1mnwa.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpojy1mnwa.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi09u0275.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpi09u0275.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpi09u0275.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_tvjrng9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_tvjrng9.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_tvjrng9.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    if number % 1\
    \ == 0:\n        return int(number)\n    differences = [abs(number - int(number))\
    \ for number in str(number)]\n    return int(min(differences, key=differences.count))\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeo156snp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpeo156snp.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpeo156snp.py\", line\
    \ 28, in check\n    assert candidate('14.5') == 15\n  File \"/tmp/tmpeo156snp.py\"\
    , line 22, in closest_integer\n    differences = [abs(number - int(number)) for\
    \ number in str(number)]\n  File \"/tmp/tmpeo156snp.py\", line 22, in <listcomp>\n\
    \    differences = [abs(number - int(number)) for number in str(number)]\nTypeError:\
    \ unsupported operand type(s) for -: 'str' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    closest_integer\
    \ = int(round(number))\n    if closest_integer == number:\n        return number\n\
    \    else:\n        return closest_integer\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl_85n1nl.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpl_85n1nl.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpl_85n1nl.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp67vs82kj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp67vs82kj.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp67vs82kj.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hopz868.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp9hopz868.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp9hopz868.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyufbken6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpyufbken6.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpyufbken6.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphpyu9eff.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmphpyu9eff.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmphpyu9eff.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplmzt28j7.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmplmzt28j7.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmplmzt28j7.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ [abs(number - int(number)) for number in map(int, value.split(\".\"))]\n   \
    \ return int(max(differences)) if differences else 0\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq721v122.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpq721v122.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpq721v122.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo787_0wd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpo787_0wd.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpo787_0wd.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
