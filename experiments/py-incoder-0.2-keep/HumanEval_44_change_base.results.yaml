name: HumanEval_44_change_base
language: python
results:
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(str(x % base))\n  \
    \      x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(str(x % base))\n  \
    \      x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n   \
    \     x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(abs(x))\n    digits = digits[: base]\n    digits = digits +\
    \ \"0\" * (base - len(digits))\n    return digits\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpopivumbp.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpopivumbp.py\", line 37,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpopivumbp.py\", line\
    \ 23, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    if base == 16:\n        return bin(x)[2:]\n    if base == 8:\n        return\
    \ oct(x)[2:]\n    if base == 10:\n        return str(x)\n    if base == 16:\n\
    \        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n   \
    \ if base == 10:\n        return str(x)\n    if base == 16:\n        return bin(x)[2:]\n\
    \    if base == 8:\n        return oct(x)[2:]\n    if base == 10:\n        return\
    \ str(x)\n    if base == 16:\n        return bin(x)[2:]\n    if base == 8:\n \
    \       return oct(x)[2:]\n    if base == 10:\n        return str(x)\n    if base\
    \ == 16:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n\
    \    if base == 10:\n        return str(x)\n    if base == 16:\n        return\
    \ bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 10:\n\
    \        return str(x)\n    if base == 16:\n        return bin(x)[2:]\n    if\
    \ base == 8:\n        return oct(x)[2:]\n    if base == 10:\n        return str(x)\n\
    \    if base == 16:\n        return bin(x)[2:]\n    if base == 8:\n        return\
    \ oct(x)[2:]\n    if base == 10:\n        return str(x)\n    if base == 16:\n\
    \        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n   \
    \ if base == 10:\n        return str(x)\n    if base == 16:\n        return bin(x)[2:]\n\
    \    if base == 8:\n        return oct(x)[2:]\n    if base == 10:\n        return\
    \ str(x)\n    if base == 16:\n        return bin(x)[2:]\n    if base == 8:\n \
    \       return oct(x)[2:]\n    if base == 10:\n        return str(x)\n    if base\
    \ == 16:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n\
    \    if base == 10:\n        return str(x)\n    if base == 16:\n        return\
    \ bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 10:\n\
    \        return str(x)\n    if base == 16:\n        return bin(x)[2:]\n    if\
    \ base == 8:\n        return oct(x)[2:]\n    if base == 10:\n        return str(x)\n\
    \    if base == 16:\n        return bin(x)[2:]\n    if base == 8:\n        return\
    \ oct(x)[2:]\n    if base == 10:\n        return str(x)\n    if base == 16:\n\
    \        return bin(x)[2:]\n    if base == 8:\n        return oct(x)\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpppm3te97.py\", line\
    \ 127, in <module>\n    test_check()\n  File \"/tmp/tmpppm3te97.py\", line 125,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpppm3te97.py\", line\
    \ 111, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x != 0:\n        digits.append(x % base)\n        x = int(x\
    \ / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(x)\n    digits = digits[::-1]\n    digits = digits[:base]\n\
    \    digits = digits + digits[:base]\n    digits = digits[::-1]\n    return digits\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpss_b7r3x.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpss_b7r3x.py\", line 39,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpss_b7r3x.py\", line\
    \ 25, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base {base} is not in range [2, 36]\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(x)\n    digits = digits[: base]\n    digits = digits + \"0\"\
    \ * (base - len(digits))\n    return digits\n\n\ndef check(candidate):\n    assert\
    \ candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234,\
    \ 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5a0d2g1.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpa5a0d2g1.py\", line 37,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpa5a0d2g1.py\", line\
    \ 23, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n   \
    \     x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(str(x % base))\n  \
    \      x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\
    \ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base {base} is not in range [2, 36]\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(x)\n    digits = digits[: base]\n    digits = digits + \"0\"\
    \ * (base - len(digits))\n    return digits\n\n\ndef check(candidate):\n    assert\
    \ candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234,\
    \ 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqesmpk03.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpqesmpk03.py\", line 37,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpqesmpk03.py\", line\
    \ 23, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[len(digits) - 1] == '0':\n\
    \        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative\
    \ numbers not supported\")\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = str(x)\n    if digits[len(digits)\
    \ - 1] == \"0\":\n        digits = digits[:-1]\n    return f\"{int(digits, base)}{base}\"\
    \n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm731gg6q.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpm731gg6q.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpm731gg6q.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\n  File \"/tmp/tmpm731gg6q.py\"\
    , line 17, in change_base\n    return f\"{int(digits, base)}{base}\"\nValueError:\
    \ invalid literal for int() with base 3: '8'\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(abs(x))\n    digits = digits[::-1]\n    digits = digits.replace('0',\
    \ '')\n    digits = digits.replace('1', '')\n    digits = digits.replace('2',\
    \ '')\n    digits = digits.replace('3', '')\n    digits = digits.replace('4',\
    \ '')\n    digits = digits.replace('5', '')\n    digits = digits.replace('6',\
    \ '')\n    digits = digits.replace('7', '')\n    digits = digits.replace('8',\
    \ '')\n    digits = digits.replace('9', '')\n    digits = digits.replace(' ',\
    \ '')\n    digits = digits.replace(',', '')\n    digits = digits.replace('.',\
    \ '')\n    digits = digits.replace('+', '')\n    digits = digits.replace('*',\
    \ '')\n    digits = digits.replace('^', '')\n    digits = digits.replace('_',\
    \ '')\n    digits = digits.replace('(', '')\n    digits = digits.replace(')',\
    \ '')\n    digits = digits.replace('+', '')\n    digits = digits.replace('*',\
    \ '')\n    digits = digits.replace('^', '')\n    digits = digits.replace('_',\
    \ '')\n    digits = digits.replace('(', '')\n    digits = digits.replace(')',\
    \ '')\n    digits = digits.replace('+', '')\n    digits = digits.replace('*',\
    \ '')\n    digits = digits.replace('^', '')\n    digits = digits.replace('_',\
    \ '')\n    digits = digits.replace('(', '')\n    digits = digits.replace(')',\
    \ '')\n    digits = digits.replace('+', '')\n    digits = digits.replace('*',\
    \ '')\n    digits = digits.replace('^', '')\n    digits = digits.replace('_',\
    \ '')\n    digits = digits.replace('(', '')\n    digits = digits.replace(')',\
    \ '')\n    digits = digits.replace('+', '')\n    digits = digits.replace('*',\
    \ '')\n    digits = digits.replace('^', '')\n    digits = digits.replace('_',\
    \ '')\n    digits = digits.replace('(', '')\n    digits = digits.replace(')',\
    \ '')\n    digits = digits.replace('+', '')\n    digits = digits.replace('*',\
    \ '')\n    digits = digits.replace('^', '')\n    digits = digits.replace('_',\
    \ '')\n    digits = digits.replace('(', '')\n    digits = digits.replace(')',\
    \ '')\n    digits = digits.replace('+', '')\n    digits = digits.replace('*',\
    \ '')\n    digits = digits.replace('^', '')\n    digits = digits.replace('_',\
    \ '')\n    digits = digits.replace('(', '')\n    digits = digits.replace(')',\
    \ '')\n    digits = digits.replace('+', '')\n    digits = digits.replace('*',\
    \ '')\n    digits = digits.replace('^', '')\n    digits = digits.replace('_',\
    \ '')\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert\
    \ candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert\
    \ candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert\
    \ candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3,\
    \ 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) ==\
    \ '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\n\
    def test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnrqwaqyw.py\", line\
    \ 95, in <module>\n    test_check()\n  File \"/tmp/tmpnrqwaqyw.py\", line 93,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpnrqwaqyw.py\", line\
    \ 79, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    if digits[-1] == '0':\n        digits =\
    \ digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[len(digits) - 1] == '0':\n\
    \        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError\n\
    \    if base == 10:\n        return str(x)\n    digits = str(x)\n    digits =\
    \ digits[::-1]\n    digits = digits[:base]\n    digits = digits + digits[base:]\n\
    \    return digits\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdbxsk4bw.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpdbxsk4bw.py\", line 38,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpdbxsk4bw.py\", line\
    \ 24, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base {base} is out of range\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    digits.reverse()\n    return ''.join(digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n   \
    \     x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(abs(x))\n    digits = digits[: base]\n    digits = digits +\
    \ \"0\" * (base - len(digits))\n    return digits\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdydswb5s.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpdydswb5s.py\", line 37,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpdydswb5s.py\", line\
    \ 23, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('Base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = x // base\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return str(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk87v_b7n.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpk87v_b7n.py\", line 39,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpk87v_b7n.py\", line\
    \ 25, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = x // base\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base {base} is out of range\")\n    if base == 10:\n        return str(x)\n  \
    \  digits = []\n    while x > 0:\n        digits.append(str(x % base))\n     \
    \   x = x // base\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError\n\
    \    if base == 10:\n        return str(x)\n    digits = []\n    while x:\n  \
    \      digits.append(str(x % base))\n        x = int(x / base)\n    if digits[-1]\
    \ == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError\n\
    \    digits = [int(i) for i in str(x)]\n    digits = [digits[i] if digits[i] >=\
    \ base else digits[i] + (base - digits[i]) for i in range(len(digits))]\n    return\
    \ str(sum(digits))\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0w8kr50n.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp0w8kr50n.py\", line 34,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp0w8kr50n.py\", line\
    \ 20, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(x)\n    digits = digits[: base]\n    digits = digits + \"0\"\
    \ * (base - len(digits))\n    return digits\n\n\ndef check(candidate):\n    assert\
    \ candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234,\
    \ 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphaecgbbx.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmphaecgbbx.py\", line 37,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmphaecgbbx.py\", line\
    \ 23, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = [int(i) for i in str(x)]\n    digits[base] = int(digits[base]) +\
    \ 1\n    return str(digits)\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpknn1px6k.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpknn1px6k.py\", line 36,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpknn1px6k.py\", line\
    \ 22, in check\n    assert candidate(8, 3) == '22'\n  File \"/tmp/tmpknn1px6k.py\"\
    , line 17, in change_base\n    digits[base] = int(digits[base]) + 1\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = str(x)\n    return digits[len(digits)\
    \ - base:]\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n  \
    \  assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps4bb5nxl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmps4bb5nxl.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmps4bb5nxl.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError\n\
    \    if base == 10:\n        return str(x)\n    digits = []\n    while x:\n  \
    \      digits.append(str(x % base))\n        x = x // base\n    if digits[-1]\
    \ == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(abs(x))\n    digits = digits[: base]\n    digits = digits +\
    \ \"0\" * (base - len(digits))\n    return digits\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_o2byyz.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp8_o2byyz.py\", line 37,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp8_o2byyz.py\", line\
    \ 23, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(x)\n    digits = digits[: base]\n    digits = digits + \"0\"\
    \ * (base - len(digits))\n    return digits\n\n\ndef check(candidate):\n    assert\
    \ candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234,\
    \ 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_yn5m48y.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp_yn5m48y.py\", line 37,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp_yn5m48y.py\", line\
    \ 23, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(str(x % base))\n  \
    \      x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base must be between 2 and 36\")\n    digits = str(x)\n    digits = digits[: base]\
    \ + str(base) + digits[base:]\n    return digits\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7noykk7q.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp7noykk7q.py\", line 34,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp7noykk7q.py\", line\
    \ 20, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(abs(x))\n    digits = digits[: base]\n    digits = digits +\
    \ \"0\" * (base - len(digits))\n    return digits\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp64byosrn.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp64byosrn.py\", line 37,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp64byosrn.py\", line\
    \ 23, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = x // base\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(str(x % base))\n  \
    \      x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\
    \ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative\
    \ numbers are not allowed\")\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(abs(x))\n    digits = digits[::-1]\n    digits = digits.replace('0',\
    \ '')\n    digits = digits.replace('1', '')\n    digits = digits.replace('2',\
    \ '')\n    digits = digits.replace('3', '')\n    digits = digits.replace('4',\
    \ '')\n    digits = digits.replace('5', '')\n    digits = digits.replace('6',\
    \ '')\n    digits = digits.replace('7', '')\n    digits = digits.replace('8',\
    \ '')\n    digits = digits.replace('9', '')\n    digits = digits.replace(' ',\
    \ '')\n    digits = digits.replace(',', '')\n    digits = digits.replace('+',\
    \ '')\n    digits = digits.replace('-', '')\n    digits = digits.replace('.',\
    \ '')\n    digits = digits.replace('*', '')\n    digits = digits.replace('^',\
    \ '')\n    digits = digits.replace('(', '')\n    digits = digits.replace(')',\
    \ '')\n    digits = digits.replace(':', '')\n    digits = digits.replace(';',\
    \ '')\n    digits = digits.replace('!', '')\n    digits = digits.replace('?',\
    \ '')\n    digits = digits.replace('~', '')\n    digits = digits.replace('!',\
    \ '')\n    digits = digits.replace('@', '')\n    digits = digits.replace('$',\
    \ '')\n    digits = digits.replace('%', '')\n    digits = digits.replace('#',\
    \ '')\n    digits = digits.replace('$', '')\n    digits = digits.replace('%',\
    \ '')\n    digits = digits.replace('&', '')\n    digits = digits.replace('*',\
    \ '')\n    digits = digits.replace('^', '')\n    digits = digits.replace('(',\
    \ '')\n    digits = digits.replace(')', '')\n    digits = digits.replace(':',\
    \ '')\n    digits = digits.replace(';', '')\n    digits = digits.replace('!',\
    \ '')\n    digits = digits.replace('?', '')\n    digits = digits.replace('~',\
    \ '')\n    digits = digits.replace('!', '')\n    digits = digits.replace('@',\
    \ '')\n    digits = digits.replace('$', '')\n    digits = digits.replace('%',\
    \ '')\n    digits = digits.replace('#', '')\n    digits = digits.replace('$',\
    \ '')\n    digits = digits.replace('%', '')\n    digits = digits.replace('&',\
    \ '')\n    digits = digits.replace('*', '')\n    digits = digits.replace('^',\
    \ '')\n    digits = digits.replace('(', '')\n    digits = digits.replace(')',\
    \ '')\n    digits = digits.replace(':', '')\n    digits = digits.replace(';',\
    \ '')\n    digits = digits.replace('!', '')\n    digits = digits.replace('?',\
    \ '')\n    digits = digits.replace('~', '')\n    digits = digits.replace('!',\
    \ '')\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert\
    \ candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert\
    \ candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert\
    \ candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3,\
    \ 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) ==\
    \ '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\n\
    def test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1k1iyxns.py\", line\
    \ 95, in <module>\n    test_check()\n  File \"/tmp/tmp1k1iyxns.py\", line 93,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp1k1iyxns.py\", line\
    \ 79, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x\
    \ = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('Base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('Base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = x // base\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[len(digits) - 1] == '0':\n\
    \        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = str(x)\n    digits = digits[: base]\
    \ + str(base) + digits[base:]\n    return digits\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx2ovy3u4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpx2ovy3u4.py\", line 34,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpx2ovy3u4.py\", line\
    \ 20, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = str(x)\n    return digits[len(digits)\
    \ - base:]\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n  \
    \  assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp282nusun.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp282nusun.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp282nusun.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base {base} is out of range\")\n    if base == 10:\n        return str(x)\n  \
    \  digits = []\n    while x:\n        digits.append(str(x % base))\n        x\
    \ = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n \
    \   return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    Base must be between 2 and 36.\")\n    if base == 10:\n        return str(x)\n\
    \    if base == 16:\n        return bin(x)[2:]\n    if base == 8:\n        return\
    \ oct(x)[2:]\n    if base == 2:\n        return str(x).zfill(base)\n    if base\
    \ == 36:\n        return str(x)[::-1]\n    raise ValueError(f\"Base must be between\
    \ 2 and 36.\")\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_long9zg.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp_long9zg.py\", line 42,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp_long9zg.py\", line\
    \ 28, in check\n    assert candidate(8, 3) == '22'\n  File \"/tmp/tmp_long9zg.py\"\
    , line 24, in change_base\n    raise ValueError(f\"Base must be between 2 and\
    \ 36.\")\nValueError: Base must be between 2 and 36.\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError\n\
    \    digits = [int(i) for i in str(x)]\n    digits = [digit * base + digits[digit]\
    \ for digit in digits]\n    return str(sum(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_oxml_ry.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_oxml_ry.py\", line 34,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp_oxml_ry.py\", line\
    \ 20, in check\n    assert candidate(8, 3) == '22'\n  File \"/tmp/tmp_oxml_ry.py\"\
    , line 15, in change_base\n    digits = [digit * base + digits[digit] for digit\
    \ in digits]\n  File \"/tmp/tmp_oxml_ry.py\", line 15, in <listcomp>\n    digits\
    \ = [digit * base + digits[digit] for digit in digits]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(str(x % base))\n  \
    \      x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\
    \ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n   \
    \     x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if x < 0:\n        sign = -1\n        x\
    \ = abs(x)\n    else:\n        sign = 1\n    x = abs(x)\n    if base == 10:\n\
    \        if x % 10 == 0:\n            return str(x)\n        else:\n         \
    \   return \"0\" + str(x)\n    if base == 16:\n        if x % 10 == 0:\n     \
    \       return str(x)\n        else:\n            return \"0\" + str(x)\n    if\
    \ base == 8:\n        if x % 10 == 0:\n            return str(x)\n        else:\n\
    \            return \"0\" + str(x)\n    if base == 16:\n        if x % 10 == 0:\n\
    \            return str(x)\n        else:\n            return \"0\" + str(x)\n\
    \    if base == 10:\n        if x % 10 == 0:\n            return str(x)\n    \
    \    else:\n            return \"0\" + str(x)\n    if base == 16:\n        if\
    \ x % 10 == 0:\n            return str(x)\n        else:\n            return \"\
    0\" + str(x)\n    if base == 8:\n        if x % 10 == 0:\n            return str(x)\n\
    \        else:\n            return \"0\" + str(x)\n    if base == 10:\n      \
    \  if x % 10 == 0:\n            return str(x)\n        else:\n            return\
    \ \"0\" + str(x)\n    if base == 16:\n        if x % 10 == 0:\n            return\
    \ str(x)\n        else:\n            return \"0\" + str(x)\n    if base == 8:\n\
    \        if x % 10 == 0:\n            return str(x)\n        else:\n         \
    \   return \"0\" + str(x)\n    if base == 10:\n        if x % 10 == 0:\n     \
    \       return str(x)\n        else:\n            return \"0\" + str(x)\n    if\
    \ base == 16:\n        if x % 10 == 0:\n            return str(x)\n        else:\n\
    \            return \"0\" + str(x)\n    if base == 8:\n        if x % 10 == 0:\n\
    \            return str(x)\n        else:\n            return \"0\" + str(x)\n\
    \    if base == 10:\n        if x % 10 == 0:\n            return str(x)\n    \
    \    else:\n            return \"0\" + str(x)\n    if base == 16:\n        if\
    \ x % 10 == 0:\n            return str(x)\n        else:\n            return \"\
    0\" + str(x)\n    if base == 8:\n        if x % 10 == 0:\n            return str(x)\n\
    \        else:\n            return \"0\" + str(x)\n    if base == 10:\n      \
    \  if x % 10 == 0:\n            return str(x)\n        else:\n            return\
    \ \"0\" + str(x)\n    if base == 16:\n        if x % 10 == 0:\n            return\
    \ str(x)\n        else:\n            return \"0\" + str(x)\n    if base == 8:\n\
    \        if x % 10 == 0:\n            return str(x)\n        else:\n         \
    \   return \"0\" + str(x)\n    if base == 10:\n        if x % 10 == 0:\n     \
    \       return str(x)\n        else:\n            return \"0\" + str(x)\n    if\
    \ base == 16:\n        if x % 10 == 0:\n            return str(x)\n        else:\n\
    \            return \"0\" + str(x)\n    if base == 8:\n        if x % 10 == 0:\n\
    \ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpx5l9oluq.py\", line 128\n    def check(candidate):\n \
    \   ^\nIndentationError: expected an indented block\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('Base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = x // base\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    Invalid base {base}\")\n    if base == 10:\n        return str(x)\n    digits\
    \ = str(x)\n    if base > len(digits):\n        raise ValueError(f\"Invalid base\
    \ {base}\")\n    digits = digits[:base]\n    digits = digits[::-1]\n    digits\
    \ = digits.lstrip(\"0\")\n    digits = digits.rstrip(\"0\")\n    digits = digits.replace(\"\
    0\", \"\")\n    digits = digits.replace(\"1\", \"\")\n    digits = digits.replace(\"\
    2\", \"\")\n    digits = digits.replace(\"3\", \"\")\n    digits = digits.replace(\"\
    4\", \"\")\n    digits = digits.replace(\"5\", \"\")\n    digits = digits.replace(\"\
    6\", \"\")\n    digits = digits.replace(\"7\", \"\")\n    digits = digits.replace(\"\
    8\", \"\")\n    digits = digits.replace(\"9\", \"\")\n    return digits\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2vbnpojj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp2vbnpojj.py\", line 51,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp2vbnpojj.py\", line\
    \ 37, in check\n    assert candidate(8, 3) == '22'\n  File \"/tmp/tmp2vbnpojj.py\"\
    , line 18, in change_base\n    raise ValueError(f\"Invalid base {base}\")\nValueError:\
    \ Invalid base 3\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base {base} is out of range\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x //= base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    digits = str(x)\n    digits = digits[::-1]\n\
    \    digits = digits[:base]\n    digits = digits + digits[base:]\n    return digits\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_msznuu.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmph_msznuu.py\", line 36,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmph_msznuu.py\", line\
    \ 22, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n   \
    \     x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(abs(x))\n    digits = digits[::-1]\n    digits = digits[:base]\n\
    \    digits = digits + digits[base:]\n    return digits\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4g4fbils.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp4g4fbils.py\", line 38,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp4g4fbils.py\", line\
    \ 24, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n   \
    \     x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(str(digit) for digit\
    \ in digits)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x > 0:\n        digits.append(x % base)\n        x = int(x /\
    \ base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n   \
    \     x = x // base\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x != 0:\n        digits.append(x % base)\n        x = int(x\
    \ / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(str(x % base))\n  \
    \      x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\
    \ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    digits = str(x)\n    digits = digits[::-1]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digits = digits[:base] + digits[base:]\n    digits = digits[:base] + digits[base:]\n\
    \    digit\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert\
    \ candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert\
    \ candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert\
    \ candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3,\
    \ 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) ==\
    \ '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\n\
    def test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4rmg_yaa.py\", line\
    \ 74, in <module>\n    test_check()\n  File \"/tmp/tmp4rmg_yaa.py\", line 72,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp4rmg_yaa.py\", line\
    \ 58, in check\n    assert candidate(8, 3) == '22'\n  File \"/tmp/tmp4rmg_yaa.py\"\
    , line 56, in change_base\n    digit\nNameError: name 'digit' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = str(x)\n    return digits[: base]\
    \ + str(base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx5rymnvc.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpx5rymnvc.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpx5rymnvc.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    Invalid base {base}\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    if digits[-1] == '0':\n        digits =\
    \ digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(abs(x))\n    digits = digits[: base]\n    digits = digits +\
    \ \"0\" * (base - len(digits))\n    return digits\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpta4ipw4t.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpta4ipw4t.py\", line 37,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpta4ipw4t.py\", line\
    \ 23, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n   \
    \     x = x // base\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(abs(x))\n    digits = digits[::-1]\n    digits = digits[:base]\n\
    \    digits = digits + digits[base:]\n    return digits\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6mw0r1u1.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp6mw0r1u1.py\", line 38,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp6mw0r1u1.py\", line\
    \ 24, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f'Invalid\
    \ base: {base}')\n    digits = []\n    while x:\n        digits.append(str(x %\
    \ base))\n        x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = str(abs(x))\n    digits = digits[::-1]\n    digits = digits[:base]\n    digits\
    \ = digits + '0' * (base - len(digits))\n    return digits\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8qvvp69o.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8qvvp69o.py\", line 38,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp8qvvp69o.py\", line\
    \ 24, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n   \
    \     x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
