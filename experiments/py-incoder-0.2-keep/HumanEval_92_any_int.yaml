name: HumanEval_92_any_int
language: python
prompt: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
  \ a function that takes 3 numbers.\n    Returns true if one of the numbers is equal\
  \ to the sum of the other two, and all numbers are integers.\n    Returns false\
  \ in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n  \
  \  \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n  \
  \  \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
  \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
  \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
  \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
  \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
  \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
completions: ["    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>", "    \n  \
    \  if type(x) == int or type(y) == int or type(z) == int:\n        return True\n\
    \    else:\n        return False\n    ", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    \n    if type(x) == int or type(y) == int or type(z) == int:\n        return\
    \ True\n    else:\n        return False\n    \n    ", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n", "   \
    \ return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x == y + z and x != 0 and y != 0 and z != 0\n\n", "    \n    if type(x) != int\
    \ or type(y) != int or type(z) != int:\n        return False\n    \n    if x ==\
    \ y and z == x:\n        return True\n    \n    return False\n</cell>\n<cell>",
  "    \n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nCreate a function that\
    \ takes 3 numbers and returns True if they are all positive, and False if they\
    \ are all negative.\n\nExamples\npositive_all(5, 2, 7) \u279E True\npositive_all(3,\
    \ 2, 2) \u279E False\n\nnegative_all(3, -2, 1) \u279E True\nnegative_all(3.6,\
    \ -2.2, 2) \u279E False\nnegative_all(3.6, -2.2, -2) \u279E False\nnegative_all(-3.6,\
    \ -2.2, 2) \u279E False\nnegative_all(-3.6, -2.2, -2) \u279E False\nnegative_all(-3.6,\
    \ -2.2, -2) \u279E False\nnegative_all(-3.6, -2.2, -2) \u279E False\nnegative_all(-3.6,\
    \ -2.2, -2) \u279E False\nnegative_all(-3.6, -2.2, -2) \u279E False\nnegative_all(-3.6,\
    \ -2.2, -2) \u279E False\nnegative_all(-3.6, -2.2, -2) \u279E False\nnegative_all(-3.6,\
    \ -2.2, -2) \u279E False\nnegative_all(-3.6, -2.2, -2) \u279E False\nnegative_all(-3.6,\
    \ -2.2, -2) \u279E False\nnegative_all(-3.6, -2.2, -2) \u279E False\nnegative_all(-3.6,\
    \ -2.2, -2) \u279E False\nnegative_all(-3.6, -2.2, -2) \u279E False\nnegative_all(-3.6,\
    \ -2.2, -2) \u279E False\nnegative_all(-3.6, -2.2, -2) \u279E False\nnegative_all(-3.6,\
    \ -2.2, -2) \u279E False\nnegative_all(-3.6, -2.2, -2) \u279E False\nnegative_all(-3.6,\
    \ -2.2, -2) \u279E False\nnegative_all(-3.6, -2.2, -2) \u279E False\nnegative_all(-3.6,\
    \ -2.2, -2) \u279E False\nnegative_all(-3.6, -2.2, -2) \u279E False\nnegative_all(-3.6,\
    \ -2.2, -2) \u279E", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x == y + z and x != y and x != z and y != z and x != int(x) and y != int(y)\
    \ and z != int(z)\n\n", "    \n    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    \n    if type(x) != int or type(y) !=\
    \ int or type(z) != int:\n        return False\n    \n    if x == y + z:\n   \
    \     return True\n    else:\n        return False\n</cell>\n<cell>", "    \n\
    \    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nExercise 2\nCreate a function that takes 3 numbers and\
    \ returns True if they are all integers, and False if any of them are not integers.\n\
    Use this function to create a function that takes 3 numbers and returns True if\
    \ they are all integers, and False if any of them are not integers.\nUse this\
    \ function to create a function that takes 3 numbers and returns True if they\
    \ are all integers, and False if any of them are not integers.\nUse this function\
    \ to create a function that takes 3 numbers and returns True if they are all integers,\
    \ and False if any of them are not integers.\nUse this function to create a function\
    \ that takes 3 numbers and returns True if they are all integers, and False if\
    \ any of them are not integers.\nUse this function to create a function that takes\
    \ 3 numbers and returns True if they are all integers, and False if any of them\
    \ are not integers.\nUse this function to create a function that takes 3 numbers\
    \ and returns True if they are all integers, and False if any of them are not\
    \ integers.\nUse this function to create a function that takes 3 numbers and returns\
    \ True if they are all integers, and False if any of them are not integers.\n\
    Use this function to create a function that takes 3 numbers and returns True if\
    \ they are all integers, and False if any of them are not integers.\nUse this\
    \ function to create a function that takes 3 numbers and returns True if they\
    \ are all integers, and False if any of them are not integers.\nUse this function\
    \ to create a function that takes 3 numbers and returns True if they are all integers,\
    \ and False if any of them are not integers.\nUse this function to create a function\
    \ that takes 3 numbers and returns True if they are all integers, and False if\
    \ any of them are not integers.\nUse this function to create a function that takes\
    \ 3 numbers and returns True if they are all integers, and False if any of them\
    \ are not integers.\nUse this function to create a function that takes 3 numbers\
    \ and returns True if they are all integers, and False if any of them are not\
    \ integers.\nUse this function to create a function that takes 3 numbers and returns\
    \ True if they are all integers, and False if any of them are not integers.\n\
    Use this function to create a function that takes 3 numbers and returns True if\
    \ they are all integers, and False if any of them are not integers.\nUse this\
    \ function to create a function that takes 3 numbers and returns True if they\
    \ are all integers, and False if any of them are not integers.\nUse this function\
    \ to create a function that takes 3 numbers and returns True if they are all integers,\
    \ and False if ", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes 3 numbers and returns\
    \ True if they are all positive, and False if they are all negative.\n\nExamples\n\
    positive_all(5, 2, 7) \u279E True\npositive_all(3, 2, 2) \u279E False\n\nnegative_all(3,\
    \ -2, 1) \u279E True\nnegative_all(3.6, -2.2, 2) \u279E False\n\n</text>\n<cell>",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x == y + z\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise: Write a function\
    \ that takes 3 numbers and returns True if all numbers are integers, and False\
    \ otherwise.\n\n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n", " \
    \   return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ 3 numbers and returns True if any of them is equal to the sum of the other two,\
    \ and all numbers are integers.\n\nExamples\nany_int_or_all(5, 2, 7) \u279E True\n\
    any_int_or_all(3, 2, 2) \u279E True\nany_int_or_all(3, -2, 1) \u279E True\nany_int_or_all(3.6,\
    \ -2.2, 2) \u279E True\nany_int_or_all(5, 2, 7.2) \u279E False\nany_int_or_all(3,\
    \ 2, 2.2) \u279E False\nany_int_or_all(3, -2, 1.2) \u279E False\nany_int_or_all(3.6,\
    \ -2.2, 2.2) \u279E False\nany_int_or_all(5, 2, 7.2) \u279E False\nany_int_or_all(3,\
    \ 2, 2.2) \u279E False\nany_int_or_all(3, -2, 1.2) \u279E False\nany_int_or_all(3.6,\
    \ -2.2, 2.2) \u279E False\nany_int_or_all(5, 2, 7.2) \u279E False\nany_int_or_all(3,\
    \ 2, 2.2) \u279E False\nany_int_or_all(3, -2, 1.2) \u279E False\nany_int_or_all(3.6,\
    \ -2.2, 2.2) \u279E False\nany_int_or_all(5, 2, 7.2) \u279E False\nany_int_or_all(3,\
    \ 2, 2.2) \u279E False\nany_int_or_all(3, -2, 1.2) \u279E False\nany_int_or_all(3.6,\
    \ -2.2, 2.2) \u279E False\nany_int_or_all(5, 2, 7.2) \u279E False\nany_int_or_all(3,\
    \ 2, 2.2) \u279E False\nany_int_or_all(3, -2, 1.2) \u279E False\nany_int_or_all(3.6,\
    \ -2.2, 2.2) \u279E False\nany_int_or_all(5, 2, 7.2) \u279E False\nany_int_or_all(3,\
    \ 2, 2.2) \u279E False\nany_int_or_all(3, -2, 1.2) \u279E False\nany_int_or_all(3.6,\
    \ -2.2, 2.2) \u279E False\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>", "    \n    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    \n    if type(x) != int or type(y) != int or type(z)\
    \ != int:\n        return False\n    \n    return x == y + z\n</cell>\n<cell>\n\
    any_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3,\
    \ -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes 3 numbers and returns True if they are all positive,\
    \ and False if they are all negative.\n\nExamples\npositive(7, -2, 5) \u279E True\n\
    positive(7, 2, 5) \u279E False\n\nnegative(7, -2, 5) \u279E False\nnegative(7,\
    \ 2, 5) \u279E True\n\nnegative(7, -2, -5) \u279E True\nnegative(7, 2, -5) \u279E\
    \ False\n\n\n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n", "   \
    \ return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nExercise 3\nCreate a function that takes 3 numbers and\
    \ returns True if all numbers are positive, and False otherwise.\nCreate a function\
    \ that takes 3 numbers and returns True if all numbers are negative, and False\
    \ otherwise.\nCreate a function that takes 3 numbers and returns True if all numbers\
    \ are even, and False otherwise.\nCreate a function that takes 3 numbers and returns\
    \ True if all numbers are odd, and False otherwise.\nCreate a function that takes\
    \ 3 numbers and returns True if all numbers are positive, negative, even, and\
    \ odd, and False otherwise.\nCreate a function that takes 3 numbers and returns\
    \ True if all numbers are positive, negative, even, odd, and zero, and False otherwise.\n\
    Create a function that takes 3 numbers and returns True if all numbers are positive,\
    \ negative, even, odd, zero, and positive, and False otherwise.\nCreate a function\
    \ that takes 3 numbers and returns True if all numbers are positive, negative,\
    \ even, odd, zero, positive, and negative, and False otherwise.\nCreate a function\
    \ that takes 3 numbers and returns True if all numbers are positive, negative,\
    \ even, odd, zero, positive, negative, and zero, and False otherwise.\nCreate\
    \ a function that takes 3 numbers and returns True if all numbers are positive,\
    \ negative, even, odd, zero, positive, negative, zero, and positive, and False\
    \ otherwise.\nCreate a function that takes 3 numbers and returns True if all numbers\
    \ are positive, negative, even, odd, zero, positive, negative, zero, positive,\
    \ and negative, and False otherwise.\nCreate a function that takes 3 numbers and\
    \ returns True if all numbers are positive, negative, even, odd, zero, positive,\
    \ negative, zero, positive, negative, and zero, and True otherwise.\nCreate a\
    \ function that takes 3 numbers and returns True if all numbers are positive,\
    \ negative, even, odd, zero, positive, negative, zero, positive, negative, zero,\
    \ and positive, and True otherwise.\nCreate a function that takes 3 numbers and\
    \ returns True if all numbers are positive, negative, even, odd, zero, positive,\
    \ negative, zero, positive, negative, zero, positive, negative, zero, and positive,\
    \ and negative and False otherwise.\nCreate a function that takes 3 numbers and\
    \ returns True if all numbers are positive, negative, even, odd, zero, positive,\
    \ negative, zero, positive, negative, zero, positive, negative, zero, positive,\
    \ negative", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x == y + z and x != -y\
    \ and x != -z and x != y and x != z\n\n", "    \n    if type(x) != int or type(y)\
    \ != int or type(z) != int:\n        return False\n    \n    if x == y and x ==\
    \ z:\n        return True\n    \n    return False\n</cell>\n<cell>", "    \n \
    \   return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 2\nCreate a function that takes\
    \ 3 numbers and returns True if they are all positive, and False if they are all\
    \ negative.\n\n\n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of words in the string.\n\n\n</text>\n<cell>",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels in it.\n\nExamples\nvowels(\"hello\"\
    ) \u279E 5\nvowels(\"hellooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x == y + z\n\n", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nassert any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert\
    \ any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\n</cell>\n\
    <text>\nProblem 7: Any integers greater than or equal to 10\n\n</text>\n<cell>",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x == y + z\n\n", "    \n \
    \   if type(x) != int or type(y) != int or type(z) != int:\n        return False\n\
    \    \n    if x == y and z == x:\n        return True\n    \n    return False\n\
    </cell>\n<cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x == y + z\n", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise\
    \ 2\nCreate a function that takes 3 numbers and returns True if they are all positive,\
    \ and False if they are all negative.\n\n\n</text>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nExercise 3\nCreate a function that takes 3 numbers and\
    \ returns True if at least one of them is equal to the sum of the other two, and\
    \ all numbers are integers.\n\nExamples\nany_int_or_all(5, 2, 7) \u279E True\n\
    any_int_or_all(3, 2, 2) \u279E False\n\nany_int_or_all(3, -2, 1) \u279E True\n\
    any_int_or_all(3.6, -2.2, 2) \u279E True\n\nany_int_or_all(3.6, -2.2, 2.1) \u279E\
    \ False\nany_int_or_all(3.6, -2.2, 2.2) \u279E False\nany_int_or_all(3.6, -2.2,\
    \ 2.3) \u279E False\nany_int_or_all(3.6, -2.2, 2.4) \u279E False\nany_int_or_all(3.6,\
    \ -2.2, 2.5) \u279E False\nany_int_or_all(3.6, -2.2, 2.6) \u279E False\nany_int_or_all(3.6,\
    \ -2.2, 2.7) \u279E False\nany_int_or_all(3.6, -2.2, 2.8) \u279E False\nany_int_or_all(3.6,\
    \ -2.2, 2.9) \u279E False\nany_int_or_all(3.6, -2.2, 2.10) \u279E False\nany_int_or_all(3.6,\
    \ -2.2, 2.11) \u279E False\nany_int_or_all(3.6, -2.2, 2.12) \u279E False\nany_int_or_all(3.6,\
    \ -2.2, 2.13) \u279E False\nany_int_or_all(3.6, -2.2, 2.14) \u279E False\nany_int_or_all(3.6,\
    \ -2.2, 2.15) \u279E False\nany_int_or_all(3.6, -2.2, 2.16) \u279E False\nany_int_or_all(3.6,\
    \ -2.2, 2.17) \u279E False\nany_int_or_all(3.6, -2.2, 2.18) \u279E False\nany_int_or_all(3.6,\
    \ -2.2, 2.19) \u279E False\nany_int_or_all(3.6, -2.2, 2.20) \u279E False\nany_int_or_all(3.6,\
    \ -2.2, 2.21) \uFFFD", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x == y + z\n\n", "    \n    \n    if type(x)\
    \ != int or type(y) != int or type(z) != int:\n        return False\n    \n  \
    \  if x == y and x == z:\n        return True\n    \n    return False\n</cell>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x == y + z and x >= 0 and x <= z\n\n", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x == y + z\n\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nExercise 4\nWrite a function that takes 3 numbers and returns\
    \ True if any of them is greater than the sum of the other two, and all numbers\
    \ are integers.\nReturn False in any other cases.\nUse any and all to write this\
    \ function.\n\n\n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string and returns the number of vowels contained\
    \ in the string.\nThe vowels are 'a', 'e', 'i', 'o', and 'u'.\nThe function should\
    \ ignore all non-vowel characters.\nThe function should ignore case when comparing\
    \ characters.\nThe function should ignore punctuation when comparing characters.\n\
    The function should ignore case when counting characters.\nThe function should\
    \ ignore case when counting vowels.\nThe function should ignore case when counting\
    \ non-vowels.\nThe function should ignore case when counting vowels and non-vowels.\n\
    The function should ignore case when counting vowels and non-vowels.\nThe function\
    \ should ignore case when counting vowels and non-vowels.\nThe function should\
    \ ignore case when counting vowels and non-vowels.\nThe function should ignore\
    \ case when counting vowels and non-vowels.\nThe function should ignore case when\
    \ counting vowels and non-vowels.\nThe function should ignore case when counting\
    \ vowels and non-vowels.\nThe function should ignore case when counting vowels\
    \ and non-vowels.\nThe function should ignore case when counting vowels and non-vowels.\n\
    The function should ignore case when counting vowels and non-vowels.\nThe function\
    \ should ignore case when counting vowels and non-vowels.\nThe function should\
    \ ignore case when counting vowels and non-vowels.\nThe function should ignore\
    \ case when counting vowels and non-vowels.\nThe function should ignore case when\
    \ counting vowels and non-vowels.\nThe function should ignore case when counting\
    \ vowels and non-vowels.\nThe function should ignore case when counting vowels\
    \ and non-vowels.\nThe function should ignore case when counting vowels and non-vowels.\n\
    The function should ignore case when counting vowels and non-vowels.\nThe function\
    \ should ignore case when counting vowels and non-vowels.\nThe function should\
    \ ignore case when counting vowels and non-vowels.\nThe function should ignore\
    \ case when counting vowels and non-vowels.\nThe function should ignore case when\
    \ counting vowels and non-vowels.\nThe function should ignore case when counting\
    \ vowels and non-vowels.\nThe function should ignore case when counting ", " \
    \   return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ 3 numbers and returns True if any of them is greater than the sum of the other\
    \ two, and all numbers are integers.\n\nExamples\nany_int_greater_than_sum(5,\
    \ 2, 7) \u279E True\n\nany_int_greater_than_sum(3, 2, 2) \u279E False\n\nany_int_greater_than_sum(3,\
    \ -2, 1) \u279E True\n\nany_int_greater_than_sum(3.6, -2.2, 2) \u279E True\n\n\
    any_int_greater_than_sum(5, 2, 3.6) \u279E False\n\nany_int_greater_than_sum(5,\
    \ 2, -3.6) \u279E False\n\nany_int_greater_than_sum(5, 2, 3.6) \u279E False\n\n\
    any_int_greater_than_sum(5, 2, -3.6) \u279E False\n\nany_int_greater_than_sum(5,\
    \ 2, 3.6) \u279E False\n\nany_int_greater_than_sum(5, 2, -3.6) \u279E False\n\n\
    any_int_greater_than_sum(5, 2, 3.6) \u279E False\n\nany_int_greater_than_sum(5,\
    \ 2, -3.6) \u279E False\n\nany_int_greater_than_sum(5, 2, 3.6) \u279E False\n\n\
    any_int_greater_than_sum(5, 2, -3.6) \u279E False\n\nany_int_greater_than_sum(5,\
    \ 2, 3.6) \u279E False\n\nany_int_greater_than_sum(5, 2, -3.6) \u279E False\n\n\
    any_int_greater_than_sum(5, 2, 3.6) \u279E False\n\nany_int_greater_than_sum(5,\
    \ 2, -3.6) \u279E False\n\nany_int_greater_than_sum(5, 2, 3.6) \u279E False\n\n\
    any_int_greater_than_sum(5, 2, -3.6) \u279E False\n\nany_int_greater_than_sum(5,\
    \ 2, 3.6) \u279E False\n\nany_int_greater_than_sum(5, 2, -3.6) \u279E False\n\n\
    any_int_greater_than_sum(5, 2, 3.6) \u279E False\n\nany_int_greater_than_", " \
    \   return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    \n    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ 3 numbers and returns True if any of them is equal to the sum of the other two,\
    \ and all numbers are integers.\n\nExamples\n\nany_int(5, 2, 7) \u279E True\n\n\
    any_int(3, 2, 2) \u279E False\n\nany_int(3, -2, 1) \u279E True\n\nany_int(3.6,\
    \ -2.2, 2) \u279E False\n\n</text>\n<cell>", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n</cell>\n<cell>\nassert any_int(5, 2, 7) == True\nassert any_int(3,\
    \ 2, 2) == False\nassert any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2,\
    \ 2) == False\n</cell>\n<text>\nProblem 7\nWrite a function that takes a string\
    \ and returns the number of words in the string.\n\nExamples\ncount_words(\"The\
    \ rain in Spain falls mainly on the plain.\") \u279E 5\ncount_words(\"The rain\
    \ in Spain falls mainly on the plain.\", \" \") \u279E 7\ncount_words(\"The rain\
    \ in Spain falls mainly on the plain.\", \"The\") \u279E 3\ncount_words(\"The\
    \ rain in Spain falls mainly on the plain.\", \"rain\") \u279E 2\ncount_words(\"\
    The rain in Spain falls mainly on the plain.\", \"rain\") \u279E 0\ncount_words(\"\
    The rain in Spain falls mainly on the plain.\", \"rain\") \u279E -1\ncount_words(\"\
    The rain in Spain falls mainly on the plain.\", \"rain\") \u279E -1\ncount_words(\"\
    The rain in Spain falls mainly on the plain.\", \"rain\") \u279E -1\ncount_words(\"\
    The rain in Spain falls mainly on the plain.\", \"rain\") \u279E -1\ncount_words(\"\
    The rain in Spain falls mainly on the plain.\", \"rain\") \u279E -1\ncount_words(\"\
    The rain in Spain falls mainly on the plain.\", \"rain\") \u279E -1\ncount_words(\"\
    The rain in Spain falls mainly on the plain.\", \"rain\") \u279E -1\ncount_words(\"\
    The rain in Spain falls mainly on the plain.\", \"rain\") \u279E -1\ncount_words(\"\
    The rain in Spain falls mainly on the plain.\", \"rain\") \u279E -1\ncount_words(\"\
    The rain in Spain falls mainly on the plain.\", \"rain\") \u279E -1\ncount_words(\"\
    The rain in Spain falls mainly on the plain.\", \"rain\") \u279E -1\ncount_words(\"\
    The rain in Spain falls mainly on the plain.\", \"rain\") \u279E -1\ncount_",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n",
  "    \n    if type(x) != int or type(y) != int or type(z) != int:\n        return\
    \ False\n    \n    return x == y + z\n\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int)\n\n", "    \n    if type(x) == int\
    \ or type(y) == int or type(z) == int:\n        return True\n    else:\n     \
    \   return False\n    ", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n", " \
    \   return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n\n", "    \n    if type(x) != int or type(y) != int or type(z) != int:\n\
    \        return False\n    \n    return x == y + z\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x == y + z\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a list as an argument and returns a new list\
    \ with only the even numbers in it.\n\nExamples\nevens([1, 2, 3, 4, 5]) \u279E\
    \ [2, 4]\n\nevens([1, 2, 3, -4, 5]) \u279E [2, 4]\n\nevens([1, 2, 3, 4, 5]) \u279E\
    \ []\n\nevens([1, 2, 3, 4, 5]) \u279E []\n\nevens([1, 2, 3, 4, 5]) \u279E []\n\
    \nevens([1, 2, 3, 4, 5]) \u279E []\n\nevens([1, 2, 3, 4, 5]) \u279E []\n\nevens([1,\
    \ 2, 3, 4, 5]) \u279E []\n\nevens([1, 2, 3, 4, 5]) \u279E []\n\nevens([1, 2, 3,\
    \ 4, 5]) \u279E []\n\nevens([1, 2, 3, 4, 5]) \u279E []\n\nevens([1, 2, 3, 4, 5])\
    \ \u279E []\n\nevens([1, 2, 3, 4, 5]) \u279E []\n\nevens([1, 2, 3, 4, 5]) \u279E\
    \ []\n\nevens([1, 2, 3, 4, 5]) \u279E []\n\nevens([1, 2, 3, 4, 5]) \u279E []\n\
    \nevens([1, 2, 3, 4, 5]) \u279E []\n\nevens([1, 2, 3, 4, 5]) \u279E []\n\nevens([1,\
    \ 2, 3, 4, 5]) \u279E []\n\nevens([1, 2, 3, 4, 5]) \u279E []\n\nevens([1, 2, 3,\
    \ 4, 5]) \u279E []\n\nevens([1, 2, 3, 4, 5]) \u279E []\n\nevens([1, 2, 3, 4, 5])\
    \ \u279E []\n\nevens([1, 2, 3, 4, 5]) \u279E []\n\nevens([1, 2, 3, 4, 5]) \u279E\
    \ []\n\nevens([1, 2, 3, 4, 5]) \u279E []\n\nevens([1, 2, 3, 4, 5]) \u279E []\n\
    \nevens([1, 2, 3, 4, 5]) \u279E []\n\nevens([1, 2, 3, 4, 5]) \u279E []\n\nevens([1,\
    \ 2, 3, 4, 5]) \u279E []\n\nevens([1, 2, 3, 4, 5]) \u279E []\n\nevens([1, 2, 3,\
    \ 4, 5]) \u279E []\n\nevens([1, 2, 3, 4, 5]) \u279E []\n\nevens([", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n", "   \
    \ return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns a list of words in that string. \nThe function should ignore\
    \ punctuation and split on whitespace.\nThe function should ignore case and split\
    \ on non-alphanumeric characters.\nThe function should ignore numbers and split\
    \ on non-alphanumeric characters.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are ", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nExercise\nCreate a function that takes 3 numbers and returns\
    \ True if all numbers are integers and False otherwise.\nCreate a function that\
    \ takes 3 numbers and returns True if any number is not an integer.\nCreate a\
    \ function that takes 3 numbers and returns True if all numbers are integers or\
    \ False otherwise.\nCreate a function that takes 3 numbers and returns True if\
    \ any number is not an integer.\nCreate a function that takes 3 numbers and returns\
    \ True if all numbers are integers or False otherwise.\nCreate a function that\
    \ takes 3 numbers and returns True if any number is not an integer.\nCreate a\
    \ function that takes 3 numbers and returns True if all numbers are integers or\
    \ False otherwise.\nCreate a function that takes 3 numbers and returns True if\
    \ any number is not an integer.\nCreate a function that takes 3 numbers and returns\
    \ True if all numbers are integers or False otherwise.\nCreate a function that\
    \ takes 3 numbers and returns True if any number is not an integer.\nCreate a\
    \ function that takes 3 numbers and returns True if all numbers are integers or\
    \ False otherwise.\nCreate a function that takes 3 numbers and returns True if\
    \ any number is not an integer.\nCreate a function that takes 3 numbers and returns\
    \ True if all numbers are integers or False otherwise.\nCreate a function that\
    \ takes 3 numbers and returns True if any number is not an integer.\nCreate a\
    \ function that takes 3 numbers and returns True if all numbers are integers or\
    \ False otherwise.\nCreate a function that takes 3 numbers and returns True if\
    \ any number is not an integer.\nCreate a function that takes 3 numbers and returns\
    \ True if all numbers are integers or False otherwise.\nCreate a function that\
    \ takes 3 numbers and returns True if any number is not an integer.\nCreate a\
    \ function that takes 3 numbers and returns True if all numbers are integers or\
    \ False otherwise.\nCreate a function that takes 3 numbers and returns True if\
    \ any number is not an integer.\nCreate a function that takes 3 numbers and returns\
    \ True if all numbers are integers or False otherwise.\nCreate a function that\
    \ takes 3 numbers and returns True if any number is not an integer.\nCreate a\
    \ function that takes 3 numbers and returns True if all numbers are integers or\
    \ False otherwise.\nCreate a function that takes 3 numbers and returns True if\
    \ any number is not an integer.\nCreate a function that takes 3 numbers and returns\
    \ True if all numbers are integers or False otherwise.\nCreate a function that\
    \ takes 3 numbers and returns True if any number is not an integer.\nCreate a\
    \ function that takes 3 numbers and returns True if all numbers are integers or\
    \ False otherwise.\nCreate a function that takes 3 numbers and returns True if\
    \ any number is not an integer.\nCreate a function that takes ", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x == y + z and x != 0\
    \ and y != 0 and z != 0\n\n", "    \n    if type(x) != int or type(y) != int or\
    \ type(z) != int:\n        return False\n    \n    return x == y + z\n</cell>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of characters in that string.\nWrite\
    \ a function that takes a string and returns the number of words in that string.\n\
    Write a function that takes a string and returns the number of sentences in that\
    \ string.\nWrite a function that takes a string and returns the number of uppercase\
    \ letters in that string.\nWrite a function that takes a string and returns the\
    \ number of lowercase letters in that string.\nWrite a function that takes a string\
    \ and returns the number of digits in that string.\nWrite a function that takes\
    \ a string and returns the number of punctuation in that string.\nWrite a function\
    \ that takes a string and returns the number of symbols in that string.\nWrite\
    \ a function that takes a string and returns the number of words in that string\
    \ that start with a capital letter.\nWrite a function that takes a string and\
    \ returns the number of words in that string that start with a lowercase letter.\n\
    Write a function that takes a string and returns the number of words in that string\
    \ that start with a number.\nWrite a function that takes a string and returns\
    \ the number of words in that string that start with a letter.\nWrite a function\
    \ that takes a string and returns the number of words in that string that start\
    \ with a period.\nWrite a function that takes a string and returns the number\
    \ of words in that string that start with a question mark.\nWrite a function that\
    \ takes a string and returns the number of words in that string that start with\
    \ a exclamation point.\nWrite a function that takes a string and returns the number\
    \ of words in that string that start with a dollar sign.\nWrite a function that\
    \ takes a string and returns the number of words in that string that start with\
    \ a percent sign.\nWrite a function that takes a string and returns the number\
    \ of words in that string that start with a caret.\nWrite a function that takes\
    \ a string and returns the number of words in that string that start with a dollar\
    \ sign.\nWrite a function that takes a string and returns the number of words\
    \ in that string that start with a percent sign.\nWrite a function that takes\
    \ a string and returns the number of words in that string that start with a caret.\n\
    Write a function that takes a string and returns the number of words in that string\
    \ that start with a dollar sign.\nWrite a function that takes a string and returns\
    \ the number of words in that string that start with a percent sign.\nWrite a\
    \ function that takes a string and returns the number of words in that string\
    \ that start with a caret.\nWrite a function that takes a string and returns the\
    \ number of words in that string that ", "    \n    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nProblem 7\nWrite a function that takes a list of numbers\
    \ and returns the sum of the numbers in the list, ignoring any non-integer values.\n\
    \nExamples\nsum_of_numbers([1, 2, \"three\", 4]) \u279E 5\nsum_of_numbers([1,\
    \ 2, \"three\", 4.0]) \u279E 5\nsum_of_numbers([1, 2, \"three\", 4.1, 5]) \u279E\
    \ 6\nsum_of_numbers([1, 2, \"three\", 4.1, 5.0]) \u279E 6\nsum_of_numbers([1,\
    \ 2, \"three\", 4.1, 5.1, 6]) \u279E 6\nsum_of_numbers([1, 2, \"three\", 4.1,\
    \ 5.1, 6.0]) \u279E 6\nsum_of_numbers([1, 2, \"three\", 4.1, 5.1, 6.1, 7]) \u279E\
    \ 6\nsum_of_numbers([1, 2, \"three\", 4.1, 5.1, 6.1, 7.0]) \u279E 6\nsum_of_numbers([1,\
    \ 2, \"three\", 4.1, 5.1, 6.1, 7.1, 8]) \u279E 6\nsum_of_numbers([1, 2, \"three\"\
    , 4.1, 5.1, 6.1, 7.1, 8.0]) \u279E 6\nsum_of_numbers([1, 2, \"three\", 4.1, 5.1,\
    \ 6.1, 7.1, 8.1, 9]) \u279E 6\nsum_of_numbers([1, 2, \"three\", 4.1, 5.1, 6.1,\
    \ 7.1, 8.1, 9.0]) \u279E 6\nsum_of_numbers([1, 2, \"three\", 4.1, 5.1, 6.1, 7.1,\
    \ 8.1, 9.1, 10]) \u279E 6\nsum_of_numbers([1, 2, \"three\", 4.1, 5.1, 6.1, 7.1,\
    \ 8.1, 9.1, 10.0]) \u279E 6\nsum_of_numbers([1, 2, \"three\", 4.1, 5.1, 6.1, 7.1,\
    \ 8.1, 9.1, 10.1, 11]) \u279E 6\nsum_of_numbers([1, 2, \"three\", 4.1, 5.1, 6.1,\
    \ 7.1, 8.1, 9.1, 10.1, 11.0]) \u279E 6\nsum_of_numbers([1, 2, \"three\", 4.1,\
    \ 5.1, 6.1, 7.1, 8.1, 9.1, 10.1, 11.1, 12", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n\
    </cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n\
    <text>\nExercise: Write a function that takes 3 numbers and returns True if they\
    \ are all integers, False if any of them are not integers, and raises an error\
    \ if all numbers are not integers.\n\n\n</text>\n<cell>", "    \n    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x == y + z and x != 0 and y != 0 and z != 0\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x == y + z\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise: Write a function\
    \ that takes 3 numbers and returns True if any of them is equal to the sum of\
    \ the other two, and all numbers are integers. Return False in any other case.\n\
    \n\n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    \n    if type(x) != int or\
    \ type(y) != int or type(z) != int:\n        return False\n    \n    if x == y\
    \ and x == z:\n        return True\n    \n    return False\n</cell>\n<cell>\n\
    any_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3,\
    \ -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 2\n\
    Create a function that takes 3 numbers and returns True if they are all positive,\
    \ False if they are all negative, and True if they are all zero. \nCreate a function\
    \ that takes 3 numbers and returns True if they are all positive, False if they\
    \ are all negative, and True if they are all zero. \nCreate a function that takes\
    \ 3 numbers and returns True if they are all positive, False if they are all negative,\
    \ and True if they are all zero. \nCreate a function that takes 3 numbers and\
    \ returns True if they are all positive, False if they are all negative, and True\
    \ if they are all zero. \nCreate a function that takes 3 numbers and returns True\
    \ if they are all positive, False if they are all negative, and True if they are\
    \ all zero. \nCreate a function that takes 3 numbers and returns True if they\
    \ are all positive, False if they are all negative, and True if they are all zero.\
    \ \nCreate a function that takes 3 numbers and returns True if they are all positive,\
    \ False if they are all negative, and True if they are all zero. \nCreate a function\
    \ that takes 3 numbers and returns True if they are all positive, False if they\
    \ are all negative, and True if they are all zero. \nCreate a function that takes\
    \ 3 numbers and returns True if they are all positive, False if they are all negative,\
    \ and True if they are all zero. \nCreate a function that takes 3 numbers and\
    \ returns True if they are all positive, False if they are all negative, and True\
    \ if they are all zero. \nCreate a function that takes 3 numbers and returns True\
    \ if they are all positive, False if they are all negative, and True if they are\
    \ all zero. \nCreate a function that takes 3 numbers and returns True if they\
    \ are all positive, False if they are all negative, and True if they are all zero.\
    \ \nCreate a function that takes 3 numbers and returns True if they are all positive,\
    \ False if they are all negative, and True if they are all zero. \nCreate a function\
    \ that takes 3 numbers and returns True if they are all positive, False if they\
    \ are all negative, and True if they are all zero. \nCreate a function that takes\
    \ 3 numbers and returns True if they are all positive, False if they are all negative,\
    \ and True if they are all zero. \nCreate a function that takes 3 numbers and\
    \ returns True if they are all positive, False if they are all negative, and True\
    \ if they are all zero. \nCreate a function that takes 3 numbers and returns True\
    \ if they are all positive, False if they are all negative, and True if they are\
    \ all zero. \nCreate a function that takes 3 ", "    \n    if type(x) == int or\
    \ type(y) == int or type(z) == int:\n        return True\n    else:\n        return\
    \ False\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>", "    \n  \
    \  if type(x) == int or type(y) == int or type(z) == int:\n        return True\n\
    \    else:\n        return False\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise:\
    \ Create a function that takes 3 numbers and returns True if they are all integers,\
    \ False if any of them are not integers, and None if the sum of the numbers is\
    \ non-integer.\n\n\n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise\
    \ 2\nCreate a function that takes 3 numbers and returns True if they are all positive,\
    \ and False if they are all negative.\n\nExamples\npositive_all(5, 2, 7) \u279E\
    \ True\npositive_all(3, 2, 2) \u279E False\n\nnegative_all(3, -2, 1) \u279E True\n\
    negative_all(3.6, -2.2, 2) \u279E False\n \n\n</text>\n<cell>", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x == y + z\n\n", "  \
    \  return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in a list of numbers and returns the sum of the numbers in the list.\nIf the\
    \ list is empty, return 0.\nIf the list has one number, return that number.\n\
    If the list has two numbers, return the sum of the two numbers.\nIf the list has\
    \ three numbers, return the sum of the first two numbers, then add the last number\
    \ to the sum.\nIf the list has four numbers, return the sum of the first three\
    \ numbers, then add the last two numbers to the sum.\nIf the list has five numbers,\
    \ return the sum of the first four numbers, then add the fifth number to the sum.\n\
    If the list has six numbers, return the sum of the first five numbers, then add\
    \ the sixth number to the sum.\nIf the list has seven numbers, return the sum\
    \ of the first six numbers, then add the seventh number to the sum.\nIf the list\
    \ has eight numbers, return the sum of the first seven numbers, then add the eight\
    \ number to the sum.\nIf the list has nine numbers, return the sum of the first\
    \ eight numbers, then add the nine number to the sum.\nIf the list has ten numbers,\
    \ return the sum of the first nine numbers, then add the ten number to the sum.\n\
    If the list has eleven numbers, return the sum of the first ten numbers, then\
    \ add the eleventh number to the sum.\nIf the list has twelve numbers, return\
    \ the sum of the first eleven numbers, then add the twelfth number to the sum.\n\
    If the list has thirteen numbers, return the sum of the first twelve numbers,\
    \ then add the thirteenth number to the sum.\nIf the list has fourteen numbers,\
    \ return the sum of the first thirteen numbers, then add the fourteenth number\
    \ to the sum.\nIf the list has fifteen numbers, return the sum of the first fourteen\
    \ numbers, then add the fifteenth number to the sum.\nIf the list has sixteen\
    \ numbers, return the sum of the first fifteen numbers, then add the sixteenth\
    \ number to the sum.\nIf the list has seventeen numbers, return the sum of the\
    \ first sixteen numbers, then add the seventeenth number to the sum.\nIf the list\
    \ has eighteen numbers, return the sum of the first seventeen numbers, then ",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    if x == y + z:\n        return True\n    else:\n        return False\n\
    </cell>\n<cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x == y + z\n\n", "  \
    \  return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns a list of all the words in the string.\nThe function should\
    \ ignore all punctuation and split on whitespace.\nThe function should ignore\
    \ all non-alphabetic characters and split on whitespace.\nThe function should\
    \ ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore all non-alphabetic characters and split on ", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n", "   \
    \ return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x == y + z and x != -y and x != -z\n\n", "    \n    if type(x) == int or type(y)\
    \ == int or type(z) == int:\n        return True\n    else:\n        return False\n\
    \n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x == y + z\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes 3 numbers and returns True if they are all integers,\
    \ False otherwise.\n\nExamples\nall_ints(5, 2, 7) \u279E True\nall_ints(3, 2,\
    \ 2) \u279E False\n\nall_ints(3, -2, 1) \u279E True\nall_ints(3.6, -2.2, 2) \u279E\
    \ False\n\n</text>\n<cell>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes 3 numbers and returns True if any of them is equal to the sum of\
    \ the other two, and all numbers are integers.\n\nExamples\nany_int_or_none(5,\
    \ 2, 7) \u279E True\nany_int_or_none(3, 2, 2) \u279E True\nany_int_or_none(3,\
    \ -2, 1) \u279E True\nany_int_or_none(3.6, -2.2, 2) \u279E True\n\nany_int_or_none(5,\
    \ 2, 7) \u279E True\nany_int_or_none(3, 2, 2) \u279E True\nany_int_or_none(3,\
    \ -2, 1) \u279E True\nany_int_or_none(3.6, -2.2, 2) \u279E True\n\nany_int_or_none(5,\
    \ 2, 7) \u279E True\nany_int_or_none(3, 2, 2) \u279E True\nany_int_or_none(3,\
    \ -2, 1) \u279E True\nany_int_or_none(3.6, -2.2, 2) \u279E True\n\nany_int_or_none(5,\
    \ 2, 7) \u279E True\nany_int_or_none(3, 2, 2) \u279E True\nany_int_or_none(3,\
    \ -2, 1) \u279E True\nany_int_or_none(3.6, -2.2, 2) \u279E True\n\nany_int_or_none(5,\
    \ 2, 7) \u279E True\nany_int_or_none(3, 2, 2) \u279E True\nany_int_or_none(3,\
    \ -2, 1) \u279E True\nany_int_or_none(3.6, -2.2, 2) \u279E True\n\nany_int_or_none(5,\
    \ 2, 7) \u279E True\nany_int_or_none(3, 2, 2) \u279E True\nany_int_or_none(3,\
    \ -2, 1) \u279E True\nany_int_or_none(3.6, -2.2, 2) \u279E True\n\nany_int_or_none(5,\
    \ 2, 7) \u279E True\nany_int_or_none(3, 2, 2) \u279E True\nany_int_or_none(3,\
    \ -2, 1) \u279E True\nany_int_or_none(3.6, -2.2, 2) \u279E True\n\nany_int_or_none(5,\
    \ 2, 7) \u279E", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ 3 numbers and returns True if at least one of them is greater than the other.\
    \ Return False otherwise.\n\nExamples\nany_greater(5, 2, 7) \u279E True\n\nany_greater(3,\
    \ 2, 2) \u279E False\n\nany_greater(3, -2, 1) \u279E True\n\nany_greater(3.6,\
    \ -2.2, 2) \u279E True\n\n\n</text>\n<cell>", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int)\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise\
    \ 2\nCreate a function that takes 3 numbers and returns True if they are all integers,\
    \ False if any of them are not integers, and returns False if any of them are\
    \ floats.\n\nExamples\nany_int_or_float(5, 2, 7) \u279E True\nany_int_or_float(3,\
    \ 2, 2) \u279E False\nany_int_or_float(3, -2, 1) \u279E True\nany_int_or_float(3.6,\
    \ -2.2, 2) \u279E False\n\n</text>\n<cell>", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x == y + z and x != 0 and y !=\
    \ 0 and z != 0\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ 3 numbers and returns True if all numbers are even and False if any number is\
    \ odd.\n\nExamples\nodd_even(7, 2, 3) \u279E True\nodd_even(7, -2, 3) \u279E False\n\
    odd_even(7, 2, -2) \u279E False\n\n</text>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    \n    if type(x) != int or type(y) !=\
    \ int or type(z) != int:\n        return False\n    \n    if x == y and x == z:\n\
    \        return True\n    \n    return False\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list as an argument and returns a new list with only unique elements.\n\
    \nExamples\nunique([1, 2, 2, 3]) \u279E [1, 2, 3]\n\nunique([1, 2, 2, 3]) \u279E\
    \ [1, 2, 3]\n\nunique([1, 2, 2, 3]) \u279E [1, 3]\n\nunique([1, 2, 2, 3]) \u279E\
    \ [1, 3]\n\nunique([1, 2, 2, 3]) \u279E [1, 3]\n\nunique([1, 2, 2, 3]) \u279E\
    \ [1, 3]\n\nunique([1, 2, 2, 3]) \u279E [1, 3]\n\nunique([1, 2, 2, 3]) \u279E\
    \ [1, 3]\n\nunique([1, 2, 2, 3]) \u279E [1, 3]\n\nunique([1, 2, 2, 3]) \u279E\
    \ [1, 3]\n\nunique([1, 2, 2, 3]) \u279E [1, 3]\n\nunique([1, 2, 2, 3]) \u279E\
    \ [1, 3]\n\nunique([1, 2, 2, 3]) \u279E [1, 3]\n\nunique([1, 2, 2, 3]) \u279E\
    \ [1, 3]\n\nunique([1, 2, 2, 3]) \u279E [1, 3]\n\nunique([1, 2, 2, 3]) \u279E\
    \ [1, 3]\n\nunique([1, 2, 2, 3]) \u279E [1, 3]\n\nunique([1, 2, 2, 3]) \u279E\
    \ [1, 3]\n\nunique([1, 2, 2, 3]) \u279E [1, 3]\n\nunique([1, 2, 2, 3]) \u279E\
    \ [1, 3]\n\nunique([1, 2, 2, 3]) \u279E [1, 3]\n\nunique([1, 2, 2, 3]) \u279E\
    \ [1, 3]\n\nunique([1, 2, 2, 3]) \u279E [1, 3]\n\nunique([1, 2, 2, 3]) \u279E\
    \ [1, 3]\n\nunique([1, 2, 2, 3]) \u279E [1, 3]\n\nunique([1, 2, 2, 3]) \u279E\
    \ [1, 3]\n\nunique([1, 2, 2, 3]) \u279E [1, 3]\n\nunique([1, 2, 2, 3]) \u279E\
    \ [1, 3]\n\nunique([1, 2, 2, 3]) \u279E [1, 3]\n\nunique([1, 2, 2, 3]) \u279E\
    \ [1, 3]\n\nunique([1, 2, 2, 3]) \u279E [1, 3]\n\nunique([1, 2, 2, 3]) \u279E\
    \ [1, 3]\n\nunique([1, 2, 2, 3]) \u279E [1, 3]\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x == y + z\n\n", "  \
    \  return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x == y + z and x != 0 and y != 0 and z != 0\n</cell>\n<cell>\nany_int(5, 2,\
    \ 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 3\nCreate a\
    \ function that takes 3 numbers and returns True if they are all integers, and\
    \ False if any of them are not integers.\n\nExamples\nall_ints(5, 2, 7) \u279E\
    \ True\nall_ints(3, 2, 2) \u279E False\n\nall_ints(3, -2, 1) \u279E True\nall_ints(3.6,\
    \ -2.2, 2) \u279E False\n\n</text>\n<cell>", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nExercise 2\nCreate a function that takes 3 numbers and\
    \ returns True if they are all integers, and False if any of them are not integers.\n\
    Create a function that takes 3 numbers and returns True if any of them are integers,\
    \ and False if all are not integers.\nCreate a function that takes 3 numbers and\
    \ returns True if all are integers, and False if any are not integers.\nCreate\
    \ a function that takes 3 numbers and returns True if any of them are integers,\
    \ and False if all are not integers.\nCreate a function that takes 3 numbers and\
    \ returns True if all are integers, and False if any are not integers.\nCreate\
    \ a function that takes 3 numbers and returns True if any of them are integers,\
    \ and False if all are not integers.\nCreate a function that takes 3 numbers and\
    \ returns True if all are integers, and False if any are not integers.\nCreate\
    \ a function that takes 3 numbers and returns True if all are integers, and False\
    \ if any are not integers.\nCreate a function that takes 3 numbers and returns\
    \ True if all are integers, and False if any are not integers.\nCreate a function\
    \ that takes 3 numbers and returns True if all are integers, and False if any\
    \ are not integers.\nCreate a function that takes 3 numbers and returns True if\
    \ all are integers, and False if any are not integers.\nCreate a function that\
    \ takes 3 numbers and returns True if all are integers, and False if any are not\
    \ integers.\nCreate a function that takes 3 numbers and returns True if all are\
    \ integers, and False if any are not integers.\nCreate a function that takes 3\
    \ numbers and returns True if all are integers, and False if any are not integers.\n\
    Create a function that takes 3 numbers and returns True if all are integers, and\
    \ False if any are not integers.\nCreate a function that takes 3 numbers and returns\
    \ True if all are integers, and False if any are not integers.\nCreate a function\
    \ that takes 3 numbers and returns True if all are integers, and False if any\
    \ are not integers.\nCreate a function that takes 3 numbers and returns True if\
    \ all are integers, and False if any are not integers.\nCreate a function that\
    \ takes 3 numbers and returns True if all are integers, and False if any are not\
    \ integers.\nCreate a function that takes 3 numbers and returns True if all are\
    \ integers, and False if any are not integers.\nCreate a function that takes 3\
    \ numbers and returns True if all are integers, and False if any are not integers.\n\
    Create a function that takes 3 numbers and returns True if all are integers, and\
    \ False if any ", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    \n    if type(x) != int or type(y) != int or type(z)\
    \ != int:\n        return False\n    \n    if x == y and z == x:\n        return\
    \ True\n    \n    return False\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a list and a number as arguments and returns\
    \ a list with the numbers that satisfy the condition:\n\nThe sum of the numbers\
    \ in the list equals the number passed as argument.\n\nExamples\nlist_with_numbers([1,\
    \ 2, 3, 4, 5], 5) \u279E [5]\nlist_with_numbers([1, 2, 3, 4, 5], 7) \u279E []\n\
    list_with_numbers([1, 2, 3, 4, 5], 2) \u279E [1, 2]\nlist_with_numbers([1, 2,\
    \ 3, 4, 5], 0) \u279E []\nlist_with_numbers([1, 2, 3, 4, 5], -1) \u279E []\nlist_with_numbers([1,\
    \ 2, 3, 4, 5], -2) \u279E []\nlist_with_numbers([1, 2, 3, 4, 5], -3) \u279E []\n\
    list_with_numbers([1, 2, 3, 4, 5], -4) \u279E []\nlist_with_numbers([1, 2, 3,\
    \ 4, 5], -5) \u279E []\nlist_with_numbers([1, 2, 3, 4, 5], -6) \u279E []\nlist_with_numbers([1,\
    \ 2, 3, 4, 5], -7) \u279E []\nlist_with_numbers([1, 2, 3, 4, 5], -8) \u279E []\n\
    list_with_numbers([1, 2, 3, 4, 5], -9) \u279E []\nlist_with_numbers([1, 2, 3,\
    \ 4, 5], -10) \u279E []\nlist_with_numbers([1, 2, 3, 4, 5], -11) \u279E []\nlist_with_numbers([1,\
    \ 2, 3, 4, 5], -12) \u279E []\nlist_with_numbers([1, 2, 3, 4, 5], -13) \u279E\
    \ []\nlist_with_numbers([1, 2, 3, 4, 5], -14) \u279E []\nlist_with_numbers([1,\
    \ 2, 3, 4, 5], -15) \u279E []\nlist_with_numbers([1, 2, 3, 4, 5], -16) \u279E\
    \ []\nlist_with_numbers([1, 2, 3, 4, 5], -17) \u279E []\nlist_with_numbers([1,\
    \ 2, 3, 4, 5], -18) \u279E []\nlist_with_numbers([1, 2, 3, 4, 5], -19) \u279E\
    \ []\nlist_with_numbers([1, 2, 3, 4, 5], -20) \u279E []\nlist_with_numbers([1,\
    \ 2, 3, 4, 5], -21) \u279E []\nlist_with_numbers([1, 2, 3, 4, 5], -22) \u279E\
    \ []", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 2\nCreate a\
    \ function that takes 3 numbers and returns True if they are all positive, False\
    \ if they are all negative, and True if they are all zero. Return False in any\
    \ other case.\n\nExamples\nall_positive(5, 2, 7) \u279E True\nall_positive(3,\
    \ 2, 2) \u279E False\n\nall_positive(3, -2, 1) \u279E True\nall_positive(3.6,\
    \ -2.2, 2) \u279E True\n\nall_positive(-5, 2, 7) \u279E False\nall_positive(-3,\
    \ 2, 2) \u279E False\n\nall_positive(-3, -2, 1) \u279E False\nall_positive(-3.6,\
    \ -2.2, 2) \u279E False\n\nall_positive(0, 2, 7) \u279E True\nall_positive(0,\
    \ -2, 2) \u279E False\n\nall_positive(0, -2, 1) \u279E True\nall_positive(0, -2.2,\
    \ 2) \u279E False\n\nall_positive(0, 2, -2) \u279E False\nall_positive(0, -2,\
    \ -2) \u279E False\n\nall_positive(0, 2, 0) \u279E True\nall_positive(0, -2, 0)\
    \ \u279E False\n\nall_positive(0, 2, -2) \u279E False\nall_positive(0, -2, -2)\
    \ \u279E False\n\nall_positive(0, 2, 0) \u279E True\nall_positive(0, -2, 0) \u279E\
    \ False\n\nall_positive(0, 2, -2) \u279E False\nall_positive(0, -2, -2) \u279E\
    \ False\n\nall_positive(0, 2, 0) \u279E True\nall_positive(0, -2, 0) \u279E False\n\
    \nall_positive(0, 2, -2) \u279E False\nall_positive(0, -2, -2) \u279E False\n\n\
    all_positive(0, 2, 0) \u279E True\nall_positive(0, -2, 0) \u279E False\n\nall_positive(0,\
    \ 2, -2) \u279E False\nall_positive(0, -2, -2) \u279E False\n\nall_positive(0,\
    \ 2, 0) \u279E True\nall_positive(0, -2, 0) \u279E False\n\nall_positive(0, 2,\
    \ -2) \u279E False\nall_positive(0, -2, -2) \uFFFD", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    \n    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x == y + z and x != 0 and y != 0 and z != 0\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ 3 numbers and returns True if they are all positive, and False if they are all\
    \ negative.\n\nExamples\npositive_all(5, 2, 7) \u279E True\npositive_all(-5, 2,\
    \ 7) \u279E False\n\nnegative_all(5, 2, 7) \u279E False\nnegative_all(-5, 2, 7)\
    \ \u279E True\n\nnegative_all(-5, -2, 7) \u279E False\nnegative_all(-5, -2, -7)\
    \ \u279E True\n\nnegative_all(-5, -2, -7) \u279E False\nnegative_all(-5, -2, -7)\
    \ \u279E False\n\nnegative_all(-5, -2, -7) \u279E False\nnegative_all(-5, -2,\
    \ -7) \u279E False\n\nnegative_all(-5, -2, -7) \u279E False\nnegative_all(-5,\
    \ -2, -7) \u279E False\n\nnegative_all(-5, -2, -7) \u279E False\nnegative_all(-5,\
    \ -2, -7) \u279E False\n\nnegative_all(-5, -2, -7) \u279E False\nnegative_all(-5,\
    \ -2, -7) \u279E False\n\nnegative_all(-5, -2, -7) \u279E False\nnegative_all(-5,\
    \ -2, -7) \u279E False\n\nnegative_all(-5, -2, -7) \u279E False\nnegative_all(-5,\
    \ -2, -7) \u279E False\n\nnegative_all(-5, -2, -7) \u279E False\nnegative_all(-5,\
    \ -2, -7) \u279E False\n\nnegative_all(-5, -2, -7) \u279E False\nnegative_all(-5,\
    \ -2, -7) \u279E False\n\nnegative_all(-5, -2, -7) \u279E False\nnegative_all(-5,\
    \ -2, -7) \u279E False\n\nnegative_all(-5, -2, -7) \u279E False\nnegative_all(-5,\
    \ -2, -7) \u279E False\n\nnegative_all(-5, -2, -7) \u279E False\nnegative_all(-5,\
    \ -2, -7) \u279E False\n\nnegative_all(-5, -2, -7) \u279E False\nnegative_all(-5, ",
  "    \n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in the string.\nIf the string\
    \ has less than 3 characters, return 0.\nIf the string has more than 3 characters,\
    \ return 3.\nIf the string has exactly 3 characters, return 3.\nIf the string\
    \ has exactly 2 characters, return 2.\nIf the string has exactly 1 character,\
    \ return 1.\nIf the string has exactly 0 characters, return 0.\nIf the string\
    \ has more than 0 characters, return 0.\nIf the string has less than 0 characters,\
    \ return 0.\nIf the string has more than 0 characters, return 0.\nIf the string\
    \ has more than 0 characters, return 0.\nIf the string has more than 0 characters,\
    \ return 0.\nIf the string has more than 0 characters, return 0.\nIf the string\
    \ has more than 0 characters, return 0.\nIf the string has more than 0 characters,\
    \ return 0.\nIf the string has more than 0 characters, return 0.\nIf the string\
    \ has more than 0 characters, return 0.\nIf the string has more than 0 characters,\
    \ return 0.\nIf the string has more than 0 characters, return 0.\nIf the string\
    \ has more than 0 characters, return 0.\nIf the string has more than 0 characters,\
    \ return 0.\nIf the string has more than 0 characters, return 0.\nIf the string\
    \ has more than 0 characters, return 0.\nIf the string has more than 0 characters,\
    \ return 0.\nIf the string has more than 0 characters, return 0.\nIf the string\
    \ has more than 0 characters, return 0.\nIf the string has more than 0 characters,\
    \ return 0.\nIf the string has more than 0 characters, return 0.\nIf the string\
    \ has more than 0 characters, return 0.\nIf the string has more than 0 characters,\
    \ return 0.\nIf the string has more than 0 characters, return 0.\nIf the string\
    \ has more than 0 characters, return 0.\nIf the string has more than 0 characters,\
    \ return 0.\nIf the string has more than 0 characters, return 0.\nIf the string\
    \ has more than 0 characters, return 0.\nIf the string has more than 0 characters,\
    \ return 0.\nIf the string has more than 0 characters, return 0.\nIf the string\
    \ has more than 0 characters, return 0.\nIf the string has more than 0 characters,\
    \ return 0.\nIf the string has more than 0 characters, return 0.\nIf the string\
    \ has more than 0 characters, return 0.\nIf the string has more than 0 characters,\
    \ return ", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 2\nCreate a\
    \ function that takes 3 numbers and returns True if all numbers are positive,\
    \ and False if at least one is negative.\n\n\n</text>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nProblem 4\nWrite a function that takes 3 numbers and returns\
    \ True if they are all positive, and False if they are all negative.\n\nExamples\n\
    positive_all(5, 2, 7) \u279E True\npositive_all(-5, 2, 7) \u279E False\n\nnegative_all(5,\
    \ 2, 7) \u279E False\nnegative_all(-5, 2, 7) \u279E True\n\nnegative_all(5, -2,\
    \ 7) \u279E True\nnegative_all(-5, -2, 7) \u279E False\n\n\n</text>\n<cell>",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n", "    \n    if type(x) == int or type(y)\
    \ == int or type(z) == int:\n        return True\n    else:\n        return False\n\
    \    ", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns a list of words in the string. \nThe function should ignore\
    \ punctuation and split on spaces.\nThe function should ignore case and split\
    \ on non-alphanumeric characters.\nThe function should ignore leading and trailing\
    \ whitespace.\nThe function should ignore leading and trailing whitespace.\nThe\
    \ function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore ", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x == y + z and x != 0 and y != 0 and z != 0\n\
    \n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes 3 numbers and returns True if they are all positive, and False if they\
    \ are all negative.\n\nExamples\npositive(7, 2, 5) \u279E True\npositive(-7, 2,\
    \ 5) \u279E False\npositive(7, -2, 5) \u279E False\npositive(-7, -2, 5) \u279E\
    \ True\n\nnegative(7, 2, 5) \u279E False\nnegative(-7, 2, 5) \u279E True\nnegative(7,\
    \ -2, 5) \u279E False\nnegative(-7, -2, 5) \u279E False\n\n</text>\n<cell>", " \
    \   return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of words in the string.\n\nExamples\n\"Hello\
    \ World\" \u279E 5\n\"Hello World\" \u279E 3\n\"Hello World\" \u279E -1\n\n</text>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
