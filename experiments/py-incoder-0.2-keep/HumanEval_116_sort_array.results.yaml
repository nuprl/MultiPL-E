name: HumanEval_116_sort_array
language: python
results:
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: count_ones(bin(x)[2:]))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpozztqilx.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpozztqilx.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpozztqilx.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpozztqilx.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: count_ones(bin(x)[2:]))\n  File \"/tmp/tmpozztqilx.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: count_ones(bin(x)[2:]))\nNameError: name\
    \ 'count_ones' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_0_zpy2e.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_0_zpy2e.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp_0_zpy2e.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp66ynrefe.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp66ynrefe.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp66ynrefe.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphf10vlhq.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmphf10vlhq.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmphf10vlhq.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp78d_el0e.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp78d_el0e.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp78d_el0e.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxfobetsr.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpxfobetsr.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpxfobetsr.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph25eq3lo.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmph25eq3lo.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmph25eq3lo.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmph25eq3lo.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmph25eq3lo.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2dfcdjfh.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp2dfcdjfh.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp2dfcdjfh.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgc4sqzw.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgc4sqzw.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpwgc4sqzw.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpwgc4sqzw.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpwgc4sqzw.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi7sb2ymx.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpi7sb2ymx.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpi7sb2ymx.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: count_ones(bin(x)[2:]))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjy9tyl8g.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpjy9tyl8g.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpjy9tyl8g.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpjy9tyl8g.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: count_ones(bin(x)[2:]))\n  File \"/tmp/tmpjy9tyl8g.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: count_ones(bin(x)[2:]))\nNameError: name\
    \ 'count_ones' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count(\"1\"), x))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9z7kbq59.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp9z7kbq59.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp9z7kbq59.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ailcgs5.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp1ailcgs5.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp1ailcgs5.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmp1ailcgs5.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmp1ailcgs5.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfq87t0j9.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpfq87t0j9.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpfq87t0j9.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9igp5irm.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp9igp5irm.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp9igp5irm.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmp9igp5irm.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmp9igp5irm.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0n34i6i8.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp0n34i6i8.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp0n34i6i8.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdhlljy7x.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpdhlljy7x.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpdhlljy7x.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpdhlljy7x.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpdhlljy7x.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppd3cv__2.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmppd3cv__2.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmppd3cv__2.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dh9z284.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp9dh9z284.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp9dh9z284.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkmwm_mgg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpkmwm_mgg.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpkmwm_mgg.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjw2kxq5p.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpjw2kxq5p.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpjw2kxq5p.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpjw2kxq5p.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpjw2kxq5p.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj4r626h4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpj4r626h4.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpj4r626h4.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf1src525.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpf1src525.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpf1src525.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy8ygiiqu.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpy8ygiiqu.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpy8ygiiqu.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmxnx4dqy.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpmxnx4dqy.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpmxnx4dqy.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxp8kjjzo.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxp8kjjzo.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpxp8kjjzo.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyw93zl_c.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpyw93zl_c.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpyw93zl_c.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_xa5ux5j.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp_xa5ux5j.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp_xa5ux5j.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyel507rt.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpyel507rt.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpyel507rt.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpyel507rt.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpyel507rt.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzdf6xlou.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpzdf6xlou.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpzdf6xlou.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x)[2:].count('1'), x))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ih1_lxh.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp2ih1_lxh.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp2ih1_lxh.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmp2ih1_lxh.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmp2ih1_lxh.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp86i1kn5_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp86i1kn5_.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp86i1kn5_.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfvalrhdp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpfvalrhdp.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpfvalrhdp.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), int(x)), reverse=True)\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprbvy2rn6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmprbvy2rn6.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmprbvy2rn6.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzz_12x3v.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpzz_12x3v.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpzz_12x3v.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), int(x)))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6eyx8sx2.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6eyx8sx2.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp6eyx8sx2.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplmn2ax0x.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmplmn2ax0x.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmplmn2ax0x.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbvzy0egn.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpbvzy0egn.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpbvzy0egn.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe_a7hn4m.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpe_a7hn4m.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpe_a7hn4m.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpe_a7hn4m.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpe_a7hn4m.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkv2au700.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpkv2au700.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpkv2au700.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x)[2:].count(\"1\"), x))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdymp8p7p.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpdymp8p7p.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpdymp8p7p.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl81ruc8s.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpl81ruc8s.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpl81ruc8s.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptsg2mn6m.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmptsg2mn6m.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmptsg2mn6m.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3nf1jaz2.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp3nf1jaz2.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp3nf1jaz2.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: count_ones(x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5hfew4th.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5hfew4th.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp5hfew4th.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmp5hfew4th.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: count_ones(x))\n  File \"/tmp/tmp5hfew4th.py\", line 14, in <lambda>\n  \
    \  return sorted(arr, key=lambda x: count_ones(x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk5ixx3yq.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpk5ixx3yq.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpk5ixx3yq.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpugwb64ub.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpugwb64ub.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpugwb64ub.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ydrj43i.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp_ydrj43i.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp_ydrj43i.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: count_ones(bin(x)[2:]))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp9m1olk0.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpp9m1olk0.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpp9m1olk0.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpp9m1olk0.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: count_ones(bin(x)[2:]))\n  File \"/tmp/tmpp9m1olk0.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: count_ones(bin(x)[2:]))\nNameError: name\
    \ 'count_ones' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppujl5ldr.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmppujl5ldr.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmppujl5ldr.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqtbk3nr_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqtbk3nr_.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpqtbk3nr_.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpqtbk3nr_.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpqtbk3nr_.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4y_lnx6d.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp4y_lnx6d.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp4y_lnx6d.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5t2ftgff.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5t2ftgff.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp5t2ftgff.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmp5t2ftgff.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmp5t2ftgff.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprb8g3nuf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprb8g3nuf.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmprb8g3nuf.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeh17_f6a.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpeh17_f6a.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpeh17_f6a.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp60d6qamb.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp60d6qamb.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp60d6qamb.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxqenz5wj.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxqenz5wj.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpxqenz5wj.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmproxf6pbk.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmproxf6pbk.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmproxf6pbk.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), int(x) if x else 0))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp46kfkekb.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp46kfkekb.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp46kfkekb.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxul23v2x.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpxul23v2x.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpxul23v2x.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpxul23v2x.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpxul23v2x.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcvyaobk_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpcvyaobk_.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpcvyaobk_.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), int(x)), reverse=True)\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn91kxepb.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpn91kxepb.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpn91kxepb.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyjmylc86.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpyjmylc86.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpyjmylc86.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpyjmylc86.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpyjmylc86.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc807efie.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpc807efie.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpc807efie.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvry9xrzq.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpvry9xrzq.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpvry9xrzq.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpvry9xrzq.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpvry9xrzq.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptpuzbq1x.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmptpuzbq1x.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmptpuzbq1x.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwtmoem00.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwtmoem00.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpwtmoem00.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpwtmoem00.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpwtmoem00.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbphudyf0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbphudyf0.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpbphudyf0.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwtezionk.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwtezionk.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpwtezionk.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7gkwqwnw.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7gkwqwnw.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp7gkwqwnw.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp90j4drzy.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp90j4drzy.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp90j4drzy.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplswn3joa.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmplswn3joa.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmplswn3joa.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl4qal3ie.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpl4qal3ie.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpl4qal3ie.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmperhtuxhg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmperhtuxhg.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmperhtuxhg.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmperhtuxhg.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmperhtuxhg.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqsh856ll.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqsh856ll.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpqsh856ll.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp078_4tfn.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp078_4tfn.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp078_4tfn.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqbg6v91n.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqbg6v91n.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpqbg6v91n.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpqbg6v91n.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpqbg6v91n.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9p6z1alx.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp9p6z1alx.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp9p6z1alx.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7106nw0p.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7106nw0p.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp7106nw0p.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpphzsc271.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpphzsc271.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpphzsc271.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpphzsc271.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpphzsc271.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa4qaieq0.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpa4qaieq0.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpa4qaieq0.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpouwj348l.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpouwj348l.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpouwj348l.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi2wh9do4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpi2wh9do4.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpi2wh9do4.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x)[2:].count('1'), x))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), int(x) if x > 0 else 0))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphyaqz9zp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmphyaqz9zp.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmphyaqz9zp.py\", line 18,\
    \ in check\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5lbfv5vm.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5lbfv5vm.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp5lbfv5vm.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfr348se1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpfr348se1.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpfr348se1.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), int(x)))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw2r7gb14.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpw2r7gb14.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpw2r7gb14.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpw2r7gb14.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpw2r7gb14.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphfebf0em.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmphfebf0em.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmphfebf0em.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: count_ones(x))\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp24nxyvns.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp24nxyvns.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp24nxyvns.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmp24nxyvns.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: count_ones(x))\n  File \"/tmp/tmp24nxyvns.py\", line 14, in <lambda>\n  \
    \  return sorted(arr, key=lambda x: count_ones(x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjztuj716.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpjztuj716.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpjztuj716.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpjztuj716.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpjztuj716.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzx799y4y.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpzx799y4y.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpzx799y4y.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4nmjsbqq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4nmjsbqq.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp4nmjsbqq.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: count_ones(x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo65ftgcn.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpo65ftgcn.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpo65ftgcn.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpo65ftgcn.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: count_ones(x))\n  File \"/tmp/tmpo65ftgcn.py\", line 14, in <lambda>\n  \
    \  return sorted(arr, key=lambda x: count_ones(x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_y9u5l_8.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp_y9u5l_8.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp_y9u5l_8.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp11uvj1jq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp11uvj1jq.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp11uvj1jq.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: count_ones(x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7fd1y8n1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7fd1y8n1.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp7fd1y8n1.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmp7fd1y8n1.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: count_ones(x))\n  File \"/tmp/tmp7fd1y8n1.py\", line 14, in <lambda>\n  \
    \  return sorted(arr, key=lambda x: count_ones(x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbsd5h2yn.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpbsd5h2yn.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpbsd5h2yn.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvu3f8ftz.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpvu3f8ftz.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpvu3f8ftz.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgy30tfs_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpgy30tfs_.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpgy30tfs_.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpexew0yzw.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpexew0yzw.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpexew0yzw.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprcno84ui.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmprcno84ui.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmprcno84ui.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdjvrle0f.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpdjvrle0f.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpdjvrle0f.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpelfriqor.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpelfriqor.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpelfriqor.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3z6n2lfa.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp3z6n2lfa.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp3z6n2lfa.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmp3z6n2lfa.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmp3z6n2lfa.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe39fefpe.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpe39fefpe.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpe39fefpe.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_eajz6jj.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp_eajz6jj.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp_eajz6jj.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgy1nsa0y.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpgy1nsa0y.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpgy1nsa0y.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvp04insp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpvp04insp.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpvp04insp.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjwmmwwtc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpjwmmwwtc.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpjwmmwwtc.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp56cyi4ud.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp56cyi4ud.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp56cyi4ud.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjw1snb7o.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpjw1snb7o.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpjw1snb7o.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpjw1snb7o.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpjw1snb7o.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf4s8fyv5.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpf4s8fyv5.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpf4s8fyv5.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpf4s8fyv5.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpf4s8fyv5.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x)[2:].count('1'), x))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphoi1syxc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmphoi1syxc.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmphoi1syxc.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjc_hiiv.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqjc_hiiv.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpqjc_hiiv.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpqjc_hiiv.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpqjc_hiiv.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpizqlyuos.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpizqlyuos.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpizqlyuos.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpizqlyuos.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpizqlyuos.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), int(x)))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1rsg5qdw.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp1rsg5qdw.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp1rsg5qdw.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: count_ones(x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5useqyk1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5useqyk1.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp5useqyk1.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmp5useqyk1.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: count_ones(x))\n  File \"/tmp/tmp5useqyk1.py\", line 14, in <lambda>\n  \
    \  return sorted(arr, key=lambda x: count_ones(x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppc9ev0gz.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmppc9ev0gz.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmppc9ev0gz.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), int(x)))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw9nw1q7f.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpw9nw1q7f.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpw9nw1q7f.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdj39aoon.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpdj39aoon.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpdj39aoon.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count(\"1\"), x))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr21e1ejp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpr21e1ejp.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpr21e1ejp.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfcuwy3fu.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpfcuwy3fu.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpfcuwy3fu.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: count_ones(x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptutxmxem.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmptutxmxem.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmptutxmxem.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmptutxmxem.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: count_ones(x))\n  File \"/tmp/tmptutxmxem.py\", line 14, in <lambda>\n  \
    \  return sorted(arr, key=lambda x: count_ones(x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), int(x)))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvtwdgdyh.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpvtwdgdyh.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpvtwdgdyh.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8eduh3_e.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp8eduh3_e.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp8eduh3_e.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9qf8bv37.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp9qf8bv37.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp9qf8bv37.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3w2ii_e5.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp3w2ii_e5.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp3w2ii_e5.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq_ws8sl7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq_ws8sl7.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpq_ws8sl7.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt61vpzwd.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpt61vpzwd.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpt61vpzwd.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptflmeri8.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmptflmeri8.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmptflmeri8.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0h21wipz.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp0h21wipz.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp0h21wipz.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7epdzk9a.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7epdzk9a.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp7epdzk9a.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9xug4efc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp9xug4efc.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp9xug4efc.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddaumbo2.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpddaumbo2.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpddaumbo2.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpht43wun3.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpht43wun3.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpht43wun3.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count(\"1\"), x))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf62qpm1q.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpf62qpm1q.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpf62qpm1q.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3k9j9nf2.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp3k9j9nf2.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp3k9j9nf2.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyh_4z4ci.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpyh_4z4ci.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpyh_4z4ci.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: count_ones(bin(x)), reverse=True)\n\ndef check(candidate):\n \
    \   assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxy56wprh.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpxy56wprh.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpxy56wprh.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpxy56wprh.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: count_ones(bin(x)), reverse=True)\n  File \"/tmp/tmpxy56wprh.py\", line 14,\
    \ in <lambda>\n    return sorted(arr, key=lambda x: count_ones(bin(x)), reverse=True)\n\
    NameError: name 'count_ones' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp96hertv0.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp96hertv0.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp96hertv0.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: count_ones(bin(x)[2:]))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmrsrn9hm.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpmrsrn9hm.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpmrsrn9hm.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpmrsrn9hm.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: count_ones(bin(x)[2:]))\n  File \"/tmp/tmpmrsrn9hm.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: count_ones(bin(x)[2:]))\nNameError: name\
    \ 'count_ones' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_stadj6n.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp_stadj6n.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp_stadj6n.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmp_stadj6n.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmp_stadj6n.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6nv10h8w.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6nv10h8w.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp6nv10h8w.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprf2xd1n8.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmprf2xd1n8.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmprf2xd1n8.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0kp81qrb.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp0kp81qrb.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp0kp81qrb.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmp0kp81qrb.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmp0kp81qrb.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph26pcra1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmph26pcra1.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmph26pcra1.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0fftpm7k.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp0fftpm7k.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp0fftpm7k.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wn9j6yq.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp8wn9j6yq.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp8wn9j6yq.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvavxh58_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpvavxh58_.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpvavxh58_.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x)[2:].count(\"1\"), x))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeu8r5vcf.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpeu8r5vcf.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpeu8r5vcf.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: count_ones(bin(x)[2:]))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfx29j5qt.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpfx29j5qt.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpfx29j5qt.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpfx29j5qt.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: count_ones(bin(x)[2:]))\n  File \"/tmp/tmpfx29j5qt.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: count_ones(bin(x)[2:]))\nNameError: name\
    \ 'count_ones' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), int(x)))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9xuxowm0.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp9xuxowm0.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp9xuxowm0.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp51xw9hlb.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp51xw9hlb.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp51xw9hlb.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbu0fi02j.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpbu0fi02j.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpbu0fi02j.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp32gm8bkv.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp32gm8bkv.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp32gm8bkv.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgh7xxf74.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpgh7xxf74.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpgh7xxf74.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuz1q6ut1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpuz1q6ut1.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpuz1q6ut1.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp72lt_8ap.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp72lt_8ap.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp72lt_8ap.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe6zaaoh2.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpe6zaaoh2.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpe6zaaoh2.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdme0jyal.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpdme0jyal.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpdme0jyal.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpdme0jyal.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpdme0jyal.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x)[2:].count(\"1\"), x))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu_95lztz.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpu_95lztz.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpu_95lztz.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), int(x)))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp77we25yk.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp77we25yk.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp77we25yk.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), int(x)), reverse=True)\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl_emg9dc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpl_emg9dc.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpl_emg9dc.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk4tra_6d.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpk4tra_6d.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpk4tra_6d.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvm8jl8_g.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpvm8jl8_g.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpvm8jl8_g.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpvm8jl8_g.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpvm8jl8_g.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5vn52cd8.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp5vn52cd8.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp5vn52cd8.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf0d9m4m0.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpf0d9m4m0.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpf0d9m4m0.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpigvceazd.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpigvceazd.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpigvceazd.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpigvceazd.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmpigvceazd.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8zktv88j.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp8zktv88j.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp8zktv88j.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x)[2:].count('1'), x))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp44a5vjpc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp44a5vjpc.py\", line 27,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp44a5vjpc.py\", line 17,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmp44a5vjpc.py\", line 14, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmp44a5vjpc.py\", line 14, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
