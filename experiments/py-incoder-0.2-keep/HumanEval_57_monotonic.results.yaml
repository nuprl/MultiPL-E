name: HumanEval_57_monotonic
language: python
results:
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    if\
    \ l[-1] > l[-2]:\n        return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnqa6c0ea.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpnqa6c0ea.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpnqa6c0ea.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd36dvj5p.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpd36dvj5p.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpd36dvj5p.py\", line 20,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp60c2cbze.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp60c2cbze.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp60c2cbze.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = i\n    while j < len(l) - 1:\n\
    \        if l[j] < l[j + 1]:\n            return False\n        j += 1\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptpgoaa1s.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmptpgoaa1s.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmptpgoaa1s.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        return all(l[i] <= l[i+1] for\
    \ i in range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2lwx7iwy.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp2lwx7iwy.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp2lwx7iwy.py\", line 21,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxvsuum29.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpxvsuum29.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpxvsuum29.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpxvsuum29.py\"\
    , line 14, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev > x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphyi6vdyu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmphyi6vdyu.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmphyi6vdyu.py\", line 26,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev <= x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp46kjk3az.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp46kjk3az.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp46kjk3az.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev > i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5c_f0thz.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp5c_f0thz.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp5c_f0thz.py\", line 26,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpassx8ag2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpassx8ag2.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpassx8ag2.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = i\n    while i < len(l) - 1:\n\
    \        if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n\
    \            i += 1\n        else:\n            j += 1\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe91dzjyi.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpe91dzjyi.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpe91dzjyi.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    prev = l[0]\n    for i in l[1:]:\n        if\
    \ prev < i:\n            return False\n        prev = i\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzgfbut17.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpzgfbut17.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpzgfbut17.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    head, *tail = l\n    if head < tail[0]:\n   \
    \     return True\n    if head > tail[-1]:\n        return True\n    return monotonic(tail)\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpep62qjoo.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpep62qjoo.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpep62qjoo.py\", line 24,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    l.sort()\n    return l[0] < l[-1]\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa0z5h5gf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpa0z5h5gf.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpa0z5h5gf.py\", line 20,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[-2]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk95w__vm.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpk95w__vm.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpk95w__vm.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2cdmwlp5.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp2cdmwlp5.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp2cdmwlp5.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp2cdmwlp5.py\"\
    , line 14, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev < i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqhpmhlq4.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqhpmhlq4.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpqhpmhlq4.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = -1\n    j = len(l) - 1\n    while i < j:\n\
    \        if l[i] < l[j]:\n            return False\n        i += 1\n        i\
    \ -= 1\n        j += 1\n        j -= 1\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i, j = 0, len(l) - 1\n    while i < j:\n    \
    \    if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n  \
    \          return True\n        i += 1\n        j -= 1\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwm1j0sek.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwm1j0sek.py\", line 35,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpwm1j0sek.py\", line 25,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_i465n_x.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp_i465n_x.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp_i465n_x.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return False\n    i,\
    \ j = 0, len(l) - 1\n    while i < j:\n        if l[i] < l[j]:\n            return\
    \ True\n        elif l[i] > l[j]:\n            return False\n        i += 1\n\
    \        i %= len(l)\n        j -= 1\n        j %= len(l)\n    return True\n\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdk7hkkmz.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpdk7hkkmz.py\", line 39,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpdk7hkkmz.py\", line 31,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    if\
    \ l[-1] > l[-2]:\n        return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppkqjx64y.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmppkqjx64y.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmppkqjx64y.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev < i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfs5h9uwd.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfs5h9uwd.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpfs5h9uwd.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjeal4cnd.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpjeal4cnd.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpjeal4cnd.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpjeal4cnd.py\"\
    , line 14, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev < i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppm3h085k.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppm3h085k.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmppm3h085k.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[-2]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9bgncg0q.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9bgncg0q.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp9bgncg0q.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        prev = l[0]\n        for el in\
    \ l[1:]:\n            if el < prev:\n                return False\n          \
    \  prev = el\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpesz9ccah.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpesz9ccah.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpesz9ccah.py\", line 26,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxjgxdug8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxjgxdug8.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpxjgxdug8.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    head, *tail = l\n    if head <= tail[0]:\n  \
    \      return True\n    if head < tail[-1]:\n        return False\n    return\
    \ monotonic(tail)\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88frafq6.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp88frafq6.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp88frafq6.py\", line 24,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    if\
    \ l[-1] > l[-2]:\n        return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkf80bjsw.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpkf80bjsw.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpkf80bjsw.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnb7xni46.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnb7xni46.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpnb7xni46.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpnb7xni46.py\"\
    , line 14, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        first = l[0]\n        last = l[-1]\n\
    \        if first < last:\n            return True\n        else:\n          \
    \  return False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph66tcoog.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmph66tcoog.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmph66tcoog.py\", line 25,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        first = l[0]\n        last = l[-1]\n\
    \        if first < last:\n            return True\n        else:\n          \
    \  return False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf6sa4rg8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpf6sa4rg8.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpf6sa4rg8.py\", line 25,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = j = 0\n    while i < len(l) - 1:\n      \
    \  if l[i] < l[i + 1]:\n            return False\n        i += 1\n    while j\
    \ < len(l) - 1:\n        if l[j] > l[j + 1]:\n            return False\n     \
    \   j += 1\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq73bph7w.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpq73bph7w.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpq73bph7w.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp05g20345.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp05g20345.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp05g20345.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    head, *tail = l\n    if head < tail[0]:\n   \
    \     return True\n    elif head > tail[-1]:\n        return True\n    else:\n\
    \        return monotonic(tail)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzos08ywd.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpzos08ywd.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpzos08ywd.py\", line 25,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev < i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpes00kfyi.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpes00kfyi.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpes00kfyi.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = len(l) - 1\n    while i < j:\n\
    \        if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n\
    \            return True\n        i += 1\n        j -= 1\n    return True\n\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoevdf53f.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpoevdf53f.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpoevdf53f.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rkpdyks.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6rkpdyks.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp6rkpdyks.py\", line 20,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = len(l) - 2\n    j = i\n    while j > 0 and\
    \ l[j-1] > l[j]:\n        j -= 1\n    return j == 0 or l[j] < l[j-1]\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc4uwxqxy.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpc4uwxqxy.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpc4uwxqxy.py\", line 21,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    l.sort()\n    return l[0] < l[-1]\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1jyaqs4d.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1jyaqs4d.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp1jyaqs4d.py\", line 20,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] > l[-1]:\n        return True\n    i\
    \ = 0\n    j = len(l) - 1\n    while i < j:\n        if l[i] < l[j]:\n       \
    \     return False\n        elif l[i] > l[j]:\n            i += 1\n        else:\n\
    \            j -= 1\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpouiui8ro.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpouiui8ro.py\", line 38,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpouiui8ro.py\", line 28,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = i\n    while j < len(l) - 1:\n\
    \        if l[j] < l[j + 1]:\n            return False\n        j += 1\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_f0l0zsb.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp_f0l0zsb.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp_f0l0zsb.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev > i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuipzi17j.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuipzi17j.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpuipzi17j.py\", line 26,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev < i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp62s9gb_8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp62s9gb_8.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp62s9gb_8.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    l = list(l)\n\
    \    l.sort()\n    return l[0] == l[-1]\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6reg9u_3.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6reg9u_3.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp6reg9u_3.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqloyjr6v.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqloyjr6v.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpqloyjr6v.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsybnz9ig.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpsybnz9ig.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpsybnz9ig.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpooidru93.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpooidru93.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpooidru93.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpooidru93.py\"\
    , line 14, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9_dsj_hi.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp9_dsj_hi.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp9_dsj_hi.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp9_dsj_hi.py\"\
    , line 14, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkrrp8vdq.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpkrrp8vdq.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpkrrp8vdq.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev <= x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgpe510wz.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpgpe510wz.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpgpe510wz.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        return all(l[i] <= l[i+1] for\
    \ i in xrange(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe_uo82tx.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpe_uo82tx.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpe_uo82tx.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpe_uo82tx.py\"\
    , line 15, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        return all(l[i] <= l[i+1] for\
    \ i in range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaopytnn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbaopytnn.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpbaopytnn.py\", line 21,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return False\n    i,\
    \ j = 0, len(l) - 1\n    while i < j:\n        if l[i] < l[j]:\n            return\
    \ False\n        i += 1\n        i %= len(l)\n        j -= 1\n        j %= len(l)\n\
    \    return True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpryafm8j8.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpryafm8j8.py\", line 37,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpryafm8j8.py\", line 27,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu3s8y9pr.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpu3s8y9pr.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpu3s8y9pr.py\", line 20,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev < i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ks49351.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp0ks49351.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp0ks49351.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        head, *tail = l\n        if head\
    \ < tail[0]:\n            return False\n        elif head > tail[-1]:\n      \
    \      return True\n        else:\n            return monotonic(tail)\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp032mpwsw.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp032mpwsw.py\", line 34,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp032mpwsw.py\", line 24,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = len(l) - 2\n    j = i\n    while j > 0 and\
    \ l[j-1] > l[j]:\n        j -= 1\n    return j == 0 or l[j] < l[j-1]\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr5kgf0vu.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpr5kgf0vu.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpr5kgf0vu.py\", line 21,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgpzl42p6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpgpzl42p6.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpgpzl42p6.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    prev = l[0]\n    for i in l[1:]:\n        if\
    \ prev < i:\n            return False\n        prev = i\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfg3371h0.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpfg3371h0.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpfg3371h0.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    head, *tail = l\n    if head < tail[0]:\n   \
    \     return True\n    if head > tail[-1]:\n        return True\n    return monotonic(tail)\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjcfvihhn.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpjcfvihhn.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpjcfvihhn.py\", line 24,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    head, *tail = l\n    if head <= tail[0]:\n  \
    \      return monotonic(tail)\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxhd9_v4o.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxhd9_v4o.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpxhd9_v4o.py\", line 24,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i, j = 0, len(l) - 1\n    while i < j:\n    \
    \    if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n  \
    \          i += 1\n        else:\n            j -= 1\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn9oy0_9e.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpn9oy0_9e.py\", line 35,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpn9oy0_9e.py\", line 25,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    head, *tail = l\n    if head < tail[0]:\n   \
    \     return True\n    if head > tail[-1]:\n        return True\n    return monotonic(tail)\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbiullcz1.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbiullcz1.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpbiullcz1.py\", line 24,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    head, *tail = l\n    if head < tail[0]:\n   \
    \     return True\n    elif head > tail[-1]:\n        return True\n    else:\n\
    \        return monotonic(tail)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0lazjqt3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp0lazjqt3.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp0lazjqt3.py\", line 25,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev < i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph77gp_lg.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmph77gp_lg.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmph77gp_lg.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = len(l) - 2\n    j = i\n    while j > 0 and\
    \ l[j-1] > l[j]:\n        j -= 1\n    return j == 0 or l[j-1] <= l[j]\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaj93pjf1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpaj93pjf1.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpaj93pjf1.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        first = l[0]\n        last = l[-1]\n\
    \        if first < last:\n            return True\n        else:\n          \
    \  return False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuwhzu2t8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuwhzu2t8.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpuwhzu2t8.py\", line 25,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        first = l[0]\n        last = l[-1]\n\
    \        if first < last:\n            return True\n        else:\n          \
    \  return False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8rqlkd2f.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp8rqlkd2f.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp8rqlkd2f.py\", line 25,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev < i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1wln3rli.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1wln3rli.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp1wln3rli.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = len(l) - 2\n    j = i\n    while j > 0 and\
    \ l[j-1] > l[j]:\n        j -= 1\n    return j > 0\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6v5j2wq5.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp6v5j2wq5.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp6v5j2wq5.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu0o4db19.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpu0o4db19.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpu0o4db19.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        return all(l[i] <= l[i+1] for\
    \ i in range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzu8o_j7r.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzu8o_j7r.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpzu8o_j7r.py\", line 21,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    if\
    \ l[-1] > l[-2]:\n        return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgionls4u.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpgionls4u.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpgionls4u.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        first = l[0]\n        last = l[-1]\n\
    \        if first < last:\n            return True\n        else:\n          \
    \  return False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzdowyq6s.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpzdowyq6s.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpzdowyq6s.py\", line 25,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        return all(l[i] <= l[i+1] for\
    \ i in xrange(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqeblyfny.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpqeblyfny.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpqeblyfny.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpqeblyfny.py\"\
    , line 15, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkboi09qd.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpkboi09qd.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpkboi09qd.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] < l[1]:\n        return True\n    if\
    \ l[-1] < l[-2]:\n        return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpspmt7mlr.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpspmt7mlr.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpspmt7mlr.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfcjjiiol.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfcjjiiol.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpfcjjiiol.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    prev = l[0]\n    for i in l[1:]:\n        if\
    \ prev < i:\n            return False\n        prev = i\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm4ypbrl8.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpm4ypbrl8.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpm4ypbrl8.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi5g77hpl.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpi5g77hpl.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpi5g77hpl.py\", line 20,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    if\
    \ l[-1] > l[-2]:\n        return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgiq_e_p_.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpgiq_e_p_.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpgiq_e_p_.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = len(l) - 1\n    while i < j:\n\
    \        if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n\
    \            i += 1\n        else:\n            j -= 1\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc_fp8qu0.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpc_fp8qu0.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpc_fp8qu0.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = i\n    while i < len(l) - 1:\n\
    \        if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n\
    \            i += 1\n        else:\n            j -= 1\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4n6mvskx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp4n6mvskx.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp4n6mvskx.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[-2]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjkx00jb6.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjkx00jb6.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpjkx00jb6.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphh6135z4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphh6135z4.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmphh6135z4.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdg_lxyhm.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdg_lxyhm.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpdg_lxyhm.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    l.sort()\n    if l[0] < l[-1]:\n        return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqppm9je3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqppm9je3.py\", line 30,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpqppm9je3.py\", line 22,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev > x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptj9c0je8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmptj9c0je8.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmptj9c0je8.py\", line 26,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i, j = 0, len(l) - 1\n    while i < j:\n    \
    \    if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n  \
    \          i += 1\n        else:\n            j -= 1\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4nlw8q5y.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4nlw8q5y.py\", line 35,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp4nlw8q5y.py\", line 25,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev < i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcpbkvv08.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpcpbkvv08.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpcpbkvv08.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = i\n    while i < len(l) - 1:\n\
    \        if l[i] > l[i + 1]:\n            return False\n        i += 1\n    while\
    \ j < len(l):\n        if l[j] < l[j + 1]:\n            return False\n       \
    \ j += 1\n    return True\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoldvkq26.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpoldvkq26.py\", line 37,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpoldvkq26.py\", line 27,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return False\n    i,\
    \ j = 0, len(l) - 1\n    while i < j:\n        if l[i] < l[j]:\n            return\
    \ True\n        elif l[i] > l[j]:\n            return False\n        i += 1\n\
    \        i %= len(l)\n        j -= 1\n        j %= len(l)\n    return True\n\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb594s5r8.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpb594s5r8.py\", line 39,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpb594s5r8.py\", line 31,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    l.sort()\n    return l[0] < l[-1]\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr11tkeaw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpr11tkeaw.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpr11tkeaw.py\", line 20,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[-2]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_94od5fl.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_94od5fl.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp_94od5fl.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4h_1r8r9.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp4h_1r8r9.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp4h_1r8r9.py\", line 20,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[-2]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6_2usaj_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp6_2usaj_.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp6_2usaj_.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev > x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9a3vz6sq.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9a3vz6sq.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp9a3vz6sq.py\", line 26,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_vjrr8p0.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp_vjrr8p0.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp_vjrr8p0.py\", line 20,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return False\n    diff1\
    \ = l[1] - l[0]\n    diff2 = l[2] - l[1]\n    return diff1 < diff2\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8k587iov.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp8k587iov.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp8k587iov.py\", line 24,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        return all(l[i] <= l[i+1] for\
    \ i in xrange(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkg6t5se5.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkg6t5se5.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpkg6t5se5.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpkg6t5se5.py\"\
    , line 15, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev < i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp08zhl5oi.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp08zhl5oi.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp08zhl5oi.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl3w0f992.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpl3w0f992.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpl3w0f992.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    if\
    \ l[-1] > l[-2]:\n        return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjazsv8gl.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpjazsv8gl.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpjazsv8gl.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wl4x8am.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4wl4x8am.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp4wl4x8am.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpofj36rhk.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpofj36rhk.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpofj36rhk.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpofj36rhk.py\"\
    , line 14, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = len(l) - 1\n    while i < j:\n\
    \        if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n\
    \            return True\n        i += 1\n        j -= 1\n    return True\n\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_k4sdz38.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp_k4sdz38.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp_k4sdz38.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[-2]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplxui0iah.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmplxui0iah.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmplxui0iah.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev <= x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9fsf9qc3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9fsf9qc3.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp9fsf9qc3.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i, j = 0, len(l) - 1\n    while i < j:\n    \
    \    if l[i] < l[j]:\n            return True\n        elif l[i] > l[j]:\n   \
    \         return False\n        i += 1\n        i %= len(l)\n        j -= 1\n\
    \        j %= len(l)\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr2zskdkb.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpr2zskdkb.py\", line 37,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpr2zskdkb.py\", line 29,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnuxo5mn3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpnuxo5mn3.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpnuxo5mn3.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnabf34q1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnabf34q1.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpnabf34q1.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpnabf34q1.py\"\
    , line 14, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = len(l) - 1\n    while i < j:\n\
    \        if l[i] > l[j]:\n            return False\n        elif l[i] < l[j]:\n\
    \            i += 1\n        else:\n            j -= 1\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj_40sxv0.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpj_40sxv0.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpj_40sxv0.py\", line 29,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    l.sort()\n    return l[0] == l[-1] and l[0] <\
    \ 0\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n  \
    \  assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10])\
    \ == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnu86nje3.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpnu86nje3.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpnu86nje3.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = i\n    while j < len(l) - 1:\n\
    \        if l[j] < l[j + 1]:\n            i += 1\n        else:\n            j\
    \ += 1\n    return i == len(l)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = len(l) - 1\n    while i < j:\n\
    \        if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n\
    \            i += 1\n        else:\n            j -= 1\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeduo7muq.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpeduo7muq.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpeduo7muq.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev > i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzsw2lgzn.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpzsw2lgzn.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpzsw2lgzn.py\", line 26,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev < i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw3rmn2x5.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpw3rmn2x5.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpw3rmn2x5.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = -1\n    while i < len(l) - 1:\n\
    \        if l[i] < l[i + 1]:\n            return False\n        elif l[i] > l[i\
    \ + 1]:\n            i += 1\n        else:\n            j += 1\n            if\
    \ j == len(l) - 1:\n                return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp22lsq8aw.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp22lsq8aw.py\", line 38,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp22lsq8aw.py\", line 28,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpshiu3uqf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpshiu3uqf.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpshiu3uqf.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        return all(l[i] <= l[i+1] for\
    \ i in range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpou625sa9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpou625sa9.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpou625sa9.py\", line 21,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    l = list(l)\n\
    \    l.sort()\n    return l[0] < l[-1]\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp08b_ziri.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp08b_ziri.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp08b_ziri.py\", line 19,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = len(l) - 1\n    while i < j:\n\
    \        if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n\
    \            i += 1\n        else:\n            j -= 1\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2uq1alrt.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp2uq1alrt.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp2uq1alrt.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = i\n    while i < len(l) - 1:\n\
    \        if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n\
    \            i += 1\n        else:\n            j += 1\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4nhf4sui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp4nhf4sui.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp4nhf4sui.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[-2]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7xd02um.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpw7xd02um.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpw7xd02um.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpejiynr2d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpejiynr2d.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpejiynr2d.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = i\n    while j < len(l) - 1:\n\
    \        if l[j] < l[j + 1]:\n            return False\n        j += 1\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9gfaaw3g.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9gfaaw3g.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp9gfaaw3g.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = len(l) - 1\n    while i < j:\n\
    \        if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n\
    \            i += 1\n        else:\n            j -= 1\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv3t5l7m4.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpv3t5l7m4.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpv3t5l7m4.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz0zzirp0.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpz0zzirp0.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpz0zzirp0.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpz0zzirp0.py\"\
    , line 14, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = len(l) - 1\n    while i < j:\n\
    \        if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n\
    \            i += 1\n        else:\n            j -= 1\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrknulcr.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpgrknulcr.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpgrknulcr.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    l.sort()\n    if l[0] > l[-1]:\n        return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplbdrlixr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmplbdrlixr.py\", line 30,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmplbdrlixr.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    head, *tail = l\n    if head == tail:\n     \
    \   return True\n    if head > tail:\n        return False\n    return monotonic(tail)\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprrbbl1sf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmprrbbl1sf.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmprrbbl1sf.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmprrbbl1sf.py\"\
    , line 17, in monotonic\n    if head > tail:\nTypeError: '>' not supported between\
    \ instances of 'int' and 'list'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4n85pqj0.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4n85pqj0.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp4n85pqj0.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i, j = 0, len(l) - 1\n    while i < j:\n    \
    \    if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n  \
    \          i += 1\n        else:\n            j -= 1\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp19r5jrc4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp19r5jrc4.py\", line 35,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp19r5jrc4.py\", line 25,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    l.sort()\n    return l[0] < l[-1]\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptjal9_ng.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmptjal9_ng.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmptjal9_ng.py\", line 20,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphdsd6f61.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmphdsd6f61.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmphdsd6f61.py\", line 20,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzwlxsrl4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpzwlxsrl4.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpzwlxsrl4.py\", line 20,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    prev = l[0]\n    for i in l[1:]:\n        if\
    \ prev < i:\n            return False\n        prev = i\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd9ks_86r.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpd9ks_86r.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpd9ks_86r.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    head, *tail = l\n    if head < tail[0]:\n   \
    \     return True\n    if head == tail[0]:\n        return monotonic(tail[1:])\n\
    \    return False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcnqvl15e.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpcnqvl15e.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpcnqvl15e.py\", line 24,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        if l[-1] < l[0]:\n           \
    \ return False\n        else:\n            return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpja5xrxpa.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpja5xrxpa.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpja5xrxpa.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbdmczvzv.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbdmczvzv.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpbdmczvzv.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = len(l) - 1\n    while i < j:\n\
    \        if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n\
    \            return True\n        i += 1\n        j -= 1\n    return True\n\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1x67_ljq.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp1x67_ljq.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp1x67_ljq.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfqo0g4og.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfqo0g4og.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpfqo0g4og.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprmi_yppy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmprmi_yppy.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmprmi_yppy.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = len(l) - 1\n    while i < j:\n\
    \        if l[i] > l[j]:\n            return False\n        elif l[i] < l[j]:\n\
    \            i += 1\n        else:\n            j -= 1\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkooovg1k.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpkooovg1k.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpkooovg1k.py\", line 29,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev < i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8o3a_xzm.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp8o3a_xzm.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp8o3a_xzm.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv3d3jp29.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpv3d3jp29.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpv3d3jp29.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqxefuor7.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqxefuor7.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpqxefuor7.py\", line 20,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    l.sort()\n    return l[0] < l[-1]\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9czcwaav.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9czcwaav.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp9czcwaav.py\", line 20,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph1s7_bn8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmph1s7_bn8.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmph1s7_bn8.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd5k78uhr.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpd5k78uhr.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpd5k78uhr.py\", line 20,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    if\
    \ l[-1] > l[-2]:\n        return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkel7obdl.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpkel7obdl.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpkel7obdl.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8q0pddba.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp8q0pddba.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp8q0pddba.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = j = 0\n    while i < len(l) - 1:\n      \
    \  if l[i] < l[i + 1]:\n            return False\n        i += 1\n    while j\
    \ < len(l) - 1:\n        if l[j] > l[j + 1]:\n            return False\n     \
    \   j += 1\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0j96dkvd.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp0j96dkvd.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp0j96dkvd.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i, j = 0, len(l) - 1\n    while i < j:\n    \
    \    if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n  \
    \          i += 1\n        else:\n            j -= 1\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpen9ytryl.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpen9ytryl.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpen9ytryl.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7aq6twdt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7aq6twdt.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp7aq6twdt.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    l.sort()\n    return l[0] == l[-1] and l[-1]\
    \ - l[-2] >= 0\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) ==\
    \ True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvq3ugwrt.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpvq3ugwrt.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpvq3ugwrt.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev < i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp74q0h47g.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp74q0h47g.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp74q0h47g.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i, j = 0, 1\n    while i < len(l) - 1:\n    \
    \    if l[i] < l[j]:\n            return False\n        i += 1\n        j += 1\n\
    \    return True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ekpfen3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1ekpfen3.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp1ekpfen3.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfegi2e6y.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfegi2e6y.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpfegi2e6y.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    head, *tail = l\n    if head < tail[0]:\n   \
    \     return True\n    if head > tail[-1]:\n        return True\n    return monotonic(tail)\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk51_mohd.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpk51_mohd.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpk51_mohd.py\", line 24,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = len(l) - 1\n    while i < j:\n\
    \        if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n\
    \            i += 1\n        else:\n            j -= 1\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnqov5jms.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpnqov5jms.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpnqov5jms.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8u21_9tq.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp8u21_9tq.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp8u21_9tq.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp8u21_9tq.py\"\
    , line 14, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    l = list(l)\n\
    \    l.sort()\n    return l[0] == l[-1]\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaxbv6yns.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpaxbv6yns.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpaxbv6yns.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdufv66vt.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpdufv66vt.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpdufv66vt.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpdufv66vt.py\"\
    , line 14, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    l.sort()\n    return l[0] < l[-1]\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprffgj7fg.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprffgj7fg.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmprffgj7fg.py\", line 20,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] > l[-1]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdi2emvwj.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdi2emvwj.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpdi2emvwj.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    l.sort()\n    if l[0] < l[1]:\n        return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5_fx22e0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp5_fx22e0.py\", line 30,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp5_fx22e0.py\", line 22,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcjils5qk.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpcjils5qk.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpcjils5qk.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpcjils5qk.py\"\
    , line 14, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    diff = l[1] - l[0]\n    for x in l[2:]:\n   \
    \     if x < l[0] + diff:\n            return False\n        diff += x - l[0]\n\
    \    return True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprlmznjzs.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmprlmznjzs.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmprlmznjzs.py\", line 25,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    l.sort()\n    return l[0] < l[-1]\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7e36lnw9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7e36lnw9.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp7e36lnw9.py\", line 20,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = -1\n    j = len(l) - 1\n    while i < j:\n\
    \        if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n\
    \            i += 1\n        else:\n            j -= 1\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnylmadxa.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpnylmadxa.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpnylmadxa.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ma02c0t.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp5ma02c0t.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp5ma02c0t.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] < l[1]:\n        return True\n    if\
    \ l[-1] < l[-2]:\n        return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi4nj8txz.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpi4nj8txz.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpi4nj8txz.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev < i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfpftq02a.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfpftq02a.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpfpftq02a.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev > i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1xf9ijnl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1xf9ijnl.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp1xf9ijnl.py\", line 26,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[-2]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd_7p7jdq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpd_7p7jdq.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpd_7p7jdq.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdq27vpj9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdq27vpj9.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpdq27vpj9.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    diff1 = l[1] - l[0]\n    diff2 = l[2] - l[1]\n\
    \    return diff1 < diff2\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuq99g1hc.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpuq99g1hc.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpuq99g1hc.py\", line 25,\
    \ in check\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6c052h7b.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp6c052h7b.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp6c052h7b.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        head, *tail = l\n        if head\
    \ < tail[0]:\n            return True\n        elif head > tail[-1]:\n       \
    \     return True\n        else:\n            return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkqc4ym6.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpgkqc4ym6.py\", line 34,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpgkqc4ym6.py\", line 26,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    prev = l[0]\n    for i in l[1:]:\n        if\
    \ prev < i:\n            return False\n        prev = i\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwo0v1xwj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpwo0v1xwj.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpwo0v1xwj.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev <= x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpupcwz6js.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpupcwz6js.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpupcwz6js.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_n89dar8.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp_n89dar8.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp_n89dar8.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp_n89dar8.py\"\
    , line 14, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = len(l) - 2\n    j = i\n    while j > 0 and\
    \ l[j] < l[j-1]:\n        j -= 1\n    if j == i:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl0wa1onx.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpl0wa1onx.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpl0wa1onx.py\", line 26,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev < i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7zm1y7xq.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7zm1y7xq.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp7zm1y7xq.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = i\n    while i < len(l) - 1:\n\
    \        if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n\
    \            i += 1\n        else:\n            j += 1\n    return i == len(l)\
    \ - 1\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprx30bsdt.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmprx30bsdt.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmprx30bsdt.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc874pz0b.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpc874pz0b.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpc874pz0b.py\", line 20,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    head, *tail = l\n    if head < tail[0]:\n   \
    \     return True\n    if head > tail[-1]:\n        return True\n    return monotonic(tail)\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw89f32r4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpw89f32r4.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpw89f32r4.py\", line 24,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = i\n    while i < len(l) - 1:\n\
    \        if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n\
    \            i += 1\n        else:\n            j -= 1\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc0sf3iny.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpc0sf3iny.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpc0sf3iny.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev < i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpknbhmo4i.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpknbhmo4i.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpknbhmo4i.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev > i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_9ln5w7j.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp_9ln5w7j.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp_9ln5w7j.py\", line 26,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        return all(l[i] <= l[i+1] for\
    \ i in range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0qave9ot.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp0qave9ot.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp0qave9ot.py\", line 21,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfrwzx3nj.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfrwzx3nj.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpfrwzx3nj.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev <= x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjnln3hq7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpjnln3hq7.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpjnln3hq7.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev > x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvke2t83.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpzvke2t83.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpzvke2t83.py\", line 26,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        head, *tail = l\n        if head\
    \ < tail[0]:\n            return True\n        elif head > tail[-1]:\n       \
    \     return True\n        else:\n            return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzzfnn_3d.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzzfnn_3d.py\", line 34,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpzzfnn_3d.py\", line 26,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpej2bxc0f.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpej2bxc0f.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpej2bxc0f.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpej2bxc0f.py\"\
    , line 14, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1qvjiq70.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1qvjiq70.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp1qvjiq70.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
