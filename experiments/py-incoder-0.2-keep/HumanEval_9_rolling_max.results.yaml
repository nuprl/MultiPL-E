name: HumanEval_9_rolling_max
language: python
results:
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for num in numbers:\n \
    \       rolling_max_list.append(max(rolling_max_list[-1], num))\n    return rolling_max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeen9tn9a.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpeen9tn9a.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpeen9tn9a.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpeen9tn9a.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)\
    \ - 1):\n        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm1ey9_v6.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpm1ey9_v6.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpm1ey9_v6.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpm1ey9_v6.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb6fjnjuv.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpb6fjnjuv.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpb6fjnjuv.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpb6fjnjuv.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo8rfflus.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpo8rfflus.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpo8rfflus.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpo8rfflus.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for num in numbers:\n \
    \       if num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1vs3uc52.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp1vs3uc52.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp1vs3uc52.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp1vs3uc52.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzsw9w4it.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzsw9w4it.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpzsw9w4it.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpzsw9w4it.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppb78s1sy.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmppb78s1sy.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmppb78s1sy.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmppb78s1sy.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for num in numbers:\n \
    \       rolling_max_list.append(max(rolling_max_list[-1], num))\n    return rolling_max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxpecnff7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpxpecnff7.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpxpecnff7.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpxpecnff7.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeptsw5ad.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpeptsw5ad.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpeptsw5ad.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpeptsw5ad.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > rolling_max_list[-1]:\n            rolling_max_list.append(numbers[i])\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdsbf4a3a.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpdsbf4a3a.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpdsbf4a3a.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpdsbf4a3a.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    for number in numbers:\n \
    \       rolling_maxes.append(max(rolling_maxes[-1], number))\n    return rolling_maxes\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzjo1wyh2.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzjo1wyh2.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpzjo1wyh2.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpzjo1wyh2.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfmj8r7s2.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpfmj8r7s2.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpfmj8r7s2.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpfmj8r7s2.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n        \n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr4k_6fx1.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpr4k_6fx1.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpr4k_6fx1.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpr4k_6fx1.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    return rolling_max_list\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpex4j9_nh.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpex4j9_nh.py\", line 26,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpex4j9_nh.py\", line\
    \ 20, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpex4j9_nh.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9q8xkvo6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp9q8xkvo6.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp9q8xkvo6.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp9q8xkvo6.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        if number > rolling_max_list[-1]:\n            rolling_max_list.append(number)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn3t45slm.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpn3t45slm.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpn3t45slm.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpn3t45slm.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    for number in numbers:\n \
    \       rolling_maxes.append(max(rolling_maxes[-1], number))\n    return rolling_maxes\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjlvbnt0b.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpjlvbnt0b.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpjlvbnt0b.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpjlvbnt0b.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_5e3hqcy.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_5e3hqcy.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp_5e3hqcy.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp_5e3hqcy.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n        \n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfek_fvq_.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpfek_fvq_.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpfek_fvq_.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpfek_fvq_.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfvi1gyri.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpfvi1gyri.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpfvi1gyri.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpfvi1gyri.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    rolling_maxes.append(max(numbers))\n\
    \    rolling_maxes.append(max(numbers))\n    rolling_maxes.append(max(numbers))\n\
    \    rolling_maxes.append(max(numbers))\n    rolling_maxes.append(max(numbers))\n\
    \    rolling_maxes.append(max(numbers))\n    rolling_maxes.append(max(numbers))\n\
    \    return rolling_maxes\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplgftqr_f.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmplgftqr_f.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmplgftqr_f.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmplgftqr_f.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ajyqtmb.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp8ajyqtmb.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp8ajyqtmb.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp8ajyqtmb.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppc0x8qsd.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmppc0x8qsd.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmppc0x8qsd.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmppc0x8qsd.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptn7p0uz1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmptn7p0uz1.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmptn7p0uz1.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmptn7p0uz1.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqy7m59sc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqy7m59sc.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpqy7m59sc.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpqy7m59sc.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for num in numbers:\n \
    \       rolling_max_list.append(max(rolling_max_list[-1], num))\n    return rolling_max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu2x6i1_b.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpu2x6i1_b.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpu2x6i1_b.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpu2x6i1_b.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        if number > rolling_max_list[-1]:\n            rolling_max_list.append(number)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxj3zybtr.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpxj3zybtr.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpxj3zybtr.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpxj3zybtr.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4l1hgm54.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp4l1hgm54.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp4l1hgm54.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp4l1hgm54.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpudep1xa9.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpudep1xa9.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpudep1xa9.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpudep1xa9.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp929eftyk.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp929eftyk.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp929eftyk.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp929eftyk.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    for n in numbers:\n      \
    \  rolling_maxes.append(max(rolling_maxes[-1], n))\n    return rolling_maxes\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplsym2xyh.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmplsym2xyh.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmplsym2xyh.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmplsym2xyh.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    \n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpls4gqz3z.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpls4gqz3z.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpls4gqz3z.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpls4gqz3z.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    for num in numbers:\n    \
    \    rolling_maxes.append(max(rolling_maxes[-1], num))\n    return rolling_maxes\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpasuzdf6g.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpasuzdf6g.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpasuzdf6g.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpasuzdf6g.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    for num in numbers:\n    \
    \    rolling_maxes.append(max(rolling_maxes[-1], num))\n    return rolling_maxes\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7e3oufj.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpb7e3oufj.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpb7e3oufj.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpb7e3oufj.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzardq0z8.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpzardq0z8.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpzardq0z8.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpzardq0z8.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_xfgmsaw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_xfgmsaw.py\", line 29,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp_xfgmsaw.py\", line\
    \ 23, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp_xfgmsaw.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for n in numbers:\n   \
    \     rolling_max_list.append(max(rolling_max_list[-1], rolling_max_list[-1] +\
    \ n))\n    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp174430mm.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp174430mm.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp174430mm.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp174430mm.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptkgt5938.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmptkgt5938.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmptkgt5938.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmptkgt5938.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    for n in numbers:\n      \
    \  rolling_maxes.append(max(rolling_maxes[-1], n))\n    return rolling_maxes\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0ipw12e.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmph0ipw12e.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmph0ipw12e.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmph0ipw12e.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for num in numbers:\n \
    \       rolling_max_list.append(max(rolling_max_list[-1], num))\n    return rolling_max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_yghva6.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp8_yghva6.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp8_yghva6.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp8_yghva6.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    \n  \
    \  return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplu61yjpg.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmplu61yjpg.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmplu61yjpg.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmplu61yjpg.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqrsl19sw.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqrsl19sw.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpqrsl19sw.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpqrsl19sw.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for number in numbers:\n\
    \        if number > rolling_max_list[-1]:\n            rolling_max_list.append(number)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpck31zddg.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpck31zddg.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpck31zddg.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpck31zddg.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpid8_63k2.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpid8_63k2.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpid8_63k2.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpid8_63k2.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6x8841kl.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6x8841kl.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp6x8841kl.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp6x8841kl.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsw83a2r1.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpsw83a2r1.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpsw83a2r1.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpsw83a2r1.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzxsyp6ud.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzxsyp6ud.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpzxsyp6ud.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpzxsyp6ud.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(numbers[0])\n    for number in numbers[1:]:\n\
    \        if number > rolling_maxes[-1]:\n            rolling_maxes.append(number)\n\
    \    return rolling_maxes\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv1fa3e41.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpv1fa3e41.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpv1fa3e41.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpv1fa3e41.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(numbers[0])\nIndexError: list\
    \ index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz3j9p047.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpz3j9p047.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpz3j9p047.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpz3j9p047.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        if number > rolling_max_list[-1]:\n            rolling_max_list.append(number)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ghec_al.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp8ghec_al.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp8ghec_al.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp8ghec_al.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    for number in numbers:\n \
    \       rolling_maxes.append(max(rolling_maxes[-1], number))\n    return rolling_maxes\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpczgtafni.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpczgtafni.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpczgtafni.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpczgtafni.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    return rolling_max_list\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfzhz80sy.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfzhz80sy.py\", line 28,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpfzhz80sy.py\", line\
    \ 22, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpfzhz80sy.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for n in numbers:\n   \
    \     rolling_max_list.append(rolling_max_list[-1] if rolling_max_list[-1] > n\
    \ else n)\n    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo3if035p.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpo3if035p.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpo3if035p.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpo3if035p.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)\
    \ - 1):\n        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzl2915gc.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzl2915gc.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpzl2915gc.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpzl2915gc.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for n in numbers:\n   \
    \     rolling_max_list.append(max(rolling_max_list[-1], rolling_max_list[-1] +\
    \ n))\n    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1qh7v6xo.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp1qh7v6xo.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp1qh7v6xo.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp1qh7v6xo.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp94bv5v8l.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp94bv5v8l.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp94bv5v8l.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp94bv5v8l.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    return rolling_max_list\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3_muw4nx.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3_muw4nx.py\", line 28,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp3_muw4nx.py\", line\
    \ 22, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp3_muw4nx.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)\
    \ - 1):\n        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_ca_89i.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpv_ca_89i.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpv_ca_89i.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpv_ca_89i.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    \n    for number in numbers:\n\
    \        if number > rolling_maxes[-1]:\n            rolling_maxes.append(number)\n\
    \    \n    return rolling_maxes\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpixxwhab1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpixxwhab1.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpixxwhab1.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpixxwhab1.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppg2plwsv.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmppg2plwsv.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmppg2plwsv.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmppg2plwsv.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for num in numbers:\n\
    \        if num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwtsen6ig.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwtsen6ig.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpwtsen6ig.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpwtsen6ig.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1if_nek_.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp1if_nek_.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp1if_nek_.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp1if_nek_.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > rolling_max_list[-1]:\n            rolling_max_list.append(numbers[i])\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz1y0eorf.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpz1y0eorf.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpz1y0eorf.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpz1y0eorf.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > rolling_max_list[-1]:\n            rolling_max_list.append(numbers[i])\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk3jwgbp4.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpk3jwgbp4.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpk3jwgbp4.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpk3jwgbp4.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(numbers[0])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for num in numbers:\n \
    \       if num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpew4c8rsu.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpew4c8rsu.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpew4c8rsu.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpew4c8rsu.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    return rolling_max_list\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgpsr27_x.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgpsr27_x.py\", line 30,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpgpsr27_x.py\", line\
    \ 24, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpgpsr27_x.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoc4sfgff.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpoc4sfgff.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpoc4sfgff.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpoc4sfgff.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > rolling_max_list[-1]:\n            rolling_max_list.append(numbers[i])\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq_dvnz8e.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpq_dvnz8e.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpq_dvnz8e.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpq_dvnz8e.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(numbers[0])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxtbuziw.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpkxtbuziw.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpkxtbuziw.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpkxtbuziw.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for n in numbers:\n   \
    \     rolling_max_list.append(max(rolling_max_list[-1], rolling_max_list[-1] +\
    \ n))\n    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6im5w_z.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpi6im5w_z.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpi6im5w_z.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpi6im5w_z.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)\
    \ - 1):\n        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdgp6c9tk.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpdgp6c9tk.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpdgp6c9tk.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpdgp6c9tk.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    return rolling_max_list\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoziobzls.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpoziobzls.py\", line 28,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpoziobzls.py\", line\
    \ 22, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpoziobzls.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n        \n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpshhx7x20.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpshhx7x20.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpshhx7x20.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpshhx7x20.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for n in numbers:\n\
    \        rolling_max_list.append(rolling_max_list[-1] if rolling_max_list[-1]\
    \ > n else n)\n    \n    return rolling_max_list\n\ndef check(candidate):\n  \
    \  assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9q8n8up0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9q8n8up0.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp9q8n8up0.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp9q8n8up0.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    \n  \
    \  return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppkxxtlon.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmppkxxtlon.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmppkxxtlon.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmppkxxtlon.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpua52gi3e.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpua52gi3e.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpua52gi3e.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpua52gi3e.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc983b9dd.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpc983b9dd.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpc983b9dd.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpc983b9dd.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplbp4mly_.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmplbp4mly_.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmplbp4mly_.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmplbp4mly_.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8jm7fcm.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpv8jm7fcm.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpv8jm7fcm.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpv8jm7fcm.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    for n in numbers:\n      \
    \  rolling_maxes.append(max(rolling_maxes[-1], n))\n    return rolling_maxes\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyfby85t6.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpyfby85t6.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpyfby85t6.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpyfby85t6.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps021zsew.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmps021zsew.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmps021zsew.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmps021zsew.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    return rolling_max_list\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd6spkqvi.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpd6spkqvi.py\", line 28,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpd6spkqvi.py\", line\
    \ 22, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpd6spkqvi.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)\
    \ - 1):\n        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpat8i1dev.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpat8i1dev.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpat8i1dev.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpat8i1dev.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoxvwnkyp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpoxvwnkyp.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpoxvwnkyp.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpoxvwnkyp.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4rk6x5cl.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4rk6x5cl.py\", line 29,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp4rk6x5cl.py\", line\
    \ 23, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp4rk6x5cl.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2c6o9opz.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp2c6o9opz.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp2c6o9opz.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp2c6o9opz.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for num in numbers:\n \
    \       if num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpea6krxt2.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpea6krxt2.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpea6krxt2.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpea6krxt2.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for num in numbers:\n \
    \       rolling_max_list.append(max(rolling_max_list[-1], num))\n    return rolling_max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp258avg91.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp258avg91.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp258avg91.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp258avg91.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    for number in numbers:\n \
    \       rolling_maxes.append(max(rolling_maxes[-1], number))\n    return rolling_maxes\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpskprwkly.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpskprwkly.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpskprwkly.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpskprwkly.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    for number in numbers:\n \
    \       rolling_maxes.append(max(rolling_maxes[-1], number))\n    return rolling_maxes\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp17evh8c_.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp17evh8c_.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp17evh8c_.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp17evh8c_.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjuq96taa.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpjuq96taa.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpjuq96taa.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpjuq96taa.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    for number in numbers:\n \
    \       rolling_maxes.append(max(rolling_maxes[-1], number))\n    return rolling_maxes\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ojevp19.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp7ojevp19.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp7ojevp19.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp7ojevp19.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbhe5dxo9.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpbhe5dxo9.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpbhe5dxo9.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpbhe5dxo9.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        if number > rolling_max_list[-1]:\n            rolling_max_list.append(number)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptb0zfc5f.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmptb0zfc5f.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmptb0zfc5f.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmptb0zfc5f.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for number in numbers:\n\
    \        if number > rolling_max_list[-1]:\n            rolling_max_list.append(number)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptz8yy9wg.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmptz8yy9wg.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmptz8yy9wg.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmptz8yy9wg.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        if number > rolling_max_list[-1]:\n            rolling_max_list.append(number)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsgos5ddj.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpsgos5ddj.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpsgos5ddj.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpsgos5ddj.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for n in numbers:\n   \
    \     rolling_max_list.append(rolling_max_list[-1] if rolling_max_list[-1] > n\
    \ else n)\n    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lxqe0wl.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp9lxqe0wl.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp9lxqe0wl.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp9lxqe0wl.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    for number in numbers:\n \
    \       rolling_maxes.append(max(rolling_maxes[-1], number))\n    return rolling_maxes\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppud_yabw.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmppud_yabw.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmppud_yabw.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmppud_yabw.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7jfzp1ti.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp7jfzp1ti.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp7jfzp1ti.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp7jfzp1ti.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaf_3murm.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpaf_3murm.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpaf_3murm.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpaf_3murm.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsv94d_sw.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpsv94d_sw.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpsv94d_sw.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpsv94d_sw.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa34klg35.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpa34klg35.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpa34klg35.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpa34klg35.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy_xh9l42.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpy_xh9l42.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpy_xh9l42.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpy_xh9l42.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp61m13y7m.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp61m13y7m.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp61m13y7m.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp61m13y7m.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxjif25__.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpxjif25__.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpxjif25__.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpxjif25__.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_r8hilz.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpp_r8hilz.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpp_r8hilz.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpp_r8hilz.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    for n in numbers:\n      \
    \  rolling_maxes.append(max(rolling_maxes[-1], n))\n    return rolling_maxes\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprdc2v5ur.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmprdc2v5ur.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmprdc2v5ur.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmprdc2v5ur.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0cs3ycxj.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp0cs3ycxj.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp0cs3ycxj.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp0cs3ycxj.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2nf6vibl.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp2nf6vibl.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp2nf6vibl.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp2nf6vibl.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6x0kdaza.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp6x0kdaza.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp6x0kdaza.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp6x0kdaza.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx1gl4sk8.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpx1gl4sk8.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpx1gl4sk8.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpx1gl4sk8.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzms61opu.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpzms61opu.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpzms61opu.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpzms61opu.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    \n  \
    \  return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1fri3o09.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp1fri3o09.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp1fri3o09.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp1fri3o09.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpckfn7sr7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpckfn7sr7.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpckfn7sr7.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpckfn7sr7.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx8wpk1sp.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpx8wpk1sp.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpx8wpk1sp.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpx8wpk1sp.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)\
    \ - 1):\n        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr0icletr.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpr0icletr.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpr0icletr.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpr0icletr.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmperrcv14t.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmperrcv14t.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmperrcv14t.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmperrcv14t.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for num in numbers:\n \
    \       rolling_max_list.append(max(rolling_max_list[len(rolling_max_list)-1],\
    \ num))\n    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp46pwd8ui.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp46pwd8ui.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp46pwd8ui.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp46pwd8ui.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    \n    for number in numbers:\n\
    \        if number > rolling_maxes[-1]:\n            rolling_maxes.append(number)\n\
    \    return rolling_maxes\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxjpd7mrc.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxjpd7mrc.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpxjpd7mrc.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpxjpd7mrc.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for number in numbers:\n\
    \        if number > rolling_max_list[-1]:\n            rolling_max_list.append(number)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbhzp9pth.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpbhzp9pth.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpbhzp9pth.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpbhzp9pth.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp843bdlta.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp843bdlta.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp843bdlta.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp843bdlta.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    return rolling_max_list\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ev_8fs_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9ev_8fs_.py\", line 30,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp9ev_8fs_.py\", line\
    \ 24, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp9ev_8fs_.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        if number > rolling_max_list[-1]:\n            rolling_max_list.append(number)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzpvm2zl8.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpzpvm2zl8.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpzpvm2zl8.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpzpvm2zl8.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for num in numbers:\n \
    \       rolling_max_list.append(max(rolling_max_list[-1], num))\n    return rolling_max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvkm11aj.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzvkm11aj.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpzvkm11aj.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpzvkm11aj.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4nvg133j.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp4nvg133j.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp4nvg133j.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp4nvg133j.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    \n  \
    \  return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptxp2nqx9.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmptxp2nqx9.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmptxp2nqx9.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmptxp2nqx9.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyx_ce9jy.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpyx_ce9jy.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpyx_ce9jy.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpyx_ce9jy.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)\
    \ - 1):\n        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxox6j082.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpxox6j082.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpxox6j082.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpxox6j082.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg6ry677r.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpg6ry677r.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpg6ry677r.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpg6ry677r.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        if number > rolling_max_list[-1]:\n            rolling_max_list.append(number)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2fnnece5.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp2fnnece5.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp2fnnece5.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp2fnnece5.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n        \n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpww00a503.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpww00a503.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpww00a503.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpww00a503.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqu9dgvjo.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqu9dgvjo.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpqu9dgvjo.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpqu9dgvjo.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjkn4pbcp.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpjkn4pbcp.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpjkn4pbcp.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpjkn4pbcp.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n        \n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp41vftvh_.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp41vftvh_.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp41vftvh_.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp41vftvh_.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    return rolling_max_list\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppy9d97e6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmppy9d97e6.py\", line 28,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmppy9d97e6.py\", line\
    \ 22, in check\n    assert candidate([]) == []\n  File \"/tmp/tmppy9d97e6.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(numbers[0])\n    for number in numbers[1:]:\n\
    \        if number > rolling_max_list[-1]:\n            rolling_max_list.append(number)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzsz8cq2r.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpzsz8cq2r.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpzsz8cq2r.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpzsz8cq2r.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(numbers[0])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp265rneo6.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp265rneo6.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp265rneo6.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp265rneo6.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7bpgb3rb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp7bpgb3rb.py\", line 29,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp7bpgb3rb.py\", line\
    \ 23, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp7bpgb3rb.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    for n in numbers:\n      \
    \  rolling_maxes.append(max(rolling_maxes[-1], n))\n    return rolling_maxes\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvfcasvhz.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpvfcasvhz.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpvfcasvhz.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpvfcasvhz.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    return rolling_max_list\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_wetsqnr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_wetsqnr.py\", line 28,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp_wetsqnr.py\", line\
    \ 22, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp_wetsqnr.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for num in numbers:\n \
    \       rolling_max_list.append(max(rolling_max_list[-1], num))\n    return rolling_max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8k2y40ex.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp8k2y40ex.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp8k2y40ex.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp8k2y40ex.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)\
    \ - 1):\n        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8mex1zqt.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp8mex1zqt.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp8mex1zqt.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp8mex1zqt.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)\
    \ - 1):\n        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplaaxby06.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmplaaxby06.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmplaaxby06.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmplaaxby06.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1otr5am_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp1otr5am_.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp1otr5am_.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp1otr5am_.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    for n in numbers:\n      \
    \  rolling_maxes.append(max(rolling_maxes[-1], n))\n    return rolling_maxes\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcf3mrgug.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpcf3mrgug.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpcf3mrgug.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpcf3mrgug.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(numbers[0])\n    for num in numbers[1:]:\n\
    \        if num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6_e0ynre.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp6_e0ynre.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp6_e0ynre.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp6_e0ynre.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(numbers[0])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    \n  \
    \  return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuvouc3f7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpuvouc3f7.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpuvouc3f7.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpuvouc3f7.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptbcyj301.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmptbcyj301.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmptbcyj301.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmptbcyj301.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3bfu_7x_.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp3bfu_7x_.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp3bfu_7x_.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp3bfu_7x_.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgw0th85z.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpgw0th85z.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpgw0th85z.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpgw0th85z.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    return rolling_max_list\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpym4htz5b.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpym4htz5b.py\", line 26,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpym4htz5b.py\", line\
    \ 20, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpym4htz5b.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    \n  \
    \  return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp30cs660a.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp30cs660a.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp30cs660a.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp30cs660a.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for num in numbers:\n \
    \       if num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0bt90f0d.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp0bt90f0d.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp0bt90f0d.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp0bt90f0d.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    for n in numbers:\n      \
    \  if n > rolling_maxes[-1]:\n            rolling_maxes.append(n)\n    return\
    \ rolling_maxes\n\ndef check(candidate):\n    assert candidate([]) == []\n   \
    \ assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
    \ 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpurkikujk.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpurkikujk.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpurkikujk.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpurkikujk.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for num in numbers:\n \
    \       if num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6n0_n6nb.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp6n0_n6nb.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp6n0_n6nb.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp6n0_n6nb.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2gacu7p7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp2gacu7p7.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp2gacu7p7.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp2gacu7p7.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for num in numbers:\n \
    \       rolling_max_list.append(max(rolling_max_list[-1], num))\n    return rolling_max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4u5ox1kh.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp4u5ox1kh.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp4u5ox1kh.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp4u5ox1kh.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp50oak7ii.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp50oak7ii.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp50oak7ii.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp50oak7ii.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmyk4n3ks.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpmyk4n3ks.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpmyk4n3ks.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpmyk4n3ks.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for num in numbers:\n \
    \       rolling_max_list.append(max(rolling_max_list[len(rolling_max_list)-1],\
    \ num))\n    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9sy6l4ap.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp9sy6l4ap.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp9sy6l4ap.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp9sy6l4ap.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmecyrx7p.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpmecyrx7p.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpmecyrx7p.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpmecyrx7p.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    \n  \
    \  return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv7tsluh5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpv7tsluh5.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpv7tsluh5.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpv7tsluh5.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps420ep0q.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmps420ep0q.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmps420ep0q.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmps420ep0q.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_6s00ks9.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_6s00ks9.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp_6s00ks9.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp_6s00ks9.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    return rolling_max_list\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxphza4p5.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxphza4p5.py\", line 28,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpxphza4p5.py\", line\
    \ 22, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpxphza4p5.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp932xmlh9.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp932xmlh9.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp932xmlh9.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp932xmlh9.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    return rolling_max_list\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp42y5x6s8.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp42y5x6s8.py\", line 26,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp42y5x6s8.py\", line\
    \ 20, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp42y5x6s8.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzjc7sfzb.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpzjc7sfzb.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpzjc7sfzb.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpzjc7sfzb.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for num in numbers:\n\
    \        if num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp21a8gs_h.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp21a8gs_h.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp21a8gs_h.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp21a8gs_h.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        if number > rolling_max_list[-1]:\n            rolling_max_list.append(number)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqzo_9wtt.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpqzo_9wtt.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpqzo_9wtt.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpqzo_9wtt.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0xgpcf1k.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp0xgpcf1k.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp0xgpcf1k.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp0xgpcf1k.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp02mg07u2.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp02mg07u2.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp02mg07u2.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp02mg07u2.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)\
    \ - 1):\n        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqglavnp1.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqglavnp1.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpqglavnp1.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpqglavnp1.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > rolling_max_list[-1]:\n            rolling_max_list.append(numbers[i])\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4bh31eid.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp4bh31eid.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp4bh31eid.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp4bh31eid.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(numbers[0])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2tjxcssm.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp2tjxcssm.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp2tjxcssm.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp2tjxcssm.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for num in numbers:\n \
    \       rolling_max_list.append(max(rolling_max_list[-1], num))\n    return rolling_max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fpje7hq.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp8fpje7hq.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp8fpje7hq.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp8fpje7hq.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    \n  \
    \  return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8uyikze5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp8uyikze5.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp8uyikze5.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp8uyikze5.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for num in numbers:\n \
    \       if num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvbf3oto9.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpvbf3oto9.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpvbf3oto9.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpvbf3oto9.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    rolling_maxes.append(max(numbers))\n\
    \    rolling_maxes.append(max(numbers))\n    rolling_maxes.append(max(numbers))\n\
    \    rolling_maxes.append(max(numbers))\n    rolling_maxes.append(max(numbers))\n\
    \    rolling_maxes.append(max(numbers))\n    rolling_maxes.append(max(numbers))\n\
    \    return rolling_maxes\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqi_4iwce.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqi_4iwce.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpqi_4iwce.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpqi_4iwce.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpueiwhvh_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpueiwhvh_.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpueiwhvh_.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpueiwhvh_.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for num in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], num))\n    \n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_rpxszi.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmps_rpxszi.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmps_rpxszi.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmps_rpxszi.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp34xfxpz0.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp34xfxpz0.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp34xfxpz0.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp34xfxpz0.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp35kl22pj.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp35kl22pj.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp35kl22pj.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp35kl22pj.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3wzvxi3v.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp3wzvxi3v.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp3wzvxi3v.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp3wzvxi3v.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl43alfiw.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpl43alfiw.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpl43alfiw.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpl43alfiw.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqkoyfzb5.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqkoyfzb5.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpqkoyfzb5.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpqkoyfzb5.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnopx2q56.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpnopx2q56.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpnopx2q56.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpnopx2q56.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)\
    \ - 1):\n        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpclqm3wh3.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpclqm3wh3.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpclqm3wh3.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpclqm3wh3.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_maxes.append(max(rolling_maxes[i-1], numbers[i]))\n    return\
    \ rolling_maxes\n\ndef check(candidate):\n    assert candidate([]) == []\n   \
    \ assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
    \ 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5zi6635.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpa5zi6635.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpa5zi6635.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpa5zi6635.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprqadko1n.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmprqadko1n.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmprqadko1n.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmprqadko1n.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes\
    \ = []\n    rolling_maxes.append(max(numbers))\n    \n    for n in numbers:\n\
    \        rolling_maxes.append(max(rolling_maxes[-1], n))\n    \n    return rolling_maxes\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph02fsg_c.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmph02fsg_c.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmph02fsg_c.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmph02fsg_c.py\"\
    , line 10, in rolling_max\n    rolling_maxes.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfiny7ndm.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpfiny7ndm.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpfiny7ndm.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpfiny7ndm.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    \n  \
    \  return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj7pf5y5y.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpj7pf5y5y.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpj7pf5y5y.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpj7pf5y5y.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2hcs34i3.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp2hcs34i3.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp2hcs34i3.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp2hcs34i3.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(numbers[0])\n    for number in numbers[1:]:\n\
    \        if number > rolling_max_list[-1]:\n            rolling_max_list.append(number)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphs3sns4c.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmphs3sns4c.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmphs3sns4c.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmphs3sns4c.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(numbers[0])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp01qck37_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp01qck37_.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp01qck37_.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp01qck37_.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    rolling_max_list.append(max(numbers))\n    rolling_max_list.append(max(numbers))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpymyev57q.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpymyev57q.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpymyev57q.py\", line\
    \ 21, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpymyev57q.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for num in numbers:\n \
    \       if num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvedmc0m8.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpvedmc0m8.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpvedmc0m8.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpvedmc0m8.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    for i in range(len(numbers)):\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], numbers[i]))\n    return\
    \ rolling_max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqy1edmjf.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqy1edmjf.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpqy1edmjf.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpqy1edmjf.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = []\n    rolling_max_list.append(max(numbers))\n    \n    for number in numbers:\n\
    \        rolling_max_list.append(max(rolling_max_list[-1], number))\n    \n  \
    \  return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptqfl0cnj.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmptqfl0cnj.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmptqfl0cnj.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmptqfl0cnj.py\"\
    , line 10, in rolling_max\n    rolling_max_list.append(max(numbers))\nValueError:\
    \ max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
