name: HumanEval_49_modp
language: python
results:
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p % 2 == 0:\n        return modp(n // 2,\
    \ p) // 2\n    k = n // 2\n    while k * k <= p:\n        k += 1\n    return k\n\
    \n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvllm0gna.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpvllm0gna.py\", line 40,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpvllm0gna.py\", line 31, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    if p % 256 == 0:\n        return modp(n // 256, p) + 17\n\
    \    return modp(n // 256, p) + 17\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcts49kur.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpcts49kur.py\", line 45,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpcts49kur.py\", line 36, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe8pyk8l3.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe8pyk8l3.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpe8pyk8l3.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if p == 2:\n        return n\n    if p % 4 == 0:\n    \
    \    return modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n //\
    \ 8, p) + 4\n    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if\
    \ p % 32 == 0:\n        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n  \
    \      return modp(n // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe3qen69a.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe3qen69a.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpe3qen69a.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p - (p // p) * p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3rijl1tc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3rijl1tc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3rijl1tc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p) % p) % p)\
    \ % p\n    if n == 5:\n        return (((p * p * p * p) % p) % p) % p\n    if\
    \ n == 6:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 7:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 11:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n   \
    \     return ((p * p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 15\
    \ or n == 16:\n        return (((p * p * p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 17 or n == 18:\n        return (((p * p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n       \
    \ return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n   \
    \ if n == 21 or n == 22:\n        return (((p * p * p * p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 25 or n == 26:\n        return (((p * p * p * p * p * p * p * p * p * p * p\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp2n5hvgp0.py\", line 54\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5r_jfao8.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5r_jfao8.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp5r_jfao8.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsobu_rqa.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpsobu_rqa.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpsobu_rqa.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphc9kgimk.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmphc9kgimk.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmphc9kgimk.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6mtnferr.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp6mtnferr.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp6mtnferr.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm9zn5ojj.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpm9zn5ojj.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpm9zn5ojj.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcgazm1nd.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpcgazm1nd.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpcgazm1nd.py\", line 19, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp68oi81a5.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp68oi81a5.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp68oi81a5.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe6iv_6tq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpe6iv_6tq.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpe6iv_6tq.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgo2vra9x.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpgo2vra9x.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpgo2vra9x.py\", line 18, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    return (((p * p * p * p * p * p) % p) % p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rvmccvf.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp6rvmccvf.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp6rvmccvf.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6p_layoq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp6p_layoq.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp6p_layoq.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    return modp(n // 64, p) + 17\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcf4tg7ms.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpcf4tg7ms.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpcf4tg7ms.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n\
    \ == 16:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n\
    \ == 24:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 25 or n == 26:\n        return (((p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 27 or n == 28:\n        return (((p *\
    \ p * p * p * p * \ndef check(candidate):\n    assert candidate(3, 5) == 3\n \
    \   assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpyl_drgq2.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 ==\
    \ 0:\n        return modp(n // 3, p) * 3\n    if p % 5 == 0:\n        return modp(n\
    \ // 5, p) * 5\n    return modp(n // 2, p) * 2 + modp(n // 3, p) * 3 + modp(n\
    \ // 5, p) * 5\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n \
    \   assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptmvlm6d9.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmptmvlm6d9.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptmvlm6d9.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if p % 2 == 0:\n   \
    \     return n // 2\n    if p % 3 == 0:\n        return n // 3\n    if p % 5 ==\
    \ 0:\n        return n // 5\n    return n // p\n\n\ndef check(candidate):\n  \
    \  assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_6w9nygt.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_6w9nygt.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp_6w9nygt.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p % 2 == 0:\n        return p - 1\n    return p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbb0484um.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbb0484um.py\", line 33,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpbb0484um.py\", line 24, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p) % p) % p)\
    \ % p\n    if n == 5:\n        return (((p * p * p * p) % p) % p) % p\n    if\
    \ n == 6:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 7:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 11:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n   \
    \     return ((p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 15:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 16:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n\
    \ == 22:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 23:\n        return (((p * p * p * p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 24:\n        return (((p * p * p * p * p\
    \ * p * p * \ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpwu9uefrz.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n % p) + p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuj1j5egg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpuj1j5egg.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpuj1j5egg.py\", line 19, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > MOD:\n\
    \        return modp(n - 1, MOD)\n    if p % 2 == 0:\n        return modp(n //\
    \ 2, p) // 2\n    k = n // 2\n    while k * k <= p:\n        k += 1\n    return\
    \ k * k\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1g8bo6ky.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp1g8bo6ky.py\", line 40,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp1g8bo6ky.py\", line 31, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmp1g8bo6ky.py\", line\
    \ 20, in modp\n    if p > MOD:\nNameError: name 'MOD' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprov9h4nj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmprov9h4nj.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmprov9h4nj.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 ==\
    \ 0:\n        return modp(n // 3, p)\n    if n % 3 == 0 or n % 5 == 0:\n     \
    \   return modp(n // 3, p)\n    return modp(n // 5, p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnovxdvnr.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnovxdvnr.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpnovxdvnr.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 20:\n        return (((p * p * p * p * p * p *\
    \ p * p * p * p) % p) % p) % p\n    if n == 21:\n        return (((p * p * p *\
    \ \ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpl462hll4.py\", line 58\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoarzgr1u.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpoarzgr1u.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpoarzgr1u.py\", line 18, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if p == 2:\n        return n\n    if p % 4 == 0:\n    \
    \    return modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n //\
    \ 8, p) + 4\n    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if\
    \ p % 32 == 0:\n        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n  \
    \      return modp(n // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcjre42ae.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpcjre42ae.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpcjre42ae.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp07ygoqbx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp07ygoqbx.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp07ygoqbx.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp89vdbw6n.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp89vdbw6n.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp89vdbw6n.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    return modp(n // 64, p) + 13\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppfwei5i7.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmppfwei5i7.py\", line 41,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmppfwei5i7.py\", line 32, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbpim0ldg.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpbpim0ldg.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpbpim0ldg.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if p < 0:\n        return modp(-n, p)\n    if p == 0:\n\
    \        return n\n    if p == n:\n        return p\n    if p > n:\n        return\
    \ modp(p - n, p)\n    if p < n:\n        return modp(n, p)\n    return modp(n\
    \ // 2, p) + modp(n // 2, p - 1)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpksyiv7wq.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpksyiv7wq.py\", line 41,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpksyiv7wq.py\", line 32, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmpksyiv7wq.py\", line\
    \ 25, in modp\n    return modp(p - n, p)\n  File \"/tmp/tmpksyiv7wq.py\", line\
    \ 25, in modp\n    return modp(p - n, p)\n  File \"/tmp/tmpksyiv7wq.py\", line\
    \ 25, in modp\n    return modp(p - n, p)\n  [Previous line repeated 993 more times]\n\
    \  File \"/tmp/tmpksyiv7wq.py\", line 14, in modp\n    if n == 0:\nRecursionError:\
    \ maximum recursion depth exceeded in comparison\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpblgq7zcq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpblgq7zcq.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpblgq7zcq.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p - ((p - 1) * (p - 1) % p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppqsfwsff.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmppqsfwsff.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmppqsfwsff.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqla4hz5.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpgqla4hz5.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpgqla4hz5.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    # n >= 6\n    return (((p * p * p * p * p * p) % p) % p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9n7haep6.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp9n7haep6.py\", line 40,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp9n7haep6.py\", line 31, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp34g1gltd.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp34g1gltd.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp34g1gltd.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqba2ge2o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqba2ge2o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqba2ge2o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n & -p) << 1) + p\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe8rw3fuo.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpe8rw3fuo.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpe8rw3fuo.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 15\
    \ or n == 16:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n   \
    \     return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 23 or n == 24:\n        return (((p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 25 or n == 26:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 27 or n == 28:\n        return\
    \ (((p * p * p * p * \ndef check(candidate):\n    assert candidate(3, 5) == 3\n\
    \    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n   \
    \ assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert\
    \ candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpew0eyrd2.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p % p * p % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpth7kyx6f.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpth7kyx6f.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpth7kyx6f.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p % 2 == 0:\n        return modp(n // 2,\
    \ p) + modp(n // 2, p - 1)\n    else:\n        return modp(n // 2, p) - 1\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4e80p_3_.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp4e80p_3_.py\", line 38,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp4e80p_3_.py\", line 29, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ p - (p // 4)\n    if p % 2 == 0:\n        return p + (p // 2)\n    return p\n\
    \n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3v44tizv.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp3v44tizv.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3v44tizv.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or\
    \ n == 14:\n        return ((p * p * p * p * p * p * p * p * p * p) % p) % p\n\
    \    if n == 15 or n == 16:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 17 or n == 18:\n        return (((p * p *\
    \ p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n \
    \       return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n \
    \   if n == 21 or n == 22:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n        return (((p *\
    \ p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 25 or n ==\
    \ 26:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % \ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpczxqxq4v.py\", line 53\n    return (((p * p * p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % \n                                  \
    \                                  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnjvt2y50.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpnjvt2y50.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpnjvt2y50.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 ==\
    \ 0:\n        return modp(n // 3, p) * 3\n    if p % 5 == 0:\n        return modp(n\
    \ // 5, p) * 5\n    return modp(n // 2, p) * 2 + modp(n // 3, p) * 3 + modp(n\
    \ // 5, p) * 5\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n \
    \   assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppac4qlc7.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmppac4qlc7.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmppac4qlc7.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6ky_p6o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpi6ky_p6o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpi6ky_p6o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) + 1) * (-1) ** (n //\
    \ p)\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0l4lpki6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp0l4lpki6.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp0l4lpki6.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpluis4ria.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpluis4ria.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpluis4ria.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p) + 2\n  \
    \  if p % 5 == 0:\n        return modp(n // 5, p) + 3\n    return modp(n // 2,\
    \ p) + 3\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpurc4l41z.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpurc4l41z.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpurc4l41z.py\", line 31, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n\
    \ == 16:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n\
    \ == 24:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 25 or n == 26:\n        return (((p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 27 or n == 28:\n        return (((p *\
    \ p * p * p * p * \ndef check(candidate):\n    assert candidate(3, 5) == 3\n \
    \   assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpjse_ha1y.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    return modp(n // 64, p) + 17\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5r77cytw.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp5r77cytw.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp5r77cytw.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n % p) + p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7mbg5t8o.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7mbg5t8o.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp7mbg5t8o.py\", line 19, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > MOD:\n\
    \        return modp(n - 1, MOD)\n    if p % 2 == 0:\n        return modp(n //\
    \ 2, p) * p\n    if p % 3 == 0:\n        return modp(n // 3, p) * (p - 1)\n  \
    \  return modp(n // 2, p) * (p - 1) + modp(n // 3, p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzbwo1wea.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpzbwo1wea.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpzbwo1wea.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmpzbwo1wea.py\", line\
    \ 20, in modp\n    if p > MOD:\nNameError: name 'MOD' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt9jvdgk8.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpt9jvdgk8.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpt9jvdgk8.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3rn8g6am.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp3rn8g6am.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3rn8g6am.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p % p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkvn1_yya.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkvn1_yya.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpkvn1_yya.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9cdbl7n9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp9cdbl7n9.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp9cdbl7n9.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p - (((p - 1) * (p - 1)) // 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph42c6fz9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph42c6fz9.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmph42c6fz9.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ p - (p // 4)\n    if p % 8 == 0:\n        return p - (p // 8)\n    return p\n\
    \n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprqx8pklv.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmprqx8pklv.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmprqx8pklv.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 0:\n        raise ZeroDivisionError('modp(0, 0)\
    \ is not defined')\n    if n == 0:\n        raise ZeroDivisionError('modp(1, 0)\
    \ is not defined')\n    if p == n:\n        return p\n    if p < 0:\n        return\
    \ modp(n - p, p)\n    if p > n:\n        return modp(n, p)\n    if n % p == 0:\n\
    \        return modp(n // p, p)\n    if n % p == p - 1:\n        return modp(n\
    \ // p, p)\n    return modp(n // p + 1, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7fk0zo7s.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp7fk0zo7s.py\", line 41,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp7fk0zo7s.py\", line 32, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmp7fk0zo7s.py\", line\
    \ 23, in modp\n    return modp(n, p)\n  File \"/tmp/tmp7fk0zo7s.py\", line 23,\
    \ in modp\n    return modp(n, p)\n  File \"/tmp/tmp7fk0zo7s.py\", line 23, in\
    \ modp\n    return modp(n, p)\n  [Previous line repeated 993 more times]\n  File\
    \ \"/tmp/tmp7fk0zo7s.py\", line 14, in modp\n    if p == 0:\nRecursionError: maximum\
    \ recursion depth exceeded in comparison\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn8hbq95u.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpn8hbq95u.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpn8hbq95u.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or\
    \ n == 14:\n        return ((p * p * p * p * p * p * p * p * p * p) % p) % p\n\
    \    if n == 15 or n == 16:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 17 or n == 18:\n        return (((p * p *\
    \ p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n \
    \       return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n \
    \   if n == 21 or n == 22:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n        return (((p *\
    \ p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 25 or n ==\
    \ 26:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % \ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpk6ux7we2.py\", line 53\n    return (((p * p * p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % \n                                  \
    \                                  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p == n:\n        return p\n    if p ==\
    \ n:\n        return p\n    if n % 2 == 1:\n        return modp(n // 2, p)\n \
    \   if n % 2 == 0:\n        return modp(n // 2, p) * p\n    if n % 3 == 0:\n \
    \       return modp(n // 3, p) * p * p\n    if n % 3 == 1:\n        return modp(n\
    \ // 3, p) * p\n    if n % 3 == 2:\n        return modp(n // 3, p) * p * p\n \
    \   if n % 3 == 3:\n        return modp(n // 3, p) * p * p * p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnrbay98z.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpnrbay98z.py\", line 50,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpnrbay98z.py\", line 41, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if\
    \ n % p == 0:\n        return modp(n // p, p)\n    return modp((n-p) // 2, p)\n\
    \n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppitmdg8b.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmppitmdg8b.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmppitmdg8b.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmppitmdg8b.py\", line\
    \ 26, in modp\n    return modp((n-p) // 2, p)\n  File \"/tmp/tmppitmdg8b.py\"\
    , line 26, in modp\n    return modp((n-p) // 2, p)\n  File \"/tmp/tmppitmdg8b.py\"\
    , line 26, in modp\n    return modp((n-p) // 2, p)\n  [Previous line repeated\
    \ 1 more time]\n  File \"/tmp/tmppitmdg8b.py\", line 25, in modp\n    return modp(n\
    \ // p, p)\n  File \"/tmp/tmppitmdg8b.py\", line 26, in modp\n    return modp((n-p)\
    \ // 2, p)\n  File \"/tmp/tmppitmdg8b.py\", line 26, in modp\n    return modp((n-p)\
    \ // 2, p)\n  File \"/tmp/tmppitmdg8b.py\", line 26, in modp\n    return modp((n-p)\
    \ // 2, p)\n  File \"/tmp/tmppitmdg8b.py\", line 25, in modp\n    return modp(n\
    \ // p, p)\n  File \"/tmp/tmppitmdg8b.py\", line 26, in modp\n    return modp((n-p)\
    \ // 2, p)\n  File \"/tmp/tmppitmdg8b.py\", line 26, in modp\n    return modp((n-p)\
    \ // 2, p)\n  File \"/tmp/tmppitmdg8b.py\", line 26, in modp\n    return modp((n-p)\
    \ // 2, p)\n  File \"/tmp/tmppitmdg8b.py\", line 25, in modp\n    return modp(n\
    \ // p, p)\n  File \"/tmp/tmppitmdg8b.py\", line 26, in modp\n    return modp((n-p)\
    \ // 2, p)\n  File \"/tmp/tmppitmdg8b.py\", line 26, in modp\n    return modp((n-p)\
    \ // 2, p)\n  File \"/tmp/tmppitmdg8b.py\", line 26, in modp\n    return modp((n-p)\
    \ // 2, p)\n  File \"/tmp/tmppitmdg8b.py\", line 25, in modp\n    return modp(n\
    \ // p, p)\n  File \"/tmp/tmppitmdg8b.py\", line 26, in modp\n    return modp((n-p)\
    \ // 2, p)\n  File \"/tmp/tmppitmdg8b.py\", line 26, in modp\n    return modp((n-p)\
    \ // 2, p)\n  File \"/tmp/tmppitmdg8b.py\", line 26, in modp\n    return modp((n-p)\
    \ // 2, p)\n  File \"/tmp/tmppitmdg8b.py\", line 25, in modp\n    return modp(n\
    \ // p, p)\n  File \"/tmp/tmppitmdg8b.py\", line 26, in modp\n    return modp((n-p)\
    \ // 2, p)\n  File \"/tmp/tmppitmdg8b.py\", line 26, in modp\n    return modp((n-p)\
    \ // 2, p)\n  File \"/tmp/tmppitmdg8b.py\", line 26, in modp\n    return mod"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ n - (n % p)\n    if p % 2 == 0:\n        return n - (n % p // 2)\n    return\
    \ n\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ly8yftg.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp2ly8yftg.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp2ly8yftg.py\", line 29, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp18s4hjso.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp18s4hjso.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp18s4hjso.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe5o14pwj.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpe5o14pwj.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpe5o14pwj.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp((n - 1) // 2, p) + p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdpe5ckbz.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpdpe5ckbz.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpdpe5ckbz.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    return modp(n\
    \ - 1, p // 2)\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n \
    \   assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3yzz_p2v.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3yzz_p2v.py\", line 33,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3yzz_p2v.py\", line 24, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1py012h0.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1py012h0.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp1py012h0.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcovc7oa1.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpcovc7oa1.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpcovc7oa1.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n       \
    \ return p - (p % p)\n    return p + (p % p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5xqbzkpo.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5xqbzkpo.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp5xqbzkpo.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpboecdha2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpboecdha2.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpboecdha2.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n << 1) + 1) % (p + 1)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_eb6stp3.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_eb6stp3.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp_eb6stp3.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n\
    \ == 16:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n   \
    \ if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return (((p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n     \
    \   return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 25 or\
    \ n == 26:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n \
    \   if n == 27 or n == 28:\n        return (((p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 29 or n == 3\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpu9a4n8z3.py\", line 56\n    if n == 29 or n == 3\n   \
    \                    ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    return\
    \ modp(n // 2, p) + modp(n // 3, p)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4888vi7g.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp4888vi7g.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp4888vi7g.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n       \
    \ return p - (p % n)\n    return p + (n - p) % n\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv4j_pyr4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpv4j_pyr4.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpv4j_pyr4.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 ==\
    \ 0:\n        return modp(n // 3, p) * 3\n    if p % 5 == 0:\n        return modp(n\
    \ // 5, p) * 5\n    return modp(n // 2, p) * 2 + modp(n // 3, p) * 3 + modp(n\
    \ // 5, p) * 5\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n \
    \   assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf_7qnvvh.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpf_7qnvvh.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpf_7qnvvh.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmn4vtnbo.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpmn4vtnbo.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpmn4vtnbo.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or\
    \ n == 14:\n        return ((p * p * p * p * p * p * p * p * p * p) % p) % p\n\
    \    if n == 15 or n == 16:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n        return (((p *\
    \ p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19 or\
    \ n == 20:\n        return (((p * p * p * p * p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 21 or n == 22:\n        return (((p * p * p *\
    \ p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n ==\
    \ 24:\n        return (((p * p * p * p * p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 25 or n == 26:\n        return (((p * p * p * \n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4lm5xc6t.py\", line 54\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9grboneq.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9grboneq.py\", line 34,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp9grboneq.py\", line 25, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfqtcasen.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfqtcasen.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpfqtcasen.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7mexysi8.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7mexysi8.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp7mexysi8.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 18:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 20:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 21:\n        return (((p * p * p * p * p * p * p * p * p) % \ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpudsllv3e.py\", line 58\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ p - (p // 4)\n    if p % 8 == 0:\n        return p - (p // 8) * 4\n    if p\
    \ % 16 == 0:\n        return p - (p // 16) * 8\n    return p - (p // 16) * 8 +\
    \ 4\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpocl_gjnr.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpocl_gjnr.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpocl_gjnr.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6tl0xbwu.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp6tl0xbwu.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp6tl0xbwu.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > MOD:\n\
    \        return modp(n - 1, MOD)\n    if p % 2 == 0:\n        return modp(n //\
    \ 2, p) * p\n    if p % 3 == 0:\n        return modp(n // 3, p) * (p - 1)\n  \
    \  if p % 5 == 0:\n        return modp(n // 5, p) * (p - 2)\n    return modp(n\
    \ // 2, p) * (p - 1)\n\n\ndef check(candidate):\n    assert candidate(3, 5) ==\
    \ 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n\
    \    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert\
    \ candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99ofhnrp.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp99ofhnrp.py\", line 41,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp99ofhnrp.py\", line 32, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmp99ofhnrp.py\", line\
    \ 20, in modp\n    if p > MOD:\nNameError: name 'MOD' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    if p % 256 == 0:\n        return modp(n // 256, p) + 17\n\
    \    return modp(n // 256, p) + 17\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnadkibu4.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpnadkibu4.py\", line 45,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpnadkibu4.py\", line 36, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p) % p) % p)\
    \ % p\n    if n == 5:\n        return (((p * p * p * p) % p) % p) % p\n    if\
    \ n == 6:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 7:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 11:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 12:\n        return (((p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 13:\n        return (((p * p * p * p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 14:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 20:\n        return (((p\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmptld40dp9.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuxve0vxj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpuxve0vxj.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpuxve0vxj.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p // 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptk762unu.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptk762unu.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptk762unu.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) * p\n    if n == 0:\n        return 0\n    if n == 1:\n     \
    \   return p\n    if n == 2:\n        return p + p\n    if n % 2 == 0:\n     \
    \   return modp(n // 2, p) + p\n    return modp(n // 2, p) * p + p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxhj8xwem.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpxhj8xwem.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpxhj8xwem.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphztq_l35.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmphztq_l35.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmphztq_l35.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p - 1\n    if n == 3:\n        return p + 5\n    if n == 4:\n        return\
    \ p + 11\n    if n == 5:\n        return p + 21\n    if n == 6:\n        return\
    \ p + 61\n    if n == 7:\n        return p + 121\n    if n == 8:\n        return\
    \ p + 243\n    if n == 9:\n        return p + 365\n    if n == 10:\n        return\
    \ p + 429\n    if n == 11:\n        return p + 587\n    if n == 12:\n        return\
    \ p + 679\n    if n == 13:\n        return p + 739\n    if n == 14:\n        return\
    \ p + 877\n    if n == 15:\n        return p + 959\n    if n == 16:\n        return\
    \ p + 1023\n    if n == 17:\n        return p + 1117\n    if n == 18:\n      \
    \  return p + 1181\n    if n == 19:\n        return p + 1259\n    if n == 20:\n\
    \        return p + 1319\n    if n == 21:\n        return p + 1397\n    if n ==\
    \ 22:\n        return p + 1455\n    if n == 23:\n        return p + 1523\n   \
    \ if n == 24:\n        return p + 1597\n    if n == 25:\n        return p + 1667\n\
    \    if n == 26:\n        return p + 1735\n    if n == 27:\n        return p +\
    \ 179\n    if n == 28:\n        return p + 1857\n    if n == 29:\n        return\
    \ p + 1927\n    if n == 30:\n        return p + 1993\n    if n == 31:\n      \
    \  return p + 2049\n    if n == 32:\n        return p + 2111\n    if n == 33:\n\
    \        return p + 2177\n    if n == 34:\n        return p + 2243\n    if n ==\
    \ 35:\n        return p + 2309\n    if n == 36:\n        return p + 2365\n   \
    \ if n == 37:\n        return p + 2423\n    if n == 38:\n        return p + 2489\n\
    \    if n == 39:\n        return p + 2547\n    if n == 41:\n        return p +\
    \ 2601\n    if n == 42:\n        return p + 2667\n    if n == 43:\n        return\
    \ p + 2735\n    if n == 44:\n        return p + 2799\n    if n == 45:\n      \
    \  return p + 2867\n    if n == 46:\n        return p + 2935\n    if n == 47:\n\
    \        return p + 2991\n    if n == 48:\n        return p + 3049\n    if n ==\
    \ 49:\n        return p + 3\ndef check(candidate):\n    assert candidate(3, 5)\
    \ == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) ==\
    \ 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n \
    \   assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcnvux_wq.py\", line\
    \ 126, in <module>\n    test_check()\n  File \"/tmp/tmpcnvux_wq.py\", line 124,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpcnvux_wq.py\", line 115, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n & 1) << p) + (n >> 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdu8j44ec.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpdu8j44ec.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpdu8j44ec.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or\
    \ n == 14:\n        return ((p * p * p * p * p * p * p * p * p * p) % p) % p\n\
    \    if n == 15 or n == 16:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 17 or n == 18:\n        return (((p * p *\
    \ p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n \
    \       return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n \
    \   if n == 21 or n == 22:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n        return (((p *\
    \ p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 25 or n ==\
    \ 26:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % \ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp5sxwmwdz.py\", line 53\n    return (((p * p * p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % \n                                  \
    \                                  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    return modp(n // 64, p) + 17\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplxjq57hl.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmplxjq57hl.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmplxjq57hl.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) * p\n    if n == 0:\n        return 0\n    if n == 1:\n     \
    \   return p\n    if n == 2:\n        return p + p\n    if n % 2 == 0:\n     \
    \   return modp(n // 2, p) + p\n    return modp(n // 2, p) * p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkajtdfpj.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpkajtdfpj.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpkajtdfpj.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit7pvzf4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpit7pvzf4.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpit7pvzf4.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p - (((p // p) * p) % p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3dsmatyb.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3dsmatyb.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3dsmatyb.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    return (((p * p * p * p * p * p) % p) % p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf2a7e03g.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpf2a7e03g.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpf2a7e03g.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp33evqb5o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp33evqb5o.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp33evqb5o.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5azbuguf.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5azbuguf.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp5azbuguf.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_tnzw8he.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_tnzw8he.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp_tnzw8he.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ ((p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 17:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 20:\n        return (((p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 21:\n        return (((p\
    \ * \ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpd__oxapk.py\", line 58\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    if p % 128 == 0:\n        return modp(n // 128, p) + 17\n\
    \    return modp(n // 256, p) + 31\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuzaeuguf.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpuzaeuguf.py\", line 45,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpuzaeuguf.py\", line 36, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) * (-1)\n    if p < 2:\n        return modp(n, p)\n    if n ==\
    \ 2:\n        return p\n    if n == 3:\n        return p + 2\n    if n % 2 ==\
    \ 0:\n        return modp(n // 2, p) + 2\n    return modp(n // 2, p) + modp((n\
    \ - 1) // 2, p)\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n\
    \    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n   \
    \ assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert\
    \ candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7rmpk3l2.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp7rmpk3l2.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp7rmpk3l2.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    # n >= 6\n    return (((p * p * p * p * p * p) % p) % p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyzlv_y4p.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpyzlv_y4p.py\", line 40,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpyzlv_y4p.py\", line 31, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n        return (((p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 20:\n        return (((p * p * p * p * p * p *\
    \ p * p * p * p) % p) % p) % p\n    if n == 21:\n        return (((p * p * \n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpdql7ftxb.py\", line 58\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkoyh_sm.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpkkoyh_sm.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpkkoyh_sm.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyovf6wpa.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyovf6wpa.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpyovf6wpa.py\", line 18, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ n // 4\n    if p % 8 == 0:\n        return n // 8\n    if p % 16 == 0:\n   \
    \     return n // 16\n    return n // p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy3239hg1.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpy3239hg1.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpy3239hg1.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p == n:\n        return p\n    if p ==\
    \ n:\n        return p\n    if p == n:\n        return p\n    if n % 2 == 1:\n\
    \        return modp(n // 2, p)\n    if n % 2 == 0:\n        return modp(n //\
    \ 2, p) * p\n    if n % 3 == 0:\n        return modp(n // 3, p) * p * p\n    if\
    \ n % 3 == 1:\n        return modp(n // 3, p) * p\n    if n % 3 == 2:\n      \
    \  return modp(n // 3, p) * p * p\n    if n % 3 == 3:\n        return modp(n //\
    \ 3, p) * p * p * p\n    return modp(n // 3, p) * p * p * p * p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvljuk4pl.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpvljuk4pl.py\", line 53,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpvljuk4pl.py\", line 44, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p % 2 == 0:\n        return modp(n // 2, p) * p\n    if p %\
    \ 3 == 0:\n        return modp(n // 3, p) * p * p\n    if p % 5 == 0:\n      \
    \  return modp(n // 5, p) * p * p * p\n    return modp(n // 2, p) * p * p * p\
    \ * p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqy6hpuoc.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpqy6hpuoc.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqy6hpuoc.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzujqgmk6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpzujqgmk6.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpzujqgmk6.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    if p % 256 == 0:\n        return modp(n // 256, p) + 17\n\
    \    return modp(n // 256, p) + 17\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjlzu959k.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpjlzu959k.py\", line 45,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpjlzu959k.py\", line 36, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpayk94or8.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpayk94or8.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpayk94or8.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > MOD:\n\
    \        return modp(n - 1, MOD)\n    if p == MOD:\n        return n\n    if p\
    \ == ODD:\n        return modp(n - 1, 2 * MOD)\n    if p == EVEN:\n        return\
    \ modp(n - 1, MOD)\n    if p == NON_ZERO:\n        return modp(n - 1, MOD)\n \
    \   return modp(n - 1, p)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv7a3y8i_.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpv7a3y8i_.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpv7a3y8i_.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmpv7a3y8i_.py\", line\
    \ 20, in modp\n    if p > MOD:\nNameError: name 'MOD' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 15:\n \
    \       return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 16:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 and\
    \ p < 100:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 24 and p < 1000:\n        return (((p * p * p * p * p * p *\
    \ p * p * \ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpl8e9xu71.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n\
    \ // 2, p)\n    if n % 2 == 1:\n        return modp(n - 1, p)\n    return modp((n\
    \ - 1) // 2, p) + p\n\n\ndef check(candidate):\n    assert candidate(3, 5) ==\
    \ 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n\
    \    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert\
    \ candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp82g0zgnd.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp82g0zgnd.py\", line 41,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp82g0zgnd.py\", line 32, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n - 1, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn3qc0drx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpn3qc0drx.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpn3qc0drx.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    return (((p * p * p * p * p * p) % p) % p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd02dmsg4.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpd02dmsg4.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpd02dmsg4.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n       \
    \ return p - (p % p)\n    return p - ((p - 1) * (p - 1) % p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq9tk0tep.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpq9tk0tep.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpq9tk0tep.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p + 1\n    if n % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p) + p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcyy61rio.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpcyy61rio.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpcyy61rio.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p - (((p * p) % p) // p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1lzqo54f.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1lzqo54f.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp1lzqo54f.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpujxxiamo.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpujxxiamo.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpujxxiamo.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n       \
    \ return p - (p // 2)\n    return p + (p // 2)\n\n\ndef check(candidate):\n  \
    \  assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnabe8prv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpnabe8prv.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpnabe8prv.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptib9bvdg.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptib9bvdg.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptib9bvdg.py\", line 18, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqfbzo2d1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqfbzo2d1.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqfbzo2d1.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuy6ap8va.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpuy6ap8va.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpuy6ap8va.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa0peyb_q.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpa0peyb_q.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpa0peyb_q.py\", line 19, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if p == 1 or p == -1:\n\
    \        return pow(n, (p + 1) // 2, p)\n    if n % p == 0:\n        return modp(n\
    \ // p, p)\n    if p % n == 0:\n        return modp(n // p, n)\n    if n % p ==\
    \ 0:\n        return modp(n // n, p)\n    if p % n == 0:\n        return modp(n\
    \ // n, n)\n    return modp(n // p, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpecksjvb_.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpecksjvb_.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpecksjvb_.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmpecksjvb_.py\", line\
    \ 26, in modp\n    return modp(n // p, p)\n  File \"/tmp/tmpecksjvb_.py\", line\
    \ 19, in modp\n    return modp(n // p, p)\n  File \"/tmp/tmpecksjvb_.py\", line\
    \ 19, in modp\n    return modp(n // p, p)\n  File \"/tmp/tmpecksjvb_.py\", line\
    \ 19, in modp\n    return modp(n // p, p)\n  [Previous line repeated 992 more\
    \ times]\n  File \"/tmp/tmpecksjvb_.py\", line 14, in modp\n    if p == 2:\nRecursionError:\
    \ maximum recursion depth exceeded in comparison\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp73aqhgga.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp73aqhgga.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp73aqhgga.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if p == 2:\n        return n\n    if p % 4 == 0:\n    \
    \    return n & (p - 1)\n    if p % 2 == 0:\n        return n & 1\n    return\
    \ ((n - 1) & n) >> 1\n\n\ndef check(candidate):\n    assert candidate(3, 5) ==\
    \ 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n\
    \    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert\
    \ candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcxg6_ly6.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpcxg6_ly6.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpcxg6_ly6.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n % p) + p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1pp10szy.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp1pp10szy.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp1pp10szy.py\", line 19, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 1:\n        return\
    \ p % p\n    if n == 2:\n        return ((p * p) % p) % p\n    if n == 3:\n  \
    \      return (((p * p * p) % p) % p) % p\n    if n == 4:\n        return (((p\
    \ * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p)\
    \ % p) % p) % p\n    if n == 6:\n        return (((p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 7:\n        return (((p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if \ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpyrcg31py.py\", line 64\n    if \n      ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if\
    \ n % p == 0:\n        return modp(n // p, p)\n    return modp(n * p, p)\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpeeh01efe.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpeeh01efe.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 26, in modp\n    return modp(n * p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 25, in modp\n    return modp(n // p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 26, in modp\n    return modp(n * p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 25, in modp\n    return modp(n // p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 26, in modp\n    return modp(n * p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 25, in modp\n    return modp(n // p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 26, in modp\n    return modp(n * p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 25, in modp\n    return modp(n // p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 26, in modp\n    return modp(n * p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 25, in modp\n    return modp(n // p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 26, in modp\n    return modp(n * p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 25, in modp\n    return modp(n // p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 26, in modp\n    return modp(n * p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 25, in modp\n    return modp(n // p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 26, in modp\n    return modp(n * p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 25, in modp\n    return modp(n // p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 26, in modp\n    return modp(n * p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 25, in modp\n    return modp(n // p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 26, in modp\n    return modp(n * p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 25, in modp\n    return modp(n // p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 26, in modp\n    return modp(n * p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 25, in modp\n    return modp(n // p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 26, in modp\n    return modp(n * p, p)\n  File \"/tmp/tmpeeh01efe.py\", line\
    \ 25, in modp\n    return modp(n // p, p)\n  File \"/tmp/tmpeeh01efe.py\", li"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) * (-1)\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return p\n    if n == 2:\n        return p\n    if n % 2 == 0:\n      \
    \  return modp(n // 2, p) * (-1)\n    if n % 2 == 1:\n        return modp(n //\
    \ 2, p)\n\n    # Find a power of 2 >= n.\n    # Note that this can be optimized\
    \ away by checking if n is power of 2\n    # at compile time, but this makes the\
    \ function more readable.\n    while n != 1:\n        if n % 2 == 0:\n       \
    \     n //= 2\n        else:\n            n = (n * 3) + 1\n    return n\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsxr99ewi.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpsxr99ewi.py\", line 50,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpsxr99ewi.py\", line 41, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9jblfr32.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp9jblfr32.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp9jblfr32.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n\
    \ == 16:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 and\
    \ p < 100:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 24 and p < 100:\n        return (((p * p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 25 and p < 100:\n        return\
    \ (((p * p * p * \ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpmx40ojef.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplx7z70s9.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmplx7z70s9.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmplx7z70s9.py\", line 19, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp((n - 1) // 2, p) + p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsws1u997.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpsws1u997.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpsws1u997.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > MOD:\n\
    \        return modp(n - 1, MOD)\n    if p < 1:\n        return modp(n - 1, p)\n\
    \    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert candidate(3, 5)\
    \ == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) ==\
    \ 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n \
    \   assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8w0io19f.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp8w0io19f.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp8w0io19f.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmp8w0io19f.py\", line\
    \ 20, in modp\n    if p > MOD:\nNameError: name 'MOD' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > MOD:\n\
    \        return modp(n - 1, MOD)\n    if p % 2 == 0:\n        return modp(n //\
    \ 2, p) * p\n    if p % 3 == 0:\n        return modp(n // 3, p) * (p - 1)\n  \
    \  return modp(n // 2, p) * (p - 1) + p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphzgjbf_j.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmphzgjbf_j.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmphzgjbf_j.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmphzgjbf_j.py\", line\
    \ 20, in modp\n    if p > MOD:\nNameError: name 'MOD' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    k = n // 2\n    return p - (p * k % p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv1z9wzan.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpv1z9wzan.py\", line 36,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpv1z9wzan.py\", line 27, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p + 1) // p) % p\n    if n == 4:\n        return ((p * p * p + 3 * p +\
    \ 1) // p) % p\n    if n == 5:\n        return ((p * p * p * p + 3 * p * p + 1)\
    \ // p) % p\n    return ((p * p * p * p * p + 6*p * p * p + 1) // p) % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe6yd6h4k.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpe6yd6h4k.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpe6yd6h4k.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p) % p) % p)\
    \ % p\n    if n == 5:\n        return (((p * p * p * p) % p) % p) % p\n    if\
    \ n == 6:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 7:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 11:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 12:\n        return (((p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 13:\n        return (((p * p * p * p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 14:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 20:\n        return (((p\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp02jdcdkf.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppqb4o_w0.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmppqb4o_w0.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmppqb4o_w0.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmxm59i4g.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpmxm59i4g.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpmxm59i4g.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if p == 2:\n        return n\n    if p % 4 == 0:\n    \
    \    return modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n //\
    \ 8, p) + 4\n    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if\
    \ p % 32 == 0:\n        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n  \
    \      return modp(n // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdugiyp56.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpdugiyp56.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpdugiyp56.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplo1xw884.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmplo1xw884.py\", line 34,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmplo1xw884.py\", line 25, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p) * 3\n  \
    \  if n % p == 0:\n        return modp(n // p, p)\n    if n % p == 1:\n      \
    \  return modp(n // p, p) * p\n    return modp(n // p, p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2wuqgy7m.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp2wuqgy7m.py\", line 41,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp2wuqgy7m.py\", line 32, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ p - (p // 4)\n    if p % 8 == 0:\n        return p - (p // 8)\n    if p % 16\
    \ == 0:\n        return p - (p // 16)\n    return p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7g6zcoel.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp7g6zcoel.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp7g6zcoel.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 0:\n        raise ZeroDivisionError('modp(0, 0)\
    \ raises ZeroDivisionError')\n    if n == 0:\n        return p\n    if n < 0:\n\
    \        n += p\n    if n == 1:\n        return p\n    if n == p:\n        return\
    \ p\n    if n % p == 0:\n        return p - 1\n    r = p - 1\n    while n % p\
    \ == 0:\n        n //= p\n        r += 1\n    return r\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr9thes05.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpr9thes05.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpr9thes05.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7jfhhp0q.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7jfhhp0q.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp7jfhhp0q.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) + 1) * (-1) ** (n //\
    \ p)\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk_8dd1td.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpk_8dd1td.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpk_8dd1td.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    return (((p * p * p * p * p * p) % p) % p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ilwh2fp.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1ilwh2fp.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp1ilwh2fp.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n\
    \ == 16:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n\
    \ == 24:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 25 or n == 26:\n        return (((p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 27 or n == 28:\n        return (((p *\
    \ p * p * p * p * \ndef check(candidate):\n    assert candidate(3, 5) == 3\n \
    \   assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp5pkxzshn.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppuem7n9c.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmppuem7n9c.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmppuem7n9c.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p) % p) * p)\
    \ % p\n    if n == 5:\n        return (((p * p * p * p) % p) * p) % p\n    if\
    \ n == 6:\n        return (((p * p * p * p * p) % p) * p) % p\n    if n == 7:\n\
    \        return (((p * p * p * p * p * p) % p) * p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) * p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) * p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) * p) % p\n    if n\
    \ == 11:\n        return (((p * p * p * p * p * p * p * p * p) % p) * p) % p\n\
    \    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) * p) % p\n    if n == 14:\n \
    \       return (((p * p * p * p * p * p * p * p * p * p * p) % p) * p) % p\n \
    \   if n == 15:\n        return (((p * p * p * p * p * p * p * p * p * p * p *\
    \ p) % p) * p) % p\n    if n == 16:\n        return (((p * p * p * p * p * p *\
    \ p * p * p * p * p * p * p) % p) * p) % p\n    if n == 17:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p * p * p * p * p) % p) * p) % p\n    if n\
    \ == 18:\n        return (((p * p * p * p * p * p * p * p * p * p * p * p * p\
    \ * p) % p) * p) % p\n    if n == 19:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p * p * p * p * p) % p) * p) % p\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw_9xrss9.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpw_9xrss9.py\", line 64,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpw_9xrss9.py\", line 55, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p) * 3\n  \
    \  if n % p == 0:\n        return modp(n // p, p)\n    return modp(n // p, p)\
    \ * p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ileyiqa.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp3ileyiqa.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3ileyiqa.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n == 1:\n \
    \       return p % p\n    if n == 2:\n        return ((p * p) % p) % p\n    if\
    \ n == 3:\n        return (((p * p * p) % p) % p) % p\n    if n == 4:\n      \
    \  return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p\
    \ * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 8:\n        return (((p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 9:\n        return (((p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 10:\n        return (((p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p *\
    \ p * p * p * p) % p) % p) % p\n    if n == 12 or n\ndef check(candidate):\n \
    \   assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpa48f3dpa.py\", line 62\n    if n == 12 or n\n        \
    \          ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    if p % 256 == 0:\n        return modp(n // 256, p) + 17\n\
    \    return modp(n // 256, p) + 17\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgt1q_uv0.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpgt1q_uv0.py\", line 45,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpgt1q_uv0.py\", line 36, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8srz7mit.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp8srz7mit.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp8srz7mit.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0lpsn2sf.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp0lpsn2sf.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp0lpsn2sf.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1athy5ch.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp1athy5ch.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp1athy5ch.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n       \
    \ return p - (p % p)\n    return p + (p - 1) * (p - 1) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppgbvyb7j.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmppgbvyb7j.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmppgbvyb7j.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12:\n        return (((p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 13:\n        return (((p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 14:\n        return (((p * p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 15:\n        return (((p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 18:\n \
    \       return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 19:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 20:\n        return (((p * p * p * p * p * p * p\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpvo_6lvxj.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkuc6ilx3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkuc6ilx3.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpkuc6ilx3.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp95u0uqmw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp95u0uqmw.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp95u0uqmw.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if p == 2:\n        return n\n    if p % 4 == 0:\n    \
    \    return modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n //\
    \ 8, p) + 4\n    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if\
    \ p % 32 == 0:\n        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n  \
    \      return modp(n // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvypdpkka.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpvypdpkka.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpvypdpkka.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 14:\n     \
    \   return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 15:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 16:\n        return (((p * p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 17:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 18:\n        return (((p * p\
    \ * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19:\n  \
    \      return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 20:\n        return (((p * p * p * p * p * p * p\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp8waxvp1c.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0m_ptzx2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp0m_ptzx2.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp0m_ptzx2.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    return modp(n // 64, p) + 17\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_kqd0a7t.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp_kqd0a7t.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp_kqd0a7t.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 0:\n        raise ZeroDivisionError(\"division\
    \ by zero\")\n    if n == 0:\n        return p\n    if n < 0:\n        return\
    \ modp(n - 1, p) * p\n    if p < 0:\n        return modp(-n, p) * p\n    if p\
    \ == 1 or p == 2:\n        return n\n    if n % p == 0:\n        return modp(n\
    \ // p, p)\n    if p % n == 0:\n        return modp(n // p, n)\n    if n % p ==\
    \ 0:\n        return modp(n // p, p)\n    return modp((n % p) + p, p)\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpttzi9pbk.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpttzi9pbk.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpttzi9pbk.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmpttzi9pbk.py\", line\
    \ 30, in modp\n    return modp((n % p) + p, p)\n  File \"/tmp/tmpttzi9pbk.py\"\
    , line 30, in modp\n    return modp((n % p) + p, p)\n  File \"/tmp/tmpttzi9pbk.py\"\
    , line 30, in modp\n    return modp((n % p) + p, p)\n  [Previous line repeated\
    \ 993 more times]\n  File \"/tmp/tmpttzi9pbk.py\", line 14, in modp\n    if p\
    \ == 0:\nRecursionError: maximum recursion depth exceeded in comparison\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    if p % 256 == 0:\n        return modp(n // 256, p) + 17\n\
    \    return modp(n // 256, p) + 17\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfu2fw86l.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpfu2fw86l.py\", line 45,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpfu2fw86l.py\", line 36, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp((n - 1) // 2, p) + p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcolxk6n8.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpcolxk6n8.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpcolxk6n8.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 0:\n        raise ZeroDivisionError(\"modp(0,\
    \ 0) raises ZeroDivisionError\")\n    if n == 0:\n        return p\n    if n <\
    \ 0:\n        return modp(n - 1, p)\n    if n == 1:\n        return p\n    if\
    \ n == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n // 2, p)\n\
    \    if n % 2 == 1:\n        return modp(n - 1, p)\n    return modp(n - 2, p)\
    \ % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8pxj2uv7.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp8pxj2uv7.py\", line 41,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp8pxj2uv7.py\", line 32, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpblaq73m_.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpblaq73m_.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpblaq73m_.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    if p % 256 == 0:\n        return modp(n // 256, p) + 17\n\
    \    return modp(n // 256, p) + 17\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj4p01zv9.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpj4p01zv9.py\", line 45,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpj4p01zv9.py\", line 36, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n - 1, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0b735qh7.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp0b735qh7.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp0b735qh7.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 15\
    \ or n == 16:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n   \
    \     return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 23 or n == 24:\n        return (((p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 25 or n == 26:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 27 or n == 28:\n        return\
    \ (((p * p * p * p\ndef check(candidate):\n    assert candidate(3, 5) == 3\n \
    \   assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpmwds6dkd.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        raise\
    \ ValueError(\"modp(n) not defined for negative integers\")\n    if p == 2:\n\
    \        return n\n    if p != 1:\n        p = p % 4\n    if p == 1:\n       \
    \ return n\n    if p == 3:\n        return n & 1\n    if n == p - 1:\n       \
    \ return n // 2\n    if n == p - 2:\n        return n & 1\n    if n == p - 3:\n\
    \        return n // 2 | 1\n    if n == p - 4:\n        return n // 2 & 1\n  \
    \  return n // 2 | 1\n\n\ndef check(candidate):\n    assert candidate(3, 5) ==\
    \ 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n\
    \    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert\
    \ candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5hf05c3_.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp5hf05c3_.py\", line 47,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp5hf05c3_.py\", line 39, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p % p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptiun4plb.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptiun4plb.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptiun4plb.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    return modp(n // 64, p) + 17\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe4qjn11g.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe4qjn11g.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpe4qjn11g.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpde9vxhjr.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpde9vxhjr.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpde9vxhjr.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n & 1) << p) + (n >> 1 & 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_bvs2500.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp_bvs2500.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp_bvs2500.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p + 1) // p) % p\n    if n == 4:\n        return ((p * p * p + 3 * p +\
    \ 2) // p) % p\n    if n == 5:\n        return ((p * p * p * p + 2 * p * p + 3\
    \ * p + 4) // p) % p\n    if n == 6:\n        return ((p * p * p * p * p + p *\
    \ p * p + 3 * p + 5 * p + 4) // p) % p\n    if n == 7:\n        return ((p * p\
    \ * p * p * p * p + p * p * p * p + 2 * p * p + 5 * p + 3) // p) % p\n    if n\
    \ == 8:\n        return ((p * p * p * p * p * p + p * p * p * p * p + p * p *\
    \ p + 3 * p + 5 * p + 2 * p + 4) // p) % p\n    if n == 9:\n        return ((p\
    \ * p * p * p * p * p * p + p * p * p * p * p * p + p * p * p * p + p * p + 3\
    \ * p + 5 * p + 2 * p + 2) // p) % p\n    if n == 10:\n        return ((p * p\
    \ * p * p * p * p * p + p * p * p * p * p * p * p + p * p * p * p * p + p * p\
    \ * p + 3 * p + 5 * p + 2 * p + 1) // p) % p\n    if n == 11:\n        return\
    \ ((p * p * p * p * p * p * p + p * p * p * p * p * p * p + p * p * p * p * p\
    \ + p * p * p + p * p + 3 * p + 5 * p + 2 * p + 1) // p) % p\n    if n == 12 or\
    \ n == 8:\n        return ((p * p * p * p * p * p * p + p * p * p * p * p * p\
    \ * p + p * p * p * p * p + p * p * p + p * p + 3 * p + 5 * p + 2 * p + 1) //\
    \ p) % p\n    if n == 6:\n        return ((p * p * p * p * p * p * p + p * p *\
    \ p * p * \ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpxp9wxojh.py\", line 42\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    return modp(n // 64, p) + 13\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcrdcb8xd.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpcrdcb8xd.py\", line 41,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpcrdcb8xd.py\", line 32, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    k = n // 2\n    return p - ((p // p) * k) * p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm88z61tx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpm88z61tx.py\", line 36,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpm88z61tx.py\", line 27, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p) % p) % p)\
    \ % p\n    if n == 5:\n        return (((p * p * p * p) % p) % p) % p\n    if\
    \ n == 6:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 7:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 11:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ ((p * p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n       \
    \ return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 15:\n        return (((p * p * p * p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 16:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p * p * p) % p) % p) % p\n    if n == 17:\n        return (((p * p *\
    \ p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 18:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if \ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp1qxsetdp.py\", line 54\n    if \n      ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if p == 1 or p == -1:\n\
    \        return pow(2, n)\n    if p == 0:\n        return 0\n    if p == n:\n\
    \        return 1\n    if n % p == 0:\n        return modp(n // p, p)\n    return\
    \ modp(n % p, p)\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n\
    \    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n   \
    \ assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert\
    \ candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp17jl7hoz.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp17jl7hoz.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp17jl7hoz.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmp17jl7hoz.py\", line\
    \ 24, in modp\n    return modp(n % p, p)\n  File \"/tmp/tmp17jl7hoz.py\", line\
    \ 24, in modp\n    return modp(n % p, p)\n  File \"/tmp/tmp17jl7hoz.py\", line\
    \ 24, in modp\n    return modp(n % p, p)\n  [Previous line repeated 993 more times]\n\
    \  File \"/tmp/tmp17jl7hoz.py\", line 14, in modp\n    if p == 2:\nRecursionError:\
    \ maximum recursion depth exceeded in comparison\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p) + p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmposgtp1zs.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmposgtp1zs.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmposgtp1zs.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p) % p) % p)\
    \ % p\n    if n == 5:\n        return (((p * p * p * p) % p) % p) % p\n    if\
    \ n == 6:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 7:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 11:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ ((p * p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n       \
    \ return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 15:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 16:\n        return (((p * p * p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 17:\n        return (((p * p * p * p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 18:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 20:\n        return (((p * p * p * p * p * p * p * p\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp8lrjuzqi.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p % 2 == 0:\n        return modp(n // 2,\
    \ p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    return modp(n //\
    \ 2, p) + modp(n // 3, p)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc3jh_b9n.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpc3jh_b9n.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpc3jh_b9n.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd2pfx1my.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpd2pfx1my.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpd2pfx1my.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
