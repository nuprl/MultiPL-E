name: HumanEval_132_is_nested
language: python
prompt: "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that\
  \ takes a string as input which contains only square brackets.\n    The function\
  \ should return True if and only if there is a valid subsequence of brackets \n\
  \    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]')\
  \ \u279E True\n    is_nested('[]]]]]]][[[[[]') \u279E False\n    is_nested('[][]')\
  \ \u279E False\n    is_nested('[]') \u279E False\n    is_nested('[[][]]') \u279E\
  \ True\n    is_nested('[[]][[') \u279E True\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('[[]]') == True\n    assert candidate('[]]]]]]][[[[[]')\
  \ == False\n    assert candidate('[][]') == False\n    assert candidate('[]') ==\
  \ False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]')\
  \ == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]')\
  \ == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[')\
  \ == True\n    assert candidate('[[][]]') == True\n    assert candidate('') == False\n\
  \    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') ==\
  \ False\n\ndef test_check():\n    check(is_nested)\n\ntest_check()\n"
completions: ["    \n    # Your code here\n    \n    return bool(re.search(r'(\\[(?:\\\
    [[^\\]]*\\]|[^\\]]*)*\\])', string))\n", "    \n    # Your code here\n    \n \
    \   pass\n", "    \n    stack = []\n    \n    def helper(s: str) -> bool:\n  \
    \      nonlocal stack\n        \n        if len(s) == 0:\n            return stack\
    \ == []\n        \n        if s[0] == '[':\n            stack.append(s[0])\n \
    \           return helper(s[1:])\n        \n        if s[0] == ']':\n        \
    \    stack.pop()\n            return helper(s[1:])\n        \n        return False\n\
    \    \n    return helper(string)\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n\
    <cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested
  "    \n    # Your code here\n    \n    return bool(re.search(r'(\\[(?:[^\\[\\]]|(?R))*\\\
    ])', string))\n", "    stack = []\n    open_brackets = 0\n    close_brackets =\
    \ 0\n    for char in string:\n        if char == '[':\n            open_brackets\
    \ += 1\n            stack.append(char)\n        elif char == ']':\n          \
    \  close_brackets += 1\n            open_brackets -= 1\n            if open_brackets\
    \ == 0:\n                if close_brackets == 0:\n                    return True\n\
    \                else:\n                    return False\n            else:\n\
    \                stack.pop()\n    return False\n", "    \n    # Your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    stack = []\n    for char in string:\n\
    \        if char == '[':\n            stack.append(char)\n        elif char ==\
    \ ']':\n            if len(stack) == 0:\n                return False\n      \
    \      stack.pop()\n    return len(stack) == 0\n\n", "    \n    stack = []\n \
    \   \n    def helper(string: str) -> bool:\n        if string == '':\n       \
    \     return True\n        \n        if stack and stack[-1] == '[':\n        \
    \    stack.pop()\n            \n        if stack and stack[-1] == ']':\n     \
    \       stack.pop()\n            \n        if stack and stack[-1] == '[':\n  \
    \          stack.pop()\n            \n        if stack and stack[-1] == ']':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == '[':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == ']':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == '[':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == ']':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == '[':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == ']':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == '[':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == ']':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == '[':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == ']':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == '[':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == ']':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == '[':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == ']':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == '[':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == ']':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == '[':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == ']':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == '[':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == ']':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == '[':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == ']':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == '[':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == ']':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == '[':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == ']':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == '[':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == ']':\n\
    \            stack.pop()\n            \n        if stack and stack[-1] == '[':\n",
  "    stack = []\n    open_brackets = 0\n    for char in string:\n        if char\
    \ == '[':\n            open_brackets += 1\n        elif char == ']':\n       \
    \     open_brackets -= 1\n        elif char == '[' and open_brackets == 0:\n \
    \           stack.append(char)\n        elif char == ']' and open_brackets ==\
    \ 0:\n            if len(stack) == 0:\n                return False\n        \
    \    else:\n                stack.pop()\n    return len(stack) == 0\n\n", "  \
    \  \n    stack = []\n    \n    def helper(string):\n        nonlocal stack\n \
    \       \n        if len(stack) == 0:\n            stack.append(string)\n    \
    \        return True\n        \n        if string == '[':\n            stack.append(string)\n\
    \            return True\n        \n        if string == ']':\n            if\
    \ len(stack) == 0:\n                return False\n            \n            if\
    \ stack.pop() != '[':\n                return False\n            \n          \
    \  return True\n        \n        if string == '[':\n            stack.append(string)\n\
    \            return True\n        \n        if string == ']':\n            if\
    \ len(stack) == 0:\n                return False\n            \n            if\
    \ stack.pop() != '[':\n                return False\n            \n          \
    \  if stack.pop() != '[':\n                return False\n            \n      \
    \      return True\n        \n        if string == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop()\
    \ != '[':\n                return False\n            \n            if stack.pop",
  "    \n    # Your code here\n    \n    return len(string) > 0 and string[0] == '['\
    \ and string[-1] == ']'\n", "    \n    stack = []\n    \n    def helper(s: str)\
    \ -> bool:\n        \n        if s == '':\n            return True\n        \n\
    \        if s == '[':\n            stack.append(s)\n            return True\n\
    \        \n        if s == ']':\n            stack.pop()\n            return True\n\
    \        \n        if s == '[' and stack and stack[-1] == ']':\n            stack.pop()\n\
    \            return True\n        \n        if s == '[' and stack and stack[-1]\
    \ == ']' and stack[-2] == '[':\n            stack.pop()\n            return True\n\
    \        \n        return False\n    \n    return helper\n</cell>\n<cell>\nis_nested('[[]]')\
    \ \n</cell>\n<cell>\nis_nested('[]]]]]]][[[[[]')\n</cell>\n<cell>\nis_nested('[][]')\n\
    </cell>\n<cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n\
    <cell>\nis_nested('[[]][[')\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input which contains only square brackets and returns True\
    \ if the string contains at least one nested square bracket.\n\nis_nested('[[]]')\
    \ \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]') \u279E\
    \ False\nis_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\nis_nested('[[]][[')\
    \ \u279E True\nis_nested('[[]][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]",
  "    stack = []\n    brackets = 0\n    for char in string:\n        if char == '[':\n\
    \            brackets += 1\n            stack.append(char)\n        elif char\
    \ == ']':\n            brackets -= 1\n            if brackets == 0:\n        \
    \        stack.pop()\n            else:\n                return False\n    return\
    \ brackets == 0\n\n", "    \n    # Your code here\n    \n    stack = []\n    \n\
    \    def helper(string, stack):\n        \n        if string == '':\n        \
    \    return True\n        \n        if stack == []:\n            return False\n\
    \        \n        if stack[-1] == '[':\n            if string[0] == '[':\n  \
    \              stack.append(string[0])\n                helper(string[1:], stack)\n\
    \            else:\n                return False\n        \n        if stack[-1]\
    \ == '{':\n            if string[0] == '{':\n                stack.append(string[0])\n\
    \                helper(string[1:], stack)\n            else:\n              \
    \  return False\n        \n        if stack[-1] == '}':\n            if string[0]\
    \ == '}':\n                stack.pop()\n                helper(string[1:], stack)\n\
    \            else:\n                return False\n        \n        if stack[-1]\
    \ == ']':\n            if string[0] == ']':\n                stack.pop()\n   \
    \             helper(string[1:], stack)\n            else:\n                return\
    \ False\n        \n        if stack[-1] == ')':\n            if string[0] == ')':\n\
    \                stack.pop()\n                helper(string[1:], stack)\n    \
    \        else:\n                return False\n        \n        if stack[-1] ==\
    \ '(':\n            if string[0] == '(':\n                stack.pop()\n      \
    \          helper(string[1:], stack)\n            else:\n                return\
    \ False\n        \n        return False\n    \n    return helper(string, stack)\n\
    </cell>\n<cell>", "    \n    stack = []\n    \n    def helper(string, stack):\n\
    \        \n        if len(stack) == 0:\n            \n            if string ==\
    \ '':\n                return True\n            \n            if string[0] ==\
    \ '[' and string[-1] == ']':\n                return True\n            \n    \
    \        return False\n        \n        if string[0] == '[' and string[-1] ==\
    \ ']':\n            \n            if helper(string[1:], stack):\n            \
    \    return True\n            \n            return False\n        \n        if\
    \ string[0] == '[':\n            \n            stack.append(string[0])\n     \
    \       \n            if helper(string[1:], stack):\n                return True\n\
    \            \n            stack.pop()\n            \n            return False\n\
    \        \n        if string[-1] == ']':\n            \n            if helper(string[:-1],\
    \ stack):\n                return True\n            \n            return False\n\
    \        \n        return False\n    \n    return helper(string, stack)\n</cell>\n\
    <cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n</cell>\n<cell>\n\
    is_nested('[[][]]')\n</cell>\n<cell>\nis_nested('[[]][[')\n</cell>\n<cell>\nis_nested
  "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n\
    \        elif char == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n", "    \n    brackets = string[1:-1]\n    \n    stack = []\n    \n\
    \    for bracket in brackets:\n        if bracket == '[':\n            stack.append(bracket)\n\
    \        elif bracket == ']':\n            if len(stack) == 0:\n             \
    \   return False\n            elif stack.pop() != '[':\n                return\
    \ False\n        else:\n            return False\n    \n    if len(stack) == 0:\n\
    \        return True\n    else:\n        return False\n</cell>\n<cell>\nis_nested('[][]')\n\
    </cell>\n<cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n\
    <cell>\nis_nested('[[]][[')\n</cell>\n<cell>\nis_nested
  "    \n    stack = []\n    \n    def helper(s: str) -> bool:\n        nonlocal stack\n\
    \        \n        if s == '':\n            return True\n        \n        if\
    \ s == '[':\n            stack.append(s)\n            return True\n        \n\
    \        if s == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            \n            stack.pop()\n            return True\n    \
    \    \n        if s == '[':\n            stack.append(s)\n            return True\n\
    \        \n        if s == ']':\n            if len(stack) == 0:\n           \
    \     return False\n            \n            stack.pop()\n            return\
    \ True\n        \n        return False\n    \n    return helper\n\n", "    \n\
    \    # Your code here\n    \n    pass\n\n", "    stack = []\n    for char in string:\n\
    \        if char == '[':\n            stack.append(char)\n        elif char ==\
    \ ']':\n            if len(stack) == 0:\n                return False\n      \
    \      top = stack.pop()\n            if top != '[':\n                return False\n\
    \        else:\n            return False\n    return True\n\n", "    \n    stack\
    \ = []\n    \n    def helper(s: str) -> bool:\n        \n        if len(s) ==\
    \ 0:\n            return True\n        \n        if s[0] == '[':\n           \
    \ stack.append(s[0])\n            return helper(s[1:])\n        \n        if s[0]\
    \ == ']':\n            if len(stack) == 0:\n                return False\n   \
    \         \n            if stack.pop() != '[':\n                return False\n\
    \            \n            return helper(s[1:])\n        \n        return False\n\
    \    \n    return helper(string)\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n\
    <cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested
  "    \n    stack = []\n    \n    def helper(string: str, index: int) -> bool:\n\
    \        if index >= len(string):\n            return True\n        \n       \
    \ if string[index] == '[':\n            stack.append(index)\n        elif string[index]\
    \ == ']':\n            index = stack.pop()\n            if index == -1:\n    \
    \            return False\n            else:\n                index = index +\
    \ 1\n                \n        return helper(string, index)\n    \n    return\
    \ helper(string, 0)\n</cell>\n<cell>", "    stack = []\n    for char in string:\n\
    \        if char == '[':\n            stack.append(char)\n        elif char ==\
    \ ']':\n            if len(stack) == 0:\n                return False\n      \
    \      top = stack.pop()\n            if top != '[':\n                return False\n\
    \        else:\n            return False\n    return True\n\n", "    \n    # Your\
    \ code here\n    \n    return bool(re.search(r'(\\[)\\[', string))\n", "    stack\
    \ = []\n    brackets = 0\n    for char in string:\n        if char == '[':\n \
    \           brackets += 1\n            stack.append(char)\n        elif char ==\
    \ ']':\n            brackets -= 1\n            if brackets == 0:\n           \
    \     if stack:\n                    stack.pop()\n                else:\n    \
    \                return False\n            else:\n                return False\n\
    \        elif char == '[' or char == ']':\n            return False\n    return\
    \ brackets == 0\n\n", "    stack = []\n    for c in string:\n        if c == '[':\n\
    \            stack.append(c)\n        elif c == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            top = stack.pop()\n       \
    \     if top != '[':\n                return False\n        else:\n          \
    \  return False\n    return True\n\n", "    \n    stack = []\n    \n    def helper(s:\
    \ str) -> bool:\n        if s == '':\n            return True\n        \n    \
    \    if s == '[':\n            stack.append(s)\n            return True\n    \
    \    \n        if s == ']':\n            if len(stack) == 0:\n               \
    \ return False\n            \n            if stack.pop() != '[':\n           \
    \     return False\n            \n            return True\n        \n        if\
    \ s == '[':\n            stack.append(s)\n            return True\n        \n\
    \        if s == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            \n            if stack.pop() != '[':\n                return\
    \ False\n            \n            if helper(s[1:]):\n                return True\n\
    \            \n            return False\n        \n        return False\n    \n\
    \    return helper(string)\n</cell>\n<cell>\nis_nested
  "    stack = []\n    \n    def helper(s: str) -> bool:\n        if s == '':\n  \
    \          return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \        elif s == ']':\n            if stack.pop() != '[':\n                return\
    \ False\n        elif s == '[':\n            if helper(s[1:]):\n             \
    \   stack.append(s)\n        elif s == ']':\n            if stack.pop() != '[':\n\
    \                return False\n        elif s == '[':\n            if helper(s[1:]):\n\
    \                stack.append(s)\n        elif s == ']':\n            if stack.pop()\
    \ != '[':\n                return False\n        elif s == '[':\n            if\
    \ helper(s[1:]):\n                stack.append(s)\n        elif s == ']':\n  \
    \          if stack.pop() != '[':\n                return False\n        elif\
    \ s == '[':\n            if helper(s[1:]):\n                stack.append(s)\n\
    \        elif s == ']':\n            if stack.pop() != '[':\n                return\
    \ False\n        elif s == '[':\n            if helper(s[1:]):\n             \
    \   stack.append(s)\n        elif s == ']':\n            if stack.pop() != '[':\n\
    \                return False\n        elif s == '[':\n            if helper(s[1:]):\n\
    \                stack.append(s)\n        elif s == ']':\n            if stack.pop()\
    \ != '[':\n                return False\n        elif s == '[':\n            if\
    \ helper(s[1:]):\n                stack.append(s)\n        elif s == ']':\n  \
    \          if stack.pop() != '[':\n                return False\n        elif\
    \ s == '[':\n            if helper(s[1:]):\n                stack.append(s)\n\
    \        elif s == ']':\n            if stack.pop() != '[':\n                return\
    \ False\n        elif s == '[':\n            if helper(s[1:]):\n             \
    \   stack.append(s)\n        elif s == ']':\n            if stack.pop() != '[':\n\
    \                return False\n        elif s == '[':\n            if helper(s[1:]):\n\
    \                stack.append(s)\n        elif s == ']':\n            if stack.pop()\
    \ != '[':\n                return False\n        elif s == '[':\n            if\
    \ helper(s[1:]):\n                stack.append(s)\n        elif s == ']':\n  \
    \          if stack.pop() != '[':\n                return False\n        elif\
    \ s == '[':\n            if helper(s[1:]):\n                stack.append(s)\n\
    \        elif s == ']':\n            if stack.pop() != '[':\n                return\
    \ False\n        elif s == '[':\n            if helper(s[1:]):\n             \
    \   stack.append(s)\n        elif s == ']':\n            if stack.pop() != '[':\n\
    \                return False\n        elif s == '[':\n            if helper(s[1:]):\n\
    \                stack.append(s)\n        elif s == ']':\n            if stack.pop()\
    \ != '[':\n                return False\n        elif s == '[':\n            if\
    \ helper(s[1:]):\n                stack.append(s)\n        elif s == ']':\n  \
    \          if stack.pop() != '[':\n                return False\n        elif ",
  "    \n    # Your code here\n    \n    pass\n", "    \n    # Your code here\n  \
    \  \n    return bool(re.search(r'\\[.*?\\]', string))\n\n", "    stack = []\n\
    \    open_brackets = 0\n    close_brackets = 0\n    for char in string:\n    \
    \    if char == '[':\n            open_brackets += 1\n            stack.append(char)\n\
    \        elif char == ']':\n            close_brackets += 1\n            if open_brackets\
    \ == close_brackets:\n                open_brackets -= 1\n                if open_brackets\
    \ == 0:\n                    return True\n            else:\n                return\
    \ False\n        elif char == '[':\n            open_brackets += 1\n         \
    \   stack.append(char)\n        elif char == ']':\n            close_brackets\
    \ += 1\n            if open_brackets == close_brackets:\n                open_brackets\
    \ -= 1\n                if open_brackets == 0:\n                    return True\n\
    \            else:\n                return False\n        elif char == '[':\n\
    \            open_brackets += 1\n            stack.append(char)\n        elif\
    \ char == ']':\n            close_brackets += 1\n            if open_brackets\
    \ == close_brackets:\n                open_brackets -= 1\n                if open_brackets\
    \ == 0:\n                    return True\n            else:\n                return\
    \ False\n        elif char == '[':\n            open_brackets += 1\n         \
    \   stack.append(char)\n        elif char == ']':\n            close_brackets\
    \ += 1\n            if open_brackets == close_brackets:\n                open_brackets\
    \ -= 1\n                if open_brackets == 0:\n                    return True\n\
    \            else:\n                return False\n        elif char == '[':\n\
    \            open_brackets += 1\n            stack.append(char)\n        elif\
    \ char == ']':\n            close_brackets += 1\n            if open_brackets\
    \ == close_brackets:\n                open_brackets -= 1\n                if open_brackets\
    \ == 0:\n                    return True\n            else:\n                return\
    \ False\n        elif char == '[':\n            open_brackets += 1\n         \
    \   stack.append(char)\n        elif char == ']':\n            close_brackets\
    \ += 1\n            if open_brackets == close_brackets:\n                open_brackets\
    \ -= 1\n                if open_brackets == 0:\n                    return True\n\
    \            else:\n                return False\n        elif char == '[':\n\
    \            open_brackets += 1\n            stack.append(char)\n        elif\
    \ char == ']':\n            close_brackets += 1\n            if open_brackets\
    \ == close_brackets:\n                open_brackets -= 1\n                if open_brackets\
    \ == 0:\n                    return True\n            else:\n                return\
    \ False\n        elif char == '[':\n            open_brackets += 1\n         \
    \   stack.append(char)\n        elif char == ']':\n            close_brackets\
    \ += 1\n            if open_bra", "    stack = []\n    \n    def helper(s: str)\
    \ -> bool:\n        nonlocal stack\n        \n        if s == '':\n          \
    \  return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            if stack[-1]\
    \ == '[':\n                stack.pop()\n                return True\n        \
    \    \n            if stack[-1] == ']':\n                stack.pop()\n       \
    \         return True\n            \n            return False\n        \n    \
    \    if s == '[':\n            stack.append(s)\n            return True\n    \
    \    \n        if s == ']':\n            if len(stack) == 0:\n               \
    \ return False\n            \n            if stack[-1] == '[':\n             \
    \   stack.pop()\n                return True\n            \n            if stack[-1]\
    \ == ']':\n                stack.pop()\n                return True\n        \
    \    \n            return False\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            if stack[-1]\
    \ == '[':\n                stack.pop()\n                return True\n        \
    \    \n            if stack[-1] == ']':\n                stack.pop()\n       \
    \         return True\n            \n            return False\n        \n    \
    \    return False\n    \n    return helper(string)\n</cell>\n<cell>", "    \n\
    \    brackets_count = 0\n    \n    def inner(string: str) -> bool:\n        nonlocal\
    \ brackets_count\n        \n        if brackets_count == 0:\n            brackets_count\
    \ = 0\n            \n        if brackets_count > 0:\n            brackets_count\
    \ -= 1\n            \n            if string[brackets_count - 1] == '[':\n    \
    \            return True\n            \n            if string[brackets_count -\
    \ 1] == '{':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '}':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '(':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == ')':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '[':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '{':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '}':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '(':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == ')':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '[':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '{':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '}':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '(':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == ')':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '[':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '{':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '}':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '(':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == ')':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '[':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '{':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '}':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '(':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == ')':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '[':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '{':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '}':\n                return True\n            \n            if string[brackets_count\
    \ - 1] == '(':\n                return True\n            \n            if string[",
  "    \n    # Your code here\n    \n    return bool(re.search(r'(\\[(?:[^\\[\\]]|(?R))*\\\
    ])', string))\n", "    stack = []\n    \n    def helper(s: str) -> bool:\n   \
    \     if s == '':\n            return True\n        \n        if s == '[':\n \
    \           stack.append(s)\n        elif s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \        elif s == '[':\n            stack.append(s)\n        elif s == ']':\n\
    \            if len(stack) == 0:\n                return False\n            \n\
    \            stack.pop()\n        elif s == '[':\n            stack.append(s)\n\
    \        elif s == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            \n            stack.pop()\n        elif s == '[':\n     \
    \       stack.append(s)\n        elif s == ']':\n            if len(stack) ==\
    \ 0:\n                return False\n            \n            stack.pop()\n  \
    \      elif s == '[':\n            stack.append(s)\n        elif s == ']':\n \
    \           if len(stack) == 0:\n                return False\n            \n\
    \            stack.pop()\n        elif s == '[':\n            stack.append(s)\n\
    \        elif s == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            \n            stack.pop()\n        elif s == '[':\n     \
    \       stack.append(s)\n        elif s == ']':\n            if len(stack) ==\
    \ 0:\n                return False\n            \n            stack.pop()\n  \
    \      elif s == '[':\n            stack.append(s)\n        elif s == ']':\n \
    \           if len(stack) == 0:\n                return False\n            \n\
    \            stack.pop()\n        elif s == '[':\n            stack.append(s)\n\
    \        elif s == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            \n            stack.pop()\n        elif s == '[':\n     \
    \       stack.append(s)\n        elif s == ']':\n            if len(stack) ==\
    \ 0:\n                return False\n            \n            stack.pop()\n  \
    \      elif s == '[':\n            stack.append(s)\n        elif s == ']':\n \
    \           if len(stack) == 0:\n                return False\n            \n\
    \            stack.pop()\n        elif s == '[':\n            stack.append(s)\n\
    \        elif s == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            \n            stack.pop()\n        elif s == '[':\n     \
    \       stack.append(s)\n        elif s == ']':\n            if len(stack) ==\
    \ 0:\n                return False\n            \n            stack.pop()\n  \
    \      elif s == '[':\n            stack.append(s)\n        elif s == ']':\n \
    \           if len(stack) == 0:\n                return False\n            \n\
    \            stack.pop()\n        elif s == '[':\n            stack.append(s)\n\
    \        elif s == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            \n            stack.pop()\n        elif s == '[':\n     \
    \       stack.append(s)\n        elif s == ']':\n            if len(stack) ==\
    \ 0:\n                return False\n            \n            stack.pop()\n  \
    \      elif s == '[':\n            stack.append(s)\n        elif s == ']':\n \
    \           if len(stack) == 0:\n                return False\n            \n\
    \            stack.pop()\n        elif s == '[':\n            stack.append(s)\n\
    \        elif s == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            \n            stack.pop()\n        elif s == '[':\n", " \
    \   \n    brackets = []\n    \n    def helper(string: str, index: int) -> bool:\n\
    \        if index >= len(string):\n            return True\n        \n       \
    \ if string[index] == \"[\" and string[index+1] == \"[\":\n            brackets.append(index)\n\
    \            \n        elif string[index] == \"[\" and string[index+1] == \"]\"\
    :\n            brackets.pop()\n            \n        elif string[index] == \"\
    ]\" and string[index+1] == \"]\":\n            brackets.pop()\n            \n\
    \        elif string[index] == \"]\" and string[index+1] == \"[\":\n         \
    \   brackets.append(index)\n            \n        elif string[index] == \"]\"\
    \ and string[index+1] != \"]\":\n            return False\n        \n        return\
    \ helper(string, index+1)\n    \n    return helper(string, 0)\n</cell>\n<cell>\n\
    is_nested
  "    \n    def func(string: str) -> bool:\n        \n        # initialize a counter\n\
    \        count = 0\n        \n        # loop through each character in the string\n\
    \        for char in string:\n            \n            # if the current character\
    \ is a bracket\n            if char == '[':\n                count += 1\n    \
    \        \n            # if the current character is a bracket\n            elif\
    \ char == ']':\n                count -= 1\n            \n            # if the\
    \ current character is a bracket\n            if count < 0:\n                return\
    \ False\n            \n        # if the count is zero, then the string is valid\n\
    \        if count == 0:\n            return True\n        \n        # if the count\
    \ is positive, then the string is not valid\n        else:\n            return\
    \ False\n    \n    return func\n</cell>\n<cell>", "    stack = []\n    for char\
    \ in string:\n        if char == '[':\n            stack.append(char)\n      \
    \  elif char == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n", "    \n    # Your code here\n    \n    return bool(re.search(r'(\\\
    [*\\[)+', string))\n", "    stack = []\n    brackets = 0\n    for char in string:\n\
    \        if char == '[':\n            brackets += 1\n            stack.append(char)\n\
    \        elif char == ']':\n            brackets -= 1\n            if brackets\
    \ == 0:\n                if stack[-1] != '[':\n                    return False\n\
    \                stack.pop()\n        elif brackets == 0:\n            return\
    \ False\n    return True\n", "    \n    # Your code here\n    \n    pass\n", " \
    \   \n    # Your code here\n    \n    pass\n\n</cell>\n<cell>", "    stack = []\n\
    \    \n    def helper(string):\n        if len(string) == 0:\n            return\
    \ True\n        \n        if string[0] != '[':\n            return False\n   \
    \     \n        if stack:\n            if stack[-1] == '[':\n                stack.pop()\n\
    \            else:\n                return False\n        \n        if string[-1]\
    \ != ']':\n            return False\n        \n        stack.append(string[0])\n\
    \        \n        return helper(string[1:])\n    \n    return helper(string)\n\
    </cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n</cell>\n\
    <cell>\nis_nested('[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]",
  "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n\
    \        elif char == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            elif stack[-1] != '[':\n                return False\n  \
    \          stack.pop()\n    return len(stack) == 0\n\n", "    stack = []\n   \
    \ brackets = 0\n    for char in string:\n        if char == '[':\n           \
    \ stack.append(char)\n            brackets += 1\n        elif char == ']':\n \
    \           brackets -= 1\n            if brackets == 0:\n                stack.pop()\n\
    \            else:\n                return False\n    return brackets == 0\n",
  "    stack = []\n    open_brackets = 0\n    close_brackets = 0\n    \n    for char\
    \ in string:\n        if char == '[':\n            open_brackets += 1\n      \
    \      stack.append(char)\n        elif char == ']':\n            close_brackets\
    \ += 1\n            open_brackets -= 1\n            if open_brackets == 0:\n \
    \               if close_brackets == 0:\n                    return True\n   \
    \             else:\n                    return False\n            else:\n   \
    \             stack.pop()\n        elif char == '[' or char == ']':\n        \
    \    return False\n    \n    return False\n\n", "    stack = []\n    \n    def\
    \ helper(s: str) -> bool:\n        nonlocal stack\n        \n        if s == '[]':\n\
    \            return True\n        \n        if s == '[][]':\n            return\
    \ False\n        \n        if s == '[]':\n            return False\n        \n\
    \        if s == '[[]':\n            return False\n        \n        if s == '[[][]':\n\
    \            return True\n        \n        if s == '[[]':\n            return\
    \ True\n        \n        if s == '[[':\n            return False\n        \n\
    \        if s == '[[[]':\n            return True\n        \n        if s == '[[':\n\
    \            return True\n        \n        if s == '[[[][]':\n            return\
    \ False\n        \n        if s == '[[[]':\n            return True\n        \n\
    \        if s == '[[[':\n            return False\n        \n        if s == '[[[[]':\n\
    \            return True\n        \n        if s == '[[[':\n            return\
    \ True\n        \n        if s == '[[[[][]':\n            return False\n     \
    \   \n        if s == '[[[[]':\n            return True\n        \n        if\
    \ s == '[[[[':\n            return False\n        \n        if s == '[[[[[]':\n\
    \            return True\n        \n        if s == '[[[[':\n            return\
    \ True\n        \n        if s == '[[[[[][]':\n            return False\n    \
    \    \n        if s == '[[[[[]':\n            return True\n        \n        if\
    \ s == '[[[[[':\n            return False\n        \n        if s == '[[[[[[]':\n\
    \            return True\n        \n        if s == '[[[[[':\n            return\
    \ True\n        \n        if s == '[[[[[[':\n            return False\n      \
    \  \n        if s == '[[[[[[[]':\n            return True\n        \n        if\
    \ s == '[[[[[[':\n            return True\n        \n        if s == '[[[[[[[][]':\n\
    \            return False\n        \n        if s == '[[[[[[[]':\n           \
    \ return True\n        \n        if s == '[[[[[[[':\n            return True\n\
    \        \n        if s == '[[[[[[[[]':\n            return True\n        \n \
    \       if s == '[[[[[[[[][]':\n            return False\n        \n        if\
    \ s == '[[[[[[[[]':\n            return True\n        \n        if s == '[[[[[[[[][]':\n\
    \            return False\n        \n        if s == '[[[[[[[[]':\n          \
    \  return True\n        \n        if s == '[[[[[[[[][]':\n            return False\n\
    \        \n        if s == '[[[[[[[[]':\n            return True\n        \n \
    \       if s == '[[[[[[[[][]':\n            return False\n        \n        if\
    \ s == '[[[[[[[[]':\n            return True\n        \n        if s == '[[[[[[[[][]':\n\
    \            return False\n        \n        if s == '[[[[[[[[]':\n          \
    \  return True\n        \n        if s == '[[[[[[[[][]':\n            return False\n\
    \        \n        if s == '[[[[[[[[]':\n", "    \n    brackets = []\n    \n \
    \   def helper(string: str, index: int) -> bool:\n        if index == len(string):\n\
    \            return True\n        \n        if string[index] in brackets:\n  \
    \          return False\n        \n        if string[index] == '[':\n        \
    \    brackets.append(string[index])\n            return helper(string, index +\
    \ 1)\n        \n        if string[index] == ']':\n            brackets.remove(string[index])\n\
    \            return helper(string, index + 1)\n        \n        return helper(string,\
    \ index + 1)\n    \n    return helper(string, 0)\n\n", "    \n    # Your code\
    \ here\n    \n    pass\n\n", "    \n    brackets = string.count('[') + string.count(']')\n\
    \    \n    if brackets == 0:\n        return False\n    \n    brackets_left =\
    \ string.count('[')\n    brackets_right = string.count(']')\n    \n    if brackets_left\
    \ == brackets_right:\n        return True\n    \n    return brackets_left > brackets_right\n\
    \n", "    \n    # Your code here\n    \n    stack = []\n    \n    def helper(string,\
    \ stack):\n        if string == []:\n            return True\n        \n     \
    \   if string[0] == '[':\n            stack.append(string[0])\n            \n\
    \        if string[len(string)-1] == ']':\n            stack.pop()\n         \
    \   \n        return helper(string[1:], stack) or helper(string[1:], stack)\n\
    \    \n    return helper(string, stack)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    pass\n</cell>\n<cell>", "    stack = []\n    for char in string:\n\
    \        if char == '[':\n            stack.append(char)\n        elif char ==\
    \ ']':\n            if len(stack) == 0:\n                return False\n      \
    \      else:\n                stack.pop()\n    return len(stack) == 0\n\n", " \
    \   \n    stack = []\n    \n    def helper(string):\n        nonlocal stack\n\
    \        \n        if len(stack) == 0:\n            stack.append(string)\n   \
    \         return True\n        \n        if string == '[]':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \                return True\n        \n        if string == '[][]':\n       \
    \     if len(stack) == 0:\n                return False\n            else:\n \
    \               stack.pop()\n                stack.pop()\n                return\
    \ True\n        \n        if string == '[][][]':\n            if len(stack) ==\
    \ 0:\n                return False\n            else:\n                stack.pop()\n\
    \                stack.pop()\n                stack.pop()\n                return\
    \ True\n        \n        if string == '[][][][]':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \                stack.pop()\n                stack.pop()\n                stack.pop()\n\
    \                return True\n        \n        if string == '[][][][][]':\n \
    \           if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n                stack.pop()\n                stack.pop()\n\
    \                stack.pop()\n                stack.pop()\n                return\
    \ True\n        \n        if string == '[][][][][][]':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \                stack.pop()\n                stack.pop()\n                stack.pop()\n\
    \                stack.pop()\n                stack.pop()\n                return\
    \ True\n        \n        if string == '[][][][][][][]':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \                stack.pop()\n                stack.pop()\n                stack.pop()\n\
    \                stack.pop()\n                stack.pop()\n                stack.pop()\n\
    \                return True\n        \n        if string == '[][][][][][][][]':\n\
    \            if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n                stack.pop()\n                stack.pop()\n\
    \                stack.pop()\n                stack.pop()\n                stack.pop()\n\
    \                stack.pop()\n                stack.pop()\n                return\
    \ True\n        \n        if string == '[][][][][][][][][]':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \                stack.pop()\n                stack.pop()\n                stack.pop()\n\
    \                stack.pop()\n                stack.pop()\n                stack.pop()\n\
    \                stack.pop()\n                stack.pop()\n                return\
    \ True\n        \n        if string == '[][][][][][][][][][]':\n            if\
    \ len(stack) == 0:\n                return False\n            else:\n        \
    \        stack.pop()\n                stack.pop()\n                stack.pop()\n\
    \                stack.pop()\n                stack.pop()\n                stack.pop()\n\
    \                stack.pop()\n                stack.pop()\n                stack.pop()\n\
    \                stack.pop()\n                return True\n        \n        if\
    \ string == '[][][][][][][][][][][]':\n            if len(stack) == 0:\n     \
    \           return False\n            else:\n                stack.pop()\n   \
    \             stack.pop()\n                stack", "    \n    # Your code here\n\
    \    \n    pass\n\n", "    \n    brackets = []\n    \n    def helper(string, index,\
    \ depth):\n        \n        if index == len(string):\n            brackets.append(depth)\n\
    \            return True\n        \n        if string[index] == '[':\n       \
    \     helper(string, index + 1, depth + 1)\n            helper(string, index +\
    \ 1, depth)\n            \n        if string[index] == ']':\n            helper(string,\
    \ index + 1, depth)\n            \n        if string[index] == '[':\n        \
    \    helper(string, index + 1, depth + 1)\n            \n        if string[index]\
    \ == ']':\n            helper(string, index + 1, depth)\n            \n      \
    \  return False\n    \n    return helper(string, 0, 0)\n</cell>\n<cell>\nis_nested('[[]]')\
    \ \n</cell>\n<cell>\nis_nested('[]]]]]]][[[[[]')\n</cell>\n<cell>\nis_nested('[][]')\n\
    </cell>\n<cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n\
    <cell>\nis_nested('[[]][[')\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns the number of nested brackets in the string.\n\
    \nis_nested('[[]]') \u279E 2\nis_nested('[]]]]]]][[[[[]') \u279E 3\nis_nested('[][]')\
    \ \u279E 0\nis_nested('[]') \u279E 0\nis_nested('[[][]]') \u279E 3\nis_nested('[[]][[')\
    \ \u279E 2\nHint: Use a recursive function.\n\n\n</text>\n<cell>", "    stack\
    \ = []\n    brackets = 0\n    for char in string:\n        if char == '[':\n \
    \           stack.append(char)\n            brackets += 1\n        elif char ==\
    \ ']':\n            brackets -= 1\n            if brackets == 0:\n           \
    \     stack.pop()\n            else:\n                return False\n        elif\
    \ brackets == 0:\n            return False\n    return brackets == 0\n\n", " \
    \   \n    stack = []\n    \n    def helper(string: str, index: int) -> bool:\n\
    \        if index >= len(string):\n            return True\n        \n       \
    \ if string[index] == '[':\n            stack.append(index)\n        elif string[index]\
    \ == ']':\n            index = stack.pop()\n            if index == -1:\n    \
    \            return False\n            else:\n                index = stack.pop()\n\
    \                if index == -1:\n                    return False\n         \
    \       else:\n                    index = stack.pop()\n                    if\
    \ index == -1:\n                        return False\n                    else:\n\
    \                        index = stack.pop()\n                        if index\
    \ == -1:\n                            return False\n                        else:\n\
    \                            return helper(string, index)\n    \n    return helper(string,\
    \ 0)\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested
  "    stack = []\n    open_brackets = 0\n    close_brackets = 0\n    for char in\
    \ string:\n        if char == '[':\n            open_brackets += 1\n         \
    \   stack.append(char)\n        elif char == ']':\n            close_brackets\
    \ += 1\n            if open_brackets > close_brackets:\n                return\
    \ False\n            open_brackets -= 1\n        elif char == '[':\n         \
    \   close_brackets += 1\n            if open_brackets > close_brackets:\n    \
    \            return False\n            open_brackets -= 1\n        elif char ==\
    \ ']':\n            open_brackets += 1\n            stack.append(char)\n     \
    \   else:\n            return False\n    return open_brackets == close_brackets\n\
    \n", "    stack = []\n    open_brackets = 0\n    close_brackets = 0\n    for char\
    \ in string:\n        if char == '[':\n            open_brackets += 1\n      \
    \      stack.append(char)\n        elif char == ']':\n            close_brackets\
    \ += 1\n            if len(stack) == 0:\n                return False\n      \
    \      elif open_brackets == close_brackets:\n                open_brackets -=\
    \ 1\n                close_brackets -= 1\n                stack.pop()\n      \
    \      else:\n                return False\n        elif char == '[' or char ==\
    \ ']':\n            return False\n    return True\n\n", "    stack = []\n    for\
    \ c in string:\n        if c == '[':\n            stack.append(c)\n        elif\
    \ c == ']':\n            if len(stack) == 0:\n                return False\n \
    \           else:\n                stack.pop()\n    return len(stack) == 0\n\n",
  "    \n    # Your code here\n    \n    pass\n\n", "    \n    # Your code here\n\
    \    \n    return bool(re.search(r'(\\[(?:[^][]*(?:\\[(?:[^][]*(?:\\[(?:[^][]*)?)?)?)?)?)?\\\
    ])', string))\n</cell>\n<cell>", "    \n    stack = []\n    \n    def helper(string:\
    \ str, index: int) -> bool:\n        if index >= len(string):\n            return\
    \ True\n        \n        if string[index] == '[':\n            stack.append(index)\n\
    \        elif string[index] == ']':\n            index = stack.pop()\n       \
    \     if index == -1:\n                return False\n            elif string[index]\
    \ == '[':\n                stack.append(index)\n            else:\n          \
    \      return False\n        else:\n            return False\n        \n     \
    \   return helper(string, index + 1)\n    \n    return helper(string, 0)\n\n",
  "    \n    stack = []\n    \n    def helper(s: str) -> bool:\n        if len(s)\
    \ == 0:\n            return True\n        \n        if s[0] == '[' and s[-1] ==\
    \ ']':\n            stack.append(s[0])\n            return helper(s[1:-1])\n \
    \       \n        if s[0] == '[' and s[-1] != ']':\n            return False\n\
    \        \n        if s[0] != ']':\n            return False\n        \n     \
    \   if stack and stack[-1] == '[':\n            stack.pop()\n            return\
    \ helper(s[1:-1])\n        \n        return False\n    \n    return helper(string)\n\
    \n", "    stack = []\n    \n    def helper(s: str) -> bool:\n        nonlocal\
    \ stack\n        \n        if s == '':\n            return True\n        \n  \
    \      if s == '[':\n            stack.append(s)\n            return True\n  \
    \      \n        if s == ']':\n            if len(stack) == 0:\n             \
    \   return False\n            \n            stack.pop()\n            return True\n\
    \        \n        if s == '[]':\n            if len(stack) == 0:\n          \
    \      return False\n            \n            stack.pop()\n            stack.pop()\n\
    \            return True\n        \n        if s == '[][]':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \            stack.pop()\n            stack.pop()\n            return True\n \
    \       \n        if s == '[][][]':\n            if len(stack) == 0:\n       \
    \         return False\n            \n            stack.pop()\n            stack.pop()\n\
    \            stack.pop()\n            stack.pop()\n            return True\n \
    \       \n        if s == '[][][][]':\n            if len(stack) == 0:\n     \
    \           return False\n            \n            stack.pop()\n            stack.pop()\n\
    \            stack.pop()\n            stack.pop()\n            stack.pop()\n \
    \           return True\n        \n        if s == '[][][][][]':\n           \
    \ if len(stack) == 0:\n                return False\n            \n          \
    \  stack.pop()\n            stack.pop()\n            stack.pop()\n           \
    \ stack.pop()\n            stack.pop()\n            stack.pop()\n            return\
    \ True\n        \n        if s == '[][][][][][]':\n            if len(stack) ==\
    \ 0:\n                return False\n            \n            stack.pop()\n  \
    \          stack.pop()\n            stack.pop()\n            stack.pop()\n   \
    \         stack.pop()\n            stack.pop()\n            stack.pop()\n    \
    \        return True\n        \n        if s == '[][][][][][][]':\n          \
    \  if len(stack) == 0:\n                return False\n            \n         \
    \   stack.pop()\n            stack.pop()\n            stack.pop()\n          \
    \  stack.pop()\n            stack.pop()\n            stack.pop()\n           \
    \ stack.pop()\n            stack.pop()\n            return True\n        \n  \
    \      if s == '[][][][][][][][]':\n            if len(stack) == 0:\n        \
    \        return False\n            \n            stack.pop()\n            stack.pop()\n\
    \            stack.pop()\n            stack.pop()\n            stack.pop()\n \
    \           stack.pop()\n            stack.pop()\n            stack.pop()\n  \
    \          stack.pop()\n            stack.pop()\n            stack.pop()\n   \
    \         stack.pop()\n            stack.pop()\n            stack.pop()\n    \
    \        stack.pop()\n            stack.pop()\n            stack.pop()\n     \
    \       stack.pop()\n            stack.pop()\n            stack.pop()\n      \
    \      stack.pop()\n            stack.pop()\n            stack.pop()\n       \
    \     stack.pop()\n            stack.pop()\n            stack.pop()\n        \
    \    stack.pop()\n            stack.pop()\n            stack.pop()\n         \
    \   stack.pop()\n            stack.pop()\n            stack.pop()\n          \
    \  stack.pop()\n            stack.pop()\n            stack.pop()\n           \
    \ stack.pop()\n            stack.pop()\n            ", "    \n    def nested(string:\
    \ str) -> bool:\n        \n        # Initialize a stack to keep track of brackets\n\
    \        stack = []\n        \n        # Iterate through the string and keep track\
    \ of brackets\n        for char in string:\n            \n            # If the\
    \ current char is a bracket, push it to the stack\n            if char == '[':\n\
    \                stack.append(char)\n            \n            # If the current\
    \ char is a bracket, pop it from the stack\n            elif char == ']':\n  \
    \              \n                # If the stack is empty, then the string is not\
    \ nested\n                if len(stack) == 0:\n                    return False\n\
    \                \n                # If the stack is not empty, then the string\
    \ is not nested\n                else:\n                    \n               \
    \     # If the top of the stack is a bracket, then the string is not nested\n\
    \                    if stack[-1] == '[':\n                        return False\n\
    \                    \n                    # If the top of the stack is a bracket,\
    \ then the string is not nested\n                    elif stack[-1] == ']':\n\
    \                        return False\n                    \n                \
    \    # If the top of the stack is not a bracket, then the string is not nested\n\
    \                    else:\n                        \n                       \
    \ # Pop the top bracket from the stack\n                        stack.pop()\n\
    \        \n        # Return True if the stack is empty\n        if len(stack)\
    \ == 0:\n            return True\n        \n        # Return False if the stack\
    \ is not empty\n        else:\n            return False\n    \n    return nested\n\
    </cell>\n<cell>", "    stack = []\n    for char in string:\n        if char ==\
    \ '[':\n            stack.append(char)\n        elif char == ']':\n          \
    \  if len(stack) == 0:\n                return False\n            else:\n    \
    \            stack.pop()\n    return len(stack) == 0\n\n", "    \n    # Your code\
    \ here\n    \n    pass\n\n", "    stack = []\n    \n    def helper(string):\n\
    \        if len(stack) == 0:\n            return False\n        \n        if string[0]\
    \ == '[':\n            stack.append(string[0])\n        else:\n            if\
    \ string[-1] == ']':\n                stack.pop()\n            else:\n       \
    \         return False\n        \n        return helper(string[1:])\n    \n  \
    \  return helper(string)\n\n", "    stack = []\n    for char in string:\n    \
    \    if char == '[':\n            stack.append(char)\n        elif char == ']':\n\
    \            if len(stack) == 0:\n                return False\n            elif\
    \ stack[-1] != '[':\n                return False\n            stack.pop()\n \
    \   return len(stack) == 0\n\n", "    \n    # Your code here\n    \n    return\
    \ len(string) > 0 and string[0] == '[' and string[-1] == ']'\n\n", "    \n   \
    \ stack = []\n    \n    def helper(string: str, index: int) -> bool:\n       \
    \ if index >= len(string):\n            return True\n        \n        if string[index]\
    \ == '[':\n            stack.append(index)\n        elif string[index] == ']':\n\
    \            index = stack.pop()\n            if index == -1:\n              \
    \  return False\n            elif string[index] == '[':\n                stack.append(index)\n\
    \            else:\n                return False\n        else:\n            return\
    \ False\n        \n        return helper(string, index + 1)\n    \n    return\
    \ helper(string, 0)\n</cell>\n<cell>\nis_nested('[[]]') \n</cell>\n<cell>\nis_nested('[]]]]]]][[[[[]')\n\
    </cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n</cell>\n\
    <cell>\nis_nested('[[][]]')\n</cell>\n<cell>\nis_nested('[[]][[')\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of times the string \"ab\" appears in the string.\n\n\n</text>\n<cell>", " \
    \   \n    # Your code here\n    \n    return len(string) > 0 and string[0] ==\
    \ '[' and string[-1] == ']'\n", "    \n    # Your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    \n    stack = []\n    \n    def helper(s: str) -> bool:\n\
    \        nonlocal stack\n        \n        if len(s) == 0:\n            return\
    \ len(stack) == 0\n        \n        if s[0] == '[':\n            stack.append(s[0])\n\
    \            return helper(s[1:])\n        \n        if s[0] == ']':\n       \
    \     if len(stack) == 0:\n                return False\n            \n      \
    \      if stack.pop() != '[':\n                return False\n            \n  \
    \          return helper(s[1:])\n        \n        return False\n    \n    return\
    \ helper(string)\n\n", "    \n    # Your code here\n    \n    stack = []\n   \
    \ \n    for char in string:\n        if char == '[':\n            stack.append(char)\n\
    \        elif char == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            elif stack.pop() != '[':\n                return False\n\
    \    \n    return True\n\n", "    stack = []\n    open_brackets = 0\n    close_brackets\
    \ = 0\n    \n    for char in string:\n        if char == '[':\n            open_brackets\
    \ += 1\n            stack.append(char)\n        elif char == ']':\n          \
    \  close_brackets += 1\n            stack.pop()\n        elif char == '[' and\
    \ stack:\n            open_brackets += 1\n            stack.append(char)\n   \
    \     elif char == ']' and stack:\n            close_brackets += 1\n         \
    \   stack.pop()\n        elif char == '[' and stack and close_brackets:\n    \
    \        close_brackets -= 1\n        elif char == ']' and stack and open_brackets:\n\
    \            open_brackets -= 1\n            \n    return open_brackets == close_brackets\n\
    \n", "    \n    # Your code here\n    \n    pass\n\n", "    stack = []\n    open_brackets\
    \ = 0\n    close_brackets = 0\n    for char in string:\n        if char == '[':\n\
    \            open_brackets += 1\n            stack.append(char)\n        elif\
    \ char == ']':\n            close_brackets += 1\n            if open_brackets\
    \ == close_brackets:\n                open_brackets = 0\n                close_brackets\
    \ = 0\n                stack.pop()\n            else:\n                return\
    \ False\n        elif char == '[' or char == ']':\n            return False\n\
    \    return open_brackets == close_brackets\n\n", "    \n    stack = []\n    \n\
    \    def helper(s: str) -> bool:\n        \n        if len(s) == 0:\n        \
    \    return True\n        \n        if s[0] == '[':\n            stack.append(s[0])\n\
    \            return helper(s[1:])\n        \n        if s[0] == ']':\n       \
    \     stack.pop()\n            return helper(s[1:])\n        \n        if stack:\n\
    \            if s[0] == '[':\n                stack.append(s[0])\n           \
    \     return helper(s[1:])\n            \n            if s[0] == ']':\n      \
    \          stack.pop()\n                return helper(s[1:])\n        \n     \
    \   return False\n    \n    return helper(string)\n</cell>\n<cell>\nis_nested('[][]')\n\
    </cell>\n<cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n\
    <cell>\nis_nested('[[]][[')\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\n\
    is_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n<cell>\nis_nested('[[]][[')\n\
    </cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n</cell>\n\
    <cell>\nis_nested('[[][]]')\n</cell>\n<cell>\nis_nested('[[]][[')\n</cell>\n<cell>\n\
    is_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n\
    </cell>\n<cell>\nis_nested('[[]][[')\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n\
    <cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n<cell>\n\
    is_nested('[[]][[')\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n\
    </cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n<cell>\nis_nested('[[]][[')\n</cell>\n\
    <cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n</cell>\n<cell>\n\
    is_nested('[[]", "    stack = []\n    open_brackets = 0\n    close_brackets =\
    \ 0\n    for char in string:\n        if char == '[':\n            open_brackets\
    \ += 1\n        elif char == ']':\n            close_brackets += 1\n        elif\
    \ char == '[' and open_brackets > 0:\n            open_brackets -= 1\n       \
    \ elif char == ']' and close_brackets > 0:\n            close_brackets -= 1\n\
    \        elif char == '[' and close_brackets == 0:\n            stack.append(char)\n\
    \        elif char == ']' and open_brackets == 0:\n            if len(stack) ==\
    \ 0:\n                return False\n            else:\n                open_brackets\
    \ += 1\n                close_brackets += 1\n                stack.pop()\n   \
    \ return open_brackets == 0 and close_brackets == 0\n\n", "    \n    stack = []\n\
    \    \n    def helper(s: str) -> bool:\n        \n        if s == '':\n      \
    \      return True\n        \n        if s[0] == '[' and s[-1] == ']':\n     \
    \       stack.append(s[1:-1])\n            return helper(s[1:-1])\n        \n\
    \        if s[0] == '[' and s[-1] != ']':\n            return False\n        \n\
    \        if s[0] != ']' and stack:\n            stack.pop()\n            return\
    \ helper(s[1:-1])\n        \n        return False\n    \n    return helper(string)\n\
    </cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n</cell>\n\
    <cell>\nis_nested('[[][]]')\n</cell>\n<cell>\nis_nested('[[]][[')\n</cell>\n<cell>\n\
    is_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n\
    </cell>\n<cell>\nis_nested('[[]][[')\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n\
    <cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n<cell>\n\
    is_nested('[[]][[')\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n\
    </cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n<cell>\nis_nested('[[]][[')\n</cell>\n\
    <cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n</cell>\n<cell>\n\
    is_nested('[[][]]')\n</cell>\n<cell>\nis_nested('[[]][[')\n</cell>\n<cell>\nis_nested('[][]')\n\
    </cell>\n<cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n\
    <cell>\nis_nested('[[]][[')\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\n\
    is_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n<cell>\nis_nested('[[]][[')\n",
  "    \n    # Your code here\n    \n    pass\n\n", "    stack = []\n    open_brackets\
    \ = 0\n    close_brackets = 0\n    for char in string:\n        if char == '[':\n\
    \            open_brackets += 1\n        elif char == ']':\n            close_brackets\
    \ += 1\n        elif char == '[' and open_brackets > close_brackets:\n       \
    \     stack.append(char)\n        elif char == ']' and open_brackets > close_brackets:\n\
    \            if len(stack) == 0:\n                return False\n            else:\n\
    \                open_brackets -= 1\n                close_brackets -= 1\n   \
    \             stack.pop()\n    return len(stack) == 0\n\n", "    stack = []\n\
    \    open_brackets = 0\n    close_brackets = 0\n    for char in string:\n    \
    \    if char == '[':\n            open_brackets += 1\n            stack.append(char)\n\
    \        elif char == ']':\n            close_brackets += 1\n            open_brackets\
    \ -= 1\n            if open_brackets == 0:\n                if close_brackets\
    \ == 0:\n                    return True\n                else:\n            \
    \        return False\n            elif close_brackets == 0:\n               \
    \ return False\n            elif open_brackets == 0:\n                return False\n\
    \        elif char == '[':\n            open_brackets += 1\n            stack.append(char)\n\
    \        elif char == ']':\n            close_brackets += 1\n            open_brackets\
    \ -= 1\n            if open_brackets == 0:\n                if close_brackets\
    \ == 0:\n                    return True\n                else:\n            \
    \        return False\n            elif close_brackets == 0:\n               \
    \ return False\n            elif open_brackets == 0:\n                return False\n\
    \    return False\n\n", "    stack = []\n    for char in string:\n        if char\
    \ == '[':\n            stack.append(char)\n        elif char == ']':\n       \
    \     if len(stack) == 0:\n                return False\n            elif stack[-1]\
    \ != '[':\n                return False\n            stack.pop()\n    return len(stack)\
    \ == 0\n\n", "    \n    stack = []\n    \n    def helper(s: str) -> bool:\n  \
    \      \n        if len(s) == 0:\n            return True\n        \n        if\
    \ s[0] == '[':\n            stack.append(s[0])\n            \n        if s[0]\
    \ == ']':\n            stack.pop()\n            \n        return helper(s[1:])\n\
    \    \n    return helper(string)\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n\
    <cell>\nis_nested
  "    \n    # Your code here\n    \n    pass\n</cell>\n<cell>", "    \n    def nested(string:\
    \ str) -> bool:\n        \"\"\"\n        Create a function that takes a string\
    \ as input which contains only square brackets.\n        The function should return\
    \ True if and only if there is a valid subsequence of brackets \n        where\
    \ at least one bracket in the subsequence is nested.\n\n        is_nested('[[]]')\
    \ \u279E True\n        is_nested('[]]]]]]][[[[[]') \u279E False\n        is_nested('[][]')\
    \ \u279E False\n        is_nested('[]') \u279E False\n        is_nested('[[][]]')\
    \ \u279E True\n        is_nested('[[]][[') \u279E True\n        \"\"\"\n     \
    \   \n        stack = []\n        \n        for char in string:\n            if\
    \ char == '[':\n                stack.append(char)\n            elif char == ']':\n\
    \                if stack.pop() != '[':\n                    return False\n  \
    \              else:\n                    continue\n            elif char == '[':\n\
    \                if stack:\n                    return False\n               \
    \ else:\n                    continue\n            elif char == ']':\n       \
    \         if stack:\n                    if stack.pop() != '[':\n            \
    \            return False\n                    else:\n                       \
    \ continue\n                else:\n                    continue\n            else:\n\
    \                continue\n            \n        return True\n    \n    return\
    \ nested\n</cell>\n<cell>\nis_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]')\
    \ \u279E False\nis_nested('[][]') \u279E False\nis_nested('[]') \u279E False\n\
    is_nested('[[][]]') \u279E True\nis_nested('[[]][[') \u279E True\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a string as input which contains only\
    \ square brackets.\nThe function should return True if and only if there is a\
    \ valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n\nis_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E\
    \ False\nis_nested('[][]') \u279E False\nis_nested('[]') \u279E False\nis_nested('[[][]]')\
    \ \u279E True\nis_nested('[[]][[') \u279E True\nis_nested('[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]",
  "    \n    # Your code here\n    \n    stack = []\n    \n    def helper(string,\
    \ stack):\n        \n        if len(stack) == 0:\n            \n            if\
    \ len(string) == 0:\n                return True\n            else:\n        \
    \        return False\n        \n        if string[0] == '[':\n            stack.append(string[0])\n\
    \            \n        elif string[0] == ']':\n            stack.pop()\n     \
    \       \n        elif string[0] == '[':\n            stack.append(string[0])\n\
    \            \n        elif string[0] == ']':\n            stack.pop()\n     \
    \       \n        else:\n            return False\n        \n        return helper(string[1:],\
    \ stack)\n    \n    return helper(string, stack)\n</cell>\n<cell>", "    \n  \
    \  # Your code here\n    \n    pass\n\n", "    \n    # Your code here\n    \n\
    \    return bool(re.search(r'(\\[)\\[', string))\n</cell>\n<cell>", "    \n  \
    \  stack = []\n    \n    def helper(string: str, index: int) -> bool:\n      \
    \  if index >= len(string):\n            return True\n        \n        if string[index]\
    \ == '[':\n            stack.append(index)\n        elif string[index] == ']':\n\
    \            index = stack.pop()\n            if index == -1:\n              \
    \  return False\n            elif string[index] == '[':\n                stack.append(index)\n\
    \            else:\n                return False\n        else:\n            return\
    \ False\n        \n        return helper(string, index + 1)\n    \n    return\
    \ helper(string, 0)\n\n", "    stack = []\n    for char in string:\n        if\
    \ char == '[':\n            stack.append(char)\n        elif char == ']':\n  \
    \          if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    return len(stack) == 0\n\n", "    \n    # Your\
    \ code here\n    \n    pass\n\n", "    stack = []\n    open_brackets = 0\n   \
    \ close_brackets = 0\n    for char in string:\n        if char == '[':\n     \
    \       open_brackets += 1\n            stack.append(char)\n        elif char\
    \ == ']':\n            close_brackets += 1\n            if open_brackets > close_brackets:\n\
    \                return False\n            else:\n                open_brackets\
    \ -= 1\n                stack.pop()\n        else:\n            return False\n\
    \    return True\n\n", "    stack = []\n    \n    def helper(string: str, index:\
    \ int) -> bool:\n        if index == len(string):\n            return True\n \
    \       \n        if string[index] == \"[\":\n            stack.append(string[index])\n\
    \            return helper(string, index + 1)\n        \n        if string[index]\
    \ == \"]\":\n            if stack.pop() != \"[\":\n                return False\n\
    \            return helper(string, index + 1)\n        \n        return False\n\
    \    \n    return helper(string, 0)\n\n", "    stack = []\n    open_brackets =\
    \ 0\n    close_brackets = 0\n    for char in string:\n        if char == '[':\n\
    \            open_brackets += 1\n            stack.append(char)\n        elif\
    \ char == ']':\n            close_brackets += 1\n            open_brackets -=\
    \ 1\n            if open_brackets == 0:\n                if close_brackets ==\
    \ 0:\n                    return True\n                else:\n               \
    \     return False\n            else:\n                stack.pop()\n        else:\n\
    \            return False\n    return False\n", "    stack = []\n    for char\
    \ in string:\n        if char == '[':\n            stack.append(char)\n      \
    \  elif char == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            elif stack[-1] != '[':\n                return False\n  \
    \          else:\n                stack.pop()\n    return len(stack) == 0\n",
  "    \n    # Your code here\n    \n    return bool(re.search(r'(\\[(?:\\[[^\\]]*\\\
    ]\\])+\\])', string))\n</cell>\n<cell>", "    \n    # Your code here\n    \n \
    \   pass\n\n", "    stack = []\n    for char in string:\n        if char == '[':\n\
    \            stack.append(char)\n        elif char == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            elif stack[-1] != '[':\n  \
    \              return False\n            else:\n                stack.pop()\n\
    \    return len(stack) == 0\n\n", "    \n    def inner(string: str) -> bool:\n\
    \        \n        # Initialize a stack\n        stack = []\n        \n      \
    \  # Iterate over string and push brackets onto the stack\n        for char in\
    \ string:\n            if char == '[':\n                stack.append(char)\n \
    \           elif char == ']':\n                if len(stack) == 0:\n         \
    \           return False\n                stack.pop()\n        \n        # If\
    \ stack is empty then string is valid\n        if len(stack) == 0:\n         \
    \   return True\n        \n        # Otherwise string is not valid\n        else:\n\
    \            return False\n    \n    return inner\n</cell>\n<cell>", "    \n \
    \   # Your code here\n    \n    stack = []\n    \n    for c in string:\n     \
    \   if c == '[':\n            stack.append(c)\n        elif c == ']':\n      \
    \      if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n        else:\n            if len(stack) == 0:\n\
    \                return False\n            elif stack[-1] == '[':\n          \
    \      if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:\n\
    \                    return False\n            elif stack[-1] == '[':\n      \
    \          if c == ']':\n                    stack.pop()\n                else:",
  "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n\
    \        elif char == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            elif stack[-1] != '[':\n                return False\n  \
    \          stack.pop()\n    return len(stack) == 0\n\n", "    stack = []\n   \
    \ for c in string:\n        if c == '[':\n            stack.append(c)\n      \
    \  elif c == ']':\n            if len(stack) == 0:\n                return False\n\
    \            elif stack[-1] != '[':\n                return False\n          \
    \  stack.pop()\n    return len(stack) == 0\n\n", "    \n    # Your code here\n\
    \    \n    return bool(re.search(r'(\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\\
    [\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\\
    [\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\\
    [\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\\
    [\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\\
    [\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\\
    [\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\\
    [\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\\
    [\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\\
    [\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\\
    [\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\\
    [\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\\
    [\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\\
    [\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\\
    [\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\\
    [\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\\
    [\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\[\\]]|\\[(?:[^\\\
    [\\]]|\\", "    \n    # Your code here\n    \n    return bool(re.search(r'(\\\
    [(?:\\[[^\\]]*\\])*\\])', string))\n\n", "    stack = []\n    for char in string:\n\
    \        if char == '[':\n            stack.append(char)\n        elif char ==\
    \ ']':\n            if len(stack) == 0:\n                return False\n      \
    \      elif stack[-1] == '[':\n                stack.pop()\n            else:\n\
    \                return False\n    return len(stack) == 0\n\n", "    stack = []\n\
    \    brackets = 0\n    for c in string:\n        if c == '[':\n            brackets\
    \ += 1\n            stack.append(c)\n        elif c == ']':\n            brackets\
    \ -= 1\n            if brackets == 0:\n                stack.pop()\n         \
    \   else:\n                return False\n    return brackets == 0\n\n", "    stack\
    \ = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n\
    \        elif c == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            if stack.pop() != '[':\n                return False\n  \
    \      elif stack:\n            return False\n    return True\n", "    \n    stack\
    \ = []\n    \n    def helper(s: str) -> bool:\n        nonlocal stack\n      \
    \  \n        if len(s) == 0:\n            return True\n        \n        if s[0]\
    \ == '[':\n            stack.append(s[0])\n            return helper(s[1:])\n\
    \        \n        if s[0] == ']':\n            if len(stack) == 0:\n        \
    \        return False\n            \n            stack.pop()\n            return\
    \ helper(s[1:])\n        \n        return False\n    \n    return helper(string)\n\
    </cell>\n<cell>\nis_nested('[[]]') \n</cell>\n<cell>\nis_nested('[]]]]]]][[[[[]')\n\
    </cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n</cell>\n\
    <cell>\nis_nested('[[][]]')\n</cell>\n<cell>\nis_nested('[[]][[')\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string as input and returns the number\
    \ of nested brackets in the string.\n\n\n</text>\n<cell>", "    \n    stack =\
    \ []\n    \n    def helper(string: str, index: int) -> bool:\n        if index\
    \ >= len(string):\n            return True\n        \n        if string[index]\
    \ == '[':\n            stack.append(index)\n        elif string[index] == ']':\n\
    \            if stack:\n                index = stack.pop()\n            else:\n\
    \                return False\n        elif string[index] == '[':\n          \
    \  if stack:\n                index = stack.pop()\n            else:\n       \
    \         return False\n        elif string[index] == ']':\n            if stack:\n\
    \                index = stack.pop()\n            else:\n                return\
    \ False\n        else:\n            return False\n        \n        return helper(string,\
    \ index + 1)\n    \n    return helper(string, 0)\n</cell>\n<cell>\nis_nested('[][]')\n\
    </cell>\n<cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n\
    <cell>\nis_nested('[[]][[')\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\n\
    is_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n<cell>\nis_nested('[[]][[')\n\
    </cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n</cell>\n\
    <cell>\nis_nested('[[][]]')\n</cell>\n<cell>\nis_nested('[[]][[')\n</cell>\n<cell>\n\
    is_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n\
    </cell>\n<cell>\nis_nested('[[]][[')\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n\
    <cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n<cell>\n\
    is_nested('[[]][[')\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n\
    </cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n<cell>\nis_nested('[[]][[')\n</cell>\n\
    <cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n</cell>\n", "   \
    \ \n    # Your code here\n    \n    return bool(re.search(r'(\\[(?:[^\\[\\]]|(?R))*\\\
    ])', string))\n\n", "    \n    def inner(string: str) -> bool:\n        \n   \
    \     stack = []\n        \n        for char in string:\n            if char ==\
    \ '[':\n                stack.append(char)\n            elif char == ']':\n  \
    \              if stack.pop() != '[':\n                    return False\n    \
    \        elif char == '[':\n                if stack:\n                    return\
    \ False\n        return True\n    \n    return inner\n</cell>\n<cell>\nis_nested('[][]')\n\
    </cell>\n<cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n\
    <cell>\nis_nested('[[]][[')\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\n\
    is_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n<cell>\nis_nested('[[]][[')\n\
    </cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n</cell>\n\
    <cell>\nis_nested('[[][]]')\n</cell>\n<cell>\nis_nested('[[]][[')\n</cell>\n<cell>\n\
    is_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n\
    </cell>\n<cell>\nis_nested('[[]][[')\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n\
    <cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n<cell>\n\
    is_nested('[[]][[')\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n\
    </cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n<cell>\nis_nested('[[]][[')\n</cell>\n\
    <cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n</cell>\n<cell>\n\
    is_nested('[[][]]')\n</cell>\n<cell>\nis_nested('[[]][[')\n</cell>\n<cell>\nis_nested('[][]')\n\
    </cell>\n<cell>\nis_nested", "    stack = []\n    for char in string:\n      \
    \  if char == '[':\n            stack.append(char)\n        elif char == ']':\n\
    \            if len(stack) == 0:\n                return False\n            top\
    \ = stack.pop()\n            if top != '[':\n                return False\n  \
    \      else:\n            return False\n    if len(stack) != 0:\n        return\
    \ False\n    return True\n\n", "    \n    def inner(string: str) -> bool:\n  \
    \      \n        stack = []\n        \n        for char in string:\n         \
    \   if char == '[':\n                stack.append(char)\n            elif char\
    \ == ']':\n                if len(stack) == 0:\n                    return False\n\
    \                \n                stack.pop()\n        \n        return len(stack)\
    \ == 0\n    \n    return inner\n</cell>\n<cell>\nis_nested('[[]]') \n</cell>\n\
    <cell>\nis_nested('[]]]]]]][[[[[]')\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n\
    <cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n<cell>\n\
    is_nested('[[]][[')\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input which contains only square brackets.\nThe function should\
    \ return True if and only if there is a valid subsequence of brackets \nwhere\
    \ at least one bracket in the subsequence is nested.\n\nis_nested('[[]]') \u279E\
    \ True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]') \u279E False\n\
    is_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\nis_nested('[[]][[')\
    \ \u279E True\nHint: Use a stack to keep track of the brackets you have encountered.\n\
    \n\n</text>\n<cell>", "    \n    # Your code here\n    \n    return bool(re.search(r'(\\\
    [(?:[^\\[\\]]|\\[(?=[^\\[\\]]*\\]))*\\])', string))\n\n", "    \n    stack = []\n\
    \    \n    def helper(s: str) -> bool:\n        \n        if s == '':\n      \
    \      return True\n        \n        if s[0] == '[' and s[-1] == ']':\n     \
    \       stack.append(s[0])\n            return helper(s[1:-1])\n        \n   \
    \     if s[0] == '[' and s[-1] != ']':\n            return False\n        \n \
    \       if s[0] != ']' and s[-1] != ']':\n            return False\n        \n\
    \        if s[0] == ']' and s[-1] == '[':\n            stack.pop()\n         \
    \   return helper(s[1:-1])\n        \n        if s[0] == ']' and s[-1] != ']':\n\
    \            return False\n        \n        if s[0] != ']' and s[-1] == '[':\n\
    \            return False\n        \n        if s[0] != ']' and s[-1] == '[':\n\
    \            return False\n        \n        if s[0] == ']' and s[-1] == '[':\n\
    \            stack.pop()\n            return helper(s[1:-1])\n        \n     \
    \   if s[0] == '[' and s[-1] == ']':\n            stack.append(s[0])\n       \
    \     return helper(s[1:-1])\n        \n        if s[0] == '[' and s[-1] != ']':\n\
    \            return False\n        \n        if s[0] != ']' and s[-1] != ']':\n\
    \            return False\n        \n        if s[0] == ']' and s[-1] == '[':\n\
    \            stack.pop()\n            return helper(s[1:-1])\n        \n     \
    \   if s[0] == '[' and s[-1] == ']':\n            stack.append(s[0])\n       \
    \     return helper(s[1:-1])\n        \n        if s[0] == '[' and s[-1] != ']':\n\
    \            return False\n        \n        if s[0] != ']' and s[-1] != ']':\n\
    \            return False\n        \n        if s[0] == ']' and s[-1] == '[':\n\
    \            stack.pop()\n            return helper(s[1:-1])\n        \n     \
    \   if s[0] == '[' and s[-1] == ']':\n            stack.append(s[0])\n       \
    \     return helper(s[1:-1])\n        \n        if s[0] == '[' and s[-1] != ']':\n\
    \            return False\n        \n        if s[0] != ']' and s[-1] != ']':\n\
    \            return False\n        \n        if s[0] == ']' and s[-1] == '[':\n\
    \            stack.pop()\n            return helper(s[1:-1])\n        \n     \
    \   if s[0] == '[' and s[-1] == ']':\n            stack.append(s[0])\n       \
    \     return helper(s[1:-1])\n        \n        if s[0] == '[' and s[-1] != ']':\n\
    \            return False\n        \n        if s[0] != ']' and s[-1] != ']':\n\
    \            return False\n        \n        if s[0] == ']' and s[-1] == '[':\n\
    \            stack.pop()\n            return helper(s[1:-1])\n        \n     \
    \   if s[0] == '[' and s[-1] == ']':\n            stack.append(s[0])\n       \
    \     return helper(s[1:-1])\n        \n        if s[0] == '[' and s[-1] != ']':\n\
    \            return False\n        \n        if s[0] != ']' and s[-1] != ']':\n\
    \            return False\n        \n        if s[0] == ']' and s[-1] == '", " \
    \   \n    stack = []\n    \n    def helper(string: str, index: int) -> bool:\n\
    \        if index == len(string):\n            return True\n        \n       \
    \ if string[index] in '[]':\n            stack.append(string[index])\n       \
    \     return helper(string, index + 1)\n        \n        if string[index] in\
    \ '()':\n            if stack[-1] not in '[]':\n                return False\n\
    \            stack.pop()\n            return helper(string, index + 1)\n     \
    \   \n        return False\n    \n    return helper(string, 0)\n</cell>\n<cell>\n\
    is_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]')\
    \ \u279E False\nis_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\n\
    is_nested('[[]][[') \u279E True\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input and returns the number of times the string \"[[]]\"\
    \ appears in the string.\n\ncount_brackets('[[]]') \u279E 1\ncount_brackets
  "    \n    # Your code here\n    \n    pass\n", "    \n    # Your code here\n  \
    \  \n    pass\n\n", "    \n    stack = []\n    \n    def helper(s: str) -> bool:\n\
    \        \n        if len(s) == 0:\n            return True\n        \n      \
    \  if s[0] == '[':\n            stack.append(s[0])\n            return helper(s[1:])\n\
    \        \n        if s[0] == ']':\n            if len(stack) == 0:\n        \
    \        return False\n            \n            if stack.pop() != '[':\n    \
    \            return False\n            \n            return helper(s[1:])\n  \
    \      \n        return False\n    \n    return helper(string)\n</cell>\n<cell>\n\
    is_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n\
    </cell>\n<cell>\nis_nested('[[]][[')\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input and returns a string with all the characters that\
    \ are not in the alphabet (both lowercase and uppercase).\n\n\n</text>\n<cell>",
  "    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n\
    \        elif c == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            elif stack.pop() != '[':\n                return False\n\
    \    return len(stack) == 0\n\n", "    \n    # Your code here\n    \n    return\
    \ False if string == '' else True\n", "    stack = []\n    open_brackets = 0\n\
    \    close_brackets = 0\n    for char in string:\n        if char == '[':\n  \
    \          open_brackets += 1\n            stack.append(char)\n        elif char\
    \ == ']':\n            close_brackets += 1\n            open_brackets -= 1\n \
    \           if open_brackets == 0:\n                if close_brackets == 0:\n\
    \                    return True\n                else:\n                    return\
    \ False\n            elif open_brackets < 0:\n                return False\n \
    \           else:\n                stack.pop()\n        else:\n            return\
    \ False\n    return False\n\n", "    \n    stack = []\n    \n    def helper(string:\
    \ str, index: int) -> bool:\n        if index >= len(string):\n            return\
    \ True\n        \n        if string[index] == \"[\":\n            stack.append(string[index])\n\
    \        elif string[index] == \"]\":\n            if stack.pop() != \"[\":\n\
    \                return False\n        elif string[index] == \"]\" and stack.pop()\
    \ != \"[\":\n            return False\n        \n        return helper(string,\
    \ index + 1)\n    \n    return helper(string, 0)\n</cell>\n<cell>\nis_nested(\"\
    [[]]\") # True\nis_nested(\"[]]]]]]][[[[[]\") # False\nis_nested(\"[][]\") # False\n\
    is_nested(\"[]\") # False\nis_nested('[[][]]') # True\nis_nested('[[]][[') # True\n\
    </cell>\n<text>\nExercise: Write a function that takes a string as input which\
    \ contains only square brackets.\nThe function should return True if and only\
    \ if there is a valid subsequence of brackets \nwhere at least one bracket in\
    \ the subsequence is nested.\n\n\n</text>\n<cell>", "    stack = []\n    for char\
    \ in string:\n        if char == '[':\n            stack.append(char)\n      \
    \  elif char == ']':\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top != '[':\n                return\
    \ False\n    return not stack\n\n", "    stack = []\n    for char in string:\n\
    \        if char == '[':\n            stack.append(char)\n        elif char ==\
    \ ']':\n            if not stack:\n                return False\n            if\
    \ stack.pop() != '[':\n                return False\n    return not stack\n\n",
  "    \n    stack = []\n    \n    def helper(string):\n        \n        if string\
    \ == '':\n            return True\n        \n        if string[0] == '[':\n  \
    \          stack.append(string[0])\n            return helper(string[1:])\n  \
    \      \n        if string[-1] == ']':\n            stack.pop()\n            return\
    \ helper(string[:-1])\n        \n        return False\n    \n    return helper(string)\n",
  "    \n    # Your code here\n    \n    return bool(re.search(r'(\\[(?:[^\\[\\]]|(?R))*\\\
    ])', string))\n", "    \n    brackets = []\n    \n    def inner(string: str) ->\
    \ bool:\n        \n        brackets.append(0)\n        \n        for index, char\
    \ in enumerate(string):\n            if char == '[':\n                brackets[-1]\
    \ += 1\n            elif char == ']':\n                brackets[-1] -= 1\n   \
    \     \n        return brackets[-1] == 0\n    \n    return inner\n\n", "    stack\
    \ = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n\
    \        elif char == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n", "    \n    # Your code here\n    \n    return len(re.findall(\"\\[[^\\\
    ]]*\\]\", string)) > 0\n\n", "    stack = []\n    open_brackets = 0\n    close_brackets\
    \ = 0\n    for char in string:\n        if char == '[':\n            open_brackets\
    \ += 1\n            stack.append(char)\n        elif char == ']':\n          \
    \  close_brackets += 1\n            if len(stack) == 0:\n                return\
    \ False\n            elif stack[-1] == '[':\n                open_brackets -=\
    \ 1\n            elif stack[-1] == ']':\n                close_brackets -= 1\n\
    \            else:\n                return False\n        elif char == '[' or\
    \ char == ']':\n            return False\n        elif char == '}':\n        \
    \    if len(stack) == 0:\n                return False\n            elif stack[-1]\
    \ == '{':\n                open_brackets -= 1\n            elif stack[-1] == '}':\n\
    \                close_brackets -= 1\n            else:\n                return\
    \ False\n        elif char == '{':\n            if len(stack) == 0:\n        \
    \        return False\n            elif stack[-1] == '{':\n                open_brackets\
    \ += 1\n            elif stack[-1] == '}':\n                close_brackets +=\
    \ 1\n            else:\n                return False\n        elif char == '\\\
    n':\n            if len(stack) == 0:\n                return False\n         \
    \   elif stack[-1] == '{':\n                open_brackets -= 1\n            elif\
    \ stack[-1] == '}':\n                close_brackets -= 1\n            else:\n\
    \                return False\n        elif char == '{' or char == '}':\n    \
    \        return False\n        elif char == '}' and close_brackets == 0:\n   \
    \         if len(stack) == 0:\n                return False\n            elif\
    \ stack[-1] == '{':\n                open_brackets += 1\n            elif stack[-1]\
    \ == '}':\n                close_brackets += 1\n            else:\n          \
    \      return False\n        elif char == '{' and close_brackets == 0:\n     \
    \       if len(stack) == 0:\n                return False\n            elif stack[-1]\
    \ == '{':\n                open_brackets += 1\n            elif stack[-1] == '}':\n\
    \                close_brackets += 1\n            else:\n                return\
    \ False\n        elif char == '{' and close_brackets == 0 and open_brackets ==\
    \ 0:\n            if len(stack) == 0:\n                return False\n        \
    \    elif stack[-1] == '{':\n                open_brackets += 1\n            elif\
    \ stack[-1] == '}':\n                close_brackets += 1\n            else:\n\
    \                return False\n        elif char == '{' and close_brackets ==\
    \ 0 and open_brackets == 1:\n            if len(stack) == 0:\n               \
    \ return False\n            elif stack[-1] == '{':\n                open_brackets\
    \ += 1\n            elif stack[-1] == '}':\n                close_brackets +=\
    \ 1\n            else:\n                return False\n        elif char == '{'\
    \ and close_brackets == 0 and open_brackets == 2:\n            if len(stack) ==\
    \ 0:\n                return False\n            elif stack[-1] == '{':\n     \
    \           open_brackets += 1\n            elif stack[-1] == '}':\n         \
    \       close_brackets += 1", "    \n    # Your code here\n    \n    pass\n",
  "    \n    # Your code here\n    \n    return bool(re.search(r'(\\[(?:[^\\[\\]]|\\\
    [(?=[^\\[\\]]*\\]))*\\])', string))\n\n", "    stack = []\n    brackets = 0\n\
    \    for char in string:\n        if char == '[':\n            brackets += 1\n\
    \            stack.append(char)\n        elif char == ']':\n            brackets\
    \ -= 1\n            if not brackets:\n                stack.pop()\n          \
    \  else:\n                return False\n    return brackets == 0\n\n", "    \n\
    \    brackets = string.count('[') + string.count(']')\n    \n    if brackets ==\
    \ 0:\n        return False\n    \n    open_brackets = string.count('[')\n    \n\
    \    if open_brackets == 0:\n        return True\n    \n    if open_brackets ==\
    \ brackets:\n        return True\n    \n    return False\n\n", "    \n    stack\
    \ = []\n    \n    def helper(s: str) -> bool:\n        \n        if s == '':\n\
    \            return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \            return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \            return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \            return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \            return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \            return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \            return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \            return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \            return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \            return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \            return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \            return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \            return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \            return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \            return True", "    stack = []\n    open_brackets = 0\n    close_brackets\
    \ = 0\n    for char in string:\n        if char == '[':\n            open_brackets\
    \ += 1\n            stack.append(char)\n        elif char == ']':\n          \
    \  close_brackets += 1\n            if open_brackets > close_brackets:\n     \
    \           return False\n            open_brackets -= 1\n        elif char ==\
    \ '[' or char == ']':\n            return False\n    return open_brackets == close_brackets\n\
    \n", "    stack = []\n    brackets = 0\n    for char in string:\n        if char\
    \ == '[':\n            brackets += 1\n            stack.append(char)\n       \
    \ elif char == ']':\n            brackets -= 1\n            if brackets == 0:\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif brackets == 0:\n            return False\n    return True\n", " \
    \   \n    stack = []\n    \n    def helper(string):\n        nonlocal stack\n\
    \        \n        if len(stack) == 0:\n            stack.append([])\n       \
    \ \n        if string == '':\n            return True\n        \n        if string[0]\
    \ == '[':\n            stack.append([])\n        \n        if string[len(string)-1]\
    \ == ']':\n            stack.pop()\n        \n        if string[0] == '[' and\
    \ string[len(string)-1] == ']':\n            stack[-1].append(string)\n      \
    \  \n        if string[0] == '[' and string[len(string)-1] != ']':\n         \
    \   return False\n        \n        if string[len(string)-1] != ']':\n       \
    \     return False\n        \n        return helper(string[1:len(string)-1])\n\
    \    \n    return helper(string)\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n\
    <cell>\nis_nested
  "    \n    stack = []\n    \n    def helper(string: str, index: int) -> bool:\n\
    \        if index >= len(string):\n            return True\n        \n       \
    \ if string[index] == '[':\n            stack.append(index)\n        elif string[index]\
    \ == ']':\n            if stack:\n                index = stack.pop()\n      \
    \      else:\n                return False\n        elif string[index] == '[':\n\
    \            stack.append(index)\n        elif string[index] == ']':\n       \
    \     if stack:\n                index = stack.pop()\n            else:\n    \
    \            return False\n        else:\n            return False\n        \n\
    \        return helper(string, index + 1)\n    \n    return helper(string, 0)\n\
    </cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested
  "    \n    stack = []\n    \n    def helper(string: str, index: int) -> bool:\n\
    \        if index >= len(string):\n            return True\n        \n       \
    \ if string[index] == \"[\":\n            stack.append(index)\n        elif string[index]\
    \ == \"]\":\n            if stack.pop() != index:\n                return False\n\
    \        \n        return helper(string, index + 1)\n    \n    return helper(string,\
    \ 0)\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested
  "    \n    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n  \
    \  brackets = []\n    \n    def helper(string: str, index: int) -> bool:\n   \
    \     if index == len(string):\n            return True\n        elif string[index]\
    \ == '[':\n            brackets.append(index)\n            return helper(string,\
    \ index + 1)\n        elif string[index] == ']':\n            brackets.pop()\n\
    \            return helper(string, index + 1)\n        elif string[index] == '[':\n\
    \            return helper(string, index + 1)\n        elif string[index] == ']':\n\
    \            return helper(string, index + 1)\n        elif string[index] == '[':\n\
    \            return helper(string, index + 1)\n        elif string[index] == ']':\n\
    \            return helper(string, index + 1)\n        elif string[index] == '[':\n\
    \            return helper(string, index + 1)\n        elif string[index] == ']':\n\
    \            return helper(string, index + 1)\n        elif string[index] == '[':\n\
    \            return helper(string, index + 1)\n        elif string[index] == ']':\n\
    \            return helper(string, index + 1)\n        elif string[index] == '[':\n\
    \            return helper(string, index + 1)\n        elif string[index] == ']':\n\
    \            return helper(string, index + 1)\n        elif string[index] == '[':\n\
    \            return helper(string, index + 1)\n        elif string[index] == ']':\n\
    \            return helper(string, index + 1)\n        elif string[index] == '[':\n\
    \            return helper(string, index + 1)\n        elif string[index] == ']':\n\
    \            return helper(string, index + 1)\n        elif string[index] == '[':\n\
    \            return helper(string, index + 1)\n        elif string[index] == ']':\n\
    \            return helper(string, index + 1)\n        elif string[index] == '[':\n\
    \            return helper(string, index + 1)\n        elif string[index] == ']':\n\
    \            return helper(string, index + 1)\n        elif string[index] == '[':\n\
    \            return helper(string, index + 1)\n        elif string[index] == ']':\n\
    \            return helper(string, index + 1)\n        elif string[index] == '[':\n\
    \            return helper(string, index + 1)\n        elif string[index] == ']':\n\
    \            return helper(string, index + 1)\n        elif string[index] == '[':\n\
    \            return helper(string, index + 1)\n        elif string[index] == ']':\n\
    \            return helper(string, index + 1)\n        elif string[index] == '[':\n\
    \            return helper(string, index + 1)\n        elif string[index] == ']':\n\
    \            return helper(string, index + 1)\n        elif string[index] == '[':\n\
    \            return helper(string, index + 1)\n        elif string[index] == ']':\n\
    \            return helper(string, index + 1)\n        elif string[index] == '[':\n\
    \            return helper(string, index + 1)\n        elif string[index] == ']':\n\
    \            return helper(string, index + 1)\n        elif string[index] == '[':\n\
    \            return helper(string, index + 1)\n        elif string[index] == ']':\n\
    \            return helper(string, index + 1)\n        elif string", "    \n \
    \   # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    stack = []\n\
    \    brackets = 0\n    for char in string:\n        if char == '[':\n        \
    \    stack.append(char)\n            brackets += 1\n        elif char == ']':\n\
    \            brackets -= 1\n            if brackets == 0:\n                stack.pop()\n\
    \            else:\n                return False\n        elif brackets == 0:\n\
    \            return False\n    return True\n\n", "    \n    # Your code here\n\
    \    \n    pass\n\n", "    \n    stack = []\n    \n    def helper(string):\n \
    \       nonlocal stack\n        \n        brackets = string.count('[') - string.count(']')\n\
    \        \n        if brackets == 0:\n            return True\n        \n    \
    \    if brackets == 1:\n            stack.append(string)\n            return True\n\
    \        \n        if brackets == 2:\n            if stack.pop() != '[':\n   \
    \             return False\n            stack.append(string)\n            return\
    \ True\n        \n        if brackets > 2:\n            return False\n       \
    \ \n        stack.append(string)\n        \n        helper(string[1:])\n     \
    \   \n        if stack.pop() != '[':\n            return False\n        \n   \
    \     return True\n    \n    return helper(string)\n\n", "    stack = []\n   \
    \ brackets = 0\n    for char in string:\n        if char == '[':\n           \
    \ brackets += 1\n            stack.append(char)\n        elif char == ']':\n \
    \           brackets -= 1\n            if not brackets:\n                if stack:\n\
    \                    stack.pop()\n                else:\n                    return\
    \ False\n    return brackets > 0\n\n", "    stack = []\n    open_brackets = 0\n\
    \    close_brackets = 0\n    for char in string:\n        if char == '[':\n  \
    \          open_brackets += 1\n            stack.append(char)\n        elif char\
    \ == ']':\n            close_brackets += 1\n            if len(stack) == 0:\n\
    \                return False\n            if close_brackets > open_brackets:\n\
    \                return False\n            open_brackets -= 1\n            stack.pop()\n\
    \        elif char == '[' or char == ']':\n            return False\n    return\
    \ open_brackets == close_brackets\n\n", "    stack = []\n    \n    def helper(s:\
    \ str) -> bool:\n        nonlocal stack\n        \n        if s == '':\n     \
    \       return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \            return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \            return True\n        \n        return False\n    \n    return helper\n",
  "    \n    stack = []\n    \n    def helper(string: str, index: int) -> bool:\n\
    \        \n        if index >= len(string):\n            return True\n       \
    \ \n        if string[index] in '[]':\n            stack.append(string[index])\n\
    \            return helper(string, index + 1)\n        \n        if string[index]\
    \ in '()':\n            if stack[-1] not in '[]':\n                return False\n\
    \            stack.pop()\n            return helper(string, index + 1)\n     \
    \   \n        return False\n    \n    return helper(string, 0)\n</cell>\n<cell>\n\
    is_nested
  "    \n    def inner(string: str) -> bool:\n        \n        stack = []\n     \
    \   \n        for char in string:\n            if char == '[':\n             \
    \   stack.append(char)\n            elif char == ']':\n                if len(stack)\
    \ == 0:\n                    return False\n                \n                stack.pop()\n\
    \            elif char == '[' or char == ']':\n                if len(stack) ==\
    \ 0:\n                    return False\n                \n                stack.pop()\n\
    \                stack.append(char)\n            else:\n                return\
    \ False\n        \n        if len(stack) != 0:\n            return False\n   \
    \     \n        return True\n    \n    return inner\n\n", "    \n    stack = []\n\
    \    \n    def helper(s: str) -> bool:\n        nonlocal stack\n        \n   \
    \     if s == '':\n            return True\n        \n        if s == '[':\n \
    \           stack.append(s)\n            return True\n        \n        if s ==\
    \ ']':\n            if len(stack) == 0:\n                return False\n      \
    \      \n            if stack[-1] == '[':\n                stack.pop()\n     \
    \           return True\n            \n            if stack[-1] == ']':\n    \
    \            stack.pop()\n                return True\n            \n        \
    \    return False\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            if stack[-1]\
    \ == '[':\n                stack.pop()\n                return True\n        \
    \    \n            if stack[-1] == ']':\n                stack.pop()\n       \
    \         return True\n            \n            return False\n        \n    \
    \    if s == '[':\n            stack.append(s)\n            return True\n    \
    \    \n        if s == ']':\n            if len(stack) == 0:\n               \
    \ return False\n            \n            if stack[-1] == '[':\n             \
    \   stack.pop()\n                return True\n            \n            if stack[-1]\
    \ == ']':\n                stack.pop()\n                return True\n        \
    \    \n            return False\n        \n        if s == ']':\n            if\
    \ len(stack) == 0:\n                return False\n            \n            if\
    \ stack[-1] == '[':\n                stack.pop()\n                return True\n\
    \            \n            if stack[-1] == ']':\n                stack.pop()\n\
    \                return True\n            \n            return False\n       \
    \ \n        if s == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            \n            if stack[-1] == '[':\n                stack.pop()\n\
    \                return True\n            \n            if stack[-1] == ']':\n\
    \                stack.pop()\n                return True\n            \n    \
    \        return False\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            if stack[-1]\
    \ == '[':\n                stack.pop()\n                return True\n        \
    \    \n            if stack[-1] == ']':\n                stack.pop()\n       \
    \         return True\n            \n            return False\n        \n    \
    \    if s == ']':\n            if len(stack) == 0:\n                return False\n\
    \            \n            if stack[-1] == '[':\n                stack.pop()\n\
    \                return True\n            \n            if stack[-1] == ']':\n\
    \                stack.pop()\n                return True\n            \n    \
    \        return False\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            if stack[-1]\
    \ == '[':\n                stack.pop()\n                return True\n        \
    \    \n            if stack[-1] == ']':\n                stack.pop()\n       \
    \         return True\n            \n            return False\n        \n    \
    \    if s == ']':\n            if len(stack) == 0:\n                return False\n\
    \            \n            if stack[-1] == '[':\n                stack.pop()\n\
    \                return True\n            \n            if stack[-1] == ']':\n\
    \                stack.pop()\n                return True\n            \n    \
    \        return False\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            if stack[-1]\
    \ == '", "    stack = []\n    for c in string:\n        if c == '[':\n       \
    \     stack.append(c)\n        elif c == ']':\n            if len(stack) == 0:\n\
    \                return False\n            elif stack[-1] != '[':\n          \
    \      return False\n            else:\n                stack.pop()\n    return\
    \ len(stack) == 0\n\n", "    stack = []\n    open_brackets = 0\n    for char in\
    \ string:\n        if char == '[':\n            stack.append(char)\n         \
    \   open_brackets += 1\n        elif char == ']':\n            open_brackets -=\
    \ 1\n            if open_brackets == 0:\n                stack.pop()\n       \
    \     else:\n                return False\n        elif char == '[' or char ==\
    \ ']':\n            return False\n    return open_brackets == 0\n", "    stack\
    \ = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n\
    \        elif char == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n", "    stack = []\n    for char in string:\n        if char == '[':\n\
    \            stack.append(char)\n        elif char == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            top = stack.pop()\n       \
    \     if top != '[':\n                return False\n        else:\n          \
    \  return False\n    return True\n\n", "    \n    # Your code here\n    \n   \
    \ return bool(re.search(r'(\\[(?:[^\\[\\]]|(?R))*\\])', string))\n", "    \n \
    \   # Your code here\n    \n    return bool(re.search(r'(\\[*\\])+', string))\n",
  "    \n    stack = []\n    \n    def helper(s: str) -> bool:\n        \n       \
    \ if len(s) == 0:\n            return True\n        \n        if s[0] == '[' and\
    \ s[-1] == ']':\n            stack.append(s[0])\n            return helper(s[1:-1])\n\
    \        \n        if s[0] == '[' and s[-1] != ']':\n            return False\n\
    \        \n        if s[0] != ']' and s[-1] != ']':\n            return False\n\
    \        \n        if s[0] == ']' and len(stack) == 0:\n            return True\n\
    \        \n        if s[0] == ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] == ']' and len(stack) == 0:\n            return True\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) == 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:\n            return False\n\
    \        \n        if s[0] != ']' and len(stack) != 0:", "    stack = []\n   \
    \ for char in string:\n        if char == '[':\n            stack.append(char)\n\
    \        elif char == ']':\n            if not stack:\n                return\
    \ False\n            top = stack.pop()\n            if top != '[':\n         \
    \       return False\n        else:\n            return False\n    return not\
    \ stack\n\n", "    stack = []\n    for char in string:\n        if char == '[':\n\
    \            stack.append(char)\n        elif char == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            elif stack.pop() != '[':\n\
    \                return False\n    return len(stack) == 0\n\n", "    \n    stack\
    \ = []\n    \n    def helper(s: str) -> bool:\n        nonlocal stack\n      \
    \  \n        if s == '':\n            return True\n        \n        if s == '[':\n\
    \            stack.append(s)\n            return True\n        \n        if s\
    \ == ']':\n            if len(stack) == 0:\n                return False\n   \
    \         \n            stack.pop()\n            return True\n        \n     \
    \   if s == '[':\n            stack.append(s)\n            return True\n     \
    \   \n        if s == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            \n            stack.pop()\n            return True\n    \
    \    \n        return False\n    \n    return helper\n\n", "    \n    stack =\
    \ []\n    \n    def helper(s: str) -> bool:\n        \n        if len(s) == 0:\n\
    \            return True\n        \n        if s[0] == '[':\n            stack.append(s[0])\n\
    \            return helper(s[1:])\n        \n        if s[0] == ']':\n       \
    \     if len(stack) == 0:\n                return False\n            \n      \
    \      if stack.pop() != '[':\n                return False\n            \n  \
    \          return helper(s[1:])\n        \n        return False\n    \n    return\
    \ helper(string)\n\n", "    stack = []\n    brackets = 0\n    for char in string:\n\
    \        if char == '[':\n            brackets += 1\n            stack.append(char)\n\
    \        elif char == ']':\n            brackets -= 1\n            if not brackets:\n\
    \                if stack:\n                    stack.pop()\n                else:\n\
    \                    return False\n        elif brackets == 0:\n            return\
    \ False\n    return True\n", "    \n    stack = []\n    \n    def helper(s: str)\
    \ -> bool:\n        nonlocal stack\n        \n        if s == '':\n          \
    \  return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \            return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \            return True\n        \n        if s == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            \n            stack.pop()\n\
    \            return True\n        \n        return False\n    \n    return helper\n\
    \n", "    stack = []\n    for char in string:\n        if char == '[':\n     \
    \       stack.append(char)\n        elif char == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            if stack.pop() != '[':\n  \
    \              return False\n    return len(stack) == 0\n\n", "    \n    # Your\
    \ code here\n    \n    return bool(re.search(r'(\\[(?:[^\\[\\]]|(?R))*\\])', string))\n\
    </cell>\n<cell>", "    \n    def inner(string: str) -> bool:\n        \n     \
    \   # Initialize a stack to store brackets\n        stack = []\n        \n   \
    \     # Iterate through each character in the string\n        for char in string:\n\
    \            \n            # If the character is a bracket, push it to the stack\n\
    \            if char == '[':\n                stack.append(char)\n           \
    \ \n            # If the character is a bracket, pop from the stack\n        \
    \    elif char == ']':\n                \n                # If the stack is empty,\
    \ then the string is not nested\n                if len(stack) == 0:\n       \
    \             return False\n                \n                # Otherwise, pop\
    \ the top bracket from the stack\n                else:\n                    stack.pop()\n\
    \        \n        # If the stack is empty, then the string is not nested\n  \
    \      if len(stack) == 0:\n            return False\n        \n        # Otherwise,\
    \ return True\n        else:\n            return True\n    \n    return inner\n\
    \n", "    \n    def inner(string: str) -> bool:\n        stack = []\n        \n\
    \        for char in string:\n            if char == '[':\n                stack.append(char)\n\
    \            elif char == ']':\n                if stack:\n                  \
    \  stack.pop()\n                else:\n                    return False\n    \
    \        elif stack:\n                stack[-1] = stack[-1] + char\n         \
    \   else:\n                return False\n        \n        return len(stack) ==\
    \ 1\n    \n    return inner\n\n", "    \n    stack = []\n    \n    def helper(string):\n\
    \        if len(stack) == 0:\n            return False\n        \n        open_bracket\
    \ = stack.pop()\n        \n        if open_bracket == '[':\n            if string[open_bracket+1:]\
    \ == ']':\n                return True\n            else:\n                return\
    \ False\n        elif open_bracket == '{':\n            if string[open_bracket+1:]\
    \ == '}':\n                return True\n            else:\n                return\
    \ False\n        elif open_bracket == '(':\n            if string[open_bracket+1:]\
    \ == ')':\n                return True\n            else:\n                return\
    \ False\n        else:\n            return False\n    \n    for char in string:\n\
    \        if char == '[':\n            stack.append('[')\n        elif char ==\
    \ '{':\n            stack.append('{')\n        elif char == '(':\n           \
    \ stack.append('(')\n        elif char == ']':\n            if len(stack) == 0:\n\
    \                return False\n            elif stack[-1] == '[':\n          \
    \      stack.pop()\n            elif stack[-1] == '{':\n                stack.pop()\n\
    \            elif stack[-1] == '(':\n                stack.pop()\n           \
    \ else:\n                return False\n        elif char == '}':\n           \
    \ if len(stack) == 0:\n                return False\n            elif stack[-1]\
    \ == '[':\n                stack.pop()\n            elif stack[-1] == '{':\n \
    \               stack.pop()\n            elif stack[-1] == '(':\n            \
    \    stack.pop()\n            else:\n                return False\n        else:\n\
    \            return False\n    \n    return helper(string)\n</cell>\n<cell>\n\
    is_nested('[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]",
  "    stack = []\n    open_brackets = 0\n    close_brackets = 0\n    for char in\
    \ string:\n        if char == '[':\n            open_brackets += 1\n         \
    \   stack.append(char)\n        elif char == ']':\n            close_brackets\
    \ += 1\n            open_brackets -= 1\n            if open_brackets == 0:\n \
    \               if close_brackets == 0:\n                    return True\n   \
    \             else:\n                    return False\n            elif open_brackets\
    \ < 0:\n                return False\n            else:\n                stack.pop()\n\
    \        else:\n            return False\n    return False\n\n", "    \n    #\
    \ Your code here\n    \n    return False if string == '[]' else True\n", "   \
    \ \n    stack = []\n    \n    def helper(s: str) -> bool:\n        \n        if\
    \ len(s) == 0:\n            return True\n        \n        if s[0] == '[':\n \
    \           stack.append(s[0])\n            return helper(s[1:])\n        \n \
    \       if s[0] == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            \n            if stack[-1] == '[':\n                stack.pop()\n\
    \                return helper(s[1:])\n            else:\n                return\
    \ False\n        \n        return False\n    \n    return helper(string)\n</cell>\n\
    <cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n</cell>\n<cell>\n\
    is_nested
  "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n\
    \        elif char == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            stack.pop()\n        elif char == '[':\n            stack.append(char)\n\
    \        elif char == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            stack.pop()\n            if len(stack) == 0:\n          \
    \      return True\n    return False\n\n", "    \n    # Your code here\n    \n\
    \    return bool(re.search(r'(\\[(?:[^\\[\\]]|(?R))*\\])', string))\n</cell>\n\
    <cell>", "    stack = []\n    for char in string:\n        if char == '[':\n \
    \           stack.append(char)\n        elif char == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \    return len(stack) == 0\n", "    \n    # Your code here\n    \n    pass\n\n",
  "    \n    stack = []\n    \n    def helper(s: str) -> bool:\n        if s == '':\n\
    \            return True\n        \n        if s == '[':\n            stack.append(s)\n\
    \        elif s == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        elif s == '['\
    \ or s == ']':\n            if len(stack) == 0:\n                return False\n\
    \            else:\n                stack.pop()\n                stack.append(s)\n\
    \        else:\n            return False\n        \n        return helper(s[1:])\n\
    \    \n    return helper(string)\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n\
    <cell>\nis_nested
  "    \n    def inner(string: str) -> bool:\n        \n        stack = []\n     \
    \   \n        for char in string:\n            if char == '[':\n             \
    \   stack.append(char)\n            elif char == ']':\n                if len(stack)\
    \ == 0:\n                    return False\n                stack.pop()\n     \
    \       elif char == '[' or char == ']':\n                if len(stack) == 0:\n\
    \                    return False\n                stack.pop()\n             \
    \   stack.append(char)\n        \n        if len(stack) == 0:\n            return\
    \ True\n        \n        return False\n    \n    return inner\n\n", "    stack\
    \ = []\n    open_brackets = 0\n    for c in string:\n        if c == '[':\n  \
    \          open_brackets += 1\n            stack.append(c)\n        elif c ==\
    \ ']':\n            open_brackets -= 1\n            if open_brackets == 0:\n \
    \               if stack == []:\n                    return False\n          \
    \      else:\n                    stack.pop()\n        elif open_brackets == 0:\n\
    \            return False\n    return True\n\n", "    stack = []\n    for char\
    \ in string:\n        if char == '[':\n            stack.append(char)\n      \
    \  elif char == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            if stack[-1] != '[':\n                return False\n    \
    \        stack.pop()\n    return len(stack) == 0\n\n", "    stack = []\n    for\
    \ c in string:\n        if c == '[':\n            stack.append(c)\n        elif\
    \ c == ']':\n            if len(stack) == 0:\n                return False\n \
    \           elif stack.pop() != '[':\n                return False\n    return\
    \ len(stack) == 0\n\n", "    stack = []\n    open_brackets = 0\n    close_brackets\
    \ = 0\n    for char in string:\n        if char == '[':\n            open_brackets\
    \ += 1\n            stack.append(char)\n        elif char == ']':\n          \
    \  close_brackets += 1\n            if open_brackets > close_brackets:\n     \
    \           return False\n            open_brackets -= 1\n        elif char ==\
    \ '[' or char == ']':\n            close_brackets += 1\n            if open_brackets\
    \ > close_brackets:\n                return False\n            open_brackets -=\
    \ 1\n        elif char == '}':\n            close_brackets -= 1\n            if\
    \ open_brackets > close_brackets:\n                return False\n            open_brackets\
    \ -= 1\n    return open_brackets == close_brackets\n\n", "    \n    stack = []\n\
    \    \n    def helper(s: str) -> bool:\n        nonlocal stack\n        \n   \
    \     if len(s) == 0:\n            return True\n        \n        if s[0] == '['\
    \ and s[-1] == ']':\n            stack.append(s[1:-1])\n            return helper(s[1:-1])\n\
    \        \n        if s[0] == '[' and s[-1] != ']':\n            return False\n\
    \        \n        if s[0] != ']':\n            return False\n        \n     \
    \   if stack and stack[-1] == s[-1]:\n            stack.pop()\n            return\
    \ helper(s[1:-1])\n        \n        return False\n    \n    return helper(string)\n\
    </cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested
  "    stack = []\n    open_brackets = 0\n    close_brackets = 0\n    \n    for char\
    \ in string:\n        if char == '[':\n            open_brackets += 1\n      \
    \      stack.append(char)\n        elif char == ']':\n            close_brackets\
    \ += 1\n            open_brackets -= 1\n            if open_brackets == 0:\n \
    \               if close_brackets == 0:\n                    return True\n   \
    \             else:\n                    return False\n            elif open_brackets\
    \ < 0:\n                return False\n            else:\n                stack.pop()\n\
    \        else:\n            return False\n    return False\n\n", "    \n    #\
    \ Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n    stack = []\n\
    \    \n    def helper(string: str, index: int) -> bool:\n        if index >= len(string):\n\
    \            return True\n        \n        if string[index] == '[':\n       \
    \     stack.append(index)\n        elif string[index] == ']':\n            if\
    \ stack:\n                index = stack.pop()\n            else:\n           \
    \     return False\n        elif string[index] == '[':\n            stack.append(index)\n\
    \        elif string[index] == ']':\n            if stack:\n                index\
    \ = stack.pop()\n            else:\n                return False\n        else:\n\
    \            return False\n        \n        return helper(string, index + 1)\n\
    \    \n    return helper(string, 0)\n</cell>\n<cell>\nis_nested('[[]]') \n</cell>\n\
    <cell>\nis_nested('[]]]]]]][[[[[]')\n</cell>\n<cell>\nis_nested('[][]')\n</cell>\n\
    <cell>\nis_nested('[]')\n</cell>\n<cell>\nis_nested('[[][]]')\n</cell>\n<cell>\n\
    is_nested('[[]][[')\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input which contains only square brackets.\nThe function should\
    \ return True if and only if there is a valid subsequence of brackets \nwhere\
    \ at least one bracket in the subsequence is nested.\n\nis_nested('[[]]') \u279E\
    \ True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]') \u279E False\n\
    is_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\nis_nested('[[]][[')\
    \ \u279E True\nis_nested('[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]",
  "    \n    # Your code here\n    \n    return bool(re.search(r'(\\[(?:[^][]|(?R))*\\\
    ])', string))\n\n", "    stack = []\n    open_brackets = 0\n    close_brackets\
    \ = 0\n    for char in string:\n        if char == '[':\n            open_brackets\
    \ += 1\n            stack.append(char)\n        elif char == ']':\n          \
    \  close_brackets += 1\n            if open_brackets == close_brackets:\n    \
    \            open_brackets = 0\n                close_brackets = 0\n         \
    \       stack.pop()\n            else:\n                return False\n       \
    \ elif char == '[' or char == ']':\n            return False\n    return open_brackets\
    \ == close_brackets\n\n", "    stack = []\n    for c in string:\n        if c\
    \ == '[':\n            stack.append(c)\n        elif c == ']':\n            if\
    \ len(stack) == 0:\n                return False\n            stack.pop()\n  \
    \      elif stack and c != stack[-1]:\n            return False\n    return len(stack)\
    \ == 0\n", "    stack = []\n    for char in string:\n        if char == '[':\n\
    \            stack.append(char)\n        elif char == ']':\n            if len(stack)\
    \ == 0:\n                return False\n            elif stack.pop() != '[':\n\
    \                return False\n    return len(stack) == 0\n\n", "    stack = []\n\
    \    open_brackets = 0\n    for char in string:\n        if char == '[':\n   \
    \         stack.append(char)\n            open_brackets += 1\n        elif char\
    \ == ']':\n            open_brackets -= 1\n            if open_brackets == 0:\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        else:\n            return False\n    return True\n\n", "    \n    stack\
    \ = []\n    \n    def helper(s: str) -> bool:\n        if len(s) == 0:\n     \
    \       return True\n        if s[0] == '[' and s[-1] == ']':\n            stack.append(s[0])\n\
    \            return helper(s[1:-1])\n        if s[0] == '[' and s[-1] != ']':\n\
    \            return False\n        if s[0] != ']':\n            return False\n\
    \        if stack and stack[-1] == '[':\n            stack.pop()\n           \
    \ return helper(s[1:-1])\n        return False\n    \n    return helper(string)\n\
    </cell>\n<cell>\nis_nested('[[]]') \n</cell>\n<cell>\nis_nested('[]]]]]]][[[[[]')\n\
    </cell>\n<cell>\nis_nested('[][]')\n</cell>\n<cell>\nis_nested('[]')\n</cell>\n\
    <cell>\nis_nested('[[][]]')\n</cell>\n<cell>\nis_nested('[[]][[')\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input which contains only\
    \ square brackets.\nThe function should return True if and only if there is a\
    \ valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n\nis_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E\
    \ False\nis_nested('[][]') \u279E False\nis_nested('[]') \u279E False\nis_nested('[[][]]')\
    \ \u279E True\nis_nested('[[]][[') \u279E True\nis_nested('[[[]][]]') \u279E True\n\
    is_nested('[[[]][[')\nis_nested('[[[]]][]]') \u279E True\nis_nested('[[[]]][[[')\n\
    is_nested('[[[]]][]][]') \u279E True\nis_nested('[[[]]][]][][]') \u279E True\n\
    is_nested('[[[]]][]][][][]') \u279E True\nis_nested('[[[]]][]][][][][]') \u279E\
    \ True\nis_nested('[[[]]][]][][][][][]') \u279E True\nis_nested('[[[]]][]][][][][][][]')\
    \ \u279E True\nis_nested('[[[]]][]][][][][][][][]') \u279E True\nis_nested('[[[]]][]][][][][][][][][]') ",
  "    stack = []\n    open_brackets = 0\n    close_brackets = 0\n    \n    for char\
    \ in string:\n        if char == '[':\n            open_brackets += 1\n      \
    \      stack.append(char)\n        elif char == ']':\n            close_brackets\
    \ += 1\n            if open_brackets == close_brackets:\n                open_brackets\
    \ -= 1\n                close_brackets -= 1\n                if open_brackets\
    \ == 0:\n                    return True\n                else:\n            \
    \        return False\n            else:\n                open_brackets -= 1\n\
    \        elif char == '[':\n            open_brackets += 1\n            stack.append(char)\n\
    \        elif char == ']':\n            close_brackets += 1\n            if open_brackets\
    \ == close_brackets:\n                open_brackets -= 1\n                close_brackets\
    \ -= 1\n                if open_brackets == 0:\n                    return True\n\
    \                else:\n                    return False\n            else:\n\
    \                open_brackets -= 1\n    return False\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
