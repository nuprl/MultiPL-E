name: HumanEval_68_pluck
language: python
results:
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if even_values:\n        return\
    \ even_values.index(smallest_value), smallest_index\n    else:\n        return\
    \ [], None\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpetjbkm52.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmpetjbkm52.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpetjbkm52.py\", line 55, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if smallest_value is None:\n\
    \        return []\n    else:\n        return [smallest_value, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2,\
    \ reverse=True)[:2]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2k88bfsi.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp2k88bfsi.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp2k88bfsi.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    even_values_index = []\n    \n\
    \    for index, value in enumerate(arr):\n        if value % 2 == 0:\n       \
    \     even_values.append(value)\n            even_values_index.append(index)\n\
    \    \n    if len(even_values) == 0:\n        return even_values_index\n    elif\
    \ len(even_values) == 1:\n        return even_values_index[0]\n    else:\n   \
    \     smallest_value = min(even_values)\n        smallest_value_index = even_values.index(smallest_value)\n\
    \        return even_values_index[smallest_value_index]\n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnl_p94xq.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmpnl_p94xq.py\", line 66,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpnl_p94xq.py\", line 56, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    even_values = []\n    smallest_value = None\n    smallest_index = None\n\
    \    \n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n \
    \           even_values.append(value)\n            if smallest_value is None or\
    \ value < smallest_value:\n                smallest_value = value\n          \
    \      smallest_index = index\n    \n    if smallest_value is None:\n        return\
    \ even_values\n    else:\n        return [smallest_value, smallest_index]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    return even_values, smallest_index\n\ndef\
    \ check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppr8cdf7c.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmppr8cdf7c.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppr8cdf7c.py\", line 50, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    even_values = []\n    \n    for index, value\
    \ in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n\
    \    \n    if len(even_values) == 0:\n        return []\n    \n    smallest_value\
    \ = min(even_values)\n    \n    smallest_index = None\n    \n    for index, value\
    \ in enumerate(arr):\n        if value == smallest_value:\n            smallest_index\
    \ = index\n    \n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpshskk9w5.py\", line\
    \ 71, in <module>\n    test_check()\n  File \"/tmp/tmpshskk9w5.py\", line 69,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpshskk9w5.py\", line 62, in\
    \ check\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n \
    \           even_values.append(arr[i])\n            \n    if len(even_values)\
    \ == 0:\n        return []\n    \n    smallest_value = min(even_values)\n    smallest_index\
    \ = even_values.index(smallest_value)\n    \n    return [smallest_value, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprsi5y4c5.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmprsi5y4c5.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmprsi5y4c5.py\", line 56, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpihuyz2kr.py\", line\
    \ 305, in <module>\n    test_check()\n  File \"/tmp/tmpihuyz2kr.py\", line 303,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpihuyz2kr.py\", line 293, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    even_values = []\n    smallest_value = None\n    smallest_index = None\n\
    \    \n    # Write your code here\n    \n    return even_values\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd6_kj91s.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmpd6_kj91s.py\", line 57,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpd6_kj91s.py\", line 47, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if smallest_value is None:\n\
    \        return []\n    else:\n        return [smallest_value, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0)[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr2vqg1br.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpr2vqg1br.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpr2vqg1br.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2)[0]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzqaxhy8d.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpzqaxhy8d.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpzqaxhy8d.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if even_values:\n        return even_values.index(smallest_value),\
    \ smallest_index\n    else:\n        return [], None\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi1it3dx4.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpi1it3dx4.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi1it3dx4.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if even_values:\n        return\
    \ even_values.index(smallest_value), smallest_index\n    else:\n        return\
    \ [], None\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnpp0p05x.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmpnpp0p05x.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpnpp0p05x.py\", line 55, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0,\
    \ reverse=True)[0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvjgjwte7.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpvjgjwte7.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpvjgjwte7.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0)[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfso4li8_.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpfso4li8_.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpfso4li8_.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2, reverse=True)\n\
    \    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnj2z3v00.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpnj2z3v00.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpnj2z3v00.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if smallest_value is None:\n        return\
    \ []\n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n \
    \   assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0,\
    \ reverse=True)\n    \ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk3udhacc.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpk3udhacc.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpk3udhacc.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = 0\n    smallest_index\
    \ = 0\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n \
    \           even_values.append(value)\n            if value < smallest_value:\n\
    \                smallest_value = value\n                smallest_index = index\n\
    \    if even_values == []:\n        return smallest_value, smallest_index\n  \
    \  else:\n        smallest_value = min(even_values)\n        smallest_index =\
    \ even_values.index(smallest_value)\n        return smallest_value, smallest_index\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi67_tvad.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmpi67_tvad.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi67_tvad.py\", line 55, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2, reverse=True)[0]\n\
    \    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa6ijhd_t.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpa6ijhd_t.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpa6ijhd_t.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2, reverse=True)[0]\n\
    \    \n    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6h66ourd.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp6h66ourd.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp6h66ourd.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    # Your code here\n    \n    return sorted(arr)[:2]\n    \n    \ndef\
    \ check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr_ccaopl.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpr_ccaopl.py\", line 54,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpr_ccaopl.py\", line 44, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpburaell6.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpburaell6.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpburaell6.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa7dlvhhm.py\", line\
    \ 305, in <module>\n    test_check()\n  File \"/tmp/tmpa7dlvhhm.py\", line 303,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpa7dlvhhm.py\", line 293, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo6lp5i5l.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpo6lp5i5l.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpo6lp5i5l.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2, reverse=True)[:2]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcul_g7b1.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpcul_g7b1.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpcul_g7b1.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    even_values = []\n    smallest_value = None\n\
    \    smallest_index = None\n    \n    for index, value in enumerate(arr):\n  \
    \      if value % 2 == 0:\n            even_values.append(value)\n           \
    \ if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    \n    if smallest_value\
    \ is None:\n        return even_values\n    elif smallest_index is None:\n   \
    \     return [smallest_value, even_values.index(smallest_value)]\n    else:\n\
    \        return [smallest_value, smallest_index]\n\ndef check(candidate):\n  \
    \  assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2,\
    \ 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2)[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgamoju1b.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpgamoju1b.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpgamoju1b.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if smallest_value is None:\n        return\
    \ []\n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n \
    \   assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if even_values:\n        return\
    \ even_values.index(smallest_value), smallest_index\n    else:\n        return\
    \ [], None\n    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv93eealh.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmpv93eealh.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpv93eealh.py\", line 55, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if even_values:\n        return even_values.index(smallest_value),\
    \ smallest_index\n    else:\n        return [], None\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6cll3yyk.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmp6cll3yyk.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp6cll3yyk.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = 0\n    smallest_index\
    \ = 0\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n \
    \           even_values.append(value)\n            if value < smallest_value:\n\
    \                smallest_value = value\n                smallest_index = index\n\
    \    return even_values[smallest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqadh6_f_.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpqadh6_f_.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpqadh6_f_.py\", line 50, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2, reverse=True)[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp50vifj04.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp50vifj04.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp50vifj04.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if even_values:\n        return\
    \ even_values.index(smallest_value), smallest_index\n    else:\n        return\
    \ [], None\n    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp411nq0ka.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmp411nq0ka.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp411nq0ka.py\", line 55, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = 0\n    smallest_index\
    \ = 0\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n \
    \           even_values.append(value)\n            if value < smallest_value:\n\
    \                smallest_value = value\n                smallest_index = index\n\
    \    if even_values:\n        return even_values[smallest_index]\n    else:\n\
    \        return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkcu45i3.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpgkcu45i3.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpgkcu45i3.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0,\
    \ reverse=True)[0]\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptyh_j1n1.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmptyh_j1n1.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmptyh_j1n1.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0)[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp96ffoo6v.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp96ffoo6v.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp96ffoo6v.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7s47c4v.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpw7s47c4v.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpw7s47c4v.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0,\
    \ reverse=True)[:2]\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpy7f4nedq.py\", line 40\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2, reverse=True)[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt_1oyl_p.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpt_1oyl_p.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpt_1oyl_p.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr)[:2]\n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp75txx7xl.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp75txx7xl.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp75txx7xl.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    even_values_index = []\n    \n\
    \    even_values_index.append(0)\n    \n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   even_values_index.append(index)\n    \n    if len(even_values) == 0:\n   \
    \     return even_values_index\n    \n    smallest_value = min(even_values)\n\
    \    smallest_index = even_values_index.index(min(even_values))\n    \n    even_values.remove(smallest_value)\n\
    \    even_values_index.remove(smallest_index)\n    \n    return even_values_index\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgtxwiv6.py\", line\
    \ 72, in <module>\n    test_check()\n  File \"/tmp/tmpwgtxwiv6.py\", line 70,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpwgtxwiv6.py\", line 60, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\n  File \"/tmp/tmpwgtxwiv6.py\"\
    , line 52, in pluck\n    smallest_index = even_values_index.index(min(even_values))\n\
    ValueError: 2 is not in list\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_values = []\n    smallest_value_index\
    \ = []\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqq5soino.py\", line\
    \ 299, in <module>\n    test_check()\n  File \"/tmp/tmpqq5soino.py\", line 297,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpqq5soino.py\", line 287, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2)[0]\n\
    \    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4b1tw_m_.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp4b1tw_m_.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp4b1tw_m_.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5cavt7x.py\", line\
    \ 305, in <module>\n    test_check()\n  File \"/tmp/tmpq5cavt7x.py\", line 303,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq5cavt7x.py\", line 293, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi9kuypkc.py\", line\
    \ 305, in <module>\n    test_check()\n  File \"/tmp/tmpi9kuypkc.py\", line 303,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi9kuypkc.py\", line 293, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    even_values = []\n    \n    for index, value\
    \ in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n\
    \    \n    if len(even_values) == 0:\n        return []\n    \n    smallest_value\
    \ = min(even_values)\n    \n    smallest_value_index = even_values.index(smallest_value)\n\
    \    \n    return [smallest_value, smallest_value_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjna5etbl.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmpjna5etbl.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpjna5etbl.py\", line 56, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2\
    \ == 0)[0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_lx9036_.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp_lx9036_.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp_lx9036_.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2\
    \ == 0)[0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr_zm9zdw.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpr_zm9zdw.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpr_zm9zdw.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = 0\n    smallest_index\
    \ = 0\n    \n    for index, value in enumerate(arr):\n        if value % 2 ==\
    \ 0:\n            even_values.append(value)\n            if value < smallest_value:\n\
    \                smallest_value = value\n                smallest_index = index\n\
    \    \n    if even_values:\n        return even_values.index(smallest_value),\
    \ smallest_index\n    else:\n        return smallest_index, smallest_index\n \
    \   \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqfqf1_bl.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmpqfqf1_bl.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpqfqf1_bl.py\", line 55, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\n  File \"/tmp/tmpqfqf1_bl.py\"\
    , line 50, in pluck\n    return even_values.index(smallest_value), smallest_index\n\
    ValueError: 0 is not in list\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2\
    \ == 0)[0]\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt2z1h__y.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpt2z1h__y.py\", line 54,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpt2z1h__y.py\", line 44, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if smallest_value is None:\n\
    \        return []\n    else:\n        return [smallest_value, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpphrec213.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpphrec213.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpphrec213.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    even_values_index = []\n    \n\
    \    for index, value in enumerate(arr):\n        if value % 2 == 0:\n       \
    \     even_values.append(value)\n            even_values_index.append(index)\n\
    \    \n    if len(even_values) == 0:\n        return []\n    \n    smallest_value\
    \ = min(even_values)\n    smallest_index = even_values_index[even_values.index(smallest_value)]\n\
    \    \n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsicpev95.py\", line\
    \ 305, in <module>\n    test_check()\n  File \"/tmp/tmpsicpev95.py\", line 303,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpsicpev95.py\", line 293, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0)[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiwicqj1y.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpiwicqj1y.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpiwicqj1y.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if even_values:\n        return even_values.index(smallest_value),\
    \ smallest_index\n    else:\n        return [], None\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm57_ojar.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpm57_ojar.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpm57_ojar.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if smallest_value is None:\n\
    \        return []\n    else:\n        return [smallest_value, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if even_values:\n        return even_values.index(smallest_value),\
    \ smallest_index\n    else:\n        return [], None\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpboc5yt6o.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpboc5yt6o.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpboc5yt6o.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    even_values = []\n    \n    for index, value\
    \ in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n\
    \    \n    if len(even_values) == 0:\n        return []\n    \n    even_values.sort()\n\
    \    \n    smallest_value = even_values[0]\n    smallest_index = 0\n    \n   \
    \ for index, value in enumerate(even_values):\n        if value == smallest_value:\n\
    \            smallest_index = index\n    \n    return [ smallest_value, smallest_index\
    \ ]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6454zgah.py\", line\
    \ 72, in <module>\n    test_check()\n  File \"/tmp/tmp6454zgah.py\", line 70,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp6454zgah.py\", line 60, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr)[:2]\n</cell>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp1uou3n9h.py\", line 40\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if even_values:\n        return even_values.index(smallest_value),\
    \ smallest_index\n    return [], None\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx_c5a7ln.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmpx_c5a7ln.py\", line 62,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpx_c5a7ln.py\", line 52, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk2qqs__9.py\", line\
    \ 305, in <module>\n    test_check()\n  File \"/tmp/tmpk2qqs__9.py\", line 303,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpk2qqs__9.py\", line 293, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2)[0]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjfut0yn2.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpjfut0yn2.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpjfut0yn2.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0)[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw210hsdi.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpw210hsdi.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpw210hsdi.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    even_values = []\n    smallest_value = None\n\
    \    smallest_index = None\n    \n    for index, value in enumerate(arr):\n  \
    \      if value % 2 == 0:\n            even_values.append(value)\n           \
    \ \n    if len(even_values) == 0:\n        return []\n    \n    if len(even_values)\
    \ == 1:\n        smallest_value = even_values[0]\n        smallest_index = index\n\
    \    else:\n        smallest_value = min(even_values)\n        smallest_index\
    \ = even_values.index(smallest_value)\n    \n    return [smallest_value, smallest_index]\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpra7z2d2m.py\", line 58\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_values = []\n    smallest_value_index\
    \ = []\n    \n    for index, value in enumerate(arr):\n        if value % 2 ==\
    \ 0:\n            even_values.append(value)\n            smallest_values.append(value)\n\
    \            smallest_value_index.append(index)\n    \n    if len(even_values)\
    \ == 0:\n        return smallest_values\n    elif len(even_values) == 1:\n   \
    \     return even_values[0]\n    else:\n        smallest_values.sort()\n     \
    \   smallest_value_index.sort()\n        return smallest_values[smallest_value_index[0]]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmperu284u0.py\", line\
    \ 70, in <module>\n    test_check()\n  File \"/tmp/tmperu284u0.py\", line 68,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmperu284u0.py\", line 58, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    # Your code here\n    \n    return []\n\ndef check(candidate):\n  \
    \  assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2,\
    \ 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwwxdn74j.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpwwxdn74j.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpwwxdn74j.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr)[:2]\n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoibl4gpg.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpoibl4gpg.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpoibl4gpg.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2, reverse=True)[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcllbk41s.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpcllbk41s.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpcllbk41s.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2, reverse=True)[:2]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpprlhlsr2.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpprlhlsr2.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpprlhlsr2.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if smallest_value is None:\n\
    \        return []\n    \n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if smallest_value is None:\n\
    \        return []\n    else:\n        return [smallest_value, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if smallest_value is None:\n        return\
    \ []\n    else:\n        return [smallest_value, smallest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx7pqlpi4.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpx7pqlpi4.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpx7pqlpi4.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_values = []\n    smallest_value_index\
    \ = []\n    \n    for index, value in enumerate(arr):\n        if value % 2 ==\
    \ 0:\n            even_values.append(value)\n            smallest_values.append(value)\n\
    \            smallest_value_index.append(index)\n    \n    if len(even_values)\
    \ == 0:\n        return []\n    elif len(even_values) == 1:\n        return even_values\n\
    \    else:\n        smallest_values.sort()\n        smallest_value_index.sort()\n\
    \        return even_values[smallest_value_index[0]]\n    \n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgf9j7kj7.py\", line\
    \ 71, in <module>\n    test_check()\n  File \"/tmp/tmpgf9j7kj7.py\", line 69,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpgf9j7kj7.py\", line 59, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    even_values = []\n    \n    for index, value in enumerate(arr):\n \
    \       if value % 2 == 0:\n            even_values.append(value)\n    \n    if\
    \ len(even_values) == 0:\n        return []\n    \n    smallest_value = min(even_values)\n\
    \    smallest_index = even_values.index(smallest_value)\n    \n    return [smallest_value,\
    \ smallest_index]\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp1ea6jklr.py\", line 51\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if even_values:\n        return even_values.index(smallest_value),\
    \ smallest_index\n    else:\n        return [], None\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo13wdojp.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpo13wdojp.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpo13wdojp.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    even_values = []\n    smallest_value = None\n\
    \    smallest_index = None\n    \n    for index, value in enumerate(arr):\n  \
    \      if value % 2 == 0:\n            even_values.append(value)\n           \
    \ if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    \n    if even_values:\n\
    \        return even_values.index(smallest_value), smallest_index\n    else:\n\
    \        return [], None\n    \ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprcpocozg.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmprcpocozg.py\", line 66,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmprcpocozg.py\", line 56, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None:\n\
    \                smallest_value = value\n                smallest_index = index\n\
    \            elif value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    if even_values:\n        return even_values.index(smallest_value),\
    \ smallest_index\n    else:\n        return [], None\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3bddkva3.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmp3bddkva3.py\", line 66,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp3bddkva3.py\", line 56, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if even_values:\n        return\
    \ even_values.index(smallest_value), smallest_index\n    else:\n        return\
    \ [], None\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph749lv7f.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmph749lv7f.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmph749lv7f.py\", line 55, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    even_values = []\n    \n    for index, value\
    \ in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n\
    \    \n    if len(even_values) == 0:\n        return []\n    \n    smallest_value\
    \ = min(even_values)\n    smallest_index = even_values.index(smallest_value)\n\
    \    \n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb47kk3ko.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpb47kk3ko.py\", line 64,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpb47kk3ko.py\", line 55, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprref4ifa.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmprref4ifa.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmprref4ifa.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if smallest_value is None:\n        return\
    \ []\n    else:\n        return [smallest_value, smallest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    even_values = []\n    smallest_value = None\n\
    \    smallest_index = None\n    \n    for index, value in enumerate(arr):\n  \
    \      if value % 2 == 0:\n            even_values.append(value)\n           \
    \ if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    \n    if even_values:\n\
    \        smallest_value = min(even_values)\n        smallest_index = even_values.index(smallest_value)\n\
    \    \n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphz_mcf7k.py\", line\
    \ 69, in <module>\n    test_check()\n  File \"/tmp/tmphz_mcf7k.py\", line 67,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmphz_mcf7k.py\", line 58, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    even_values = []\n    \n    for index, value\
    \ in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n\
    \    \n    if len(even_values) == 0:\n        return []\n    \n    smallest_value\
    \ = min(even_values)\n    \n    smallest_index = even_values.index(smallest_value)\n\
    \    \n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv48kgu0h.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmpv48kgu0h.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpv48kgu0h.py\", line 56, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0,\
    \ reverse=True)[0]\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3180s5bp.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp3180s5bp.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp3180s5bp.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn1fer2vs.py\", line\
    \ 305, in <module>\n    test_check()\n  File \"/tmp/tmpn1fer2vs.py\", line 303,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpn1fer2vs.py\", line 293, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0)[0]\n\
    \    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp68ujedv9.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp68ujedv9.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp68ujedv9.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbp_u55ch.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpbp_u55ch.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpbp_u55ch.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0,\
    \ reverse=True)\n    \ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfmvispew.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpfmvispew.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpfmvispew.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_values = []\n    smallest_value_index\
    \ = []\n    \n    for index, value in enumerate(arr):\n        if value % 2 ==\
    \ 0:\n            even_values.append(value)\n            smallest_values.append(value)\n\
    \            smallest_value_index.append(index)\n    \n    if len(even_values)\
    \ == 0:\n        return []\n    \n    smallest_values.sort()\n    smallest_value_index.sort()\n\
    \    \n    smallest_value_index = smallest_value_index[0]\n    \n    return smallest_values[smallest_value_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt3ij_mco.py\", line\
    \ 71, in <module>\n    test_check()\n  File \"/tmp/tmpt3ij_mco.py\", line 69,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpt3ij_mco.py\", line 59, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2, reverse=True)[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeygyfqss.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpeygyfqss.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpeygyfqss.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: (x%2, x))[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyg2qcfo2.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpyg2qcfo2.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpyg2qcfo2.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = 0\n    smallest_index\
    \ = 0\n    \n    for index, value in enumerate(arr):\n        if value % 2 ==\
    \ 0:\n            even_values.append(value)\n            if value < smallest_value:\n\
    \                smallest_value = value\n                smallest_index = index\n\
    \    \n    if even_values:\n        smallest_value = min(even_values)\n      \
    \  smallest_index = even_values.index(smallest_value)\n    \n    return [smallest_value,\
    \ smallest_index]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmn01sezs.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmpmn01sezs.py\", line 66,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpmn01sezs.py\", line 57, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    even_values = []\n    smallest_value = 0\n  \
    \  smallest_index = 0\n    \n    for index, value in enumerate(arr):\n       \
    \ if value % 2 == 0:\n            even_values.append(value)\n            if value\
    \ < smallest_value:\n                smallest_value = value\n                smallest_index\
    \ = index\n    \n    if len(even_values) == 0:\n        return []\n    \n    if\
    \ smallest_value == 0:\n        return even_values\n    \n    smallest_value_index\
    \ = -1\n    \n    for index, value in enumerate(even_values):\n        if value\
    \ == smallest_value:\n            smallest_value_index = index\n    \n    return\
    \ [smallest_value, smallest_value_index]\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpbqpsvwxv.py\", line 63\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if smallest_value is None:\n        return\
    \ []\n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n \
    \   assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = 0\n    smallest_index\
    \ = 0\n    \n    for index, value in enumerate(arr):\n        if value % 2 ==\
    \ 0:\n            even_values.append(value)\n            if value < smallest_value:\n\
    \                smallest_value = value\n                smallest_index = index\n\
    \    \n    if even_values:\n        return even_values.index(smallest_value),\
    \ smallest_index\n    else:\n        return [], 0\n\ndef check(candidate):\n \
    \   assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprcn7pfhv.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmprcn7pfhv.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmprcn7pfhv.py\", line 55, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\n  File \"/tmp/tmprcn7pfhv.py\"\
    , line 50, in pluck\n    return even_values.index(smallest_value), smallest_index\n\
    ValueError: 0 is not in list\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if even_values:\n        return\
    \ even_values.index(smallest_value), smallest_index\n    else:\n        return\
    \ [], None\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvv590gg8.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmpvv590gg8.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpvv590gg8.py\", line 55, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2\
    \ == 0, reverse=True)\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm195c9uo.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpm195c9uo.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpm195c9uo.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0,\
    \ reverse=True)\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmbmn3_5z.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpmbmn3_5z.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpmbmn3_5z.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = 0\n    smallest_index\
    \ = 0\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n \
    \           even_values.append(value)\n            if value < smallest_value:\n\
    \                smallest_value = value\n                smallest_index = index\n\
    \    if even_values:\n        return even_values.index(smallest_value), smallest_index\n\
    \    else:\n        return [], 0\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmyok53k8.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpmyok53k8.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpmyok53k8.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\n  File \"/tmp/tmpmyok53k8.py\"\
    , line 48, in pluck\n    return even_values.index(smallest_value), smallest_index\n\
    ValueError: 0 is not in list\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if even_values:\n        return\
    \ even_values.index(smallest_value), smallest_index\n    else:\n        return\
    \ [], None\n    \n    \ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptf5wtb8j.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmptf5wtb8j.py\", line 66,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmptf5wtb8j.py\", line 56, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    even_values = []\n    \n    for index, value\
    \ in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n\
    \    \n    if len(even_values) == 0:\n        return []\n    \n    even_values.sort()\n\
    \    \n    smallest_value = even_values[0]\n    smallest_index = 0\n    \n   \
    \ for index, value in enumerate(even_values):\n        if value == smallest_value:\n\
    \            smallest_index = index\n    \n    return [smallest_value, smallest_index]\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpwbone5e_.py\", line 58\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    even_values = []\n    smallest_value = None\n\
    \    smallest_index = None\n    \n    for index, value in enumerate(arr):\n  \
    \      if value % 2 == 0:\n            even_values.append(value)\n           \
    \ if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    \n    if even_values:\n\
    \        return even_values.index(smallest_value), smallest_index\n    else:\n\
    \        return [], None\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8s_vwf8t.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmp8s_vwf8t.py\", line 66,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp8s_vwf8t.py\", line 56, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0,\
    \ reverse=True)[0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu2magtjw.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpu2magtjw.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpu2magtjw.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if even_values:\n        return even_values.index(smallest_value),\
    \ smallest_index\n    else:\n        return [], None\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpibmmwjd2.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpibmmwjd2.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpibmmwjd2.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if smallest_value is None:\n\
    \        return []\n    else:\n        return [smallest_value, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0,\
    \ reverse=False)[0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpznpdo2vw.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpznpdo2vw.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpznpdo2vw.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if smallest_value is None:\n\
    \        return []\n    else:\n        return [smallest_value, smallest_index]\n\
    \    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0,\
    \ reverse=True)[0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkl1khzob.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpkl1khzob.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkl1khzob.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0,\
    \ reverse=True)[0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8zg7wt87.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp8zg7wt87.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp8zg7wt87.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if smallest_value is None:\n\
    \        return []\n    else:\n        return [smallest_value, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    even_values = []\n    smallest_value = None\n\
    \    smallest_index = None\n    \n    for index, value in enumerate(arr):\n  \
    \      if value % 2 == 0:\n            even_values.append(value)\n           \
    \ if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    \n    if even_values:\n\
    \        return even_values.index(smallest_value), smallest_index\n    else:\n\
    \        return [], None\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7iqlour6.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmp7iqlour6.py\", line 66,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp7iqlour6.py\", line 56, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5bkjuvjz.py\", line\
    \ 305, in <module>\n    test_check()\n  File \"/tmp/tmp5bkjuvjz.py\", line 303,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp5bkjuvjz.py\", line 293, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2)[0]\n\
    \    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk6lrjx73.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpk6lrjx73.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpk6lrjx73.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = 0\n    smallest_index\
    \ = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n    \
    \        even_values.append(arr[i])\n            if arr[i] < smallest_value:\n\
    \                smallest_value = arr[i]\n                smallest_index = i\n\
    \    \n    if len(even_values) == 0:\n        return []\n    \n    smallest_value\
    \ = min(even_values)\n    smallest_index = even_values.index(smallest_value)\n\
    \    \n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcbmoh22c.py\", line\
    \ 70, in <module>\n    test_check()\n  File \"/tmp/tmpcbmoh22c.py\", line 68,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpcbmoh22c.py\", line 59, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: (x%2, x))[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy_4ttpyb.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpy_4ttpyb.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpy_4ttpyb.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2\
    \ == 0)[0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1btvm07l.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp1btvm07l.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp1btvm07l.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2)[0]\n\
    \    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv3zt_3ba.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpv3zt_3ba.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpv3zt_3ba.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_values = []\n    smallest_value_index\
    \ = []\n    \n    for index, value in enumerate(arr):\n        if value % 2 ==\
    \ 0:\n            even_values.append(value)\n            smallest_values.append(value)\n\
    \            smallest_value_index.append(index)\n    \n    if len(even_values)\
    \ == 0:\n        return smallest_values\n    \n    smallest_values.sort()\n  \
    \  smallest_value_index.sort()\n    \n    smallest_value_index = [index for index,\
    \ value in enumerate(smallest_value_index) if value == even_values[0]]\n    \n\
    \    if len(smallest_value_index) == 0:\n        return smallest_values\n    \n\
    \    smallest_value_index = smallest_value_index[0]\n    \n    return smallest_values[smallest_value_index]\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp_nhuxji_.py\", line 62\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    # Your code here\n    \n    return []\n</cell>\n<text>\nTest Your Solution\n\
    \n</text>\n<cell>\narr = [4,2,3]\nsolution = pluck(arr)\nprint(solution)\n</cell>\n\
    <text>\nExpected Output: [2, 1]\n\n</text>\n<text>\nTest Your Code\n\n</text>\n\
    <cell>\narr = [1,2,3]\nsolution = pluck(arr)\nprint(solution)\n</cell>\n<text>\n\
    Expected Output: [2, 1]\n\n</text>\n<text>\nTest Your Code\n\n</text>\n<cell>\n\
    arr = []\nsolution = pluck(arr)\nprint(solution)\n</cell>\n<text>\nExpected Output:\
    \ []\n\n</text>\n<text>\nTest Your Code\n\n</text>\n<cell>\narr = [5, 0, 3, 0,\
    \ 4, 2]\nsolution = pluck(arr)\nprint(solution)\n</cell>\n<text>\nExpected Output:\
    \ [0, 1]\n\n</text>\n<text>\nChallenge 3\n\n</text>\n<text>\nGiven a binary tree\
    \ and a node value, swap the node value with the node in the tree that has smallest\
    \ value.\n\nExample 1:\n    Input: [5,3,6,2,4,null,null,7,9,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpdw4xy3h6.py\", line 41\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    if len(arr) == 0:\n        return even_values\n    \n    for\
    \ index, value in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n\
    \            if smallest_value is None:\n                smallest_value = value\n\
    \                smallest_index = index\n            elif value < smallest_value:\n\
    \                smallest_value = value\n                smallest_index = index\n\
    \    \n    if smallest_value is None:\n        return even_values\n    \n    even_values.remove(smallest_value)\n\
    \    even_values.append(smallest_value)\n    \n    return even_values\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc4pmpbbt.py\", line\
    \ 76, in <module>\n    test_check()\n  File \"/tmp/tmpc4pmpbbt.py\", line 74,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpc4pmpbbt.py\", line 64, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = 0\n    smallest_index\
    \ = 0\n    \n    for index, value in enumerate(arr):\n        if value % 2 ==\
    \ 0:\n            even_values.append(value)\n            if value < smallest_value:\n\
    \                smallest_value = value\n                smallest_index = index\n\
    \    \n    if even_values:\n        return even_values.index(smallest_value),\
    \ smallest_index\n    else:\n        return [], 0\n\ndef check(candidate):\n \
    \   assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy4v5hb9e.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmpy4v5hb9e.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpy4v5hb9e.py\", line 55, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\n  File \"/tmp/tmpy4v5hb9e.py\"\
    , line 50, in pluck\n    return even_values.index(smallest_value), smallest_index\n\
    ValueError: 0 is not in list\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if even_values:\n        return even_values.index(smallest_value),\
    \ smallest_index\n    else:\n        return [], None\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx_u6ki9q.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpx_u6ki9q.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpx_u6ki9q.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if smallest_value is None:\n\
    \        return []\n    else:\n        return [smallest_value, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if even_values:\n        return even_values.index(smallest_value),\
    \ smallest_index\n    else:\n        return [], None\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm7ga8fsa.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpm7ga8fsa.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpm7ga8fsa.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2\
    \ == 0, reverse=True)\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb13oax6y.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpb13oax6y.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpb13oax6y.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2)[0]\n\
    \    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfnltx0cn.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpfnltx0cn.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpfnltx0cn.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0)[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm8t9n8z2.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpm8t9n8z2.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpm8t9n8z2.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if even_values:\n        return\
    \ even_values.index(smallest_value), smallest_index\n    else:\n        return\
    \ [], None\n    \n    \ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp45iyrdk9.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmp45iyrdk9.py\", line 66,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp45iyrdk9.py\", line 56, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprjn7sgrj.py\", line\
    \ 305, in <module>\n    test_check()\n  File \"/tmp/tmprjn7sgrj.py\", line 303,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmprjn7sgrj.py\", line 293, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcr7n5m48.py\", line\
    \ 305, in <module>\n    test_check()\n  File \"/tmp/tmpcr7n5m48.py\", line 303,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpcr7n5m48.py\", line 293, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3smch2s2.py\", line\
    \ 305, in <module>\n    test_check()\n  File \"/tmp/tmp3smch2s2.py\", line 303,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp3smch2s2.py\", line 293, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if smallest_value is None:\n\
    \        return []\n    \n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmcikm49w.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpmcikm49w.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpmcikm49w.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = 0\n    smallest_index\
    \ = 0\n    \n    for index, value in enumerate(arr):\n        if value % 2 ==\
    \ 0:\n            even_values.append(value)\n            if value < smallest_value:\n\
    \                smallest_value = value\n                smallest_index = index\n\
    \    \n    if even_values:\n        return even_values[smallest_index]\n    else:\n\
    \        return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt2ea92lv.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmpt2ea92lv.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpt2ea92lv.py\", line 55, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0,\
    \ reverse=True)\n    \ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7k5e2aw.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpk7k5e2aw.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpk7k5e2aw.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2, reverse=True)\
    \ # sort by even number\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxti8x9jp.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpxti8x9jp.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpxti8x9jp.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2, reverse=True)[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr26ddpb9.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpr26ddpb9.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpr26ddpb9.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_values = []\n    smallest_value_index\
    \ = []\n    \n    for index, value in enumerate(arr):\n        if value % 2 ==\
    \ 0:\n            even_values.append(value)\n            smallest_values.append(value)\n\
    \            smallest_value_index.append(index)\n    \n    if len(even_values)\
    \ == 0:\n        return smallest_values\n    \n    smallest_values.sort()\n  \
    \  smallest_value_index.sort()\n    \n    smallest_value = smallest_values[0]\n\
    \    smallest_value_index = smallest_value_index[0]\n    \n    if smallest_value\
    \ % 2 == 0:\n        return smallest_value_index\n    else:\n        return smallest_values\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbo_me85n.py\", line\
    \ 75, in <module>\n    test_check()\n  File \"/tmp/tmpbo_me85n.py\", line 73,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpbo_me85n.py\", line 63, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0,\
    \ reverse=False)[:2]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_u_hg3xs.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp_u_hg3xs.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp_u_hg3xs.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if smallest_value is None:\n\
    \        return []\n    \n    return [smallest_value, smallest_index]\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n   \
    \ assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert\
    \ candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5,\
    \ 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7,\
    \ 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp01rvsudd.py\", line 53\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0)[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprtzl4a0d.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmprtzl4a0d.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmprtzl4a0d.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2)[0]\n\
    \    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbmq6vkke.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpbmq6vkke.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpbmq6vkke.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0,\
    \ reverse=True)\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpky_r1s30.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpky_r1s30.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpky_r1s30.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0,\
    \ reverse=True)\n    \n    \ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1fsexvls.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp1fsexvls.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp1fsexvls.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0,\
    \ reverse=True)\n    \ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprdniqbsd.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmprdniqbsd.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmprdniqbsd.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0)[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpae4rlh54.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpae4rlh54.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpae4rlh54.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    # Your code here\n    \n    return []\n    \n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp700q8m1o.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmp700q8m1o.py\", line 54,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp700q8m1o.py\", line 44, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgnchnt_3.py\", line\
    \ 305, in <module>\n    test_check()\n  File \"/tmp/tmpgnchnt_3.py\", line 303,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpgnchnt_3.py\", line 293, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if smallest_value is None:\n\
    \        return []\n    else:\n        return [smallest_value, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if even_values:\n        return even_values.index(smallest_value),\
    \ smallest_index\n    else:\n        return [], None\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmk2ouy5q.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpmk2ouy5q.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpmk2ouy5q.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0,\
    \ reverse=True)[0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp97_eo2dt.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp97_eo2dt.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp97_eo2dt.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2\
    \ == 0, reverse=True)\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv37w77vz.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpv37w77vz.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpv37w77vz.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if smallest_value is None:\n        return\
    \ []\n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n \
    \   assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n \
    \           even_values.append(arr[i])\n            \n    if len(even_values)\
    \ == 0:\n        return []\n    \n    if len(even_values) == 1:\n        smallest_value\
    \ = even_values[0]\n        smallest_index = 0\n    else:\n        smallest_value\
    \ = min(even_values)\n        smallest_index = even_values.index(smallest_value)\n\
    \    \n    return [ smallest_value, smallest_index ]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1u5i_f10.py\", line\
    \ 71, in <module>\n    test_check()\n  File \"/tmp/tmp1u5i_f10.py\", line 69,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp1u5i_f10.py\", line 60, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb5j2xeca.py\", line\
    \ 307, in <module>\n    test_check()\n  File \"/tmp/tmpb5j2xeca.py\", line 305,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpb5j2xeca.py\", line 295, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = 0\n    smallest_index\
    \ = 0\n    \n    for index, value in enumerate(arr):\n        if value % 2 ==\
    \ 0:\n            even_values.append(value)\n            if value < smallest_value:\n\
    \                smallest_value = value\n                smallest_index = index\n\
    \    \n    if even_values == []:\n        return []\n    \n    if smallest_index\
    \ == 0:\n        return even_values\n    \n    return even_values[smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7j6h3gu9.py\", line\
    \ 70, in <module>\n    test_check()\n  File \"/tmp/tmp7j6h3gu9.py\", line 68,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp7j6h3gu9.py\", line 58, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None:\n\
    \                smallest_value = value\n                smallest_index = index\n\
    \            elif value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    if smallest_value is None:\n    \
    \    return []\n    else:\n        return [smallest_value, smallest_index]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr)[:2]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3qobniw7.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp3qobniw7.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp3qobniw7.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps5qi35pv.py\", line\
    \ 305, in <module>\n    test_check()\n  File \"/tmp/tmps5qi35pv.py\", line 303,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmps5qi35pv.py\", line 293, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp14bx23wf.py\", line\
    \ 305, in <module>\n    test_check()\n  File \"/tmp/tmp14bx23wf.py\", line 303,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp14bx23wf.py\", line 293, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2\
    \ == 0)[0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp59speac6.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp59speac6.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp59speac6.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    even_values = []\n    \n    for index, value in enumerate(arr):\n \
    \       if value % 2 == 0:\n            even_values.append(value)\n    \n    if\
    \ len(even_values) == 0:\n        return []\n    \n    smallest_value = min(even_values)\n\
    \    smallest_index = even_values.index(smallest_value)\n    \n    return [smallest_value,\
    \ smallest_index]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9al8mipg.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmp9al8mipg.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp9al8mipg.py\", line 54, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2, reverse=True)\
    \ # sort by even number\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjfl8u9_2.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpjfl8u9_2.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpjfl8u9_2.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2)[0]\n\
    \    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptyo_6gy6.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmptyo_6gy6.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmptyo_6gy6.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    even_values = []\n    smallest_value = None\n    smallest_index = None\n\
    \    \n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n \
    \           even_values.append(value)\n            if smallest_value is None or\
    \ value < smallest_value:\n                smallest_value = value\n          \
    \      smallest_index = index\n    \n    if smallest_value is None:\n        return\
    \ even_values\n    else:\n        return [smallest_value, smallest_index]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    even_values = []\n    smallest_value = None\n\
    \    smallest_index = None\n    \n    for index, value in enumerate(arr):\n  \
    \      if value % 2 == 0:\n            even_values.append(value)\n           \
    \ if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    \n    if smallest_value\
    \ is None:\n        return [] \n    \n    return [smallest_value, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2\
    \ == 0)[0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw1udy1au.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpw1udy1au.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpw1udy1au.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwy_qikd2.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpwy_qikd2.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpwy_qikd2.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    even_values = []\n    smallest_value = None\n\
    \    smallest_index = None\n    \n    for index, value in enumerate(arr):\n  \
    \      if value % 2 == 0:\n            even_values.append(value)\n           \
    \ if smallest_value is None or value < smallest_value:\n                smallest_value\
    \ = value\n                smallest_index = index\n    \n    if even_values:\n\
    \        return even_values.index(smallest_value), smallest_index\n    else:\n\
    \        return [], None\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6to74ap_.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmp6to74ap_.py\", line 66,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp6to74ap_.py\", line 56, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if even_values:\n        return\
    \ even_values.index(smallest_value), smallest_index\n    else:\n        return\
    \ [], None\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_do66f1l.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmp_do66f1l.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp_do66f1l.py\", line 55, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2, reverse=False)[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp90988kse.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp90988kse.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp90988kse.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None:\n\
    \                smallest_value = value\n                smallest_index = index\n\
    \            elif value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    if even_values:\n        smallest_value\
    \ = min(even_values)\n        smallest_index = even_values.index(smallest_value)\n\
    \    return [smallest_value, smallest_index]\n</cell>\n<text>\nLet's test your\
    \ implementation. Your output should be a list of two integers [4, 2]. Make sure\
    \ you use the correct input values in each test case. Your output should be a\
    \ list of two integers [4, 2]. Make sure you use the correct input values in each\
    \ test case. Your output should be a list of two integers [4, 2]. Make sure you\
    \ use the correct input values in each test case.\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpg34biogz.py\", line 54\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2, reverse=False)[:2]\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp_d6pyt33.py\", line 40\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if smallest_value is None:\n        return\
    \ []\n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n \
    \   assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0,\
    \ reverse=True)\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgdrki7ou.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpgdrki7ou.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpgdrki7ou.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0)[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz0_qawyx.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpz0_qawyx.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpz0_qawyx.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if even_values:\n        return even_values.index(smallest_value),\
    \ smallest_index\n    return []\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_mymw32.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmpg_mymw32.py\", line 62,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpg_mymw32.py\", line 52, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = 0\n    smallest_index\
    \ = 0\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n \
    \           even_values.append(value)\n            if value < smallest_value:\n\
    \                smallest_value = value\n                smallest_index = index\n\
    \    return even_values[smallest_index], smallest_index\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpesx8iq0p.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpesx8iq0p.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpesx8iq0p.py\", line 50, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n \
    \           even_values.append(arr[i])\n            \n    if len(even_values)\
    \ == 0:\n        return [] \n    \n    smallest_value = min(even_values)\n   \
    \ smallest_index = even_values.index(smallest_value)\n    \n    return [ smallest_value,\
    \ smallest_index ]\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4yfnwy5a.py\", line 53\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if smallest_value is None:\n\
    \        return []\n    else:\n        return [smallest_value, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0)[0]\n\
    \    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpev7pnik9.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpev7pnik9.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpev7pnik9.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    \n    # Your code here\n    \n    return sorted(arr)[:2]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3_fa1i9f.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp3_fa1i9f.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp3_fa1i9f.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvw6nopbl.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpvw6nopbl.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpvw6nopbl.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_values = []\n    smallest_value_index\
    \ = []\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            smallest_values.append(value)\n\
    \            smallest_value_index.append(index)\n    if len(even_values) == 0:\n\
    \        return smallest_values\n    else:\n        smallest_values.sort()\n \
    \       smallest_value_index.sort()\n        smallest_value_index.reverse()\n\
    \        smallest_value_index.pop()\n        return smallest_values[smallest_value_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc3u3rb9q.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmpc3u3rb9q.py\", line 66,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpc3u3rb9q.py\", line 56, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\n  File \"/tmp/tmpc3u3rb9q.py\"\
    , line 53, in pluck\n    return smallest_values[smallest_value_index]\nTypeError:\
    \ list indices must be integers or slices, not list\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if smallest_value is None:\n\
    \        return []\n    else:\n        return [smallest_value, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0)[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4xu229m2.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp4xu229m2.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp4xu229m2.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if even_values:\n        return even_values.index(smallest_value),\
    \ smallest_index\n    else:\n        return [], None\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdyvkt36p.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpdyvkt36p.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpdyvkt36p.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiyn5ybbr.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpiyn5ybbr.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpiyn5ybbr.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2)[0]\n\
    \    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmporp4ly8q.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmporp4ly8q.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmporp4ly8q.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = 0\n    smallest_index\
    \ = 0\n    \n    for index, value in enumerate(arr):\n        if value % 2 ==\
    \ 0:\n            even_values.append(value)\n            if value < smallest_value:\n\
    \                smallest_value = value\n                smallest_index = index\n\
    \    \n    if len(even_values) == 0:\n        return []\n    \n    if smallest_index\
    \ == 0:\n        return even_values\n    else:\n        return even_values[smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplypff058.py\", line\
    \ 70, in <module>\n    test_check()\n  File \"/tmp/tmplypff058.py\", line 68,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmplypff058.py\", line 58, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: x % 2 == 0,\
    \ reverse=True)[0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz8qefmof.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpz8qefmof.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpz8qefmof.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    even_values = []\n    smallest_values = []\n\
    \    smallest_value_index = []\n    \n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            even_values.append(value)\n         \
    \   smallest_values.append(value)\n            smallest_value_index.append(index)\n\
    \    \n    if len(even_values) == 0:\n        return []\n    \n    smallest_values.sort()\n\
    \    smallest_value_index.sort()\n    \n    smallest_value_index = [smallest_value_index[i]\
    \ for i in smallest_value_index]\n    \n    smallest_value_index.sort()\n    \n\
    \    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value_index]\n\
    \    \n    smallest_value_index = [smallest_value_index[i] for i in smallest_value\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmph1_ythyt.py\", line 100\n    def check(candidate):\n \
    \   ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt5zja5zv.py\", line\
    \ 305, in <module>\n    test_check()\n  File \"/tmp/tmpt5zja5zv.py\", line 303,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpt5zja5zv.py\", line 293, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    \n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            even_values.append(value)\n            if smallest_value\
    \ is None or value < smallest_value:\n                smallest_value = value\n\
    \                smallest_index = index\n    \n    if smallest_value is None:\n\
    \        return []\n    else:\n        return [smallest_value, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Your code here\n    even_values = []\n    smallest_value = None\n    smallest_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            even_values.append(value)\n            if smallest_value is None\
    \ or value < smallest_value:\n                smallest_value = value\n       \
    \         smallest_index = index\n    if smallest_value is None:\n        return\
    \ []\n    return [smallest_value, smallest_index]\n\ndef check(candidate):\n \
    \   assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
