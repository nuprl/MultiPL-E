name: HumanEval_103_rounded_avg
language: python
prompt: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
  \ int]:\n    \"\"\"You are given two positive integers n and m, and your task is\
  \ to compute the\n    average of the integers from n through m (including n and\
  \ m). \n    Round the answer to the nearest integer and convert that to binary.\n\
  \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
  \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n\
  \    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
  \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
  \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
  \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
  \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
  \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
  \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
  \    check(rounded_avg)\n\ntest_check()\n"
completions: ["    if n > m:\n        return -1\n    \n    binary = bin(n + (m - n)\
    \ % m)[2:]\n    \n    binary = binary.zfill(len(binary))\n    \n    return int(binary,\
    \ 2)\n", "    if n >= m:\n        return \"-1\"\n    else:\n        return bin(n+m).replace('0b',\
    \ '')\n", "    \n    if n >= m:\n        return -1\n    \n    avg = (n + m) //\
    \ 2\n    \n    if avg >= 10:\n        avg = 10\n    \n    return bin(avg)[2:]\n",
  "    \n    if n >= m:\n        return -1\n    \n    avg = n + (m - n) // 2\n   \
    \ \n    return bin(avg)[2:]\n", "    if n >= m:\n        return -1\n    \n   \
    \ binary = bin(n+m)[2:]\n    \n    if int(binary[0]) == '1':\n        return binary\n\
    \    else:\n        return binary[1:]\n", "    if n >= m:\n        return -1\n\
    \    \n    binary = bin(n+m)[2:]\n    \n    decimal = int(binary)\n    \n    decimal\
    \ = decimal // m\n    \n    decimal = decimal % m\n    \n    decimal = decimal\
    \ + n\n    \n    decimal = decimal * 2\n    \n    decimal = decimal.bit_length()\n\
    \    \n    decimal = decimal // 2\n    \n    decimal = decimal + m\n    \n   \
    \ decimal = decimal * 2\n    \n    decimal = decimal.bit_length()\n    \n    decimal\
    \ = decimal // 2\n    \n    decimal = decimal + n\n    \n    decimal = decimal\
    \ * 2\n    \n    decimal = decimal.bit_length()\n    \n    decimal = decimal //\
    \ 2\n    \n    decimal = decimal + m\n    \n    decimal = decimal * 2\n    \n\
    \    decimal = decimal.bit_length()\n    \n    decimal = decimal // 2\n    \n\
    \    decimal = decimal + n\n    \n    decimal = decimal * 2\n    \n    decimal\
    \ = decimal.bit_length()\n    \n    decimal = decimal // 2\n    \n    decimal\
    \ = decimal + m\n    \n    decimal = decimal * 2\n    \n    decimal = decimal.bit_length()\n\
    \    \n    decimal = decimal // 2\n    \n    decimal = decimal + n\n    \n   \
    \ decimal = decimal * 2\n    \n    decimal = decimal.bit_length()\n    \n    decimal\
    \ = decimal // 2\n    \n    decimal = decimal + m\n    \n    decimal = decimal\
    \ * 2\n    \n    decimal = decimal.bit_length()\n    \n    decimal = decimal //\
    \ 2\n    \n    decimal = decimal + n\n    \n    decimal = decimal * 2\n    \n\
    \    decimal = decimal.bit_length()\n    \n    decimal = decimal // 2\n    \n\
    \    decimal = decimal + m\n    \n    decimal = decimal * 2\n    \n    decimal\
    \ = decimal.bit_length()\n    \n    decimal = decimal // 2\n    \n    decimal\
    \ = decimal + n\n    \n    decimal = decimal * 2\n    \n    decimal = decimal.bit_length()\n\
    \    \n    decimal = decimal // 2\n    \n    decimal = decimal + m\n    \n   \
    \ decimal = decimal * 2\n    \n    decimal = decimal.bit_length()\n    \n    decimal\
    \ = decimal // 2\n    \n    decimal = decimal + n\n    \n    decimal = decimal\
    \ * 2\n    \n    decimal", "    if n >= m:\n        return -1\n    \n    avg =\
    \ n + (m - n) // 2\n    binary = bin(avg)[2:]\n    \n    binary_length = len(binary)\n\
    \    \n    if binary_length == 1:\n        return binary\n    \n    binary_length\
    \ -= 1\n    \n    binary_string = \"\"\n    \n    while binary_length > 0:\n \
    \       binary_string += binary[binary_length]\n        binary_length -= 1\n \
    \   \n    return binary_string\n", "    if n > m:\n        return -1\n    \n \
    \   binary = bin(n + (m - n) // 2)\n    binary = binary.lstrip('-0b') \n    \n\
    \    return int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n    binary\
    \ = bin(n+m)[2:]\n    \n    if len(binary) < len(str(m)):\n        binary = binary\
    \ + ('0' * (len(str(m)) - len(binary)))\n    \n    return int(binary, 2)\n", " \
    \   if n >= m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n    \n \
    \   if binary.startswith('0b'):\n        binary = binary[2:]\n    \n    binary\
    \ = int(binary, 2)\n    \n    if binary == n:\n        return '0b' + str(binary)\n\
    \    \n    if binary == m:\n        return '0b' + str(binary)\n    \n    return\
    \ binary\n", "    if n >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n\
    \    \n    decimal = int(binary)\n    \n    decimal = decimal // m\n    \n   \
    \ decimal = decimal % m\n    \n    decimal = decimal + n\n    \n    decimal =\
    \ decimal * 2\n    \n    decimal = decimal.bit_length()\n    \n    decimal = decimal\
    \ // 2\n    \n    decimal = decimal * 2\n    \n    decimal = decimal.bit_length()\n\
    \    \n    decimal = decimal // 2\n    \n    decimal = decimal * 2\n    \n   \
    \ decimal = decimal.bit_length()\n    \n    decimal = decimal // 2\n    \n   \
    \ decimal = decimal * 2\n    \n    decimal = decimal.bit_length()\n    \n    decimal\
    \ = decimal // 2\n    \n    decimal = decimal * 2\n    \n    decimal = decimal.bit_length()\n\
    \    \n    decimal = decimal // 2\n    \n    decimal = decimal * 2\n    \n   \
    \ decimal = decimal.bit_length()\n    \n    decimal = decimal // 2\n    \n   \
    \ decimal = decimal * 2\n    \n    decimal = decimal.bit_length()\n    \n    decimal\
    \ = decimal // 2\n    \n    decimal = decimal * 2\n    \n    decimal = decimal.bit_length()\n\
    \    \n    decimal = decimal // 2\n    \n    decimal = decimal * 2\n    \n   \
    \ decimal = decimal.bit_length()\n    \n    decimal = decimal // 2\n    \n   \
    \ decimal = decimal * 2\n    \n    decimal = decimal.bit_length()\n    \n    decimal\
    \ = decimal // 2\n    \n    decimal = decimal * 2\n    \n    decimal = decimal.bit_length()\n\
    \    \n    decimal = decimal // 2\n    \n    decimal = decimal * 2\n    \n   \
    \ decimal = decimal.bit_length()\n    \n    decimal = decimal // 2\n    \n   \
    \ decimal = decimal * 2\n    \n    decimal = decimal.bit_length()\n    \n    decimal\
    \ = decimal // 2\n    \n    decimal = decimal * 2\n    \n    decimal = decimal.bit_length()\n\
    \    \n    decimal = decimal // 2\n    \n    decimal = decimal * 2\n    \n   \
    \ decimal = decimal.bit_length()\n    \n    decimal = decimal // 2\n    \n   \
    \ decimal = decimal * 2\n    \n    decimal = decimal.bit_length()\n    \n    decimal\
    \ = decimal // 2\n    \n    decimal = decimal * 2\n", "    if n > m:\n       \
    \ return -1\n    \n    binary = bin(n + (m - n) // 2)[2:]\n    \n    binary_length\
    \ = len(binary)\n    \n    binary_string = \"\"\n    \n    for i in range(binary_length):\n\
    \        binary_string += binary[i]\n    \n    return int(binary_string, 2)\n",
  "    \n    if n < m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n  \
    \  binary = bin(avg)\n    \n    binary = binary.lstrip('0b')\n    \n    return\
    \ int(binary, 2)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(10,\
    \ 20)\n</cell>\n<cell>\nrounded_avg(20, 33)\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that takes in a positive integer and returns the number of digits\
    \ in the binary representation of that integer.\n\n\n</text>\n<cell>", "    if\
    \ n >= m:\n        return -1\n    \n    avg = n + (m - n) // 2\n    binary = bin(avg)[2:]\n\
    \    \n    if len(binary) < len(str(avg)):\n        binary = binary + ('0' * (len(str(avg))\
    \ - len(binary)))\n    \n    return binary\n", "    if n >= m:\n        return\
    \ \"-1\"\n    \n    binary = bin(n)[2:]\n    \n    if len(binary) < len(str(m)):\n\
    \        binary = binary + bin(m)[2:]\n        \n    binary = binary[::-1]\n \
    \   \n    binary = \"0b\" + binary\n    \n    binary = int(binary, 2)\n    \n\
    \    binary = binary / 2\n    \n    binary = int(binary)\n    \n    return binary\n\
    \n", "    \n    if n >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n\
    \    \n    binary = binary.zfill(m)\n    \n    binary = binary[::-1]\n    \n \
    \   binary = binary.zfill(m)\n    \n    binary = binary[::-1]\n    \n    binary\
    \ = binary.zfill(m)\n    \n    binary = binary[::-1]\n    \n    binary = binary.zfill(m)\n\
    \    \n    binary = binary[::-1]\n    \n    binary = binary.zfill(m)\n    \n \
    \   binary = binary[::-1]\n    \n    binary = binary.zfill(m)\n    \n    binary\
    \ = binary[::-1]\n    \n    binary = binary.zfill(m)\n    \n    binary = binary[::-1]\n\
    \    \n    binary = binary.zfill(m)\n    \n    binary = binary[::-1]\n    \n \
    \   binary = binary.zfill(m)\n    \n    binary = binary[::-1]\n    \n    binary\
    \ = binary.zfill(m)\n    \n    binary = binary[::-1]\n    \n    binary = binary.zfill(m)\n\
    \    \n    binary = binary[::-1]\n    \n    binary = binary.zfill(m)\n    \n \
    \   binary = binary[::-1]\n    \n    binary = binary.zfill(m)\n    \n    binary\
    \ = binary[::-1]\n    \n    binary = binary.zfill(m)\n    \n    binary = binary[::-1]\n\
    \    \n    binary = binary.zfill(m)\n    \n    binary = binary[::-1]\n    \n \
    \   binary = binary.zfill(m)\n    \n    binary = binary[::-1]\n    \n    binary\
    \ = binary.zfill(m)\n    \n    binary = binary[::-1]\n    \n    binary = binary.zfill(m)\n\
    \    \n    binary = binary[::-1]\n    \n    binary = binary.zfill(m)\n    \n \
    \   binary = binary[::-1]\n    \n    binary = binary.zfill(m)\n    \n    binary\
    \ = binary[::-1]\n    \n    binary = binary.zfill(m)\n    \n    binary = binary[::-1]\n\
    \    \n    binary = binary.zfill(m)\n    \n    binary = binary[::-1]\n    \n \
    \   binary = binary.zfill(m)\n    \n    binary = binary[::-1]\n    \n    binary\
    \ = binary.zfill(m)\n    \n    binary = binary[::-1]\n    \n    binary = binary.zfill(m)\n\
    \    \n    binary = binary[::-1]\n    \n    binary = binary.zfill(m)\n    \n \
    \   bin", "    if n > m:\n        return -1\n    \n    avg = n + (m // 2)\n  \
    \  binary = bin(avg)[2:]\n    \n    if len(binary) < len(str(avg)):\n        binary\
    \ = binary + '0' * (len(str(avg)) - len(binary))\n    \n    return binary\n",
  "    \n    if n>m:\n        return -1\n    \n    sum = 0\n    \n    for i in range(n,\
    \ m):\n        sum += i\n    \n    avg = sum / 2\n    \n    binary = bin(avg)[2:]\n\
    \    \n    return int(binary, 2)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n\
    <cell>\nrounded_avg(20, 33)\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes in a list of integers and returns the sum of the integers in the list.\
    \ \nIf the list is empty, return 0.\nIf the list has one element, return that\
    \ element.\nIf the list has more than one element, return the sum of the elements\
    \ in the list.\nExamples:\nsum([1, 2, 3]) => 6\nsum([1, 3, 5]) => 8\nsum([1, 3,\
    \ 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1,\
    \ 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\n\
    sum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5])\
    \ => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1,\
    \ 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\n\
    sum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5])\
    \ => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1,\
    \ 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\n\
    sum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5])\
    \ => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1,\
    \ 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\n\
    sum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5])\
    \ => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1,\
    \ 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, 5]) => 8\nsum([1, 3, ", "    if\
    \ n < m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n    \n    decimal\
    \ = int(binary)\n    \n    decimal = decimal + (decimal % 2)\n    \n    decimal\
    \ = decimal / 2\n    \n    decimal = decimal * 2\n    \n    decimal = decimal.bit_length()\n\
    \    \n    decimal = decimal.to_bytes(1, byteorder='big')\n    \n    decimal =\
    \ decimal.decode()\n    \n    return decimal\n", "    if n >= m:\n        return\
    \ -1\n    \n    binary = bin(n + m)[2:]\n    \n    count = 0\n    \n    for char\
    \ in binary:\n        if char == '1':\n            count += 1\n    \n    if count\
    \ == 0:\n        return -1\n    \n    return int(binary, 2)\n</cell>\n<cell>\n\
    rounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7,\
    \ 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n\
    </cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n\
    <cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\n\
    rounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7,\
    \ 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n\
    </cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n\
    <cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\n\
    rounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7,\
    \ 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n\
    </cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n\
    <cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\n\
    rounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7,\
    \ 5)\n</cell>\n<", "    if n >= m:\n        return -1\n    \n    binary = bin(n\
    \ + m)[2:]\n    \n    if int(binary[0]) == 1:\n        binary = binary[1:]\n \
    \   \n    return int(binary)\n", "    \n    if n >= m:\n        return -1\n  \
    \  \n    binary = bin(n + (m - n) % m)[2:]\n    \n    return int(binary)\n", " \
    \   \n    if n >= m:\n        return -1\n    \n    avg = n + (m - n) // 2\n  \
    \  \n    return bin(avg)[2:]\n", "    \n    if n < m:\n        return -1\n   \
    \ \n    binary = bin(n+m)[2:]\n    \n    if int(binary[0]) == 1:\n        return\
    \ binary\n    else:\n        return binary[1:]\n", "    \n    if n >= m:\n   \
    \     return -1\n    \n    avg = n + (m - n) // 2\n    \n    return bin(avg)[2:].zfill(m)\n",
  "    if n >= m:\n        return -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n\
    \    \n    binary = binary.zfill(len(binary))\n    \n    return int(binary, 2)\n",
  "    \n    if n >= m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n \
    \   return bin(avg)[2:]\n", "    if n < m:\n        return -1\n    \n    avg =\
    \ n + (m - n) // 2\n    \n    return bin(avg)[2:].zfill(m)\n", "    \n    if n\
    \ >= m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n    binary = bin(avg)[2:]\n\
    \    \n    if len(binary) < len(str(avg)):\n        binary = binary + ('0' * (len(str(avg))\
    \ - len(binary)))\n    \n    return binary\n", "    if n >= m:\n        return\
    \ -1\n    \n    binary = bin(n+m)[2:]\n    \n    decimal = int(binary)\n    \n\
    \    decimal = decimal + (decimal%2)\n    \n    decimal = decimal//2\n    \n \
    \   decimal = decimal*2\n    \n    decimal = decimal+n\n    \n    decimal = decimal//m\n\
    \    \n    decimal = decimal*m\n    \n    decimal = decimal//2\n    \n    decimal\
    \ = decimal*2\n    \n    decimal = decimal+m\n    \n    decimal = decimal//m\n\
    \    \n    decimal = decimal*m\n    \n    decimal = decimal//2\n    \n    decimal\
    \ = decimal*2\n    \n    decimal = decimal+m\n    \n    decimal = decimal//m\n\
    \    \n    decimal = decimal*m\n    \n    decimal = decimal//2\n    \n    decimal\
    \ = decimal*2\n    \n    decimal = decimal+m\n    \n    decimal = decimal//m\n\
    \    \n    decimal = decimal*m\n    \n    decimal = decimal//2\n    \n    decimal\
    \ = decimal*2\n    \n    decimal = decimal+m\n    \n    decimal = decimal//m\n\
    \    \n    decimal = decimal*m\n    \n    decimal = decimal//2\n    \n    decimal\
    \ = decimal*2\n    \n    decimal = decimal+m\n    \n    decimal = decimal//m\n\
    \    \n    decimal = decimal*m\n    \n    decimal = decimal//2\n    \n    decimal\
    \ = decimal*2\n    \n    decimal = decimal+m\n    \n    decimal = decimal//m\n\
    \    \n    decimal = decimal*m\n    \n    decimal = decimal//2\n    \n    decimal\
    \ = decimal*2\n    \n    decimal = decimal+m\n    \n    decimal = decimal//m\n\
    \    \n    decimal = decimal*m\n    \n    decimal = decimal//2\n    \n    decimal\
    \ = decimal*2\n    \n    decimal = decimal+m\n    \n    decimal = decimal//m\n\
    \    \n    decimal = decimal*m\n    \n    decimal = decimal//2\n    \n    decimal\
    \ = decimal*2\n    \n    decimal = decimal+m\n    \n    decimal = decimal//m\n\
    \    \n    decimal = decimal*m\n    \n    decimal = decimal//2\n    \n    decimal\
    \ = decimal*2\n    \n    decimal = ", "    if n >= m:\n        return -1\n   \
    \ \n    binary = bin(n + m)[2:]\n    \n    binary = binary.zfill(m)\n    \n  \
    \  return int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n    binary\
    \ = bin(n + (m - n) // 2)[2:]\n    \n    if len(binary) < n:\n        binary =\
    \ binary + '0' * (n - len(binary))\n    \n    return int(binary, 2)\n", "    if\
    \ n < m:\n        return -1\n    \n    avg = n // m\n    \n    binary = bin(avg)[2:]\n\
    \    \n    if len(binary) < n:\n        binary = binary + ('0' * (n - len(binary)))\n\
    \    \n    return int(binary, 2)\n", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    if n > m:\n        return -1\n    \n    binary\
    \ = bin(n + (m - n) % m)[2:]\n    \n    return int(binary, 2)\n", "    if n >=\
    \ m:\n        return \"-1\"\n    \n    binary = bin(n)[2:]\n    binary = binary.zfill(m)\n\
    \    \n    return int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n\
    \    binary = bin(n+m)[2:]\n    \n    length = len(binary)\n    \n    if length\
    \ == 1:\n        return binary[0]\n    \n    if length == 2:\n        return binary[0]+binary[1]\n\
    \    \n    if length == 3:\n        return binary[0]+binary[1]+binary[2]\n   \
    \ \n    if length == 4:\n        return binary[0]+binary[1]+binary[2]+binary[3]\n\
    \    \n    if length == 5:\n        return binary[0]+binary[1]+binary[2]+binary[3]+binary[4]\n\
    \    \n    if length == 6:\n        return binary[0]+binary[1]+binary[2]+binary[3]+binary[4]+binary[5]\n\
    \    \n    if length == 7:\n        return binary[0]+binary[1]+binary[2]+binary[3]+binary[4]+binary[5]+binary[6]\n\
    \    \n    if length == 8:\n        return binary[0]+binary[1]+binary[2]+binary[3]+binary[4]+binary[5]+binary[6]+binary[7]\n\
    \    \n    if length == 9:\n        return binary[0]+binary[1]+binary[2]+binary[3]+binary[4]+binary[5]+binary[6]+binary[7]+binary[8]\n\
    \    \n    if length == 10:\n        return binary[0]+binary[1]+binary[2]+binary[3]+binary[4]+binary[5]+binary[6]+binary[7]+binary[8]+binary[9]\n\
    \    \n    if length == 11:\n        return binary[0]+binary[1]+binary[2]+binary[3]+binary[4]+binary[5]+binary[6]+binary[7]+binary[8]+binary[9]+binary[10]\n\
    \    \n    if length == 12:\n        return binary[0]+binary[1]+binary[2]+binary[3]+binary[4]+binary[5]+binary[6]+binary[7]+binary[8]+binary[9]+binary[10]+binary[11]\n\
    \    \n    if length == 13:\n        return binary[0]+binary[1]+binary[2]+binary[3]+binary[4]+binary[5]+binary[6]+binary[7]+binary[8]+binary[9]+binary[10]+binary[11]+binary[12]\n\
    \    \n    if length == 14:\n        return binary[0]+binary[1]+binary[2]+binary[3]+binary[4]+binary[5]+binary[6]+binary[7]+binary[8]+binary[9]+binary[10]+binary[11]+binary[12]+binary[13]\n\
    \    \n    if length == 15:\n        return binary[0]+binary[1]+binary[2]+binary[3]+binary[4]+binary[5]+binary[6]+binary[7]+binary[8]+binary[9]+binary[10]+binary[11]+binary[12]+",
  "    \n    if n < m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n   \
    \ \n    if len(binary) < len(str(m)):\n        binary = binary + ('0' * (len(str(m))\
    \ - len(binary)))\n    \n    return int(binary, 2)\n</cell>\n<cell>\nrounded_avg(1,\
    \ 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(10, 20)\n\
    </cell>\n<cell>\nrounded_avg(20, 33)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes in a list of integers and returns the number of positive integers\
    \ in the list.\n\n\n</text>\n<cell>", "    if n > m:\n        return -1\n    \n\
    \    binary = bin(n + (m - n) % m)[2:]\n    \n    binary = binary.zfill(len(binary))\n\
    \    \n    return int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n\
    \    avg = n + (m - n) // 2\n    binary = bin(avg)[2:]\n    \n    if binary.startswith('0b'):\n\
    \        binary = binary[2:]\n    \n    return int(binary, 2)\n", "    if n >=\
    \ m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n    \n    decimal =\
    \ binary.count('1')\n    \n    if decimal > n:\n        decimal = n - decimal\n\
    \        \n    decimal = decimal * 2\n    \n    binary = bin(n+m)[2:]\n    \n\
    \    binary = binary[:decimal]\n    \n    binary = binary.zfill(m)\n    \n   \
    \ return binary\n</cell>\n<cell>\nrounded_avg(1, 5)\n</cell>\n<cell>\nrounded_avg(7,\
    \ 5)\n</cell>\n<cell>\nrounded_avg(10, 20)\n</cell>\n<cell>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of characters\
    \ in a string. \nThe function should take a string as input and return the number\
    \ of characters in the string.\nThe string may contain any character (including\
    \ spaces).\nExamples:\ncount_chars(\"Hello World!\") => 11\ncount_chars(\"Hello\
    \ World\") => 0\ncount_chars(\"\") => 0\ncount_chars(\" \") => 0\ncount_chars(\"\
    Hello\") => 4\ncount_chars(\"Hello World!\") => 11\ncount_chars(\"Hello World\"\
    ) => 11\ncount_chars(\"\") => 0\ncount_chars(\" \") => 0\ncount_chars(\"Hello\"\
    ) => 4\ncount_chars(\"Hello World!\") => 11\ncount_chars(\"Hello World\") => 11\n\
    count_chars(\"\") => 0\ncount_chars(\" \") => 0\ncount_chars(\"Hello\") => 4\n\
    count_chars(\"Hello World!\") => 11\ncount_chars(\"Hello World\") => 11\ncount_chars(\"\
    \") => 0\ncount_chars(\" \") => 0\ncount_chars(\"Hello\") => 4\ncount_chars(\"\
    Hello World!\") => 11\ncount_chars(\"Hello World\") => 11\ncount_chars(\"\") =>\
    \ 0\ncount_chars(\" \") => 0\ncount_chars(\"Hello\") => 4\ncount_chars(\"Hello\
    \ World!\") => 11\ncount_chars(\"Hello World\") => 11\ncount_chars(\"\") => 0\n\
    count_chars(\" \") => 0\ncount_chars(\"Hello\") => 4\ncount_chars(\"Hello World!\"\
    ) => 11\ncount_chars(\"Hello World\") => 11\ncount_chars(\"\") => 0\ncount_chars(\"\
    \ \") => 0\ncount_chars(\"Hello\") => 4\ncount_chars(\"Hello World!\") => 11\n\
    count_chars(\"Hello World\") => 11\ncount_chars(\"\"", "    \n    if n >= m:\n\
    \        return -1\n    \n    avg = n + (m // 2)\n    \n    binary = bin(avg)[2:]\n\
    \    \n    if len(binary) < len(str(avg)):\n        binary = binary + ('0' * (len(str(avg))\
    \ - len(binary)))\n    \n    return int(binary, 2)\n", "    if n >= m:\n     \
    \   return -1\n    \n    binary = bin(n + m)[2:]\n    \n    if int(binary[0])\
    \ == 1:\n        binary = binary[1:]\n    \n    return int(binary)\n", "    if\
    \ n >= m:\n        return -1\n    else:\n        return bin(n + m - 1).replace('0b',\
    \ '')\n", "    if n >= m:\n        return -1\n    \n    binary = bin(n + (m -\
    \ n) // 2)[2:]\n    \n    if len(binary) < len(str(m)):\n        binary += \"\
    0\" * (len(str(m)) - len(binary))\n    \n    return int(binary, 2)\n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if n > m:\n        return\
    \ -1\n    \n    binary = bin(n + m)[2:]\n    \n    if len(binary) < n:\n     \
    \   binary = binary + ('0' * (n - len(binary)))\n    \n    return int(binary,\
    \ 2)\n", "    \n    if n >= m:\n        return -1\n    \n    count = 0\n    \n\
    \    for i in range(n, m+1):\n        count += i\n    \n    avg = count / 2\n\
    \    \n    return bin(avg)[2:]\n", "    \n    if n >= m:\n        return -1\n\
    \    \n    binary = bin(n + (m - n))[2:]\n    \n    if len(binary) < len(str(m)):\n\
    \        binary = binary + '0' * (len(str(m)) - len(binary))\n    \n    return\
    \ int(binary, 2)\n</cell>\n<cell>\nrounded_avg(1, 5)\n</cell>\n<cell>\nrounded_avg(7,\
    \ 5)\n</cell>\n<cell>\nrounded_avg(10, 20)\n</cell>\n<cell>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes a positive integer $n$\
    \ and returns the number of digits in $n$. \nIf $n$ is 0, return 0.\nIf $n$ is\
    \ negative, return -1.\n\n\n</text>\n<cell>", "    \n    if n >= m:\n        return\
    \ -1\n    \n    avg = n + (m // 2)\n    \n    binary = bin(avg)[2:]\n    \n  \
    \  if len(binary) < n:\n        binary = binary + '0' * (n - len(binary))\n  \
    \  \n    return binary\n", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if n >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n\
    \    \n    decimal = int(binary)\n    \n    if decimal >= len(binary):\n     \
    \   return -1\n    \n    return binary[:decimal]\n", "    \n    if n < m:\n  \
    \      return -1\n    \n    avg = n // m\n    \n    if avg == 0:\n        return\
    \ \"0b0\"\n    \n    binary = \"\"\n    \n    for i in range(avg, 0, -1):\n  \
    \      binary += \"1\"\n    \n    return binary\n", "    if n >= m:\n        return\
    \ -1\n    \n    binary = bin(n)[2:].zfill(m)\n    \n    return int(binary, 2)\n",
  "    \n    if n < m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n  \
    \  binary = bin(avg)[2:]\n    \n    if len(binary) < n:\n        binary = binary\
    \ + '0' * (n - len(binary))\n    \n    return binary\n", "    \n    if n >= m:\n\
    \        return -1\n    \n    avg = n + (m - n) // 2\n    binary = bin(avg)[2:]\n\
    \    \n    if len(binary) < len(str(avg)):\n        binary = binary + '0' * (len(str(avg))\
    \ - len(binary))\n    \n    return int(binary, 2)\n", "    if n > m:\n       \
    \ return -1\n    \n    binary = bin(n + (m - n))[2:]\n    \n    if binary.startswith('0b'):\n\
    \        binary = binary[2:]\n    \n    return int(binary, 2)\n", "    \n    if\
    \ n >= m:\n        return -1\n    \n    binary = bin(n + (m - n) % 2)[2:]\n  \
    \  \n    binary = \"0\" * (len(binary) - len(binary.rstrip(\"0\"))) + binary\n\
    \    \n    return int(binary, 2)\n\n", "    if n >= m:\n        return -1\n  \
    \  \n    binary = bin(n + (m - n) % m)[2:]\n    \n    if len(binary) < n:\n  \
    \      binary = binary + '0' * (n - len(binary))\n    \n    return int(binary,\
    \ 2)\n", "    if n >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n\
    \    \n    if int(binary[0]) == 1:\n        binary = binary[1:]\n    \n    if\
    \ int(binary[-1]) == 1:\n        binary = binary[:-1]\n    \n    return int(binary)\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if n > m:\n   \
    \     return -1\n    \n    binary = bin(n + (m - n) * 0.5)[2:]\n    \n    return\
    \ int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n\
    \    \n    decimal = int(binary)\n    \n    if decimal >= len(binary):\n     \
    \   return -1\n    \n    return binary[:decimal]\n", "    if n >= m:\n       \
    \ return \"-1\"\n    \n    binary = bin(n)[2:]\n    \n    binary = binary.zfill(m)\n\
    \    \n    binary = \"0b\" + binary\n    \n    return binary\n", "    \n    \n\
    \    if n>m:\n        return -1\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if n < m:\n\
    \        return -1\n    \n    avg = n + (m - n) // 2\n    \n    return bin(avg)[2:].zfill(m)\n",
  "    if n > m:\n        return -1\n    \n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    \n    if len(binary) < n:\n        binary = binary + '0' * (n - len(binary))\n\
    \    \n    return binary\n", "    if n < m:\n        return -1\n    \n    binary\
    \ = bin(n + m)[2:]\n    \n    if len(binary) < len(str(m)):\n        binary =\
    \ binary + ('0' * (len(str(m)) - len(binary)))\n    \n    return int(binary, 2)\n",
  "    if n >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n    \n    if\
    \ binary.startswith('0b'):\n        binary = binary[2:]\n    \n    binary = '0'\
    \ * (len(binary) - len(binary.rstrip('0'))) + binary\n    \n    return int(binary,\
    \ 2)\n", "    if n < m:\n        return -1\n    \n    avg = (n + m) // 2\n   \
    \ \n    binary = bin(avg)[2:]\n    \n    if binary.startswith('0b'):\n       \
    \ binary = binary[2:]\n    \n    return int(binary, 2)\n</cell>\n<cell>\nrounded_avg(1,\
    \ 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(10, 20)\n\
    </cell>\n<cell>\nrounded_avg(20, 33)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes in a list of integers and returns the number of positive integers\
    \ in the list.\n\n\n</text>\n<cell>", "    if n >= m:\n        return -1\n   \
    \ \n    binary = bin(n + (m - n))[2:]\n    \n    if len(binary) < len(str(m)):\n\
    \        binary = binary + ('0' * (len(str(m)) - len(binary)))\n    \n    return\
    \ int(binary, 2)\n", "    if n > m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n\
    \    \n    if len(binary) < len(str(n+m)):\n        binary = binary + '0' * (len(str(n+m))\
    \ - len(binary))\n    \n    return int(binary, 2)\n", "    if n >= m:\n      \
    \  return -1\n    else:\n        return bin(n + (m - n) // 2)[2:].zfill(m)\n",
  "    \n    if n >= m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n  \
    \  \n    if len(binary) < n:\n        binary = bin(n + m)[2:] + binary.rjust(n,\
    \ '0')\n    \n    return int(binary, 2)\n", "    \n    if n >= m:\n        return\
    \ -1\n    \n    binary = bin(n + (m - n))[2:]\n    \n    if len(binary) < len(str(m)):\n\
    \        binary = binary + ('0' * (len(str(m)) - len(binary)))\n    \n    return\
    \ int(binary, 2)\n", "    \n    if n >= m:\n        return -1\n    \n    binary\
    \ = bin(n + (m - n) % m)[2:]\n    \n    if int(binary[0]) == 1:\n        binary\
    \ = binary[1:]\n    \n    return int(binary)\n", "    \n    if n >= m:\n     \
    \   return -1\n    \n    binary = bin(n+m)[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = binary.zfill(m)\n    \n    return int(binary, 2)\n", "   \
    \ if n >= m:\n        return \"-1\"\n    \n    binary = bin(n)[2:]\n    \n   \
    \ if len(binary) < len(str(m)):\n        binary = binary + bin(m)[2:]\n    \n\
    \    binary = binary[::-1]\n    \n    binary = \"0\" * (len(binary) - len(str(m)))\
    \ + str(m)\n    \n    binary = int(binary, 2)\n    \n    return binary\n", " \
    \   if n < m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n    \n  \
    \  if int(binary[0]) == 0:\n        binary = binary[1:]\n    \n    if int(binary[-1])\
    \ == 0:\n        binary = binary[:-1]\n    \n    return int(binary)\n", "    if\
    \ n < m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n    \n    if len(binary)\
    \ < len(str(m)):\n        binary = binary + '0' * (len(str(m)) - len(binary))\n\
    \    \n    return int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n\
    \    binary = bin(n+m)[2:]\n    \n    length = len(binary)\n    \n    if length\
    \ == 1:\n        return binary\n    \n    if length == 2:\n        if binary[0]\
    \ == '1':\n            return binary[1]\n        else:\n            return binary[0]\n\
    \    \n    if length == 3:\n        if binary[0] == '1':\n            if binary[1]\
    \ == '1':\n                return binary[2]\n            else:\n             \
    \   return binary[1]\n        else:\n            if binary[1] == '1':\n      \
    \          return binary[2]\n            else:\n                return binary[0]\n\
    \    \n    if length == 4:\n        if binary[0] == '1':\n            if binary[1]\
    \ == '1':\n                if binary[2] == '1':\n                    return binary[3]\n\
    \                else:\n                    return binary[2]\n            else:\n\
    \                if binary[2] == '1':\n                    return binary[3]\n\
    \                else:\n                    return binary[1]\n        else:\n\
    \            if binary[1] == '1':\n                if binary[2] == '1':\n    \
    \                return binary[3]\n                else:\n                   \
    \ return binary[2]\n            else:\n                if binary[2] == '1':\n\
    \                    return binary[3]\n                else:\n               \
    \     return binary[1]\n    \n    if length == 5:\n        if binary[0] == '1':\n\
    \            if binary[1] == '1':\n                if binary[2] == '1':\n    \
    \                if binary[3] == '1':\n                        return binary[4]\n\
    \                    else:\n                        return binary[3]\n       \
    \         else:\n                    if binary[3] == '1':\n                  \
    \      return binary[4]\n                    else:\n                        return\
    \ binary[2]\n            else:\n                if binary[2] == '1':\n       \
    \             if binary[3] == '1':\n                        return binary[4]\n\
    \                    else:\n                        return binary[3]\n       \
    \         else:\n                    if binary[3] == '1':\n                  \
    \      return binary[4]\n                    else:\n                        return\
    \ binary[2]\n        else:\n            if binary[1] == '1':\n               \
    \ if binary[2] == '1':\n                    if binary[3] == '1':\n           \
    \             return binary[4]\n                    else:\n                  \
    \      return binary[3]\n                else:\n                    if binary[3]\
    \ == '1':\n                        return binary[4]\n                    else:\n\
    \                        return binary[2]\n            else:\n               \
    \ if binary[2] == '1':\n                    if binary[3] == '1':\n           \
    \             return binary[4]\n                    else:\n                  \
    \      return binary[3]\n                else:\n                    if binary[3]\
    \ == '1':\n                        return binary[4]\n                    else:\n\
    \                        return binary[2]\n    \n    if length == 6:\n       \
    \ if binary[0] == '1':\n            if binary[1] == '1':\n                if binary[2]\
    \ == '1':\n                    if binary[3] == '1':\n                        if\
    \ binary[4] == '1':\n                            return binary[5]\n          \
    \              else:\n                            return binary[4]\n         \
    \           else:\n                        if binary[4] == '1':\n            \
    \                return binary[5]\n                        else:\n           \
    \                 return binary[3]\n                else:\n                  \
    \  if binary[3] == '1':\n                        if binary[4] == '1':\n      \
    \                      return binary[5]\n                        else:\n     \
    \                       return binary[4]\n                    else:\n        \
    \                if binary[4] == '1':\n                            return binary[5]\n\
    \                        else:\n                            return binary[3]\n\
    \            else:\n                if binary[2] == '1':\n                   \
    \ if binary[3] == '1':\n                        if binary[4] == '1':", "    if\
    \ n > m:\n        return -1\n    \n    binary = bin(n)[2:].zfill(m)\n    \n  \
    \  return int(binary, 2)\n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if n > m:\n        return -1\n    \n    binary = bin(n + (m - n))[2:]\n\
    \    \n    return int(binary, 2)\n", "    \n    if n >= m:\n        return -1\n\
    \    \n    binary = bin(n+m)[2:]\n    \n    decimal = int(binary)\n    \n    decimal\
    \ = decimal + (decimal%2)\n    \n    decimal = decimal//2\n    \n    decimal =\
    \ decimal*2\n    \n    decimal = decimal+decimal\n    \n    decimal = decimal//2\n\
    \    \n    decimal = decimal*2\n    \n    decimal = decimal+decimal\n    \n  \
    \  decimal = decimal//2\n    \n    decimal = decimal*2\n    \n    decimal = decimal+decimal\n\
    \    \n    decimal = decimal//2\n    \n    decimal = decimal*2\n    \n    decimal\
    \ = decimal+decimal\n    \n    decimal = decimal//2\n    \n    decimal = decimal*2\n\
    \    \n    decimal = decimal+decimal\n    \n    decimal = decimal//2\n    \n \
    \   decimal = decimal*2\n    \n    decimal = decimal+decimal\n    \n    decimal\
    \ = decimal//2\n    \n    decimal = decimal*2\n    \n    decimal = decimal+decimal\n\
    \    \n    decimal = decimal//2\n    \n    decimal = decimal*2\n    \n    decimal\
    \ = decimal+decimal\n    \n    decimal = decimal//2\n    \n    decimal = decimal*2\n\
    \    \n    decimal = decimal+decimal\n    \n    decimal = decimal//2\n    \n \
    \   decimal = decimal*2\n    \n    decimal = decimal+decimal\n    \n    decimal\
    \ = decimal//2\n    \n    decimal = decimal*2\n    \n    decimal = decimal+decimal\n\
    \    \n    decimal = decimal//2\n    \n    decimal = decimal*2\n    \n    decimal\
    \ = decimal+decimal\n    \n    decimal = decimal//2\n    \n    decimal = decimal*2\n\
    \    \n    decimal = decimal+decimal\n    \n    decimal = decimal//2\n    \n \
    \   decimal = decimal*2\n    \n    decimal = decimal+decimal\n    \n    decimal\
    \ = decimal//2\n    \n    decimal = decimal*2\n    \n    decimal = decimal+decimal\n\
    \    \n    decimal = decimal//2\n    \n    decimal = decimal*2\n    \n    decimal\
    \ = decimal+decimal\n    \n    decimal = decimal//2\n    \n    decimal = decimal*2\n\
    \    \n    decimal = decimal+decimal\n    \n    decimal = decimal//2\n    \n \
    \   ", "    if n >= m:\n        return -1\n    \n    binary = bin(n)[2:]\n   \
    \ \n    binary = binary.zfill(m)\n    \n    return int(binary, 2)\n", "    if\
    \ n >= m:\n        return -1\n    \n    binary = bin(n + (m - n) * 0.5)[2:]\n\
    \    \n    if len(binary) < n:\n        binary = binary.zfill(n)\n    \n    return\
    \ int(binary, 2)\n", "    \n    if n >= m:\n        return -1\n    \n    binary\
    \ = bin(n)[2:]\n    \n    binary = binary.zfill(m)\n    \n    binary = '0b' +\
    \ binary\n    \n    return int(binary, 2)\n", "    if n > m:\n        return -1\n\
    \    \n    binary = bin(n + (m - n) % 2)[2:]\n    \n    return int(binary, 2)\n",
  "    if n < m:\n        return -1\n    \n    binary = bin(n + (m - n) // 2)[2:]\n\
    \    \n    if len(binary) < len(str(m)):\n        binary = bin(m)[2:] + binary\n\
    \    \n    return int(binary, 2)\n", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if n >= m:\n        return -1\n    \n    binary = bin(n\
    \ + m)[2:]\n    \n    if int(binary[0]) == 0:\n        binary = binary[1:]\n \
    \   \n    return binary\n", "    if n >= m:\n        return -1\n    \n    binary\
    \ = bin(n+m)[2:]\n    \n    if len(binary) < len(str(m)):\n        binary = binary\
    \ + ('0' * (len(str(m)) - len(binary)))\n    \n    return int(binary, 2)\n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if n >= m:\n\
    \        return -1\n    \n    binary = bin(n)[2:]\n    \n    if len(binary) <\
    \ m:\n        binary = bin(m)[2:] + binary\n    \n    binary = binary[:m]\n  \
    \  \n    return int(binary, 2)\n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if n < m:\n        return -1\n    \n    avg = n // m\n  \
    \  \n    binary = \"\"\n    \n    while avg > 0:\n        binary = str(avg % 2)\
    \ + binary\n        avg //= 2\n    \n    return binary\n", "    if n > m:\n  \
    \      return -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n    \n    if len(binary)\
    \ < n:\n        binary = binary.zfill(n)\n    \n    return int(binary, 2)\n",
  "    if n >= m:\n        return -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n\
    \    \n    if len(binary) < n:\n        binary += \"0\" * (n - len(binary))\n\
    \    \n    return int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n\
    \    binary = bin(n+m)[2:]\n    \n    if len(binary) < len(str(m)):\n        binary\
    \ = binary + '0' * (len(str(m)-len(binary)))\n    \n    return int(binary, 2)\n",
  "    if n > m:\n        return -1\n    \n    binary = bin(n + (m - n))[2:]\n   \
    \ \n    if len(binary) < len(str(m)):\n        binary = binary + ('0' * (len(str(m))\
    \ - len(binary)))\n    \n    return int(binary, 2)\n", "    if n >= m:\n     \
    \   return \"-1\"\n    \n    avg = n + (m - n) // 2\n    binary = bin(avg)[2:]\n\
    \    \n    if len(binary) < len(str(m)):\n        binary = binary + \"0\" * (len(str(m))\
    \ - len(binary))\n    \n    return binary\n", "    \n    if n >= m:\n        return\
    \ -1\n    \n    avg = n + (m - n) // 2\n    \n    return bin(avg)[2:]\n", "  \
    \  \n    if n >= m:\n        return -1\n    \n    avg = (n+m)/2\n    \n    binary\
    \ = bin(avg)[2:]\n    \n    if len(binary) < len(avg):\n        binary = binary\
    \ + ('0' * (len(avg) - len(binary)))\n    \n    return binary\n", "    if n >=\
    \ m:\n        return -1\n    else:\n        avg = n + (m // 2)\n        binary\
    \ = bin(avg)[2:]\n        return int(binary, 2)\n", "    if n >= m:\n        return\
    \ -1\n    \n    binary = bin(n + m)[2:]\n    \n    length = len(binary)\n    \n\
    \    if length == 1:\n        return binary\n    \n    if length == 2:\n     \
    \   if binary[0] == '1':\n            return binary\n        else:\n         \
    \   return binary[1:]\n    \n    if length == 3:\n        if binary[0] == '1':\n\
    \            if binary[1] == '1':\n                return binary\n           \
    \ else:\n                return binary[1:]\n        else:\n            return\
    \ binary[1:]\n    \n    if length == 4:\n        if binary[0] == '1':\n      \
    \      if binary[1] == '1':\n                if binary[2] == '1':\n          \
    \          return binary\n                else:\n                    return binary[1:]\n\
    \            else:\n                return binary[1:]\n        else:\n       \
    \     return binary[1:]\n    \n    if length == 5:\n        if binary[0] == '1':\n\
    \            if binary[1] == '1':\n                if binary[2] == '1':\n    \
    \                if binary[3] == '1':\n                        return binary\n\
    \                    else:\n                        return binary[1:]\n      \
    \          else:\n                    return binary[1:]\n            else:\n \
    \               return binary[1:]\n        else:\n            return binary[1:]\n\
    \    \n    if length == 6:\n        if binary[0] == '1':\n            if binary[1]\
    \ == '1':\n                if binary[2] == '1':\n                    if binary[3]\
    \ == '1':\n                        if binary[4] == '1':\n                    \
    \        return binary\n                        else:\n                      \
    \      return binary[1:]\n                    else:\n                        return\
    \ binary[1:]\n                else:\n                    return binary[1:]\n \
    \           else:\n                return binary[1:]\n        else:\n        \
    \    return binary[1:]\n    \n    if length == 7:\n        if binary[0] == '1':\n\
    \            if binary[1] == '1':\n                if binary[2] == '1':\n    \
    \                if binary[3] == '1':\n                        if binary[4] ==\
    \ '1':\n                            if binary[5] == '1':\n                   \
    \             return binary\n                            else:\n             \
    \                   return binary[1:]\n                        else:\n       \
    \                     return binary[1:]\n                    else:\n         \
    \               return binary[1:]\n                else:\n                   \
    \ return binary[1:]\n            else:\n                return binary[1:]\n  \
    \      else:\n            return binary[1:]\n    \n    if length == 8:\n     \
    \   if binary[0] == '1':\n            if binary[1] == '1':\n                if\
    \ binary[2] == '1':\n                    if binary[3] == '1':\n              \
    \          if binary[4] == '1':\n                            if binary[5] == '1':\n\
    \                                if binary[6] == '1':\n                      \
    \              return binary\n                                else:\n        \
    \                            return binary[1:]\n                            else:\n\
    \                                return binary[1:]\n                        else:\n\
    \                            return binary[1:]\n                    else:\n  \
    \                      return binary[1:]\n                else:\n            \
    \        return binary[1:]\n            else:\n                return binary[1:]\n\
    \        else:\n            return binary[1:]\n    \n    if length == 9:\n   \
    \     if binary[0] == '1':\n            if binary[1] == '1':\n               \
    \ if binary[2] == '1':\n                    if binary[3] == '1':\n           \
    \             if binary[4] == '1':\n                            if binary[5] ==\
    \ '1':\n                                if binary[6] == '1':\n               \
    \                     if binary[7] == '1':\n                                 \
    \       return binary\n                                    else:\n           \
    \                             return binary[1:]\n                            \
    \    else:\n                                    return ", "    \n    if n < m:\n\
    \        return -1\n    \n    avg = n + (m - n) // 2\n    \n    binary = bin(avg)[2:]\n\
    \    \n    if len(binary) < len(str(avg)):\n        binary = binary + ('0' * (len(str(avg))\
    \ - len(binary)))\n    \n    return int(binary, 2)\n</cell>\n<cell>\nrounded_avg(1,\
    \ 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(10, 20)\n\
    </cell>\n<cell>\nrounded_avg(20, 33)\n</cell>\n<text>\nProblem 3\nThe Fibonacci\
    \ sequence is defined by the formula:\n\nFn = F(n-1) + F(n-2), where F(0) = 0,\
    \ F(1) = 1 and F(n) = F(n-1) + F(n-2) for n > 1.\n\nThe first few terms of the\
    \ sequence are:\n\nF(0) = 0\nF(1) = 1\nF(2) = 1\nF(3) = F(2) + F(1) = 1\nF(4)\
    \ = F(3) + F(2) = F(4-1) + F(3) = 1\nF(5) = F(4) + F(3) = F(5-1) + F(4) = F(4-1)\
    \ + F(3) + F(2) = F(4-1) + F(5-2) + F(3) = F(4-1) + F(5-3) + F(2) + F(1) = F(4-1)\
    \ + F(5-4) + F(3) + F(2) = F(4-1) + F(5-5) + F(3) + F(2) + F(1) = F(4-1) + F(5-6)\
    \ + F(3) + F(2) + F(1) = F(4-1) + F(5-7) + F(3) + F(2) + F(1) = F(4-1) + F(5-8)\
    \ + F(3) + F(2) + F(1) = F(4-1) + F(5-9) + F(3) + F(2) + F(1) = F(4-1) + F(5-10)\n\
    \nBy closing the formula with a rational function of the sum of the squares of\
    \ the first ten terms of the\nseries, we can approximate F(n) to be a rational\
    \ function of the sum of the squares of the first n terms of the\nsequence. Show\
    \ that F(n) has an exact representation as a sum of the first n terms of the sequence.\n\
    \nNone Fibonacci sequence\n\n\nHint: You may want to use the following iterative\
    \ sequence F(n) = F(n-1) + F(n-2):\n\nF(n) = F(n-1) + F(n-2),\nF(n) = F(n-1) +\
    \ F(n-2) + F(n-3),", "    if n >= m:\n        return -1\n    \n    binary = bin(n\
    \ + (m - n) // 2)[2:]\n    \n    if len(binary) < len(str(m)):\n        binary\
    \ = binary + ('0' * (len(str(m)) - len(binary)))\n    \n    return int(binary,\
    \ 2)\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ n >= m:\n        return -1\n    \n    binary = bin(n)[2:]\n    \n    count =\
    \ 0\n    \n    for char in binary:\n        if char == '1':\n            count\
    \ += 1\n    \n    average = count / len(binary)\n    \n    binary = bin(average)[2:]\n\
    \    \n    count = 0\n    \n    for char in binary:\n        if char == '1':\n\
    \            count += 1\n    \n    rounded_average = count / len(binary)\n   \
    \ \n    return str(rounded_average)\n", "    if n < m:\n        return -1\n  \
    \  \n    avg = n + (m // 2)\n    \n    if avg > n:\n        avg = n\n    \n  \
    \  return bin(avg)[2:]\n", "    \n    if n >= m:\n        return -1\n    \n  \
    \  avg = n + (m // 2)\n    binary = bin(avg)[2:]\n    \n    if len(binary) < n:\n\
    \        binary = binary + ('0' * (n - len(binary)))\n    \n    return binary\n",
  "    if n >= m:\n        return \"-1\"\n    else:\n        return bin(n + m - 1).lstrip(\"\
    0b\")\n", "    if n >= m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n\
    \    \n    if len(binary) < len(str(m)):\n        binary = binary + ('0' * (len(str(m))\
    \ - len(binary)))\n    \n    return int(binary, 2)\n", "    \n    if n >= m:\n\
    \        return -1\n    \n    avg = n + (m - n) // 2\n    binary = bin(avg)[2:]\n\
    \    \n    if len(binary) < len(str(avg)):\n        binary = binary + '0' * (len(str(avg))\
    \ - len(binary))\n    \n    return binary\n", "    if n >= m:\n        return\
    \ -1\n    \n    binary = bin(n + m)[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = binary.zfill(m)\n    \n    return int(binary, 2)\n", "   \
    \ if n < m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n    \n    if\
    \ len(binary) < len(str(m)):\n        binary = binary + '0' * (len(str(m)) - len(binary))\n\
    \    \n    return int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n\
    \    binary = bin(n + (m - n) * 0.5)[2:]\n    \n    if len(binary) < len(str(n)):\n\
    \        binary = binary + ('0' * (len(str(n)) - len(binary)))\n    \n    return\
    \ int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n    binary = bin(n)[2:]\n\
    \    \n    binary = binary.zfill(m)\n    \n    return int(binary, 2)\n</cell>\n\
    <cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(10, 20)\n</cell>\n<cell>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nProblem 3\nWrite a function that takes in\
    \ a list of integers and returns the number of positive integers in the list.\n\
    \n\n</text>\n<cell>", "    \n    if n >= m:\n        return -1\n    \n    count\
    \ = 0\n    \n    while n <= m:\n        count += 1\n        n += 1\n    \n   \
    \ return bin(count)[2:].zfill(m)\n", "    if n >= m:\n        return -1\n    \n\
    \    binary = bin(n + (m - n) // 2)[2:]\n    \n    if len(binary) < n:\n     \
    \   binary = binary.zfill(n)\n    \n    return int(binary, 2)\n", "    if n <\
    \ m:\n        return -1\n    \n    avg = n // m\n    \n    if n % m == 0:\n  \
    \      return bin(avg)[2:]\n    else:\n        return bin(avg)[2:] + bin(n % m)[2:]\n",
  "    if n >= m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n    \n  \
    \  if len(binary) < len(str(n)):\n        binary += \"0\" * (len(str(n)) - len(binary))\n\
    \    \n    return int(binary, 2)\n", "    if n > m:\n        return -1\n    \n\
    \    binary = bin(n + m)[2:]\n    \n    if binary.startswith('0b'):\n        binary\
    \ = binary[2:]\n    \n    binary = bin(int(binary, 2))\n    \n    if binary.startswith('0b'):\n\
    \        binary = binary[2:]\n    \n    binary = bin(int(binary, 2))\n    \n \
    \   if binary.startswith('0b'):\n        binary = binary[2:]\n    \n    binary\
    \ = bin(int(binary, 2))\n    \n    if binary.startswith('0b'):\n        binary\
    \ = binary[2:]\n    \n    binary = bin(int(binary, 2))\n    \n    if binary.startswith('0b'):\n\
    \        binary = binary[2:]\n    \n    binary = bin(int(binary, 2))\n    \n \
    \   if binary.startswith('0b'):\n        binary = binary[2:]\n    \n    binary\
    \ = bin(int(binary, 2))\n    \n    if binary.startswith('0b'):\n        binary\
    \ = binary[2:]\n    \n    binary = bin(int(binary, 2))\n    \n    if binary.startswith('0b'):\n\
    \        binary = binary[2:]\n    \n    binary = bin(int(binary, 2))\n    \n \
    \   if binary.startswith('0b'):\n        binary = binary[2:]\n    \n    binary\
    \ = bin(int(binary, 2))\n    \n    if binary.startswith('0b'):\n        binary\
    \ = binary[2:]\n    \n    binary = bin(int(binary, 2))\n    \n    if binary.startswith('0b'):\n\
    \        binary = binary[2:]\n    \n    binary = bin(int(binary, 2))\n    \n \
    \   if binary.startswith('0b'):\n        binary = binary[2:]\n    \n    binary\
    \ = bin(int(binary, 2))\n    \n    if binary.startswith('0b'):\n        binary\
    \ = binary[2:]\n    \n    binary = bin(int(binary, 2))\n    \n    if binary.startswith('0b'):\n\
    \        binary = binary[2:]\n    \n    binary = bin(int(binary, 2))\n    \n \
    \   if binary.startswith('0b'):\n        binary = binary[2:]\n    \n    binary\
    \ = bin(int(binary, 2))\n    \n    if binary.startswith('0b'):\n        binary\
    \ = binary[2:]\n    \n    binary = bin(int(binary, 2))\n    \n    if binary.startswith('0b'):\n\
    \        binary = binary[2:]\n    \n    binary = bin(int(binary, 2))\n    \n \
    \   if binary.startswith('0b'):\n        binary = binary[2:]\n    \n    binary\
    \ = bin(int(binary, 2))\n    \n    if binary.startswith('0b", "    \n    if n\
    \ >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n    \n    decimal\
    \ = int(binary)\n    \n    if decimal >= len(binary):\n        return -1\n   \
    \ \n    return binary[:decimal]\n", "    if n > m:\n        return -1\n    \n\
    \    binary = bin(n + (m - n) // 2)[2:]\n    \n    if len(binary) < len(str(m)):\n\
    \        binary = binary + ('0' * (len(str(m)) - len(binary)))\n    \n    return\
    \ int(binary, 2)\n", "    \n    if n >= m:\n        return -1\n    \n    avg =\
    \ (n + m) // 2\n    \n    binary = bin(avg)[2:]\n    \n    if len(binary) < n:\n\
    \        binary = binary + ('0' * (n - len(binary)))\n    \n    return binary\n",
  "    if n >= m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n    \n  \
    \  decimal = int(binary)\n    \n    if decimal > len(binary) - 1:\n        return\
    \ -1\n    \n    return binary\n", "    \n    if n >= m:\n        return -1\n \
    \   \n    binary = bin(n+m)[2:]\n    \n    binary = bin(int(binary))[2:]\n   \
    \ \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:]\n\
    \    \n    binary = bin(int(binary))[2:]\n    \n    binary = bin(int(binary))[2:",
  "    \n    if n >= m:\n        return -1\n    \n    binary = bin(n + (m - n))[2:]\n\
    \    \n    binary = binary.zfill(int(len(binary) / 2))\n    \n    return int(binary,\
    \ 2)\n", "    if n > m:\n        return -1\n    \n    binary = bin(n + (m - n))[2:]\n\
    \    \n    binary = binary.zfill(m)\n    \n    return int(binary, 2)\n", "   \
    \ if n >= m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n    \n   \
    \ decimal = int(binary)\n    \n    return str(decimal)\n", "    \n    if n < m:\n\
    \        return -1\n    \n    count = 0\n    \n    while n <= m:\n        count\
    \ += 1\n        n += 1 \n    \n    avg = count // 2 \n    \n    if avg == 0: \n\
    \        return -1\n    \n    binary = bin(avg)[2:]\n    \n    if avg > 1:\n \
    \       binary = f\"0b{binary}\"\n    \n    return binary\n", "    if n >= m:\n\
    \        return -1\n    \n    binary = bin(n).replace('0b','')\n    \n    binary\
    \ = binary[::-1]\n    \n    binary = '0b'+binary\n    \n    binary = int(binary,\
    \ 2)\n    \n    binary = binary/m \n    \n    binary = bin(int(binary))\n    \n\
    \    binary = binary.zfill(n)\n    \n    return binary\n", "    if n >= m:\n \
    \       return -1\n    \n    binary = bin(n)[2:]\n    \n    if len(binary) < len(str(m)):\n\
    \        binary = binary + ('0' * (len(str(m)) - len(binary)))\n    \n    return\
    \ int(binary, 2)\n", "    if n < m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n\
    \    \n    if len(binary) < len(str(n+m)):\n        binary = binary + '0' * (len(str(n+m))\
    \ - len(binary))\n    \n    return int(binary, 2)\n", "    if n < m:\n       \
    \ return -1\n    \n    binary = bin(n + m)[2:]\n    \n    if len(binary) < len(str(m)):\n\
    \        binary = binary + '0' * (len(str(m)) - len(binary))\n    \n    return\
    \ int(binary, 2)\n", "    \n    if n >= m:\n        return -1\n    \n    avg =\
    \ n + (m // 2)\n    binary = bin(avg)[2:]\n    \n    if int(binary[0]) == 1:\n\
    \        binary = binary[1:]\n    \n    return int(binary)\n", "    if n >= m:\n\
    \        return -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n    \n    decimal\
    \ = int(binary)\n    \n    if decimal > 9:\n        decimal = decimal - 10\n \
    \       \n    return str(decimal)\n", "    \n    if n >= m:\n        return -1\n\
    \    \n    avg = n + (m - n) // 2\n    \n    binary = bin(avg)[2:]\n    \n   \
    \ if len(binary) < len(str(avg)):\n        binary = binary + '0' * (len(str(avg))\
    \ - len(binary))\n    \n    return binary\n\n", "    if n >= m:\n        return\
    \ -1\n    \n    binary = bin(n)[2:]\n    \n    binary = binary.zfill(m)\n    \n\
    \    binary = \"0b\" + binary\n    \n    return int(binary, 2)\n", "    if n <\
    \ m:\n        return -1\n    \n    avg = n // m\n    \n    if n % m == 0:\n  \
    \      return bin(avg)[2:]\n    else:\n        return bin(avg)[2:] + bin(n - m\
    \ * avg)[2:]\n", "    \n    if n >= m:\n        return -1\n    \n    binary =\
    \ bin(n + m)[2:]\n    \n    if len(binary) < len(str(n)):\n        binary = bin(n\
    \ - m)[2:] + binary\n    \n    return int(binary, 2)\n</cell>\n<cell>\nrounded_avg(7,\
    \ 5)\n</cell>\n<cell>\nrounded_avg(10, 20)\n</cell>\n<cell>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nProblem 7\nWrite a function that takes in a positive integer\
    \ and returns the number of digits in that number.\n\n\n</text>\n<cell>", "  \
    \  if n < m:\n        return -1\n    \n    avg = n // m\n    \n    if n % m ==\
    \ 0:\n        return f\"{bin(avg)[2:]}\"\n    else:\n        return f\"{bin(avg)[2:]}{bin(n\
    \ % m)[2:]}\"\n", "    \n    if n >= m:\n        return -1\n    \n    binary =\
    \ bin(n + (m - n) % m)[2:]\n    \n    if len(binary) < n:\n        binary = binary\
    \ + ('0' * (n - len(binary)))\n    \n    return int(binary, 2)\n", "    if n >=\
    \ m:\n        return \"-1\"\n    \n    binary = bin(n + (m - n) % 2)[2:]\n   \
    \ \n    if binary[0] == \"0\":\n        binary = binary[1:]\n    \n    if binary[-1]\
    \ == \"0\":\n        binary = binary[:-1]\n    \n    return int(binary, 2)\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if n >= m:\n  \
    \      return -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n    \n    decimal\
    \ = n + (m - n) % m\n    \n    decimal = decimal.bit_length()\n    \n    if decimal\
    \ > len(binary):\n        decimal = len(binary)\n    \n    decimal = decimal -\
    \ decimal.bit_length()\n    \n    decimal = decimal % 2\n    \n    decimal = decimal\
    \ // 2\n    \n    decimal = decimal + decimal\n    \n    decimal = decimal.to_bytes(1,\
    \ byteorder='big')\n    \n    binary = binary.to_bytes(1, byteorder='big')\n \
    \   \n    binary = binary + decimal\n    \n    return binary.hex()\n    ", " \
    \   if n >= m:\n        return -1\n    \n    binary = bin(n + (m - n) * 0.5)[2:]\n\
    \    \n    return int(binary, 2)\n", "    if n >= m:\n        return \"-1\"\n\
    \    \n    binary = bin(n)[2:].zfill(m)\n    \n    return int(binary, 2)\n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if n < m:\n   \
    \     return -1\n    \n    binary = bin(n+m)[2:]\n    \n    binary = binary.zfill(m)\n\
    \    \n    return int(binary, 2)\n", "    if n > m:\n        return -1\n    \n\
    \    binary = bin(n + (m - n) % 2)[2:]\n    \n    binary = binary.zfill(m)\n \
    \   \n    return int(binary, 2)\n", "    \n    if n >= m:\n        return -1\n\
    \    \n    avg = n + (m - n) // 2\n    \n    return bin(avg)[2:]\n", "    if n\
    \ >= m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n    \n    if len(binary)\
    \ < len(str(m)):\n        binary = bin(m)[2:] + binary\n    \n    return int(binary,\
    \ 2)\n", "    if n >= m:\n        return -1\n    \n    avg = n + (m // 2)\n  \
    \  binary = bin(avg)[2:]\n    \n    binary = binary.zfill(m)\n    \n    return\
    \ int(binary, 2)\n", "    if n >= m:\n        return \"-1\"\n    \n    binary\
    \ = bin(n)[2:]\n    \n    binary = binary.zfill(m)\n    \n    return int(binary,\
    \ 2)\n", "    \n    if n >= m:\n        return -1\n    \n    avg = n + (m // 2)\n\
    \    \n    if avg == n:\n        return \"0b\" + str(bin(avg)[2:])\n    \n   \
    \ if avg == m:\n        return \"0b\" + str(bin(avg)[2:])\n    \n    if avg >\
    \ m:\n        return \"0b\" + str(bin(avg)[2:])\n    \n    return \"0b\" + str(bin(avg)[2:])\n",
  "    if n >= m:\n        return -1\n    \n    avg = n + (m - n) // 2\n    binary\
    \ = bin(avg)[2:]\n    \n    if len(binary) < n:\n        binary = binary.zfill(n)\n\
    \    \n    return int(binary, 2)\n", "    if n < m:\n        return -1\n    \n\
    \    avg = n + (m - n) // 2\n    binary = bin(avg)[2:]\n    \n    return int(binary,\
    \ 2)\n", "    \n    if n >= m:\n        return -1\n    \n    avg = n + (m // 2)\n\
    \    binary = bin(avg)[2:]\n    \n    if len(binary) < n:\n        binary = binary.zfill(n)\n\
    \    \n    return binary\n", "    if n >= m:\n        return -1\n    \n    avg\
    \ = n + (m - n) // 2\n    binary = bin(avg)[2:]\n    \n    if len(binary) < n:\n\
    \        binary = binary + ('0' * (n - len(binary)))\n    \n    return binary\n",
  "    if n >= m:\n        return \"-1\"\n    \n    binary = bin(n)[2:]\n    \n  \
    \  length = len(binary)\n    \n    if length == 1:\n        binary = \"0\" + binary\n\
    \        \n    binary = binary[::-1]\n    \n    binary = \"0b\" + binary\n   \
    \ \n    binary = binary[:length]\n    \n    binary = int(binary, 2)\n    \n  \
    \  binary = binary + m\n    \n    binary = bin(binary)[2:]\n    \n    length =\
    \ len(binary)\n    \n    if length == 1:\n        binary = \"0\" + binary\n  \
    \      \n    binary = binary[::-1]\n    \n    binary = \"0b\" + binary\n    \n\
    \    binary = binary[:length]\n    \n    binary = int(binary, 2)\n    \n    binary\
    \ = binary + n\n    \n    binary = bin(binary)[2:]\n    \n    length = len(binary)\n\
    \    \n    if length == 1:\n        binary = \"0\" + binary\n        \n    binary\
    \ = binary[::-1]\n    \n    binary = \"0b\" + binary\n    \n    binary = binary[:length]\n\
    \    \n    binary = int(binary, 2)\n    \n    binary = binary / 2\n    \n    binary\
    \ = bin(binary)[2:]\n    \n    length = len(binary)\n    \n    if length == 1:\n\
    \        binary = \"0\" + binary\n        \n    binary = binary[::-1]\n    \n\
    \    binary = \"0b\" + binary\n    \n    binary = binary[:length]\n    \n    binary\
    \ = int(binary, 2)\n    \n    binary = binary / 2\n    \n    binary = bin(binary)[2:]\n\
    \    \n    length = len(binary)\n    \n    if length == 1:\n        binary = \"\
    0\" + binary\n        \n    binary = binary[::-1]\n    \n    binary = \"0b\" +\
    \ binary\n    \n    binary = binary[:length]\n    \n    binary = int(binary, 2)\n\
    \    \n    binary = binary / 2\n    \n    binary = bin(binary)[2:]\n    \n   \
    \ length = len(binary)\n    \n    if length == 1:\n        binary = \"0\" + binary\n\
    \        \n    binary = binary[::-1]\n    \n    binary = \"0b\" + binary\n   \
    \ \n    binary = binary[:length]\n    \n    binary = int(binary, 2)\n    \n  \
    \  binary = binary / 2\n    \n    binary = bin(binary)[2:]\n    \n    length =\
    \ len(binary)\n    \n    if length == 1:\n        binary = \"0\" + binary\n  \
    \      \n    binary = ", "    if n >= m:\n        return -1\n    \n    binary\
    \ = bin(n + (m - n) % m)[2:]\n    \n    return int(binary, 2)\n", "    if n <\
    \ m:\n        return -1\n    \n    count = 0\n    sum = 0\n    \n    while n <=\
    \ m:\n        sum += n\n        count += 1\n        n += 1\n    \n    return f\"\
    {sum // count:0b}\"\n", "    \n    if n >= m:\n        return -1\n    \n    binary\
    \ = bin(n+m)[2:]\n    \n    if len(binary) < len(str(m)):\n        binary = binary\
    \ + ('0' * (len(str(m)) - len(binary)))\n    \n    return int(binary, 2)\n", " \
    \   \n    if n >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n   \
    \ \n    if len(binary) < len(str(n+m)):\n        binary = binary + '0' * (len(str(n+m))\
    \ - len(binary))\n    \n    return int(binary, 2)\n</cell>\n<cell>\nrounded_avg(7,\
    \ 5)\n</cell>\n<cell>\nrounded_avg(10, 20)\n</cell>\n<cell>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes in a list of integers\
    \ and returns the sum of the integers in the list.\n\nExample:\nsum([1, 2, 3])\
    \ => 6\nsum([1, -2, 3]) => -1\nsum([1, -2, -3]) => -3\nsum([1, -2, -3, 4]) =>\
    \ -4\nsum([1, -2, -3, 4, 5]) => -5\nsum([1, -2, -3, 4, -5]) => -5\nsum([1, -2,\
    \ -3, 4, -5, 6]) => -6\nsum([1, -2, -3, 4, -5, 6, -7, 8]) => -8\nsum([1, -2, -3,\
    \ 4, -5, 6, -7, 8, 9]) => -9\nsum([1, -2, -3, 4, -5, 6, -7, 8, 9]) => -9\nsum([1,\
    \ -2, -3, 4, -5, 6, -7, 8, 9]) => -9\nsum([1, -2, -3, 4, -5, 6, -7, 8, 9]) =>\
    \ -9\nsum([1, -2, -3, 4, -5, 6, -7, 8, 9]) => -9\nsum([1, -2, -3, 4, -5, 6, -7,\
    \ 8, 9]) => -9\nsum([1, -2, -3, 4, -5, 6, -7, 8, 9]) => -9\nsum([1, -2, -3, 4,\
    \ -5, 6, -7, 8, 9]) => -9\nsum([1, -2, -3, 4, -5, 6, -7, 8, 9]) => -9\nsum([1,\
    \ -2, -3, 4, -5, 6, -7, 8, 9]) => -9\nsum([1, -2, -3, 4, -5, 6, -7, 8, 9]) =>\
    \ -9\nsum([1, -2, -3, 4, -5, 6, -7, 8, 9]) => -9\nsum([1, -2, -3, 4, -5, 6, -7,\
    \ 8, 9]) => -9\nsum([1, -2, -3, 4, -5, 6, -7, 8, 9]) => -9\nsum([1, -2, -3, 4,\
    \ -5, 6, -7, 8, 9]) => -9\nsum([1, -2, -3, 4, -5, 6, -7, 8, 9]) => -9\nsum([1,\
    \ -2, -3, 4, -5, 6, -7, 8, 9]) => -9\nsum([1, -2, -3, 4, -5, 6, -7, 8, 9]) =>\
    \ -9\nsum([1, -2, -3, 4, -5, 6, -7, 8, 9]) => -9\nsum([1, -2, -3, 4, -5, 6, -7,\
    \ 8, 9]) => -9\nsum([1, -2, -3, 4, -5, 6, -7, ", "    \n    if n >= m:\n     \
    \   return -1\n    \n    binary = bin(n+m)[2:]\n    \n    if len(binary) < len(str(n)):\n\
    \        binary = binary + '0' * (len(str(n)) - len(binary))\n    \n    return\
    \ int(binary, 2)\n", "    if n >= m:\n        return \"-1\"\n    \n    binary\
    \ = bin(n+m)[2:]\n    \n    decimal = int(binary)\n    \n    return str(decimal)\n",
  "    if n >= m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n    \n  \
    \  if binary.startswith('0b'):\n        binary = binary[2:]\n    \n    binary\
    \ = bin(int(binary, 2))[2:]\n    \n    if binary.startswith('0b'):\n        binary\
    \ = binary[2:]\n    \n    return int(binary, 2)\n", "    \n    if n > m:\n   \
    \     return -1\n    \n    binary = bin(n + (m - n))[2:]\n    \n    decimal =\
    \ int(binary)\n    \n    decimal = decimal // 2 + decimal\n    \n    binary =\
    \ bin(decimal)[2:]\n    \n    return binary\n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if n >= m:\n        return -1\n    \n    binary\
    \ = bin(n+m)[2:]\n    \n    binary = '0b'+binary\n    \n    binary = binary.zfill(m)\n\
    \    \n    return binary\n", "    if n >= m:\n        return -1\n    \n    avg\
    \ = n + (m - n) // 2\n    binary = bin(avg)[2:]\n    \n    if binary.count(\"\
    1\") == n:\n        return int(binary, 2)\n    else:\n        return -1\n", " \
    \   \n    if n >= m:\n        return -1\n    \n    avg = (n + m) // 2\n    \n\
    \    binary = bin(avg)[2:]\n    \n    if len(binary) < n:\n        binary = binary\
    \ + ('0' * (n - len(binary)))\n    \n    return binary\n", "    if n >= m:\n \
    \       return -1\n    \n    binary = bin(n + (m - n) * 0.5)[2:]\n    \n    if\
    \ binary[0] == '0':\n        binary = binary[1:]\n    \n    return int(binary,\
    \ 2)\n", "    \n    if n >= m:\n        return -1\n    \n    binary = bin(n +\
    \ (m - n) % m)[2:]\n    \n    return int(binary, 2)\n", "    if n >= m:\n    \
    \    return -1\n    \n    binary = bin(n+m)[2:]\n    \n    binary = \"0\" * (len(binary)-len(binary.rstrip(\"\
    0\")))\n    \n    binary += binary\n    \n    binary = binary.lstrip(\"0\")\n\
    \    \n    return int(binary, 2)\n</cell>\n<cell>\nrounded_avg(1, 5)\n</cell>\n\
    <cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(10, 20)\n</cell>\n<cell>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nProblem 3\nWrite a function that takes a\
    \ positive integer $n$ and returns the number of digits\nin n's binary representation.\n\
    Example: \n$n = 10$\n$n_digits(10) = 2$\n$n = 11$\n$n_digits(11) = 3$\n$n = 12$\n\
    $n_digits(12) = 2$\n$n = 13$\n$n_digits(13) = 2$\n$n = 14$\n$n_digits(14) = 2$\n\
    $n = 15$\n$n_digits(15) = 2$\n$n = 16$\n$n_digits(16) = 2$\n$n = 17$\n$n_digits(17)\
    \ = 2$\n$n = 18$\n$n_digits(18) = 2$\n$n = 19$\n$n_digits(19) = 2$\n$n = 20$\n\
    $n_digits(20) = 2$\n$n = 21$\n$n_digits(21) = 2$\n$n = 22$\n$n_digits(22) = 2$\n\
    $n = 23$\n$n_digits(23) = 2$\n$n = 24$\n$n_digits(24) = 2$\n$n = 25$\n$n_digits(25)\
    \ = 2$\n$n = 26$\n$n_digits(26) = 2$\n$n = 27$\n$n_digits(27) = 2$\n$n = 28$\n\
    $n_digits(28) = 2$\n$n = 29$\n$n_digits(29) = 2$\n$n = 30$\n$n_digits(30) = 2$\n\
    $n = 31$\n$n_digits(31) = 2$\n$n = 32$\n$n_digits(32) = 2$\n$n = 33$\n$n_digits(33)\
    \ = 2$\n$n = 34$\n$n_digits(34) = 2$\n$n = 35$\n$n_digits(35) = 2$\n$n = 36$\n\
    $", "    \n    if n >= m:\n        return -1\n    \n    avg = n + (m - n) // 2\n\
    \    \n    binary = bin(avg)[2:]\n    \n    if len(binary) < len(str(avg)):\n\
    \        binary = bin(avg)[2:].zfill(len(str(avg)))\n    \n    return int(binary,\
    \ 2)\n", "    if n >= m:\n        return \"-1\"\n    else:\n        binary = bin(n)[2:]\n\
    \        binary = binary.zfill(m)\n        return int(binary, 2)\n", "    \n \
    \   if n >= m:\n        return -1\n    \n    binary = bin(n)[2:]\n    \n    if\
    \ len(binary) < len(m):\n        binary = binary + bin(m)[2:]\n    \n    binary\
    \ = binary[:len(m)]\n    \n    binary = int(binary, 2)\n    \n    binary = binary\
    \ + int(m, 2)\n    \n    binary = bin(binary)[2:]\n    \n    if len(binary) <\
    \ len(n):\n        binary = binary + bin(n)[2:]\n    \n    binary = binary[:len(n)]\n\
    \    \n    binary = int(binary, 2)\n    \n    return binary\n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if n >= m:\n        return\
    \ -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n    \n    if binary[0] == '1':\n\
    \        return binary\n    else:\n        return -1\n", "    if n > m:\n    \
    \    return -1\n    \n    binary = bin(n).replace('0b', '') + \"0\" * (m - len(bin(n).replace('0b',\
    \ '')))\n    return int(binary, 2)\n", "    if n > m:\n        return -1\n   \
    \ \n    binary = bin(n+m)[2:]\n    \n    if len(binary) < len(str(n+m)):\n   \
    \     binary = binary + ('0' * (len(str(n+m)) - len(binary)))\n    \n    return\
    \ int(binary, 2)\n", "    \n    if n >= m:\n        return -1\n    \n    avg =\
    \ n + (m - n) // 2\n    \n    return bin(avg)[2:]\n", "    \n    if n > m:\n \
    \       return -1\n    \n    binary = bin(n + (m - n))[2:]\n    \n    binary =\
    \ binary.zfill(m)\n    \n    return int(binary, 2)\n", "    if n >= m:\n     \
    \   return -1\n    \n    binary = bin(n + m)[2:]\n    \n    decimal = int(binary)\n\
    \    \n    return str(decimal)\n", "    if n >= m:\n        return -1\n    \n\
    \    binary = bin(n + (m - n) % m)[2:]\n    \n    return int(binary, 2)\n", " \
    \   if n >= m:\n        return -1\n    \n    binary = bin(n + (m - n))[2:]\n \
    \   \n    return int(binary, 2)\n", "    if n > m:\n        return -1\n    \n\
    \    binary = bin(n)[2:]\n    \n    binary = binary.zfill(m)\n    \n    binary\
    \ = \"0b\" + binary\n    \n    return binary\n", "    \n    if n >= m:\n     \
    \   return -1\n    \n    binary = bin(n+m)[2:]\n    \n    binary = binary.zfill(m)\n\
    \    \n    binary = binary.zfill(n)\n    \n    return int(binary, 2)\n", "   \
    \ if n >= m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n    \n   \
    \ binary = '0b'+binary\n    \n    binary = binary.zfill(8)\n    \n    return binary\n",
  "    if n >= m:\n        return -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n\
    \    \n    if int(binary[0]) == 1:\n        binary = '0' + binary\n    \n    return\
    \ binary\n", "    \n    if n < m:\n        return -1\n    \n    avg = n + (m -\
    \ n) // 2\n    \n    return bin(avg)[2:]\n", "    if n > m:\n        return -1\n\
    \    \n    binary = bin(n + m)[2:]\n    \n    decimal = int(binary)\n    \n  \
    \  if decimal > len(binary) - 1:\n        return -1\n    \n    return binary\n",
  "    if n >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n    \n    binary\
    \ = \"0\" * (len(binary)-len(binary.rstrip(\"0\"))) + binary\n    \n    return\
    \ int(binary, 2)\n</cell>\n<cell>\nrounded_avg(1, 5)\n</cell>\n<cell>\nrounded_avg(7,\
    \ 5)\n</cell>\n<cell>\nrounded_avg(10, 20)\n</cell>\n<cell>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nProblem 7\nWrite a function that takes in a list of integers\
    \ and returns the sum of the integers in the list. \nIf the list is empty, return\
    \ 0.\nIf the list has only one item, return that item.\nIf the list has two items,\
    \ return the sum of those two items.\nIf the list has more than two items, return\
    \ the sum of all the items in the list.\n\n\n</text>\n<cell>", "    \n    if n\
    \ < m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n    \n    if len(binary)\
    \ < n:\n        binary = binary + '0' * (n - len(binary))\n    \n    return int(binary,\
    \ 2)\n", "    if n < m:\n        return -1\n    \n    avg = n // m\n    \n   \
    \ if n % m == 0:\n        return str(bin(avg))[2:]\n    else:\n        return\
    \ str(bin(avg))[2:] + '0' * (n % m)\n", "    if n < m:\n        return -1\n  \
    \  \n    avg = n + (m // 2)\n    \n    binary = bin(avg)[2:]\n    \n    if len(binary)\
    \ < len(str(avg)):\n        binary = binary + '0' * (len(str(avg)) - len(binary))\n\
    \    \n    return binary\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
